System.register("chunks:///_virtual/Account.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ECS.ts","./AccountModelComp.ts"],(function(t){var n,c,o,e;return{setters:[function(t){n=t.inheritsLoose},function(t){c=t.cclegacy},function(t){o=t.ecs},function(t){e=t.AccountModelComp}],execute:function(){var u;c._RF.push({},"33c06qSPa9MRbTUOf1u+7SR","Account",void 0);t("Account",o.register("Account")(u=function(t){function c(){for(var n,c=arguments.length,o=new Array(c),e=0;e<c;e++)o[e]=arguments[e];return(n=t.call.apply(t,[this].concat(o))||this).AccountModel=void 0,n}return n(c,t),c.prototype.init=function(){this.addComponents(e)},c}(o.Entity))||u);c._RF.pop()}}}));

System.register("chunks:///_virtual/AccountModelComp.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ECS.ts"],(function(t){var e,n,o;return{setters:[function(t){e=t.inheritsLoose},function(t){n=t.cclegacy},function(t){o=t.ecs}],execute:function(){var c;n._RF.push({},"48e3172BRZA+ZLehWBTVmsA","AccountModelComp",void 0);t("AccountModelComp",o.register("AccountModel")(c=function(t){function n(){for(var e,n=arguments.length,o=new Array(n),c=0;c<n;c++)o[c]=arguments[c];return(e=t.call.apply(t,[this].concat(o))||this).AccountName=null,e}return e(n,t),n.prototype.reset=function(){this.AccountName=null},n}(o.Comp))||c);n._RF.pop()}}}));

System.register("chunks:///_virtual/Ambilight.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i,r,a,n,o,s,c,p,l;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.inheritsLoose,r=t.initializerDefineProperty,a=t.assertThisInitialized,n=t.createClass},function(t){o=t.cclegacy,s=t._decorator,c=t.CCInteger,p=t.Sprite,l=t.Component}],execute:function(){var u,h,m,_,f;o._RF.push({},"73c69GH9M9F2Ilsm0fvjTCX","Ambilight",void 0);var y=s.ccclass,g=s.property;t("Ambilight",(u=y("Ambilight"),h=g(c),u((f=e((_=function(t){function e(){for(var e,i=arguments.length,n=new Array(i),o=0;o<i;o++)n[o]=arguments[o];return e=t.call.apply(t,[this].concat(n))||this,r(e,"_max",f,a(e)),e._start=0,e._material=void 0,e}i(e,t);var o=e.prototype;return o.update=function(t){this._material=this.node.getComponent(p).getMaterial(0),this.node.active&&this._material&&this._setShaderTime(t)},o._setShaderTime=function(t){var e=this._start;e>this.max&&(e=0),e+=.015,this._material.setProperty("speed",e),this._start=e},n(e,[{key:"max",get:function(){return this._max},set:function(t){this._max=t}}]),e}(l)).prototype,"_max",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),e(_.prototype,"max",[h],Object.getOwnPropertyDescriptor(_.prototype,"max"),_.prototype),m=_))||m));o._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorAnimation.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AnimatorBase.ts"],(function(t){var i,n,a,s,e;return{setters:[function(t){i=t.inheritsLoose},function(t){n=t.cclegacy,a=t._decorator,s=t.Animation},function(t){e=t.default}],execute:function(){var o;n._RF.push({},"64571Qy/TlCEZI/28RxIG+E","AnimatorAnimation",void 0);var h=a.ccclass,r=(a.property,a.requireComponent),m=a.disallowMultiple,p=a.menu,l=a.help;t("default",h(o=m(o=r(s)(o=p("OopsFramework/Animator/AnimatorAnimation （动画状态机）")(o=l("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565")(o=function(t){function n(){for(var i,n=arguments.length,a=new Array(n),s=0;s<n;s++)a[s]=arguments[s];return(i=t.call.apply(t,[this].concat(a))||this)._animation=null,i._animState=null,i._wrapModeMap=new Map,i}i(n,t);var a=n.prototype;return a.start=function(){this.PlayOnStart&&!this._hasInit&&(this._hasInit=!0,this._animation=this.getComponent(s),this._animation.on(s.EventType.FINISHED,this.onAnimFinished,this),this._animation.on(s.EventType.LASTFRAME,this.onAnimFinished,this),null!==this.AssetRawUrl&&this.initJson(this.AssetRawUrl.json))},a.onInit=function(){this.PlayOnStart||this._hasInit||(this._hasInit=!0,this.initArgs.apply(this,arguments),this._animation=this.getComponent(s),this._animation.on(s.EventType.FINISHED,this.onAnimFinished,this),this._animation.on(s.EventType.LASTFRAME,this.onAnimFinished,this),null!==this.AssetRawUrl&&this.initJson(this.AssetRawUrl.json))},a.playAnimation=function(t,i){t&&(this._animation.play(t),this._animState=this._animation.getState(t),this._animState&&(this._wrapModeMap.has(this._animState)||this._wrapModeMap.set(this._animState,this._animState.wrapMode),this._animState.wrapMode=i?2:this._wrapModeMap.get(this._animState)))},a.scaleTime=function(t){this._animState&&(this._animState.speed=t)},n}(e))||o)||o)||o)||o)||o);n._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorBase.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AnimatorController.ts"],(function(t){var a,n,e,i,o,r,s,c,u,l;return{setters:[function(t){a=t.applyDecoratedDescriptor,n=t.inheritsLoose,e=t.initializerDefineProperty,i=t.assertThisInitialized,o=t.createClass},function(t){r=t.cclegacy,s=t._decorator,c=t.JsonAsset,u=t.Component},function(t){l=t.default}],execute:function(){var p,h,m,f,g,_,y,d,A,b;r._RF.push({},"7ff14NOug1NAIB1XgQlC9Gc","AnimatorBase",void 0);var v=s.ccclass,S=s.property,C=s.executionOrder,M=s.menu;t("default",(p=C(-1e3),h=M("animator/AnimatorBase"),m=S({type:c,tooltip:"状态机json文件"}),f=S({tooltip:"是否在start中自动启动状态机"}),g=S({tooltip:"是否在update中自动触发状态机逻辑更新"}),v(_=p(_=h((d=a((y=function(t){function a(){for(var a,n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return a=t.call.apply(t,[this].concat(o))||this,e(a,"AssetRawUrl",d,i(a)),e(a,"PlayOnStart",A,i(a)),e(a,"AutoUpdate",b,i(a)),a._hasInit=!1,a._ac=null,a._stateLogicMap=null,a._onStateChangeCall=null,a._animationPlayer=null,a}n(a,t);var r=a.prototype;return r.onFrameEvent=function(t){var a;null==(a=this._animationPlayer)||a.onFrameEventCallback(t,this)},r.getState=function(t){return this._ac.states.get(t)},r.onInit=function(){},r.initArgs=function(){for(var t=this,a=arguments.length,n=new Array(a),e=0;e<a;e++)n[e]=arguments[e];n.forEach((function(a){a&&("function"==typeof a?t._onStateChangeCall=a:"object"==typeof a&&(a instanceof Map?t._stateLogicMap=a:t._animationPlayer=a))}))},r.updateAnimator=function(){var t,a=this._ac.curState.speed;this._ac.curState.multi&&(a*=null!=(t=this._ac.params.getNumber(this._ac.curState.multi))?t:1);if(this.scaleTime(a),this._stateLogicMap){var n=this._stateLogicMap.get(this._ac.curState.name);n&&n.onUpdate()}this._ac.updateAnimator()},r.update=function(){this._hasInit&&this.AutoUpdate&&this.updateAnimator()},r.manualUpdate=function(){this._hasInit&&!this.AutoUpdate&&this.updateAnimator()},r.initJson=function(t){this._ac=new l(this,t)},r.onAnimFinished=function(){var t;this._ac.onAnimationComplete(),null==(t=this._animationPlayer)||t.onFinishedCallback(this)},r.playAnimation=function(t,a){},r.scaleTime=function(t){},r.onStateChange=function(t,a){this.playAnimation(a.motion,a.loop);var n=t?t.name:"";if(this._stateLogicMap){var e=this._stateLogicMap.get(n);e&&e.onExit();var i=this._stateLogicMap.get(a.name);i&&i.onEntry()}this._onStateChangeCall&&this._onStateChangeCall(n,a.name)},r.setBool=function(t,a){this._ac.params.setBool(t,a)},r.getBool=function(t){return 0!==this._ac.params.getBool(t)},r.setNumber=function(t,a){this._ac.params.setNumber(t,a)},r.getNumber=function(t){return this._ac.params.getNumber(t)},r.setTrigger=function(t){this._ac.params.setTrigger(t)},r.resetTrigger=function(t){this._ac.params.resetTrigger(t)},r.autoTrigger=function(t){this._ac.params.autoTrigger(t)},r.play=function(t){this._hasInit&&this._ac.play(t)},o(a,[{key:"curStateName",get:function(){return this._ac.curState.name}},{key:"curStateMotion",get:function(){return this._ac.curState.motion}}]),a}(u)).prototype,"AssetRawUrl",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),A=a(y.prototype,"PlayOnStart",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),b=a(y.prototype,"AutoUpdate",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_=y))||_)||_)||_));r._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorCondition.ts",["cc"],(function(t){var a,r;return{setters:[function(t){a=t.cclegacy,r=t.error}],execute:function(){a._RF.push({},"8ade2h2C/ZA86thhI0NNuqu","AnimatorCondition",void 0);var e=t("ParamType",function(t){return t[t.COMPLETE=0]="COMPLETE",t[t.BOOLEAN=1]="BOOLEAN",t[t.NUMBER=2]="NUMBER",t[t.TRIGGER=3]="TRIGGER",t[t.AUTO_TRIGGER=4]="AUTO_TRIGGER",t}({})),i=t("LogicType",function(t){return t[t.EQUAL=0]="EQUAL",t[t.NOTEQUAL=1]="NOTEQUAL",t[t.GREATER=2]="GREATER",t[t.LESS=3]="LESS",t[t.GREATER_EQUAL=4]="GREATER_EQUAL",t[t.LESS_EQUAL=5]="LESS_EQUAL",t}({}));t("default",function(){function t(t,a){this._ac=void 0,this._param="",this._value=0,this._logic=i.EQUAL,this._ac=a,this._param=t.param,this._value=t.value,this._logic=t.logic}var a=t.prototype;return a.getParamName=function(){return this._param},a.getParamType=function(){return this._ac.params.getParamType(this._param)},a.check=function(){var t=this.getParamType();if(t===e.BOOLEAN)return this._ac.params.getBool(this._param)===this._value;if(t!==e.NUMBER)return t===e.AUTO_TRIGGER?0!==this._ac.params.getAutoTrigger(this._param):t===e.TRIGGER?0!==this._ac.params.getTrigger(this._param):(r("[AnimatorCondition.check] 错误的type: "+t),!1);var a=this._ac.params.getNumber(this._param);switch(this._logic){case i.EQUAL:return a===this._value;case i.NOTEQUAL:return a!==this._value;case i.GREATER:return a>this._value;case i.LESS:return a<this._value;case i.GREATER_EQUAL:return a>=this._value;case i.LESS_EQUAL:return a<=this._value;default:return!1}},t}());a._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorController.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AnimatorParams.ts","./AnimatorState.ts"],(function(t){var e,a,n,s,i;return{setters:[function(t){e=t.createClass},function(t){a=t.cclegacy,n=t.error},function(t){s=t.default},function(t){i=t.default}],execute:function(){a._RF.push({},"01df9SMBjRCyYDE7SgbZxua","AnimatorController",void 0);t("default",function(){function t(t,e){this._jsonData=null,this._animator=null,this._params=null,this._states=null,this._anyState=null,this._curState=null,this._changeCount=0,this.animCompleteState=null,this.animComplete=!1,this._animator=t,this._jsonData=e,this._states=new Map,this._params=new s(e.parameters),this.init(e)}var a=t.prototype;return a.init=function(t){if(t.states.length<=0)n("[AnimatorController.init] 状态机json错误");else{var e=t.defaultState;this._anyState=new i(t.anyState,this);for(var a=0;a<t.states.length;a++){var s=new i(t.states[a],this);this._states.set(s.name,s)}this.changeState(e)}},a.updateState=function(){this._curState.checkAndTrans(),this._curState!==this._anyState&&null!==this._anyState&&this._anyState.checkAndTrans()},a.updateAnimator=function(){this._changeCount=0,this.updateState(),this.animComplete&&this.animCompleteState.loop&&(this.animComplete=!1),this.params.resetAllAutoTrigger()},a.onAnimationComplete=function(){this.animComplete=!0,this.animCompleteState=this._curState},a.play=function(t){this._states.has(t)&&this._curState.name!==t&&(this.animComplete=!1,this.changeState(t))},a.changeState=function(t){if(this._changeCount++,this._changeCount>1e3)n("[AnimatorController.changeState] error: 状态切换递归调用超过1000次，transition设置可能出错!");else if(!this._states.has(t)||null!==this._curState&&this._curState.name===t)n("[AnimatorController.changeState] error state: "+t);else{var e=this._curState;this._curState=this._states.get(t),this._animator.onStateChange(e,this._curState),this.updateState()}},e(t,[{key:"curState",get:function(){return this._curState}},{key:"params",get:function(){return this._params}},{key:"states",get:function(){return this._states}}]),t}());a._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorCustomization.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AnimatorBase.ts"],(function(i){var t,n,a,e,o,r,s;return{setters:[function(i){t=i.applyDecoratedDescriptor,n=i.inheritsLoose,a=i.initializerDefineProperty,e=i.assertThisInitialized},function(i){o=i.cclegacy,r=i._decorator},function(i){s=i.default}],execute:function(){var l,c,u,p,h,m;o._RF.push({},"fe7aemTdvFBeJlAmC+6XphU","AnimatorCustomization",void 0);var f=r.ccclass,y=r.property,d=r.disallowMultiple,A=r.menu,_=r.help;i("default",(l=A("OopsFramework/Animator/AnimatorCustomization （自定义状态机）"),c=_("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565"),u=y({override:!0,visible:!1}),f(p=d(p=l(p=c((m=t((h=function(i){function t(){for(var t,n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return t=i.call.apply(i,[this].concat(o))||this,a(t,"PlayOnStart",m,e(t)),t}n(t,i);var o=t.prototype;return o.onInit=function(){this._hasInit||(this._hasInit=!0,this.initArgs.apply(this,arguments),null!==this.AssetRawUrl&&this.initJson(this.AssetRawUrl.json))},o.playAnimation=function(i,t){this._animationPlayer&&i&&this._animationPlayer.playAnimation(i,t)},o.scaleTime=function(i){this._animationPlayer&&this._animationPlayer.scaleTime(i)},t}(s)).prototype,"PlayOnStart",[u],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),p=h))||p)||p)||p)||p));o._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorDragonBones.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AnimatorBase.ts"],(function(t){var n,s,i,o,e;return{setters:[function(t){n=t.inheritsLoose},function(t){s=t.cclegacy,i=t._decorator,o=t.dragonBones},function(t){e=t.default}],execute:function(){var a;s._RF.push({},"dc324J03ptB8b2JV9Ljduzh","AnimatorDragonBones",void 0);var r=i.ccclass,h=(i.property,i.requireComponent),l=i.disallowMultiple,c=i.menu,u=i.help;t("default",r(a=l(a=h(o.ArmatureDisplay)(a=c("OopsFramework/Animator/AnimatorDragonBones （龙骨状态机）")(a=u("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565")(a=function(t){function s(){for(var n,s=arguments.length,i=new Array(s),o=0;o<s;o++)i[o]=arguments[o];return(n=t.call.apply(t,[this].concat(i))||this)._dragonBones=null,n}n(s,t);var i=s.prototype;return i.start=function(){this.PlayOnStart&&!this._hasInit&&(this._hasInit=!0,this._dragonBones=this.getComponent(o.ArmatureDisplay),this._dragonBones.addEventListener("complete",this.onAnimFinished,this),null!==this.AssetRawUrl&&this.initJson(this.AssetRawUrl.json))},i.onInit=function(){this.PlayOnStart||this._hasInit||(this._hasInit=!0,this.initArgs.apply(this,arguments),this._dragonBones=this.getComponent(o.ArmatureDisplay),this._dragonBones.addEventListener("complete",this.onAnimFinished,this),null!==this.AssetRawUrl&&this.initJson(this.AssetRawUrl.json))},i.playAnimation=function(t,n){t&&this._dragonBones.playAnimation(t,n?0:-1)},i.scaleTime=function(t){t>0&&(this._dragonBones.timeScale=t)},s}(e))||a)||a)||a)||a)||a);s._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorParams.ts",["cc","./AnimatorCondition.ts"],(function(t){var a,e;return{setters:[function(t){a=t.cclegacy},function(t){e=t.ParamType}],execute:function(){a._RF.push({},"13926xryDRPXJ50lCnLvy4J","AnimatorParams",void 0);t("default",function(){function t(t){var a=this;this._paramMap=new Map,t.forEach((function(t){var e={type:t.type,value:t.init};a._paramMap.set(t.param,e)}))}var a=t.prototype;return a.getParamType=function(t){var a=this._paramMap.get(t);return a?a.type:null},a.setNumber=function(t,a){var r=this._paramMap.get(t);r&&r.type===e.NUMBER&&(r.value=a)},a.setBool=function(t,a){var r=this._paramMap.get(t);r&&r.type===e.BOOLEAN&&(r.value=a?1:0)},a.setTrigger=function(t){var a=this._paramMap.get(t);a&&a.type===e.TRIGGER&&(a.value=1)},a.resetTrigger=function(t){var a=this._paramMap.get(t);a&&a.type===e.TRIGGER&&(a.value=0)},a.autoTrigger=function(t){var a=this._paramMap.get(t);a&&a.type===e.AUTO_TRIGGER&&(a.value=1)},a.resetAutoTrigger=function(t){var a=this._paramMap.get(t);a&&a.type===e.AUTO_TRIGGER&&(a.value=0)},a.resetAllAutoTrigger=function(){this._paramMap.forEach((function(t,a){t.type===e.AUTO_TRIGGER&&(t.value=0)}))},a.getNumber=function(t){var a=this._paramMap.get(t);return a&&a.type===e.NUMBER?a.value:0},a.getBool=function(t){var a=this._paramMap.get(t);return a&&a.type===e.BOOLEAN?a.value:0},a.getTrigger=function(t){var a=this._paramMap.get(t);return a&&a.type===e.TRIGGER?a.value:0},a.getAutoTrigger=function(t){var a=this._paramMap.get(t);return a&&a.type===e.AUTO_TRIGGER?a.value:0},t}());a._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorSkeletal.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AnimatorAnimation.ts"],(function(t){var i,e,a,n,o,r,s,l,c,u;return{setters:[function(t){i=t.applyDecoratedDescriptor,e=t.inheritsLoose,a=t.initializerDefineProperty,n=t.assertThisInitialized},function(t){o=t.cclegacy,r=t._decorator,s=t.SkeletalAnimation,l=t.CCFloat,c=t.game},function(t){u=t.default}],execute:function(){var p,m,h,d,_,f,S;o._RF.push({},"8c545jBn4xF7LWXjl506avi","AnimatorSkeletal",void 0);var y=r.ccclass,g=r.property,w=r.requireComponent,A=r.disallowMultiple,k=r.menu,v=r.help;t("AnimatorSkeletal",(p=w(s),m=k("OopsFramework/Animator/AnimatorSkeletal （骨骼动画状态机）"),h=v("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565"),d=g({type:l,tooltip:"动画切换过度时间"}),y(_=A(_=p(_=m(_=h((S=i((f=function(t){function i(){for(var i,e=arguments.length,o=new Array(e),r=0;r<e;r++)o[r]=arguments[r];return i=t.call.apply(t,[this].concat(o))||this,a(i,"duration",S,n(i)),i.cross_duration=0,i.current_time=0,i}e(i,t);var o=i.prototype;return o.onLoad=function(){this.cross_duration=1e3*this.duration},o.playAnimation=function(t,i){t&&(c.totalTime-this.current_time>this.cross_duration?this._animation.crossFade(t,this.duration):this._animation.play(t),this.current_time=c.totalTime,this._animState=this._animation.getState(t),this._animState&&(this._wrapModeMap.has(this._animState)||this._wrapModeMap.set(this._animState,this._animState.wrapMode),this._animState.wrapMode=i?2:1))},i}(u)).prototype,"duration",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return.3}}),_=f))||_)||_)||_)||_)||_));o._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorSpine.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AnimatorBase.ts"],(function(t){var e,n,i,s,o;return{setters:[function(t){e=t.inheritsLoose},function(t){n=t.cclegacy,i=t._decorator,s=t.sp},function(t){o=t.default}],execute:function(){var a;n._RF.push({},"7fde8yJEfxMMqzjg+V4UVkT","AnimatorSpine",void 0);var r=i.ccclass,p=(i.property,i.requireComponent),l=i.disallowMultiple,h=i.menu,c=i.help;t("default",r(a=l(a=p(s.Skeleton)(a=h("OopsFramework/Animator/AnimatorSpine（Spine 状态机）")(a=c("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565")(a=function(t){function n(){for(var e,n=arguments.length,i=new Array(n),s=0;s<n;s++)i[s]=arguments[s];return(e=t.call.apply(t,[this].concat(i))||this)._spine=null,e._completeListenerMap=new Map,e._secondaryListenerMap=new Map,e}e(n,t);var i=n.prototype;return i.start=function(){this.PlayOnStart&&!this._hasInit&&(this._hasInit=!0,this._spine=this.getComponent(s.Skeleton),this._spine.setEventListener(this.onSpineEvent.bind(this)),this._spine.setCompleteListener(this.onSpineComplete.bind(this)),null!==this.AssetRawUrl&&this.initJson(this.AssetRawUrl.json))},i.onInit=function(){this.PlayOnStart||this._hasInit||(this._hasInit=!0,this.initArgs.apply(this,arguments),this._spine=this.getComponent(s.Skeleton),this._spine.setEventListener(this.onSpineEvent.bind(this)),this._spine.setCompleteListener(this.onSpineComplete.bind(this)),null!==this.AssetRawUrl&&this.initJson(this.AssetRawUrl.json))},i.getBone=function(t){return this._spine.findBone(t)},i.onSpineEvent=function(t,e){var n,i=t.animation?e.data.name:"";null==(n=this._animationPlayer)||n.onFrameEventCallback(i,this)},i.onSpineComplete=function(t){0===t.trackIndex&&this.onAnimFinished(),this._completeListenerMap.forEach((function(e,n){e?n.call(e,t):n(t)})),this._secondaryListenerMap.forEach((function(e,n){t.trackIndex===e.TrackIndex&&n.call(e,t)}))},i.playAnimation=function(t,e){t?this._spine.setAnimation(0,t,e):this._spine.clearTrack(0)},i.scaleTime=function(t){t>0&&(this._spine.timeScale=t)},i.addSecondaryListener=function(t,e){this._secondaryListenerMap.set(t,e)},i.addCompleteListener=function(t,e){void 0===e&&(e=null),this._completeListenerMap.has(t)||this._completeListenerMap.set(t,e)},i.removeCompleteListener=function(t){this._completeListenerMap.delete(t)},i.clearCompleteListener=function(){this._completeListenerMap.clear},n}(o))||a)||a)||a)||a)||a);n._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorSpineSecondary.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AnimatorSpine.ts","./AnimatorBase.ts"],(function(t){var i,n,e,s,o,r,a,h,l;return{setters:[function(t){i=t.applyDecoratedDescriptor,n=t.inheritsLoose,e=t.initializerDefineProperty,s=t.assertThisInitialized},function(t){o=t.cclegacy,r=t._decorator,a=t.sp},function(t){h=t.default},function(t){l=t.default}],execute:function(){var c,p,u,d,m,f,_;o._RF.push({},"e47112s9c9Kwo8XQQ4KSW0c","AnimatorSpineSecondary",void 0);var y=r.ccclass,A=r.property,S=r.requireComponent,g=r.menu,k=r.help;t("default",(c=S(a.Skeleton),p=g("OopsFramework/Animator/AnimatorSpine （Spine 次状态机）"),u=k("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12036279&doc_id=2873565"),d=A({tooltip:"动画播放的trackIndex，必须大于0"}),y(m=c(m=p(m=u((_=i((f=function(t){function i(){for(var i,n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return i=t.call.apply(t,[this].concat(o))||this,e(i,"TrackIndex",_,s(i)),i._main=null,i._spine=null,i}n(i,t);var o=i.prototype;return o.start=function(){this.PlayOnStart&&!this._hasInit&&(this._hasInit=!0,this._spine=this.getComponent(a.Skeleton),this._main=this.getComponent(h),this._main.addSecondaryListener(this.onAnimFinished,this),null!==this.AssetRawUrl&&this.initJson(this.AssetRawUrl.json))},o.onInit=function(){this.PlayOnStart||this._hasInit||(this._hasInit=!0,this.initArgs.apply(this,arguments),this._spine=this.getComponent(a.Skeleton),this._main=this.getComponent(h),this._main.addSecondaryListener(this.onAnimFinished,this),null!==this.AssetRawUrl&&this.initJson(this.AssetRawUrl.json))},o.playAnimation=function(t,i){t?this._spine.setAnimation(this.TrackIndex,t,i):this._spine.clearTrack(this.TrackIndex)},i}(l)).prototype,"TrackIndex",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),m=f))||m)||m)||m)||m));o._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorState.ts",["./rollupPluginModLoBabelHelpers.js","cc","./AnimatorTransition.ts"],(function(t){var i,n,e;return{setters:[function(t){i=t.createClass},function(t){n=t.cclegacy},function(t){e=t.default}],execute:function(){n._RF.push({},"bd2d1/E71JL1Jj3HzsYH82H","AnimatorState",void 0);t("default",function(){function t(t,i){this._name="",this._motion="",this._loop=!1,this._speed=1,this._multi="",this._transitions=[],this._ac=null,this._name=t.state,this._motion=t.motion||"",this._loop=t.loop||!1,this._speed=t.speed||1,this._multi=t.multiplier||"",this._ac=i;for(var n=0;n<t.transitions.length;n++){var s=new e(t.transitions[n],i);s.isValid()&&this._transitions.push(s)}}return t.prototype.checkAndTrans=function(){for(var t=0;t<this._transitions.length;t++){var i=this._transitions[t];if(i&&i.check())return void i.doTrans()}},i(t,[{key:"name",get:function(){return this._name}},{key:"motion",get:function(){return this._motion}},{key:"loop",get:function(){return this._loop}},{key:"multi",get:function(){return this._multi}},{key:"speed",get:function(){return this._speed},set:function(t){this._speed=t}}]),t}());n._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorStateLogic.ts",["cc"],(function(t){var n;return{setters:[function(t){n=t.cclegacy}],execute:function(){n._RF.push({},"b06fbd3UdNKvooAUeDi9UTc","AnimatorStateLogic",void 0);t("AnimatorStateLogic",function(){function t(){}var n=t.prototype;return n.onEntry=function(){},n.onUpdate=function(){},n.onExit=function(){},t}());n._RF.pop()}}}));

System.register("chunks:///_virtual/AnimatorTransition.ts",["cc","./AnimatorCondition.ts"],(function(t){var i,n,e;return{setters:[function(t){i=t.cclegacy},function(t){n=t.ParamType,e=t.default}],execute:function(){i._RF.push({},"39224xRIkpEG7hvPJlKoGDy","AnimatorTransition",void 0);t("default",function(){function t(t,i){this._toStateName="",this._hasExitTime=!1,this._conditions=[],this._ac=null,this._toStateName=t.toState,this._hasExitTime=t.hasExitTime,this._ac=i;for(var n=0;n<t.conditions.length;n++){var a=new e(t.conditions[n],i);this._conditions.push(a)}}var i=t.prototype;return i.isValid=function(){return this._hasExitTime||this._conditions.length>0},i.check=function(){if(this._toStateName===this._ac.curState.name)return!1;if(this._hasExitTime&&(this._ac.curState!==this._ac.animCompleteState||!this._ac.animComplete))return!1;for(var t=0;t<this._conditions.length;t++)if(!this._conditions[t].check())return!1;return!0},i.doTrans=function(){this._hasExitTime&&(this._ac.animComplete=!1);for(var t=0;t<this._conditions.length;t++){var i=this._conditions[t].getParamType(),e=this._conditions[t].getParamName();i===n.TRIGGER?this._ac.params.resetTrigger(e):i===n.AUTO_TRIGGER&&this._ac.params.resetAutoTrigger(e)}this._ac.changeState(this._toStateName)},t}());i._RF.pop()}}}));

System.register("chunks:///_virtual/ArrayExt.ts",["cc"],(function(){var t;return{setters:[function(r){t=r.cclegacy}],execute:function(){t._RF.push({},"2696fVV0U1BcotwtuSW7qe9","ArrayExt",void 0),!Array.prototype.__cc_extended&&Object.defineProperties(Array.prototype,{remove:{value:function(t){if("function"==typeof t)for(var r=this.length-1;r>-1;--r)t(this[r],r,this)&&this.splice(r,1);else for(var n=this.length-1;n>-1;--n)this[n]===t&&this.splice(n,1);return this}},removeOne:{value:function(t){if("function"==typeof t){for(var r=0;r<this.length;++r)if(t(this[r],r,this))return this.splice(r,1),this}else for(var n=0;n<this.length;++n)if(this[n]===t)return this.splice(n,1),this;return this}},random:{value:function(){return this[Math.floor(Math.random()*this.length)]}},fastRemoveAt:{value:function(t){var r=this.length;if(t<0||t>=r)return null;var n=this[t];return this[t]=this[r-1],this.length=r-1,n}},fastRemove:{value:function(t){function r(r){return t.apply(this,arguments)}return r.toString=function(){return t.toString()},r}((function(t){var r=this.indexOf(t);return r>=0&&(this[r]=this[this.length-1],--this.length,!0)}))},first:{value:function(){return this.length?this[0]:null}},last:{value:function(){return this.length?this[this.length-1]:null}},max:{value:function(t){if(!this.length)return null;if("function"==typeof t){for(var r=t(this[0],0,this),n=1;n<this.length;++n){var i=t(this[n],n,this);r=i>r?i:r}return r}return this.reduce((function(t,r){return(n=t)>(i=r)?n:i;var n,i}))}},min:{value:function(t){if(!this.length)return null;if("function"==typeof t){for(var r=t(this[0],0,this),n=1;n<this.length;++n){var i=t(this[n],n,this);r=i<r?i:r}return r}return this.reduce((function(t,r){return(n=t)<(i=r)?n:i;var n,i}))}},distinct:{value:function(){return this.filter((function(t,r,n){return n.indexOf(t)===r}))}},filterIndex:{value:function(t){for(var r=[],n=0;n<this.length;++n)t(this[n],n,this)&&r.push(n);return r}},count:{value:function(t){for(var r=0,n=0;n<this.length;++n)t(this[n],n,this)&&++r;return r}},sum:{value:function(t){for(var r=0,n=0;n<this.length;++n)r+=t?t(this[n],n,this):this[n];return r}},average:{value:function(t){return this.sum(t)/this.length}},orderBy:{value:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return this.slice().sort((function(r,n){for(var i=0;i<t.length;++i){var e=t[i](r),u=t[i](n);if(e>u)return 1;if(e<u)return-1}return 0}))}},orderByDesc:{value:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return this.slice().sort((function(r,n){for(var i=0;i<t.length;++i){var e=t[i](r),u=t[i](n);if(e>u)return-1;if(e<u)return 1}return 0}))}},binarySearch:{value:function(t){function r(r,n){return t.apply(this,arguments)}return r.toString=function(){return t.toString()},r}((function(t,r){for(var n=0,i=this.length-1;n<=i;){var e=(i+n)/2|0,u=r?r(this[e]):this[e];if(t===u)return e;t>u?n=e+1:t<u&&(i=e-1)}return-1}))},binaryInsert:{value:function(t,r,n){"boolean"==typeof r&&(n=r,r=void 0);for(var i=0,e=this.length-1,u=NaN,h=r?r(t):t;i<=e;){u=(e+i)/2|0;var s=r?r(this[u]):this[u];if(h===s){if(n)return u;break}h>s?i=u+1:h<s&&(e=u-1)}var f=i>u?u+1:u;return this.splice(f,0,t),f}},binaryDistinct:{value:function(t){return this.filter((function(r,n,i){return i.binarySearch(r,t)===n}))}},findLast:{value:function(t){for(var r=this.length-1;r>-1;--r)if(t(this[r],r,this))return this[r]}},findLastIndex:{value:function(t){for(var r=this.length-1;r>-1;--r)if(t(this[r],r,this))return r;return-1}},groupBy:{value:function(t){var r=this.reduce((function(r,n){var i=t(n);return r[i]||(r[i]=[]),r[i].push(n),r}),{});return Object.keys(r).map((function(t){var n=r[t];return n.key=t,n}))}},__cc_extended:{value:!0}}),t._RF.pop()}}}));

System.register("chunks:///_virtual/ArrayUtil.ts",["cc"],(function(r){var n;return{setters:[function(r){n=r.cclegacy}],execute:function(){n._RF.push({},"4613b2zY/dMSaGPBGo6eti3","ArrayUtil",void 0);r("ArrayUtil",function(){function r(){}return r.noRepeated=function(r){for(var n=[r[0]],t=1;t<r.length;t++){for(var e=!1,o=0;o<n.length;o++)if(r[t]==n[o]){e=!0;break}e||n.push(r[t])}return n},r.copy2DArray=function(r){for(var n=[],t=0;t<r.length;t++)n.push(r[t].concat());return n},r.fisherYatesShuffle=function(r){for(var n=r.length;n;){var t=Math.floor(Math.random()*n--),e=r[n];r[n]=r[t],r[t]=e}return r},r.confound=function(r){return r.slice().sort((function(){return Math.random()-.5}))},r.flattening=function(r){for(;r.some((function(r){return Array.isArray(r)}));)r=[].concat.apply([],r);return r},r.removeItem=function(r,n){for(var t=r.concat(),e=0;e<t.length;e++){if(n==t[e]){r.splice(e,1);break}}},r.combineArrays=function(r,n){return[].concat(r,n)},r.getRandomValueInArray=function(r){return r[Math.floor(Math.random()*r.length)]},r}());n._RF.pop()}}}));

System.register("chunks:///_virtual/AsyncQueue.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(s){var n,i,e,u;return{setters:[function(s){n=s.createClass},function(s){i=s.cclegacy,e=s.warn,u=s.log}],execute:function(){i._RF.push({},"8c48bBN521JzIxhITJunFji","AsyncQueue",void 0),s("AsyncQueue",function(){function s(){this._runningAsyncTask=null,this._queues=[],this._isProcessingTaskUUID=0,this._enable=!0,this.complete=null}var i=s.prototype;return i.push=function(n,i){void 0===i&&(i=null);var e=s._$uuid_count++;return this._queues.push({uuid:e,callbacks:[n],params:i}),e},i.pushMulti=function(n){for(var i=s._$uuid_count++,e=arguments.length,u=new Array(e>1?e-1:0),t=1;t<e;t++)u[t-1]=arguments[t];return this._queues.push({uuid:i,callbacks:u,params:n}),i},i.remove=function(s){var n;if((null==(n=this._runningAsyncTask)?void 0:n.uuid)!==s){for(var i=0;i<this._queues.length;i++)if(this._queues[i].uuid===s){this._queues.splice(i,1);break}}else e("正在执行的任务不可以移除")},i.clear=function(){this._queues=[],this._isProcessingTaskUUID=0,this._runningAsyncTask=null},i.step=function(){this.isProcessing&&this.next(this._isProcessingTaskUUID)},i.play=function(s){var n=this;if(void 0===s&&(s=null),!this.isProcessing&&this._enable){var i=this._queues.shift();if(i){this._runningAsyncTask=i;var e=i.uuid;this._isProcessingTaskUUID=e;var u=i.callbacks;if(1==u.length){u[0]((function(s){void 0===s&&(s=null),n.next(e,s)}),i.params,s)}else for(var t=u.length,r=[],c=function(s){void 0===s&&(s=null),--t,r.push(s||null),0===t&&n.next(e,r)},l=t,a=0;a<l;a++)u[a](c,i.params,s)}else this._isProcessingTaskUUID=0,this._runningAsyncTask=null,this.complete&&this.complete(s)}},i.yieldTime=function(s,n){void 0===n&&(n=null);this.push((function(i,e,u){var t=setTimeout((function(){clearTimeout(t),n&&n(),i(u)}),s)}),{des:"AsyncQueue.yieldTime"})},i.next=function(s,n){void 0===n&&(n=null),this._isProcessingTaskUUID===s?(this._isProcessingTaskUUID=0,this._runningAsyncTask=null,this.play(n)):this._runningAsyncTask&&u(this._runningAsyncTask)},s.excuteTimes=function(s,n){void 0===n&&(n=null);var i=s;return function(){0===--i&&n&&n()}},n(s,[{key:"queues",get:function(){return this._queues}},{key:"enable",get:function(){return this._enable},set:function(s){this._enable!==s&&(this._enable=s,s&&this.size>0&&this.play())}},{key:"size",get:function(){return this._queues.length}},{key:"isProcessing",get:function(){return this._isProcessingTaskUUID>0}},{key:"isStop",get:function(){return!(this._queues.length>0)&&!this.isProcessing}},{key:"runningParams",get:function(){return this._runningAsyncTask?this._runningAsyncTask.params:null}}]),s}())._$uuid_count=1,i._RF.pop()}}}));

System.register("chunks:///_virtual/AudioEffect.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var o,e,n,c;return{setters:[function(t){o=t.inheritsLoose},function(t){e=t.cclegacy,n=t._decorator,c=t.AudioSource}],execute:function(){var i;e._RF.push({},"e52d2ysY1BEbpcT2Cz0Wwss","AudioEffect",void 0);var r=n.ccclass;t("AudioEffect",r("AudioEffect")(i=function(t){function e(){for(var o,e=arguments.length,n=new Array(e),c=0;c<e;c++)n[c]=arguments[c];return(o=t.call.apply(t,[this].concat(n))||this).onComplete=null,o}o(e,t);var n=e.prototype;return n.start=function(){this.node.on(c.EventType.ENDED,this.onAudioEnded,this)},n.onAudioEnded=function(){this.onComplete&&this.onComplete()},e}(c))||i);e._RF.pop()}}}));

System.register("chunks:///_virtual/AudioEffectPool.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./ResLoader.ts","./AudioEffect.ts"],(function(e){var t,n,o,s,i,r,c,u,f,a;return{setters:[function(e){t=e.createClass,n=e.asyncToGenerator,o=e.regeneratorRuntime},function(e){s=e.cclegacy,i=e.AudioClip,r=e.NodePool,c=e.Node},function(e){u=e.oops},function(e){f=e.resLoader},function(e){a=e.AudioEffect}],execute:function(){s._RF.push({},"01278BDjrtCr4CBpmO5DZlN","AudioEffectPool",void 0);e("AudioEffectPool",function(){function e(){this._switch=!0,this._volume=1,this.pool=new r,this.effects=new Map,this.res=new Map,this._aeId=0}var s=e.prototype;return s.getAeId=function(){return 3e4==this._aeId&&(this._aeId=1),this._aeId++,this._aeId},s.load=function(){var e=n(o().mark((function e(t,s,r){var h=this;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return void 0===s&&(s=f.defaultBundleName),e.abrupt("return",new Promise(n(o().mark((function e(n,l){var p,d,v,m,_;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(h.switch){e.next=2;break}return e.abrupt("return",n(-1));case 2:if(!(t instanceof i)){e.next=6;break}p=t,e.next=12;break;case 6:if(p=f.get(t,i,s)){e.next=12;break}return h.res.set(s,t),e.next=11,f.loadAsync(s,t,i);case 11:p=e.sent;case 12:if(p.isValid){e.next=15;break}return n(-1),e.abrupt("return");case 15:d=h.getAeId(),v=t instanceof i?t.uuid:s+"_"+t,v+="_"+d,_=null,0==h.pool.size()?((_=new c).name="AudioEffect",_.parent=u.audio.node,m=_.addComponent(a)):(_=h.pool.get(),m=_.getComponent(a)),m.onComplete=function(){h.put(d,t,s),r&&r()},h.effects.set(v,m),m.volume=h.volume,m.clip=p,m.play(),n(d);case 26:case"end":return e.stop()}}),e)})))));case 2:case"end":return e.stop()}}),e)})));return function(t,n,o){return e.apply(this,arguments)}}(),s.put=function(e,t,n){var o;void 0===n&&(n=f.defaultBundleName),o=t instanceof i?t.uuid:n+"_"+t,o+="_"+e;var s=this.effects.get(o);s&&s.clip&&(this.effects.delete(o),s.stop(),this.pool.put(s.node))},s.release=function(){this.effects.forEach((function(e){e.node.destroy()})),this.effects.clear(),this.res.forEach((function(e,t){f.release(t,e)})),this.pool.clear()},s.stop=function(){this.effects.forEach((function(e){e.stop()}))},s.play=function(){this.switch&&this.effects.forEach((function(e){e.play()}))},s.pause=function(){this.switch&&this.effects.forEach((function(e){e.pause()}))},t(e,[{key:"switch",get:function(){return this._switch},set:function(e){this._switch=e,e&&this.stop()}},{key:"volume",get:function(){return this._volume},set:function(e){this._volume=e,this.effects.forEach((function(t){t.volume=e}))}}]),e}());s._RF.pop()}}}));

System.register("chunks:///_virtual/AudioManager.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./AudioEffectPool.ts","./AudioMusic.ts"],(function(t){var s,i,e,c,u,o,n;return{setters:[function(t){s=t.inheritsLoose,i=t.createClass},function(t){e=t.cclegacy,c=t.Component},function(t){u=t.oops},function(t){o=t.AudioEffectPool},function(t){n=t.AudioMusic}],execute:function(){e._RF.push({},"252f0z+vPNL8Y/jsLYmomtw","AudioManager",void 0);var h="game_audio";t("AudioManager",function(t){function e(){for(var s,i=arguments.length,e=new Array(i),c=0;c<i;c++)e[c]=arguments[c];return(s=t.call.apply(t,[this].concat(e))||this).music=null,s.effect=new o,s.local_data={},s}s(e,t);var c=e.prototype;return c.setMusicComplete=function(t){void 0===t&&(t=null),this.music.onComplete=t},c.playMusic=function(t,s,i){this.music.switch&&(this.music.loop=!1,this.music.load(t,s,i).then())},c.playMusicLoop=function(t,s){this.music.switch&&(this.music.loop=!0,this.music.load(t,null,s).then())},c.stopMusic=function(){this.music.switch&&this.music.playing&&this.music.stop()},c.playEffect=function(t,s,i){return this.effect.load(t,s,i)},c.putEffect=function(t,s,i){this.effect.put(t,s,i)},c.resumeAll=function(){!this.music.playing&&this.music.progress>0&&this.music.play(),this.effect.play()},c.pauseAll=function(){this.music.playing&&this.music.pause(),this.effect.pause()},c.stopAll=function(){this.music.stop(),this.effect.stop()},c.save=function(){this.local_data.volume_music=this.music.volume,this.local_data.volume_effect=this.effect.volume,this.local_data.switch_music=this.music.switch,this.local_data.switch_effect=this.effect.switch,u.storage.set(h,this.local_data)},c.load=function(){if(this.music=this.getComponent(n)||this.addComponent(n),this.local_data=u.storage.getJson(h),this.local_data)try{this.setState()}catch(t){this.setStateDefault()}else this.setStateDefault()},c.setState=function(){this.music.volume=this.local_data.volume_music,this.effect.volume=this.local_data.volume_effect,this.music.switch=this.local_data.switch_music,this.effect.switch=this.local_data.switch_effect},c.setStateDefault=function(){this.local_data={},this.music.volume=1,this.effect.volume=1,this.music.switch=!0,this.effect.switch=!0},i(e,[{key:"progressMusic",get:function(){return this.music.progress},set:function(t){this.music.progress=t}},{key:"volumeMusic",get:function(){return this.music.volume},set:function(t){this.music.volume=t,this.save()}},{key:"switchMusic",get:function(){return this.music.switch},set:function(t){this.music.switch=t,t||this.music.stop(),this.save()}},{key:"volumeEffect",get:function(){return this.effect.volume},set:function(t){this.effect.volume=t,this.save()}},{key:"switchEffect",get:function(){return this.effect.switch},set:function(t){this.effect.switch=t,t||this.effect.stop(),this.save()}}]),e}(c));e._RF.pop()}}}));

System.register("chunks:///_virtual/AudioMusic.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ResLoader.ts"],(function(t){var e,n,i,s,r,o,u,a,c;return{setters:[function(t){e=t.inheritsLoose,n=t.createClass,i=t.asyncToGenerator,s=t.regeneratorRuntime},function(t){r=t.cclegacy,o=t._decorator,u=t.AudioSource,a=t.AudioClip},function(t){c=t.resLoader}],execute:function(){var l;r._RF.push({},"5c1f3kqGetBiIv48/CvuaQv","AudioMusic",void 0);var h=o.ccclass;o.menu,t("AudioMusic",h("AudioMusic")(l=function(t){function r(){for(var e,n=arguments.length,i=new Array(n),s=0;s<n;s++)i[s]=arguments[s];return(e=t.call.apply(t,[this].concat(i))||this).switch=!0,e.onComplete=null,e._progress=0,e._isLoading=!1,e._nextBundleName=null,e._nextUrl=null,e}e(r,t);var o=r.prototype;return o.start=function(){this.node.on(u.EventType.ENDED,this.onAudioEnded,this)},o.onAudioEnded=function(){this.onComplete&&this.onComplete()},o.load=function(){var t=i(s().mark((function t(e,n,i){var r;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(void 0===i&&(i=c.defaultBundleName),!this._isLoading){t.next=5;break}return this._nextBundleName=i,this._nextUrl=e,t.abrupt("return");case 5:return this._isLoading=!0,t.next=8,c.loadAsync(i,e,a);case 8:(r=t.sent)&&(this._isLoading=!1,null!=this._nextUrl?(this.load(this._nextUrl,n,this._nextBundleName),this._nextBundleName=this._nextUrl=null):(n&&n(),this.playing&&this.stop(),this.release(),this.clip=r,this.play()));case 10:case"end":return t.stop()}}),t,this)})));return function(e,n,i){return t.apply(this,arguments)}}(),o.release=function(){this.clip&&(this.stop(),this.clip.decRef(),this.clip=null)},n(r,[{key:"progress",get:function(){return this.duration>0&&(this._progress=this.currentTime/this.duration),this._progress},set:function(t){this._progress=t,this.currentTime=t*this.duration}}]),r}(u))||l);r._RF.pop()}}}));

System.register("chunks:///_virtual/BehaviorTree.ts",["./rollupPluginModLoBabelHelpers.js","cc","./BTreeNode.ts"],(function(t){var e,r,i;return{setters:[function(t){e=t.createClass},function(t){r=t.cclegacy},function(t){i=t.BTreeNode}],execute:function(){r._RF.push({},"22a91RP3fNG/rWWAXlmM4BT","BehaviorTree",void 0);var s=0;t("BehaviorTree",function(){function t(t,e){this.title=void 0,this._root=void 0,this._current=void 0,this._started=!1,this._blackboard=void 0,s+=1,this.title=t.constructor.name+"(btree_"+s+")",this._root=t,this._blackboard=e}var r=t.prototype;return r.setObject=function(t){this._blackboard=t},r.run=function(){this._started&&console.error("行为树【"+this.title+"】未调用步骤，在最后一次调用步骤时有一个任务未完成"),this._started=!0;var e=t.getNode(this._root);this._current=e,e.setControl(this),e.start(this._blackboard),e.run(this._blackboard)},r.running=function(t){this._started=!1},r.success=function(){this._current.end(this._blackboard),this._started=!1},r.fail=function(){this._current.end(this._blackboard),this._started=!1},t.register=function(t,e){this._registeredNodes.set(t,e)},t.getNode=function(t){var e=t instanceof i?t:this._registeredNodes.get(t);if(!e)throw new Error("无法找到节点【"+t+"】，可能它没有注册过");return e},e(t,[{key:"started",get:function(){return this._started}}]),t}())._registeredNodes=new Map,r._RF.pop()}}}));

System.register("chunks:///_virtual/BhvButtonGroup.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(n){var t,i,e,r,o,a,l,u,s,p,c,b;return{setters:[function(n){t=n.applyDecoratedDescriptor,i=n.inheritsLoose,e=n.initializerDefineProperty,r=n.assertThisInitialized},function(n){o=n.cclegacy,a=n._decorator,l=n.Enum,u=n.Button,s=n.SpriteFrame,p=n.EventHandler,c=n.Component,b=n.color}],execute:function(){var f,m,v,h,d,y,E,C,g,T,S,z,L,w,R,I,D,N,_,H,O,B,P,A,G,M,k,x,F,X,J;o._RF.push({},"41df676L55LvJ52uxkQpfxJ","BhvButtonGroup",void 0);var U=a.ccclass,j=a.property,Q=a.menu,V=function(n){return n[n.CHILDREN_INDEX=0]="CHILDREN_INDEX",n[n.CHILDREN_NAME=1]="CHILDREN_NAME",n}(V||{});n("BhvButtonGroup",(f=Q("OopsFramework/UI/Button Group （按钮组控制）"),m=j({type:l(u.Transition)}),v=j({visible:function(){return this.transition===u.Transition.COLOR}}),h=j({visible:function(){return this.transition===u.Transition.COLOR}}),d=j({visible:function(){return this.transition===u.Transition.COLOR}}),y=j({visible:function(){return this.transition===u.Transition.COLOR}}),E=j({type:s,visible:function(){return this.transition===u.Transition.SPRITE}}),C=j({type:s,visible:function(){return this.transition===u.Transition.SPRITE}}),g=j({type:s,visible:function(){return this.transition===u.Transition.SPRITE}}),T=j({type:s,visible:function(){return this.transition===u.Transition.SPRITE}}),S=j({visible:function(){return this.transition===u.Transition.SCALE||this.transition===u.Transition.COLOR}}),z=j({visible:function(){return this.transition===u.Transition.SCALE}}),L=j({type:l(V)}),w=j({type:[p]}),R=j({tooltip:"规避3.x引擎BUG，EventHandler.component位为空导致找不到触发事件的脚本名的问题",readonly:!0}),U(I=f((N=t((D=function(n){function t(){for(var t,i=arguments.length,o=new Array(i),a=0;a<i;a++)o[a]=arguments[a];return t=n.call.apply(n,[this].concat(o))||this,e(t,"transition",N,r(t)),e(t,"hoverColor",_,r(t)),e(t,"normalColor",H,r(t)),e(t,"pressedColor",O,r(t)),e(t,"disabledColor",B,r(t)),e(t,"normalSprite",P,r(t)),e(t,"pressedSprite",A,r(t)),e(t,"hoverSprite",G,r(t)),e(t,"disabledSprite",M,r(t)),e(t,"duration",k,r(t)),e(t,"zoomScale",x,r(t)),e(t,"paramType",F,r(t)),e(t,"touchEvents",X,r(t)),e(t,"EventHandler_component",J,r(t)),t}return i(t,n),t.prototype.onLoad=function(){var n=this;this.node.children.forEach((function(t,i){var e=t.getComponent(u);null==e&&(e=t.addComponent(u)),n.touchEvents.forEach((function(r){var o=new p;o.component=""==r.component?n.EventHandler_component:r.component,o.handler=r.handler,o.target=r.target,n.paramType===V.CHILDREN_INDEX?o.customEventData=i.toString():o.customEventData=t.name,e.clickEvents.push(o)}))}))},t}(c)).prototype,"transition",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return u.Transition.NONE}}),_=t(D.prototype,"hoverColor",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return b(255,255,255)}}),H=t(D.prototype,"normalColor",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return b(214,214,214)}}),O=t(D.prototype,"pressedColor",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return b(211,211,211)}}),B=t(D.prototype,"disabledColor",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return b(124,124,124)}}),P=t(D.prototype,"normalSprite",[E],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),A=t(D.prototype,"pressedSprite",[C],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),G=t(D.prototype,"hoverSprite",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),M=t(D.prototype,"disabledSprite",[T],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),k=t(D.prototype,"duration",[S],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),x=t(D.prototype,"zoomScale",[z],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1.1}}),F=t(D.prototype,"paramType",[L],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return V.CHILDREN_INDEX}}),X=t(D.prototype,"touchEvents",[w],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),J=t(D.prototype,"EventHandler_component",[R],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return"VMModify"}}),I=D))||I)||I));o._RF.pop()}}}));

System.register("chunks:///_virtual/BhvFrameIndex.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,r,n,i,o,s,a,p,u,c,l,d;return{setters:[function(e){t=e.applyDecoratedDescriptor,r=e.inheritsLoose,n=e.initializerDefineProperty,i=e.assertThisInitialized,o=e.createClass},function(e){s=e.cclegacy,a=e._decorator,p=e.Sprite,u=e.SpriteFrame,c=e.CCInteger,l=e.error,d=e.Component}],execute:function(){var h,m,f,x,y,F,v,g;s._RF.push({},"c238ewfJ2VJnZ8Gb8YQs5Ts","BhvFrameIndex",void 0);var I=a.ccclass,b=a.property,_=a.executeInEditMode,w=a.requireComponent,C=a.menu;e("BhvFrameIndex",(h=w(p),m=C("OopsFramework/UI/Frame Index （图片切换）"),f=b({type:[u],tooltip:"sprite将会用到帧图片"}),x=b({type:c,tooltip:"当前显示的帧图"}),I(y=_(y=h(y=m((v=t((F=function(e){function t(){for(var t,r=arguments.length,o=new Array(r),s=0;s<r;s++)o[s]=arguments[s];return t=e.call.apply(e,[this].concat(o))||this,n(t,"spriteFrames",v,i(t)),n(t,"_index",g,i(t)),t}r(t,e);var s=t.prototype;return s.setName=function(e){var t=this.spriteFrames.findIndex((function(t){return t.name==e}));t<0&&l("frameIndex 设置了不存在的name:",e),this.index=t||0},s.random=function(e,t){if(this.spriteFrames){var r=this.spriteFrames.length;(null==e||e<0)&&(e=0),(null==t||t>r)&&(t=r),this.index=Math.floor(Math.random()*(t-e)+e)}},s.next=function(){this.index++},s.previous=function(){this.index--},o(t,[{key:"index",get:function(){return this._index},set:function(e){e<0||(this._index=e%this.spriteFrames.length,this.node.getComponent(p).spriteFrame=this.spriteFrames[this._index])}}]),t}(d)).prototype,"spriteFrames",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[null]}}),t(F.prototype,"index",[x],Object.getOwnPropertyDescriptor(F.prototype,"index"),F.prototype),g=t(F.prototype,"_index",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),y=F))||y)||y)||y)||y));s._RF.pop()}}}));

System.register("chunks:///_virtual/BhvRollNumber.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i,r,l,a,o,n,u,s,c,p;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.inheritsLoose,r=t.initializerDefineProperty,l=t.assertThisInitialized,a=t.createClass},function(t){o=t.cclegacy,n=t._decorator,u=t.Label,s=t.Enum,c=t.lerp,p=t.Component}],execute:function(){var h,b,f,g,m,y,E,v,d,T,M,S,R,w,F,I,V,_,C;o._RF.push({},"72d13dwmG9LS4gkJhSuAp3F","BhvRollNumber",void 0);var N=n.ccclass,A=n.property,L=n.menu,z=function(t){return t[t.INTEGER=0]="INTEGER",t[t.FIXED_2=1]="FIXED_2",t[t.TIMER=2]="TIMER",t[t.PERCENTAGE=3]="PERCENTAGE",t[t.KMBT_FIXED2=4]="KMBT_FIXED2",t[t.CUSTOMER=5]="CUSTOMER",t}(z||{});t("BhvRollNumber",(h=L("OopsFramework/UI/Roll Number （滚动数字）"),b=A({type:u,tooltip:"需要滚动的 Label 组件,如果不进行设置，就会从自己的节点自动查找"}),f=A({tooltip:"当前的滚动值(开始的滚动值)"}),g=A({tooltip:"是否显示正负符号"}),m=A({tooltip:"滚动的目标值"}),y=A({tooltip:"滚动的线性差值",step:.01,max:1,min:0}),E=A({tooltip:"是否在开始时就播放"}),v=A({tooltip:"在滚动之前会等待几秒",step:.1,max:1,min:0}),d=A({type:s(z),tooltip:"是否在开始时就播放"}),N(T=h((S=e((M=function(t){function e(){for(var e,i=arguments.length,a=new Array(i),o=0;o<i;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a))||this,r(e,"label",S,l(e)),r(e,"value",R,l(e)),r(e,"showPlusSymbol",w,l(e)),r(e,"_targetValue",F,l(e)),r(e,"lerp",I,l(e)),r(e,"playAtStart",V,l(e)),r(e,"runWaitTimer",_,l(e)),r(e,"valueType",C,l(e)),e.onCustom=null,e.isScrolling=!1,e}i(e,t);var o=e.prototype;return o.onLoad=function(){null==this.label&&(this.label=this.node.getComponent(u)),this.playAtStart&&(this.updateLabel(),this.scroll())},o.scroll=function(){var t=this;this.isScrolling||(this.runWaitTimer>0?this.scheduleOnce((function(){t.isScrolling=!0}),this.runWaitTimer):this.isScrolling=!0)},o.stop=function(){this.value=this.targetValue,this.isScrolling=!1,this.updateLabel()},o.init=function(t,e,i){this.targetValue=e||0,this.value=t||0,this.lerp=i||.1},o.scrollTo=function(t){null!=t&&(this.targetValue=t)},o.updateLabel=function(){var t=this.value,e="";switch(this.valueType){case z.INTEGER:e=Math.round(t)+"";break;case z.FIXED_2:e=t.toFixed(2);break;case z.TIMER:e=function(t,e){void 0===t&&(t=0);void 0===e&&(e=!0);var i=Math.floor(t),r=Math.floor(i/3600),l=Math.floor(i%3600/60),a=i%60,o=""+l,n=""+a;a<10&&(n="0"+a);return e?(l<10&&(o="0"+l),r+":"+o+":"+n):(o=""+(l+60*r),l<10&&(o="0"+l),o+":"+n)}(t);break;case z.PERCENTAGE:e=Math.round(100*t)+"%";break;case z.KMBT_FIXED2:e=t>=Number.MAX_VALUE?"MAX":t>1e12?(t/1e12).toFixed(2)+"T":t>1e9?(t/1e9).toFixed(2)+"B":t>1e6?(t/1e6).toFixed(2)+"M":t>1e3?(t/1e3).toFixed(2)+"K":Math.round(t).toString();break;case z.CUSTOMER:this.onCustom&&(e=this.onCustom(this.value,this.targetValue))}if(this.showPlusSymbol&&(t>0?e="+"+e:t<0&&(e="-"+e)),this.label){if(e===this.label.string)return;this.label.string=e}},o.update=function(t){if(0!=this.isScrolling)return this.value=c(this.value,this.targetValue,this.lerp),this.updateLabel(),Math.abs(this.value-this.targetValue)<=1e-4?(this.value=this.targetValue,void(this.isScrolling=!1)):void 0},a(e,[{key:"targetValue",get:function(){return this._targetValue},set:function(t){this._targetValue=t,this.scroll()}}]),e}(p)).prototype,"label",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),R=e(M.prototype,"value",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),w=e(M.prototype,"showPlusSymbol",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),e(M.prototype,"targetValue",[m],Object.getOwnPropertyDescriptor(M.prototype,"targetValue"),M.prototype),F=e(M.prototype,"_targetValue",[A],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 100}}),I=e(M.prototype,"lerp",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return.1}}),V=e(M.prototype,"playAtStart",[E],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),_=e(M.prototype,"runWaitTimer",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),C=e(M.prototype,"valueType",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return z.INTEGER}}),T=M))||T)||T));o._RF.pop()}}}));

System.register("chunks:///_virtual/BhvSwitchPage.ts",["./rollupPluginModLoBabelHelpers.js","cc","./VMEnv.ts"],(function(e){var i,t,n,r,o,a,s,c,h,u;return{setters:[function(e){i=e.applyDecoratedDescriptor,t=e.inheritsLoose,n=e.initializerDefineProperty,r=e.assertThisInitialized,o=e.createClass},function(e){a=e.cclegacy,s=e._decorator,c=e.CCInteger,h=e.Component},function(e){u=e.VMEnv}],execute:function(){var d,p,g,l,f,x;a._RF.push({},"b3d083kncpDPqVztMtiq6DO","BhvSwitchPage",void 0);var v=s.ccclass,y=s.property,P=s.executeInEditMode,_=s.menu;e("BhvSwitchPage",(d=_("OopsFramework/UI/Switch Page （页面切换）"),p=y({type:c}),v(g=P(g=d((f=i((l=function(e){function i(){for(var i,t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];return i=e.call.apply(e,[this].concat(o))||this,n(i,"isLoopPage",f,r(i)),n(i,"_index",x,r(i)),i.preIndex=0,i._isChanging=!1,i}t(i,e);var a=i.prototype;return a.onLoad=function(){this.preIndex=this.index},a._updateEditorPage=function(e){if(u.editor)for(var i=this.node.children,t=0;t<i.length;t++){var n=i[t];n.active=t==e}},a._updatePage=function(e){var i=this.node.children,t=this.preIndex,n=this.index;if(t!==n){var r=i[t],o=i[n];r.active=!1,o.active=!0}},a.next=function(){return!this.isChanging&&(this.index++,!0)},a.previous=function(){return!this.isChanging&&(this.index--,!0)},a.setEventIndex=function(e,i){return this.index>=0&&null!=this.index&&!1===this.isChanging&&(this.index=i,!0)},o(i,[{key:"index",get:function(){return this._index},set:function(e){if(!this.isChanging){e=Math.round(e);var i=this.node.children.length-1;this.isLoopPage?(e>i&&(e=0),e<0&&(e=i)):(e>i&&(e=i),e<0&&(e=0)),this.preIndex=this._index,this._index=e,u.editor?this._updateEditorPage(e):this._updatePage(e)}}},{key:"isChanging",get:function(){return this._isChanging}}]),i}(h)).prototype,"isLoopPage",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),x=i(l.prototype,"_index",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),i(l.prototype,"index",[p],Object.getOwnPropertyDescriptor(l.prototype,"index"),l.prototype),g=l))||g)||g)||g));a._RF.pop()}}}));

System.register("chunks:///_virtual/BranchNode.ts",["./rollupPluginModLoBabelHelpers.js","cc","./BehaviorTree.ts","./BTreeNode.ts"],(function(n){var t,i,o,e;return{setters:[function(n){t=n.inheritsLoose},function(n){i=n.cclegacy},function(n){o=n.BehaviorTree},function(n){e=n.BTreeNode}],execute:function(){i._RF.push({},"beafaDMsw9FCbGDpLVmMfa1","BranchNode",void 0);n("BranchNode",function(n){function i(t){var i;return(i=n.call(this)||this).children=void 0,i._actualTask=void 0,i._runningNode=void 0,i._nodeRunning=void 0,i._blackboard=void 0,i.children=t||[],i}t(i,n);var e=i.prototype;return e.start=function(){this._actualTask=0,n.prototype.start.call(this)},e.run=function(n){0==this.children.length?this._control.fail():(this._blackboard=n,this.start(),this._actualTask<this.children.length&&this._run()),this.end()},e._run=function(n){var t=o.getNode(this.children[this._actualTask]);this._runningNode=t,t.setControl(this),t.start(this._blackboard),t.run(this._blackboard)},e.running=function(n){this._nodeRunning=n,this._control.running(n)},e.success=function(){this._nodeRunning=null,this._runningNode.end(this._blackboard)},e.fail=function(){this._nodeRunning=null,this._runningNode.end(this._blackboard)},i}(e));i._RF.pop()}}}));

System.register("chunks:///_virtual/BTreeNode.ts",["cc"],(function(t){var n;return{setters:[function(t){n=t.cclegacy}],execute:function(){n._RF.push({},"f0aeepAwndJP7wlpP6QKx06","BTreeNode",void 0);t("BTreeNode",function(){function t(){this._control=void 0,this.title=void 0,this.title=this.constructor.name}var n=t.prototype;return n.start=function(t){},n.end=function(t){},n.setControl=function(t){this._control=t},n.running=function(t){this._control.running(this)},n.success=function(){this._control.success()},n.fail=function(){this._control.fail()},t}());n._RF.pop()}}}));

System.register("chunks:///_virtual/BuildTimeConstants.ts",["cc","./env"],(function(t){var n,e;return{setters:[function(t){n=t.cclegacy},function(t){e=t}],execute:function(){n._RF.push({},"21a39/4HchJdJkSQKKKkLh9","BuildTimeConstants",void 0);var o=Object.keys(e).sort();t("BuildTimeConstants",(function(){var t=o.reduce((function(t,n){return Math.max(t,n.length)}),0),n=""+o.map((function(n){var o=e[n],u="boolean"==typeof o?o?"true":"false":o;return"\n"+n.padStart(t," ")+" : "+u}));console.log(n)}));n._RF.pop()}}}));

System.register("chunks:///_virtual/ButtonEffect.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./ButtonSimple.ts"],(function(t){var e,n,o,i,a,r,s,c,l,u,p,f,d;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,o=t.initializerDefineProperty,i=t.assertThisInitialized,a=t.createClass},function(t){r=t.cclegacy,s=t._decorator,c=t.Animation,l=t.AnimationClip,u=t.Node,p=t.Sprite},function(t){f=t.oops},function(t){d=t.default}],execute:function(){var h,m,y,g,T,_;r._RF.push({},"1be36hrGO5Oz6Eapg6ygW03","ButtonEffect",void 0);var b=s.ccclass,v=s.property,E=s.menu;t("default",(h=b("ButtonEffect"),m=E("OopsFramework/Button/ButtonEffect （有特效按钮）"),y=v({tooltip:"是否开启"}),h(g=m((_=e((T=function(t){function e(){for(var e,n=arguments.length,a=new Array(n),r=0;r<n;r++)a[r]=arguments[r];return e=t.call.apply(t,[this].concat(a))||this,o(e,"disabledEffect",_,i(e)),e.anim=void 0,e}n(e,t);var r=e.prototype;return r.onLoad=function(){this.anim=this.node.addComponent(c);var e=f.res.get("common/anim/button_scale_start",l),n=f.res.get("common/anim/button_scale_end",l);this.anim.defaultClip=e,this.anim.createState(e,null==e?void 0:e.name),this.anim.createState(n,null==n?void 0:n.name),this.node.on(u.EventType.TOUCH_START,this.onTouchtStart,this),t.prototype.onLoad.call(this)},r.onTouchtStart=function(t){this.disabledEffect||this.anim.play("button_scale_start")},r.onTouchEnd=function(e){this.disabledEffect||this.anim.play("button_scale_end"),t.prototype.onTouchEnd.call(this,e)},r.onDestroy=function(){this.node.off(u.EventType.TOUCH_START,this.onTouchtStart,this),t.prototype.onDestroy.call(this)},a(e,[{key:"grayscale",get:function(){return this.node.getComponent(p).grayscale},set:function(t){this.node.getComponent(p)&&(this.node.getComponent(p).grayscale=t)}}]),e}(d)).prototype,"disabledEffect",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),g=T))||g)||g));r._RF.pop()}}}));

System.register("chunks:///_virtual/ButtonSimple.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts"],(function(t){var e,n,o,i,r,u,c,a,p,s,l,f,h;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,o=t.initializerDefineProperty,i=t.assertThisInitialized,r=t.asyncToGenerator,u=t.regeneratorRuntime},function(t){c=t.cclegacy,a=t._decorator,p=t.AudioClip,s=t.Node,l=t.game,f=t.Component},function(t){h=t.oops}],execute:function(){var d,y,T,m,E,v,C,b,g,_;c._RF.push({},"8d645yObX1FvJfk2sbi0rxp","ButtonSimple",void 0);var w=a.ccclass,O=a.property,S=a.menu;t("default",(d=w("ButtonSimple"),y=S("OopsFramework/Button/ButtonSimple （节点按钮）"),T=O({tooltip:"是否只触发一次"}),m=O({tooltip:"每次触发间隔"}),E=O({tooltip:"触摸音效",type:p}),d(v=y((b=e((C=function(t){function e(){for(var e,n=arguments.length,r=new Array(n),u=0;u<n;u++)r[u]=arguments[u];return e=t.call.apply(t,[this].concat(r))||this,o(e,"once",b,i(e)),o(e,"interval",g,i(e)),o(e,"effect",_,i(e)),e.touchCount=0,e.touchtEndTime=0,e}n(e,t);var c=e.prototype;return c.onLoad=function(){this.node.on(s.EventType.TOUCH_END,this.onTouchEnd,this),this.node.on(s.EventType.TOUCH_CANCEL,this.onTouchEnd,this)},c.onTouchEnd=function(t){if(this.once){if(this.touchCount>0)return void(t.propagationStopped=!0);this.touchCount++}this.touchtEndTime&&l.totalTime-this.touchtEndTime<this.interval?t.propagationStopped=!0:(this.touchtEndTime=l.totalTime,this.playEffect())},c.playEffect=function(){var t=r(u().mark((function t(){return u().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:this.effect&&h.audio.playEffect(this.effect);case 1:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}(),c.onDestroy=function(){this.node.off(s.EventType.TOUCH_END,this.onTouchEnd,this),this.node.off(s.EventType.TOUCH_CANCEL,this.onTouchEnd,this)},e}(f)).prototype,"once",[T],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),g=e(C.prototype,"interval",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 500}}),_=e(C.prototype,"effect",[E],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),v=C))||v)||v));c._RF.pop()}}}));

System.register("chunks:///_virtual/ButtonTouchLong.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ButtonEffect.ts"],(function(t){var o,n,e,i,s,c,u,r;return{setters:[function(t){o=t.applyDecoratedDescriptor,n=t.inheritsLoose,e=t.initializerDefineProperty,i=t.assertThisInitialized},function(t){s=t.cclegacy,c=t._decorator,u=t.EventHandler},function(t){r=t.default}],execute:function(){var a,h,l,p,f,T,_,g;s._RF.push({},"da96en7WYpPTaPIkO1l/Nux","ButtonTouchLong",void 0);var v=c.ccclass,m=c.property,L=c.menu;t("ButtonTouchLong",(a=v("ButtonTouchLong"),h=L("OopsFramework/Button/ButtonTouchLong （长按按钮）"),l=m({tooltip:"长按时间（秒）"}),p=m({type:[u],tooltip:"长按时间（秒）"}),a(f=h((_=o((T=function(t){function o(){for(var o,n=arguments.length,s=new Array(n),c=0;c<n;c++)s[c]=arguments[c];return o=t.call.apply(t,[this].concat(s))||this,e(o,"time",_,i(o)),e(o,"clickEvents",g,i(o)),o._passTime=0,o._isTouchLong=!0,o._event=null,o}n(o,t);var s=o.prototype;return s.onLoad=function(){this._isTouchLong=!1,t.prototype.onLoad.call(this)},s.onTouchtStart=function(o){this._event=o,this._passTime=0,t.prototype.onTouchtStart.call(this,o)},s.onTouchEnd=function(o){this._passTime>this.time&&(o.propagationStopped=!0),this._event=null,this._passTime=0,this._isTouchLong=!1,t.prototype.onTouchEnd.call(this,o)},s.removeTouchLong=function(){this._event=null,this._isTouchLong=!1},s.update=function(t){var o=this;this._event&&!this._isTouchLong&&(this._passTime+=t,this._passTime>=this.time&&(this._isTouchLong=!0,this.clickEvents.forEach((function(t){t.emit([t.customEventData]),o.playEffect()})),this.removeTouchLong()))},o}(r)).prototype,"time",[l],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),g=o(T.prototype,"clickEvents",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),f=T))||f)||f));s._RF.pop()}}}));

System.register("chunks:///_virtual/CameraUtil.ts",["cc"],(function(e){var t,n,r;return{setters:[function(e){t=e.cclegacy,n=e.Vec3,r=e.view}],execute:function(){t._RF.push({},"95c77QQpp1EjKj8UBFCCdKu","CameraUtil",void 0);e("CameraUtil",function(){function e(){}return e.isInView=function(e,t){var i=e.node.getWorldPosition(),o=e.worldToScreen(t),c=n.normalize(new n,t.subtract(i)),u=e.node.forward,a=n.dot(u,c),s=r.getViewportRect();return a>0&&o.x<=s.width&&o.x>=0&&o.y<=s.height&&o.y>=0},e}());t._RF.pop()}}}));

System.register("chunks:///_virtual/CCComp.ts",["./rollupPluginModLoBabelHelpers.js","cc","./GameComponent.ts"],(function(o){var t,e,n,c;return{setters:[function(o){t=o.inheritsLoose},function(o){e=o.cclegacy,n=o._decorator},function(o){c=o.GameComponent}],execute:function(){var r,i;e._RF.push({},"dd207fiyGJLf5r+bkiMgwdt","CCComp",void 0);var a=n.ccclass;n.property,o("CCComp",a("CCComp")(((i=function(o){function e(){for(var t,e=arguments.length,n=new Array(e),c=0;c<e;c++)n[c]=arguments[c];return(t=o.call.apply(o,[this].concat(n))||this).canRecycle=void 0,t.ent=void 0,t}return t(e,o),e}(c)).tid=-1,i.compName=void 0,r=i))||r);e._RF.pop()}}}));

System.register("chunks:///_virtual/CCVMParentComp.ts",["./rollupPluginModLoBabelHelpers.js","cc","./VMParent.ts"],(function(t){var e,n,r,o;return{setters:[function(t){e=t.inheritsLoose},function(t){n=t.cclegacy,r=t._decorator},function(t){o=t.default}],execute:function(){var c,a;n._RF.push({},"5908aTmM1lItpXgo7ROpQeQ","CCVMParentComp",void 0);var i=r.ccclass;r.property,t("CCVMParentComp",i("CCVMParentComp")(((a=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))||this).canRecycle=void 0,e.ent=void 0,e}return e(n,t),n}(o)).tid=-1,a.compName=void 0,c=a))||c);n._RF.pop()}}}));

System.register("chunks:///_virtual/Collection.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var r,e,a,i;return{setters:[function(t){r=t.inheritsLoose,e=t.createClass,a=t.wrapNativeSuper},function(t){i=t.cclegacy}],execute:function(){i._RF.push({},"1dcf5AtQQVK3KQ/2jHHD5gi","Collection",void 0);t("Collection",function(t){function a(){for(var r,e=arguments.length,a=new Array(e),i=0;i<e;i++)a[i]=arguments[i];return(r=t.call.apply(t,[this].concat(a))||this)._array=[],r}r(a,t);var i=a.prototype;return i.set=function(r,e){if(this.has(r)){var a=this.get(r),i=this._array.indexOf(a);this._array[i]=e}else this._array.push(e);return t.prototype.set.call(this,r,e)},i.delete=function(r){var e=this.get(r);if(e){var a=this._array.indexOf(e);return a>-1&&this._array.splice(a,1),t.prototype.delete.call(this,r)}return!1},i.clear=function(){this._array.splice(0,this._array.length),t.prototype.clear.call(this)},e(a,[{key:"array",get:function(){return this._array}}]),a}(a(Map)));i._RF.pop()}}}));

System.register("chunks:///_virtual/CommonPrompt.ts",["./rollupPluginModLoBabelHelpers.js","cc","./LanguageLabel.ts","./Oops.ts"],(function(n){var t,e,o,i,c,l,a,r,s;return{setters:[function(n){t=n.applyDecoratedDescriptor,e=n.inheritsLoose,o=n.initializerDefineProperty,i=n.assertThisInitialized},function(n){c=n.cclegacy,l=n._decorator,a=n.Component},function(n){r=n.LanguageLabel},function(n){s=n.oops}],execute:function(){var u,f,h,b,p,g,d,m,_,y,C;c._RF.push({},"653bf8VPC5Fn49zFJFqXVgx","CommonPrompt",void 0);var F=l.ccclass,k=l.property;n("CommonPrompt",(u=F("CommonPrompt"),f=k(r),h=k(r),b=k(r),p=k(r),u((m=t((d=function(n){function t(){for(var t,e=arguments.length,c=new Array(e),l=0;l<e;l++)c[l]=arguments[l];return t=n.call.apply(n,[this].concat(c))||this,o(t,"lab_title",m,i(t)),o(t,"lab_content",_,i(t)),o(t,"lab_ok",y,i(t)),o(t,"lab_cancel",C,i(t)),t.config={},t}e(t,n);var c=t.prototype;return c.onAdded=function(n){return this.config=n||{},this.setTitle(),this.setContent(),this.setBtnOkLabel(),this.setBtnCancelLabel(),this.node.active=!0,!0},c.setTitle=function(){this.lab_title.dataID=this.config.title},c.setContent=function(){this.lab_content.dataID=this.config.content},c.setBtnOkLabel=function(){this.lab_ok.dataID=this.config.okWord},c.setBtnCancelLabel=function(){this.lab_cancel&&(this.lab_cancel.dataID=this.config.cancelWord,this.lab_cancel.node.parent.active=this.config.needCancel||!1)},c.onOk=function(){"function"==typeof this.config.okFunc&&this.config.okFunc(),this.close()},c.onClose=function(){"function"==typeof this.config.closeFunc&&this.config.closeFunc(),this.close()},c.onCancel=function(){"function"==typeof this.config.cancelFunc&&this.config.cancelFunc(),this.close()},c.close=function(){s.gui.removeByNode(this.node)},c.onDestroy=function(){this.config=null},t}(a)).prototype,"lab_title",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),_=t(d.prototype,"lab_content",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),y=t(d.prototype,"lab_ok",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),C=t(d.prototype,"lab_cancel",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),g=d))||g));c._RF.pop()}}}));

System.register("chunks:///_virtual/Config.ts",["cc"],(function(i){var t;return{setters:[function(i){t=i.cclegacy}],execute:function(){t._RF.push({},"5034dEezo5Frr6dhZGVgmTh","Config",void 0);i("Config",(function(){this.game=void 0,this.query=void 0}));t._RF.pop()}}}));

System.register("chunks:///_virtual/dataInterface.ts",["cc"],(function(){var t;return{setters:[function(e){t=e.cclegacy}],execute:function(){t._RF.push({},"b30aaw2HDRPO6O4jvGTGKhD","dataInterface",void 0),t._RF.pop()}}}));

System.register("chunks:///_virtual/DateExt.ts",["cc"],(function(){var e;return{setters:[function(t){e=t.cclegacy}],execute:function(){e._RF.push({},"80ebbBz8etB5qijWdYrU2HH","DateExt",void 0),Date.prototype.format=function(e){var t=this.getFullYear(),r=this.getMonth()+1,c=this.getDate(),s=this.getHours(),a=this.getMinutes(),i=this.getSeconds();return e.replace("yy",t.toString()).replace("mm",(r<10?"0":"")+r).replace("dd",(c<10?"0":"")+c).replace("hh",(s<10?"0":"")+s).replace("mm",(a<10?"0":"")+a).replace("ss",(i<10?"0":"")+i)},e._RF.pop()}}}));

System.register("chunks:///_virtual/Decorator.ts",["./rollupPluginModLoBabelHelpers.js","cc","./BehaviorTree.ts","./BTreeNode.ts"],(function(t){var e,o,n,r;return{setters:[function(t){e=t.inheritsLoose},function(t){o=t.cclegacy},function(t){n=t.BehaviorTree},function(t){r=t.BTreeNode}],execute:function(){o._RF.push({},"0455agxsbxHlYleJPDpJX3l","Decorator",void 0);t("Decorator",function(t){function o(e){var o;return(o=t.call(this)||this).node=void 0,e&&(o.node=n.getNode(e)),o}e(o,t);var r=o.prototype;return r.setNode=function(t){this.node=n.getNode(t)},r.start=function(){this.node.setControl(this),this.node.start(),t.prototype.start.call(this)},r.end=function(){this.node.end()},r.run=function(t){this.node.run(t)},o}(r));o._RF.pop()}}}));

System.register("chunks:///_virtual/Defines.ts",["cc"],(function(n){var s;return{setters:[function(n){s=n.cclegacy}],execute:function(){s._RF.push({},"82d3a9c71JEkI95d3qscHm8","Defines",void 0);n("ViewParams",(function(){this.config=null,this.params=null,this.callbacks=null,this.valid=!0,this.node=null}));s._RF.pop()}}}));

System.register("chunks:///_virtual/DelegateComponent.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts"],(function(e){var n,o,t,s,r,a,c;return{setters:[function(e){n=e.inheritsLoose,o=e.asyncToGenerator,t=e.regeneratorRuntime},function(e){s=e.cclegacy,r=e._decorator,a=e.Component},function(e){c=e.oops}],execute:function(){var i;s._RF.push({},"d8f1fGRD7dBzIeBSkOpd/Py","DelegateComponent",void 0);var p=r.ccclass;e("DelegateComponent",p("DelegateComponent")(i=function(e){function s(){for(var n,o=arguments.length,t=new Array(o),s=0;s<o;s++)t[s]=arguments[s];return(n=e.call.apply(e,[this].concat(t))||this).vp=null,n.onCloseWindow=null,n}n(s,e);var r=s.prototype;return r.add=function(){var e=this;return new Promise(o(t().mark((function n(o,s){var r,a,c;return t().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:r=0;case 1:if(!(r<e.node.components.length)){n.next=14;break}if(a=e.node.components[r],!(c=a.onAdded)){n.next=11;break}return n.next=7,c.call(a,e.vp.params);case 7:if(n.t0=n.sent,0!=n.t0){n.next=11;break}return o(!1),n.abrupt("return");case 11:r++,n.next=1;break;case 14:"function"==typeof e.vp.callbacks.onAdded&&e.vp.callbacks.onAdded(e.node,e.vp.params),o(!0);case 16:case"end":return n.stop()}}),n)}))))},r.remove=function(e){this.vp.valid&&(this.applyComponentsFunction(this.node,"onBeforeRemove",this.vp.params),"function"==typeof this.vp.callbacks.onBeforeRemove?this.vp.callbacks.onBeforeRemove(this.node,this.onBeforeRemoveNext.bind(this,e)):this.removed(this.vp,e))},r.onBeforeRemoveNext=function(e){this.removed(this.vp,e)},r.removed=function(e,n){e.valid=!1,e.callbacks&&"function"==typeof e.callbacks.onRemoved&&e.callbacks.onRemoved(this.node,e.params),this.onCloseWindow&&this.onCloseWindow(e),n?(this.node.destroy(),c.res.release(e.config.prefab)):this.node.removeFromParent()},r.onDestroy=function(){this.applyComponentsFunction(this.node,"onRemoved",this.vp.params),this.vp=null},r.applyComponentsFunction=function(e,n,o){for(var t=0;t<e.components.length;t++){var s=e.components[t],r=s[n];r&&r.call(s,o)}},s}(a))||i);s._RF.pop()}}}));

System.register("chunks:///_virtual/DemoViewComp.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ECS.ts","./CCComp.ts"],(function(e){var o,t,n,r,i;return{setters:[function(e){o=e.inheritsLoose},function(e){t=e.cclegacy,n=e._decorator},function(e){r=e.ecs},function(e){i=e.CCComp}],execute:function(){var s;t._RF.push({},"78b5dVjj81IxoHGx2PAK8bT","DemoViewComp",void 0);var c=n.ccclass;n.property,e("DemoViewComp",c("DemoViewComp")(s=r.register("DemoView",!1)(s=function(e){function t(){return e.apply(this,arguments)||this}o(t,e);var n=t.prototype;return n.start=function(){},n.reset=function(){this.node.destroy()},t}(i))||s)||s);t._RF.pop()}}}));

System.register("chunks:///_virtual/DeviceUtil.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,r,n;return{setters:[function(t){e=t.createClass},function(t){r=t.cclegacy,n=t.sys}],execute:function(){r._RF.push({},"287a3oHJD1OrKr6dp6idwn9","DeviceUtil",void 0);t("DeviceUtil",function(){function t(){}return t.getSafeAreaRect=function(){return n.getSafeAreaRect()},e(t,null,[{key:"platform",get:function(){return n.platform}},{key:"os",get:function(){return n.os}},{key:"isNative",get:function(){return n.isNative}},{key:"isBrowser",get:function(){return n.isBrowser}},{key:"isMobile",get:function(){return n.isMobile}},{key:"isAndroid",get:function(){return n.platform===n.Platform.ANDROID}},{key:"isIPhone",get:function(){return n.platform===n.Platform.IOS}},{key:"isMobileBrowser",get:function(){return n.platform===n.Platform.MOBILE_BROWSER}},{key:"isDesktopBrowser",get:function(){return n.platform===n.Platform.DESKTOP_BROWSER}},{key:"isWeChat",get:function(){return n.platform===n.Platform.WECHAT_GAME}},{key:"isByteDance",get:function(){return n.platform===n.Platform.BYTEDANCE_MINI_GAME}},{key:"isBaidu",get:function(){return n.platform===n.Platform.BAIDU_MINI_GAME}},{key:"isVivo",get:function(){return n.platform===n.Platform.VIVO_MINI_GAME}},{key:"isOPPO",get:function(){return n.platform===n.Platform.OPPO_MINI_GAME}},{key:"isXiaomi",get:function(){return n.platform===n.Platform.XIAOMI_QUICK_GAME}},{key:"isHuawei",get:function(){return n.platform===n.Platform.HUAWEI_QUICK_GAME}},{key:"isAlipay",get:function(){return n.platform===n.Platform.ALIPAY_MINI_GAME}},{key:"isOpenHarmony",get:function(){return n.platform===n.Platform.OPENHARMONY}}]),t}());r._RF.pop()}}}));

System.register("chunks:///_virtual/DirectorExt.ts",["cc"],(function(){var e,t,c,i;return{setters:[function(r){e=r.cclegacy,t=r.Director,c=r.director,i=r.js}],execute:function(){if(e._RF.push({},"37f48DDLR1EXKhzn+7pLlWB","DirectorExt",void 0),!t.prototype["__$cc-director-speed-extension$__"]){t.prototype["__$cc-director-speed-extension$__"]=!0;var r=c.tick.bind(c);c.tick=function(e){e*=c.globalGameTimeScale,r(e)},i.mixin(t.prototype,{globalGameTimeScale:1})}e._RF.pop()}}}));

System.register("chunks:///_virtual/ECS.ts",["cc","./ECSComp.ts","./ECSEntity.ts","./ECSMatcher.ts","./ECSModel.ts","./ECSSystem.ts"],(function(t){var n,e,i,o,r,c,u,s;return{setters:[function(t){n=t.cclegacy},function(t){e=t.ECSComp},function(t){i=t.ECSEntity},function(t){o=t.ECSMatcher},function(t){r=t.ECSModel},function(t){c=t.ECSSystem,u=t.ECSRootSystem,s=t.ECSComblockSystem}],execute:function(){var d;t("ecs",void 0),n._RF.push({},"be87fT76plLkaUKEYpkuV0n","ECS",void 0),function(t){var n=t.Entity=i;t.Comp=e,t.System=c,t.RootSystem=u,t.ComblockSystem=s;function a(t){return function(){var t=new n;return t.eid=r.eid++,r.eid2Entity.set(t.eid,t),t}().add(t)}t.register=function(t,n){return void 0===n&&(n=!0),function(e){if(e.s){var i=r.systems.get(t);null==i&&(i=new d.System,r.systems.set(t,i)),i.add(new e)}else if(null==e.tid)r.entityCtors.set(e,t);else{if(-1!==e.tid)throw new Error("重复注册组件： "+t+".");e.tid=r.compTid++,e.compName=t,n?(r.compCtors.push(e),r.compPools.set(e.tid,[])):r.compCtors.push(null),r.compAddOrRemove.set(e.tid,[])}}},t.getEntity=function(t){var n=r.entityCtors.get(t);null==n&&console.error(t.name+" 实体没有注册");var e=(r.entityPool.get(n)||[]).pop();return e||((e=new t).eid=r.eid++,e.name=n),e.init?(e.isValid=!0,e.init()):console.error(t.name+" 实体缺少 init 方法初始化默认组件"),r.eid2Entity.set(e.eid,e),e},t.query=function(t){var n=r.groups.get(t.mid);return n||(n=r.createGroup(t),r.eid2Entity.forEach(n.onComponentAddOrRemove,n)),n.matchEntities},t.clear=function(){r.eid2Entity.forEach((function(t){t.destroy()})),r.groups.forEach((function(t){t.clear()})),r.compAddOrRemove.forEach((function(t){t.length=0})),r.eid2Entity.clear(),r.groups.clear()},t.getEntityByEid=function(t){return r.eid2Entity.get(t)},t.activeEntityCount=function(){return r.eid2Entity.size},t.allOf=function(){var t;return(t=new o).allOf.apply(t,arguments)},t.anyOf=function(){var t;return(t=new o).anyOf.apply(t,arguments)},t.onlyOf=function(){var t;return(t=new o).onlyOf.apply(t,arguments)},t.excludeOf=function(){var t;return(t=new o).excludeOf.apply(t,arguments)},t.getSingleton=function(t){if(!r.tid2comp.has(t.tid)){var n=a(t);r.tid2comp.set(t.tid,n)}return r.tid2comp.get(t.tid)},t.addSingleton=function(t){var n=t.constructor.tid;r.tid2comp.has(n)||r.tid2comp.set(n,t)}}(d||(d=t("ecs",{}))),n._RF.pop()}}}));

System.register("chunks:///_virtual/ECSComp.ts",["cc"],(function(t){var c;return{setters:[function(t){c=t.cclegacy}],execute:function(){c._RF.push({},"3d017ZhAZRH4bPfpLr5++8F","ECSComp",void 0);var e=t("ECSComp",(function(){this.ent=void 0,this.canRecycle=!0}));e.tid=-1,e.compName=void 0,c._RF.pop()}}}));

System.register("chunks:///_virtual/ECSEntity.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ECSMask.ts","./ECSModel.ts"],(function(t){var i,e,n,o;return{setters:[function(t){i=t.createClass},function(t){e=t.cclegacy},function(t){n=t.ECSMask},function(t){o=t.ECSModel}],execute:function(){function s(t,i){for(var e=o.compAddOrRemove.get(i),n=e.length-1;n>=0;n--)e[n](t);o.tid2comp.has(i)&&o.tid2comp.delete(i)}e._RF.push({},"1fb62WC3PZPvLhjoZQfrREJ","ECSEntity",void 0);t("ECSEntity",function(){function t(){this.eid=-1,this.name="",this.isValid=!0,this.mask=new n,this.compTid2Ctor=new Map,this.compTid2Obj=new Map,this._parent=null,this._children=null}var e=t.prototype;return e.addChild=function(t){t._parent=this,this.children.set(t.eid,t)},e.removeChild=function(t,i){void 0===i&&(i=!0),null!=this.children&&(t.parent=null,this.children.delete(t.eid),i&&t.destroy())},e.add=function(t,i){if(void 0===i&&(i=!1),"function"==typeof t){var e,n=t.tid;if(-1===t.tid)throw Error("【"+this.name+"】实体【"+t.compName+"】组件未注册");if(this.compTid2Ctor.has(n)){if(!i)return console.log("【"+this.name+"】实体【"+t.compName+"】组件已存在"),this[t.compName];this.remove(t)}return this.mask.set(n),this.compTid2Obj.has(n)?(e=this.compTid2Obj.get(n),this.compTid2Obj.delete(n)):e=function(t){var i=o.compCtors[t.tid];if(!i)throw Error("没有找到该组件的构造函数，检查"+t.compName+"是否为不可构造的组件");return o.compPools.get(t.tid).pop()||new i}(t),this[t.compName]=e,this.compTid2Ctor.set(n,t),e.ent=this,s(this,n),e}var r=t.constructor,h=r.tid;if(-1===h||null==h)throw Error("【"+this.name+"】实体【"+r.name+"】组件未注册");if(this.compTid2Ctor.has(h))throw Error("【"+this.name+"】实体【"+r.name+"】组件已经存在");return this.mask.set(h),this[r.compName]=t,this.compTid2Ctor.set(h,r),t.ent=this,t.canRecycle=!1,s(this,h),this},e.addComponents=function(){for(var t=arguments.length,i=new Array(t),e=0;e<t;e++)i[e]=arguments[e];for(var n=0,o=i;n<o.length;n++){var s=o[n];this.add(s)}return this},e.get=function(t){return this[t.compName]},e.has=function(t){return"number"==typeof t?this.mask.has(t):this.compTid2Ctor.has(t.tid)},e.remove=function(t,i){void 0===i&&(i=!0);var e=!1,n=t.tid,r=t.compName;if(this.mask.has(n)){e=!0;var h=this[t.compName];if(h.ent=null,i){if(h.reset(),h.canRecycle)o.compPools.get(n).push(h)}else this.compTid2Obj.set(n,h)}e&&(this[r]=null,this.mask.delete(n),this.compTid2Ctor.delete(n),s(this,n))},e.destroy=function(){var t=this;this.isValid=!1,this._parent&&(this._parent.removeChild(this,!1),this._parent=null),this._children&&(this._children.forEach((function(i){t.removeChild(i)})),this._children=null),this.compTid2Ctor.forEach(this._remove,this),function(t){if(o.eid2Entity.has(t.eid)){var i=o.entityPool.get(t.name);null==i&&(i=[],o.entityPool.set(t.name,i)),i.push(t),o.eid2Entity.delete(t.eid)}else console.warn("试图销毁不存在的实体")}(this),this.compTid2Obj.clear()},e._remove=function(t){this.remove(t,!0)},i(t,[{key:"parent",get:function(){return this._parent},set:function(t){this._parent=t}},{key:"children",get:function(){return null==this._children&&(this._children=new Map),this._children}}]),t}());e._RF.pop()}}}));

System.register("chunks:///_virtual/ECSGroup.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i;return{setters:[function(t){e=t.createClass},function(t){i=t.cclegacy}],execute:function(){i._RF.push({},"c21a23o9P5FNJamcMmoYWfs","ECSGroup",void 0);t("ECSGroup",function(){function t(t){this.matcher=void 0,this._matchEntities=new Map,this._entitiesCache=null,this.count=0,this._enteredEntities=null,this._removedEntities=null,this.matcher=t}var i=t.prototype;return i.onComponentAddOrRemove=function(t){this.matcher.isMatch(t)?(this._matchEntities.set(t.eid,t),this._entitiesCache=null,this.count++,this._enteredEntities&&(this._enteredEntities.set(t.eid,t),this._removedEntities.delete(t.eid))):this._matchEntities.has(t.eid)&&(this._matchEntities.delete(t.eid),this._entitiesCache=null,this.count--,this._enteredEntities&&(this._enteredEntities.delete(t.eid),this._removedEntities.set(t.eid,t)))},i.watchEntityEnterAndRemove=function(t,e){this._enteredEntities=t,this._removedEntities=e},i.clear=function(){var t,e;this._matchEntities.clear(),this._entitiesCache=null,this.count=0,null==(t=this._enteredEntities)||t.clear(),null==(e=this._removedEntities)||e.clear()},e(t,[{key:"matchEntities",get:function(){return null===this._entitiesCache&&(this._entitiesCache=Array.from(this._matchEntities.values())),this._entitiesCache}},{key:"entity",get:function(){return this.matchEntities[0]}}]),t}());i._RF.pop()}}}));

System.register("chunks:///_virtual/ECSMask.ts",["cc","./ECSModel.ts"],(function(t){var s,i;return{setters:[function(t){s=t.cclegacy},function(t){i=t.ECSModel}],execute:function(){s._RF.push({},"d18694PPbtGs5Ipgo/vaJBX","ECSMask",void 0);t("ECSMask",function(){function t(){this.mask=void 0,this.size=0;var t=Math.ceil(i.compTid/31);this.mask=new Uint32Array(t),this.size=t}var s=t.prototype;return s.set=function(t){this.mask[t/31>>>0]|=1<<t%31},s.delete=function(t){this.mask[t/31>>>0]&=~(1<<t%31)},s.has=function(t){return!!(this.mask[t/31>>>0]&1<<t%31)},s.or=function(t){for(var s=0;s<this.size;s++)if(this.mask[s]&t.mask[s])return!0;return!1},s.and=function(t){for(var s=0;s<this.size;s++)if((this.mask[s]&t.mask[s])!=this.mask[s])return!1;return!0},s.clear=function(){for(var t=0;t<this.size;t++)this.mask[t]=0},t}());s._RF.pop()}}}));

System.register("chunks:///_virtual/ECSMatcher.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ECSMask.ts","./ECSModel.ts"],(function(t){var i,n,r,e,s,h,u;return{setters:[function(t){i=t.construct,n=t.createForOfIteratorHelperLoose,r=t.createClass,e=t.inheritsLoose},function(t){s=t.cclegacy},function(t){h=t.ECSMask},function(t){u=t.ECSModel}],execute:function(){s._RF.push({},"37e8arlqPlN7amZYyHFvBIp","ECSMatcher",void 0);var o=1,c=(t("ECSMatcher",function(){function t(){this.rules=[],this._indices=null,this.isMatch=void 0,this.mid=-1,this._key=null,this.mid=o++}var e=t.prototype;return e.anyOf=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.rules.push(i(a,n)),this.bindMatchMethod(),this},e.allOf=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.rules.push(i(f,n)),this.bindMatchMethod(),this},e.onlyOf=function(){for(var t=arguments.length,r=new Array(t),e=0;e<t;e++)r[e]=arguments[e];this.rules.push(i(f,r));for(var s,h=[],o=n(u.compCtors);!(s=o()).done;){var c=s.value;r.indexOf(c)<0&&h.push(c)}return this.rules.push(i(l,h)),this.bindMatchMethod(),this},e.excludeOf=function(){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return this.rules.push(i(l,n)),this.bindMatchMethod(),this},e.bindMatchMethod=function(){1===this.rules.length?this.isMatch=this.isMatch1:2===this.rules.length?this.isMatch=this.isMatch2:this.isMatch=this.isMatchMore},e.isMatch1=function(t){return this.rules[0].isMatch(t)},e.isMatch2=function(t){return this.rules[0].isMatch(t)&&this.rules[1].isMatch(t)},e.isMatchMore=function(t){for(var i,r=n(this.rules);!(i=r()).done;){if(!i.value.isMatch(t))return!1}return!0},e.clone=function(){var i=new t;return i.mid=o++,this.rules.forEach((function(t){return i.rules.push(t)})),i},r(t,[{key:"key",get:function(){if(!this._key){for(var t="",i=0;i<this.rules.length;i++)t+=this.rules[i].getKey(),i<this.rules.length-1&&(t+=" && ");this._key=t}return this._key}},{key:"indices",get:function(){var t=this;return null===this._indices&&(this._indices=[],this.rules.forEach((function(i){Array.prototype.push.apply(t._indices,i.indices)}))),this._indices}}]),t}()),function(){function t(){this.indices=[],this.mask=new h;for(var t=-1,i=arguments.length,n=new Array(i),r=0;r<i;r++)n[r]=arguments[r];for(var e=n.length,s=0;s<e;s++){if(-1==(t="number"==typeof n[s]?n[s]:n[s].tid))throw Error("存在没有注册的组件！");this.mask.set(t),this.indices.indexOf(t)<0&&this.indices.push(t)}e>1&&this.indices.sort((function(t,i){return t-i}))}return t.prototype.toString=function(){return this.indices.join("-")},t}()),a=function(t){function i(){return t.apply(this,arguments)||this}e(i,t);var n=i.prototype;return n.isMatch=function(t){return this.mask.or(t.mask)},n.getKey=function(){return"anyOf:"+this.toString()},i}(c),f=function(t){function i(){return t.apply(this,arguments)||this}e(i,t);var n=i.prototype;return n.isMatch=function(t){return this.mask.and(t.mask)},n.getKey=function(){return"allOf:"+this.toString()},i}(c),l=function(t){function i(){return t.apply(this,arguments)||this}e(i,t);var n=i.prototype;return n.getKey=function(){return"excludeOf:"+this.toString()},n.isMatch=function(t){return!this.mask.or(t.mask)},i}(c);s._RF.pop()}}}));

System.register("chunks:///_virtual/ECSModel.ts",["cc","./ECSGroup.ts"],(function(e){var o,n;return{setters:[function(e){o=e.cclegacy},function(e){n=e.ECSGroup}],execute:function(){o._RF.push({},"1d60egM6r9Gta4Op3VABSGM","ECSModel",void 0);var t=e("ECSModel",function(){function e(){}return e.createGroup=function(o){var t=e.groups.get(o.mid);if(!t){t=new n(o),e.groups.set(o.mid,t);for(var r=o.indices,p=0;p<r.length;p++)e.compAddOrRemove.get(r[p]).push(t.onComponentAddOrRemove.bind(t))}return t},e}());t.eid=1,t.entityCtors=new Map,t.entityPool=new Map,t.eid2Entity=new Map,t.compTid=0,t.compPools=new Map,t.compCtors=[],t.compAddOrRemove=new Map,t.tid2comp=new Map,t.groups=new Map,t.systems=new Map,o._RF.pop()}}}));

System.register("chunks:///_virtual/ECSSystem.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ECSModel.ts"],(function(t){var e,i,s,n;return{setters:[function(t){e=t.createForOfIteratorHelperLoose,i=t.createClass},function(t){s=t.cclegacy},function(t){n=t.ECSModel}],execute:function(){s._RF.push({},"9261fRWg2RBY5kxbFJsY1QC","ECSSystem",void 0),t("ECSComblockSystem",function(){function t(){this.group=void 0,this.dt=0,this.enteredEntities=null,this.removedEntities=null,this.hasEntityEnter=!1,this.hasEntityRemove=!1,this.hasUpdate=!1,this.tmpExecute=null,this.execute=void 0;var t=Object.hasOwnProperty,e=Object.getPrototypeOf(this),i=t.call(e,"entityEnter"),s=t.call(e,"entityRemove"),o=t.call(e,"firstUpdate"),r=t.call(e,"update");this.hasEntityEnter=i,this.hasEntityRemove=s,this.hasUpdate=r,i||s?(this.enteredEntities=new Map,this.removedEntities=new Map,this.execute=this.execute1,this.group=n.createGroup(this.filter()),this.group.watchEntityEnterAndRemove(this.enteredEntities,this.removedEntities)):(this.execute=this.execute0,this.group=n.createGroup(this.filter())),o&&(this.tmpExecute=this.execute,this.execute=this.updateOnce)}var i=t.prototype;return i.init=function(){},i.onDestroy=function(){},i.hasEntity=function(){return this.group.count>0},i.updateOnce=function(t){if(0!==this.group.count){if(this.dt=t,this.enteredEntities.size>0){for(var i,s=this.enteredEntities.values(),n=e(s);!(i=n()).done;){var o=i.value;this.entityEnter(o)}this.enteredEntities.clear()}for(var r,h=e(this.group.matchEntities);!(r=h()).done;){var u=r.value;this.firstUpdate(u)}this.execute=this.tmpExecute,this.execute(t),this.tmpExecute=null}},i.execute0=function(t){if(0!==this.group.count&&(this.dt=t,this.hasUpdate))for(var i,s=e(this.group.matchEntities);!(i=s()).done;){var n=i.value;this.update(n)}},i.execute1=function(t){var i;if(this.removedEntities.size>0){if(this.hasEntityRemove){i=this.removedEntities.values();for(var s,n=e(i);!(s=n()).done;){var o=s.value;this.entityRemove(o)}}this.removedEntities.clear()}if(0!==this.group.count){if(this.dt=t,this.enteredEntities.size>0){if(this.hasEntityEnter){i=this.enteredEntities.values();for(var r,h=e(i);!(r=h()).done;){var u=r.value;this.entityEnter(u)}}this.enteredEntities.clear()}if(this.hasUpdate)for(var c,a=e(this.group.matchEntities);!(c=a()).done;){var l=c.value;this.update(l)}}},t}()).s=!0;t("ECSRootSystem",function(){function t(){this.executeSystemFlows=[],this.systemCnt=0}var e=t.prototype;return e.add=function(t){return t instanceof o?Array.prototype.push.apply(this.executeSystemFlows,t.comblockSystems):this.executeSystemFlows.push(t),this.systemCnt=this.executeSystemFlows.length,this},e.init=function(){var t=this;n.systems.forEach((function(e){return t.add(e)})),this.executeSystemFlows.forEach((function(t){return t.init()}))},e.execute=function(t){for(var e=0;e<this.systemCnt;e++)this.executeSystemFlows[e].execute(t)},e.clear=function(){this.executeSystemFlows.forEach((function(t){return t.onDestroy()}))},t}());var o=t("ECSSystem",function(){function t(){this._comblockSystems=[]}return t.prototype.add=function(e){return e instanceof t?(Array.prototype.push.apply(this._comblockSystems,e._comblockSystems),e._comblockSystems.length=0):this._comblockSystems.push(e),this},i(t,[{key:"comblockSystems",get:function(){return this._comblockSystems}}]),t}());s._RF.pop()}}}));

System.register("chunks:///_virtual/Effect2DFollow3D.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./MathUtil.ts"],(function(t){var e,o,i,n,r,a,s,l,c,u,p;return{setters:[function(t){e=t.applyDecoratedDescriptor,o=t.inheritsLoose,i=t.initializerDefineProperty,n=t.assertThisInitialized},function(t){r=t.cclegacy,a=t._decorator,s=t.Node,l=t.Vec3,c=t.Component},function(t){u=t.oops},function(t){p=t.MathUtil}],execute:function(){var f,d,h,m,y,w,b,v;r._RF.push({},"f04f92UNY1J34UPA0VrEIsH","Effect2DFollow3D",void 0);var D=a.ccclass,g=a.property;t("Effect2DFollow3D",(f=D("Effect2DFollow3D"),d=g({type:s}),h=g({type:s}),f((w=e((y=function(t){function e(){for(var e,o=arguments.length,r=new Array(o),a=0;a<o;a++)r[a]=arguments[a];return e=t.call.apply(t,[this].concat(r))||this,i(e,"node3d",w,n(e)),i(e,"nodeUi",b,n(e)),i(e,"distance",v,n(e)),e.camera=null,e.pos=new l,e}o(e,t);var r=e.prototype;return r.setTarget=function(t){this.node3d=t},r.start=function(){var t=this.zoom();this.node.setScale(t,t,1)},r.lateUpdate=function(t){var e=this.zoom();e=p.lerp(this.node.scale.x,e,.1),this.node.setScale(e,e,1)},r.zoom=function(){this.camera.convertToUINode(this.node3d.worldPosition,u.gui.game,this.pos),this.nodeUi.setPosition(this.pos),l.transformMat4(this.pos,this.node3d.worldPosition,this.camera._camera.matView);var t=this.distance/Math.abs(this.pos.z);return Math.floor(100*t)/100},e}(c)).prototype,"node3d",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),b=e(y.prototype,"nodeUi",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),v=e(y.prototype,"distance",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 10}}),m=y))||m));r._RF.pop()}}}));

System.register("chunks:///_virtual/EffectDelayRelease.ts",["./rollupPluginModLoBabelHelpers.js","cc","./EffectSingleCase.ts"],(function(e){var t,n,i,a,r,c,l,o;return{setters:[function(e){t=e.applyDecoratedDescriptor,n=e.inheritsLoose,i=e.initializerDefineProperty,a=e.assertThisInitialized},function(e){r=e.cclegacy,c=e._decorator,l=e.Component},function(e){o=e.EffectSingleCase}],execute:function(){var s,f,u;r._RF.push({},"01359fvxlFJZKx7BLUcTSWS","EffectDelayRelease",void 0);var p=c.ccclass,y=c.property;e("EffectDelayRelease",p("EffectDelayRelease")((u=t((f=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),c=0;c<n;c++)r[c]=arguments[c];return t=e.call.apply(e,[this].concat(r))||this,i(t,"delay",u,a(t)),t}n(t,e);var r=t.prototype;return r.onEnable=function(){this.scheduleOnce(this.onDelay,this.delay)},r.onDelay=function(){o.instance.put(this.node)},t}(l)).prototype,"delay",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),s=f))||s);r._RF.pop()}}}));

System.register("chunks:///_virtual/EffectEvent.ts",["cc"],(function(t){var e;return{setters:[function(t){e=t.cclegacy}],execute:function(){e._RF.push({},"445875CzyRKaLiSXTYH66lm","EffectEvent",void 0);t("EffectEvent",function(t){return t.Put="EffectEvent_Put",t}({}));e._RF.pop()}}}));

System.register("chunks:///_virtual/EffectFinishedRelease.ts",["./rollupPluginModLoBabelHelpers.js","cc","./EffectEvent.ts","./MessageManager.ts"],(function(e){var t,n,i,o,a,s,r,c,u;return{setters:[function(e){t=e.inheritsLoose},function(e){n=e.cclegacy,i=e._decorator,o=e.sp,a=e.Animation,s=e.ParticleSystem,r=e.Component},function(e){c=e.EffectEvent},function(e){u=e.message}],execute:function(){var l;n._RF.push({},"a751fmayL5JMYH0D4uJoK5H","EffectFinishedRelease",void 0);var f=i.ccclass;i.property,e("EffectFinishedRelease",f("EffectFinishedRelease")(l=function(e){function n(){for(var t,n=arguments.length,i=new Array(n),o=0;o<n;o++)i[o]=arguments[o];return(t=e.call.apply(e,[this].concat(i))||this).maxDuration=0,t}t(n,e);var i=n.prototype;return i.onEnable=function(){var e=this,t=this.getComponent(o.Skeleton);if(t){var n=t.skeletonData.skeletonJson.animations;for(var i in n){t.setCompleteListener(this.onRecovery.bind(this)),t.setAnimation(0,i,!1);break}}else{var r=this.node.getComponentsInChildren(a);if(r.length>0)r.forEach((function(t){var n,i=null==(n=t.defaultClip)?void 0:n.name;if(i){var o=t.getState(i);if(o){var a=o.duration;e.maxDuration=a>e.maxDuration?a:e.maxDuration}}t.play()})),this.scheduleOnce(this.onRecovery.bind(this),this.maxDuration);else if(s){this.node.getComponentsInChildren(s).forEach((function(t){t.clear(),t.stop(),t.play();var n=t.duration;e.maxDuration=n>e.maxDuration?n:e.maxDuration})),this.scheduleOnce(this.onRecovery.bind(this),this.maxDuration)}}},i.onRecovery=function(){this.node.parent&&u.dispatchEvent(c.Put,this.node)},n}(r))||l);n._RF.pop()}}}));

System.register("chunks:///_virtual/EffectSingleCase.ts",["./rollupPluginModLoBabelHelpers.js","cc","./MessageManager.ts","./ResLoader.ts","./ViewUtil.ts","./EffectEvent.ts","./EffectFinishedRelease.ts"],(function(e){var t,n,s,i,r,a,f,c,o,u,l,d,h,p;return{setters:[function(e){t=e.asyncToGenerator,n=e.regeneratorRuntime,s=e.createClass},function(e){i=e.cclegacy,r=e.Prefab,a=e.NodePool,f=e.sp,c=e.Animation,o=e.ParticleSystem},function(e){u=e.message},function(e){l=e.resLoader},function(e){d=e.ViewUtil},function(e){h=e.EffectEvent},function(e){p=e.EffectFinishedRelease}],execute:function(){i._RF.push({},"bf338Z+oYxIUbd4bPREw9Ud","EffectSingleCase",void 0),e("EffectSingleCase",function(){function e(){this._speed=1,this.effects=new Map,this.effects_use=new Map,this.res=new Map,u.on(h.Put,this.onPut,this)}var i=e.prototype;return i.onPut=function(e,t){this.put(t)},i.getCount=function(e){var t=this.effects.get(e);return t?t.size():0},i.preload=function(e,s,i){var f=this;return void 0===i&&(i=l.defaultBundleName),new Promise(t(n().mark((function t(c,o){var u,h,p;return n().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return null==(u=f.effects.get(s))&&(u=new a,f.effects.set(s,u)),f.res.set(s,i),t.next=5,l.loadAsync(i,s,r);case 5:for(h=0;h<e;h++)(p=d.createPrefabNode(s,i)).res_path=s,u.put(p);c();case 7:case"end":return t.stop()}}),t)}))))},i.loadAndShow=function(e,s,i){var a=this;return new Promise(t(n().mark((function t(f,c){var o,u;return n().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(null!=a.effects.get(e)){t.next=15;break}if(!i||!i.bundleName){t.next=8;break}return a.res.set(e,i.bundleName),t.next=6,l.loadAsync(i.bundleName,e,r);case 6:t.next=11;break;case 8:return a.res.set(e,l.defaultBundleName),t.next=11,l.loadAsync(e,r);case 11:o=a.show(e,s,i),f(o),t.next=17;break;case 15:u=a.show(e,s,i),f(u);case 17:case"end":return t.stop()}}),t)}))))},i.show=function(e,t,n){var s,i=this.effects.get(e);if(null==i&&(i=new a,this.effects.set(e,i)),0==i.size()){var r=l.defaultBundleName;n&&n.bundleName&&(r=n.bundleName),(s=d.createPrefabNode(e,r)).res_path=e,n&&n.isPlayFinishedRelease&&s.addComponent(p)}else s=i.get();return this.setSpeed(s),n&&(n.pos&&(s.position=n.pos),n.worldPos&&(s.worldPosition=n.worldPos)),t&&(s.parent=t),this.effects_use.set(s,!0),s},i.put=function(e){var t=e.res_path;if(t){var n=this.effects.get(t);n&&(this.effects_use.delete(e),n.put(e))}},i.clear=function(e){e?this.effects.get(e).clear():(this.effects.forEach((function(e){e.clear()})),this.effects.clear())},i.release=function(e){if(e){this.clear(e);var t=this.res.get(e);l.release(e,t),this.res.delete(e)}else this.clear(),this.res.forEach((function(e,t){l.release(t,e)})),this.res.clear()},i.setSpeed=function(e){var t=this,n=e.getComponent(f.Skeleton);if(n)n.timeScale=this.speed;else{var s=e.getComponentsInChildren(c);if(s.length>0)s.forEach((function(e){var n,s=null==(n=e.defaultClip)?void 0:n.name;if(s){var i=e.getState(s);i&&(i.speed=t.speed)}}));else if(o){e.getComponentsInChildren(o).forEach((function(e){e.simulationSpeed=t.speed}))}}},s(e,[{key:"speed",get:function(){return this._speed},set:function(e){var t=this;this._speed=e,this.effects_use.forEach((function(e,n){t.setSpeed(n)}))}}],[{key:"instance",get:function(){return null==this._instance&&(this._instance=new e),this._instance}}]),e}())._instance=void 0,i._RF.pop()}}}));

System.register("chunks:///_virtual/EncryptUtil.ts",["cc"],(function(){var t;return{setters:[function(c){t=c.cclegacy}],execute:function(){t._RF.push({},"46d12Bx4JdKnIYHhcvNk6S1","EncryptUtil",void 0),t._RF.pop()}}}));

System.register("chunks:///_virtual/EventDispatcher.ts",["cc","./MessageManager.ts"],(function(t){var s,n;return{setters:[function(t){s=t.cclegacy},function(t){n=t.MessageEventData}],execute:function(){s._RF.push({},"c680af5iPNKeIO4cArf/90m","EventDispatcher",void 0);t("EventDispatcher",function(){function t(){this._msg=null}var s=t.prototype;return s.on=function(t,s,e){null==this._msg&&(this._msg=new n),this._msg.on(t,s,e)},s.off=function(t){this._msg&&this._msg.off(t)},s.dispatchEvent=function(t){var s;null==this._msg&&(this._msg=new n);for(var e=arguments.length,i=new Array(e>1?e-1:0),c=1;c<e;c++)i[c-1]=arguments[c];(s=this._msg).dispatchEvent.apply(s,[t].concat(i))},s.destroy=function(){this._msg&&this._msg.clear(),this._msg=null},t}());s._RF.pop()}}}));

System.register("chunks:///_virtual/EventMessage.ts",["cc"],(function(E){var e;return{setters:[function(E){e=E.cclegacy}],execute:function(){e._RF.push({},"beea7u9xnJD4rMj6ua/LTcF","EventMessage",void 0);E("EventMessage",function(E){return E.GAME_SHOW="GAME_ENTER",E.GAME_HIDE="GAME_EXIT",E.GAME_RESIZE="GAME_RESIZE",E.GAME_FULL_SCREEN="GAME_FULL_SCREEN",E.GAME_ORIENTATION="GAME_ORIENTATION",E}({}));e._RF.pop()}}}));

System.register("chunks:///_virtual/FlashSpine.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i,n,s,a,o;return{setters:[function(t){e=t.inheritsLoose},function(t){i=t.cclegacy,n=t._decorator,s=t.sp,a=t.Material,o=t.Component}],execute:function(){var r;i._RF.push({},"61de7pPhiNF5plXR5pVKfXu","FlashSpine",void 0);var l=n.ccclass;n.property,t("default",l("FlashSpine")(r=function(t){function i(){for(var e,i=arguments.length,n=new Array(i),s=0;s<i;s++)n[s]=arguments[s];return(e=t.call.apply(t,[this].concat(n))||this).duration=.5,e._median=0,e._time=0,e._material=null,e._skeleton=null,e}e(i,t);var n=i.prototype;return n.onLoad=function(){this._median=this.duration/2,this._skeleton=this.node.getComponent(s.Skeleton),this._material=this._skeleton.customMaterial,this._material.setProperty("u_rate",1)},n.update=function(t){if(this._time>0){this._time-=t,this._time=this._time<0?0:this._time;var e=2*Math.abs(this._time-this._median)/this.duration,i=new a;i.copy(this._material),this._skeleton.customMaterial=i,i.setProperty("u_rate",e)}},n.clickFlash=function(){this._time=this.duration},i}(o))||r);i._RF.pop()}}}));

System.register("chunks:///_virtual/FlashSprite.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var i,e,r,a,n;return{setters:[function(t){i=t.inheritsLoose},function(t){e=t.cclegacy,r=t._decorator,a=t.Sprite,n=t.Component}],execute:function(){var s;e._RF.push({},"a7a9eXWbUpJ3rONqlgUYCY/","FlashSprite",void 0);var o=r.ccclass;r.property,t("default",o("FlashSprite")(s=function(t){function e(){for(var i,e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return(i=t.call.apply(t,[this].concat(r))||this).duration=.5,i._median=0,i._time=0,i._material=null,i}i(e,t);var r=e.prototype;return r.onLoad=function(){this._median=this.duration/2,this._material=this.node.getComponent(a).getMaterial(0),this._material.setProperty("u_rate",1)},r.update=function(t){if(this._time>0){this._time-=t,this._time=this._time<0?0:this._time;var i=2*Math.abs(this._time-this._median)/this.duration;this._material.setProperty("u_rate",i)}},r.clickFlash=function(){this._time=this.duration},e}(n))||s);e._RF.pop()}}}));

System.register("chunks:///_virtual/FreeFlightCamera.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,o,i,n,r,s,a,h,c,p,l,y,u;return{setters:[function(e){t=e.applyDecoratedDescriptor,o=e.inheritsLoose,i=e.initializerDefineProperty,n=e.assertThisInitialized},function(e){r=e.cclegacy,s=e._decorator,a=e.math,h=e.KeyCode,c=e.CCFloat,p=e.input,l=e.Input,y=e.game,u=e.Component}],execute:function(){var d,f,v,_,C,S,T,m,E,g,k,w;r._RF.push({},"6c841mU+4JNvqwHy5tJsJh0","FreeFlightCamera",void 0);var x=s.ccclass,z=s.property,F=s.menu,A=a.Vec2,U=a.Vec3,b=a.Quat,D=new A,O=new A,L=new U,H=new b,K="W".charCodeAt(0),M="S".charCodeAt(0),P="A".charCodeAt(0),W="D".charCodeAt(0),N="Q".charCodeAt(0),R="E".charCodeAt(0),Y=h.SHIFT_LEFT;e("FreeFlightCamera",(d=x("FreeFlightCamera"),f=F("OopsFramework/Camera/FreeFlightCamera （自由飞行摄像机）"),v=z({type:c,tooltip:"移动速度"}),_=z({type:c,tooltip:"按Shift键后的速度"}),C=z({type:c,slide:!0,range:[.05,.5,.01],tooltip:"移动后惯性效果"}),S=z({type:c,tooltip:"旋转速度"}),d(T=f((E=t((m=function(e){function t(){for(var t,o=arguments.length,r=new Array(o),s=0;s<o;s++)r[s]=arguments[s];return t=e.call.apply(e,[this].concat(r))||this,i(t,"moveSpeed",E,n(t)),i(t,"moveSpeedShiftScale",g,n(t)),i(t,"damp",k,n(t)),i(t,"rotateSpeed",w,n(t)),t._euler=new U,t._velocity=new U,t._position=new U,t._speedScale=1,t}o(t,e);var r=t.prototype;return r.onLoad=function(){p.on(l.EventType.MOUSE_WHEEL,this.onMouseWheel,this),p.on(l.EventType.KEY_DOWN,this.onKeyDown,this),p.on(l.EventType.KEY_UP,this.onKeyUp,this),p.on(l.EventType.TOUCH_START,this.onTouchStart,this),p.on(l.EventType.TOUCH_MOVE,this.onTouchMove,this),p.on(l.EventType.TOUCH_END,this.onTouchEnd,this),U.copy(this._euler,this.node.eulerAngles),U.copy(this._position,this.node.position)},r.onDestroy=function(){p.off(l.EventType.MOUSE_WHEEL,this.onMouseWheel,this),p.off(l.EventType.KEY_DOWN,this.onKeyDown,this),p.off(l.EventType.KEY_UP,this.onKeyUp,this),p.off(l.EventType.TOUCH_START,this.onTouchStart,this),p.off(l.EventType.TOUCH_MOVE,this.onTouchMove,this),p.off(l.EventType.TOUCH_END,this.onTouchEnd,this)},r.update=function(e){U.transformQuat(L,this._velocity,this.node.rotation),U.scaleAndAdd(this._position,this._position,L,this.moveSpeed*this._speedScale),U.lerp(L,this.node.position,this._position,e/this.damp),this.node.setPosition(L),b.fromEuler(H,this._euler.x,this._euler.y,this._euler.z),b.slerp(H,this.node.rotation,H,e/this.damp),this.node.setRotation(H)},r.onMouseWheel=function(e){var t=-e.getScrollY()*this.moveSpeed*.1;U.transformQuat(L,U.UNIT_Z,this.node.rotation),U.scaleAndAdd(this._position,this.node.position,L,t)},r.onKeyDown=function(e){var t=this._velocity;e.keyCode===Y?this._speedScale=this.moveSpeedShiftScale:e.keyCode===K?0===t.z&&(t.z=-1):e.keyCode===M?0===t.z&&(t.z=1):e.keyCode===P?0===t.x&&(t.x=-1):e.keyCode===W?0===t.x&&(t.x=1):e.keyCode===N?0===t.y&&(t.y=-1):e.keyCode===R&&0===t.y&&(t.y=1)},r.onKeyUp=function(e){var t=this._velocity;e.keyCode===Y?this._speedScale=1:e.keyCode===K?t.z<0&&(t.z=0):e.keyCode===M?t.z>0&&(t.z=0):e.keyCode===P?t.x<0&&(t.x=0):e.keyCode===W?t.x>0&&(t.x=0):e.keyCode===N?t.y<0&&(t.y=0):e.keyCode===R&&t.y>0&&(t.y=0)},r.onTouchStart=function(e){y.canvas.requestPointerLock()},r.onTouchMove=function(e){e.getStartLocation(D),D.x>.4*y.canvas.width?(e.getDelta(O),this._euler.y-=O.x*this.rotateSpeed*.1,this._euler.x+=O.y*this.rotateSpeed*.1):(e.getLocation(O),A.subtract(O,O,D),this._velocity.x=.01*O.x,this._velocity.z=.01*-O.y)},r.onTouchEnd=function(e){document.exitPointerLock&&document.exitPointerLock(),e.getStartLocation(D),D.x<.4*y.canvas.width&&(this._velocity.x=0,this._velocity.z=0)},t}(u)).prototype,"moveSpeed",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),g=t(m.prototype,"moveSpeedShiftScale",[_],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 5}}),k=t(m.prototype,"damp",[C],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return.2}}),w=t(m.prototype,"rotateSpeed",[S],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),T=m))||T)||T));r._RF.pop()}}}));

System.register("chunks:///_virtual/GameCollision.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(i){var o,n,t,e,r,l,s,c,a;return{setters:[function(i){o=i.applyDecoratedDescriptor,n=i.inheritsLoose,t=i.initializerDefineProperty,e=i.assertThisInitialized},function(i){r=i.cclegacy,l=i._decorator,s=i.ccenum,c=i.Collider,a=i.Component}],execute:function(){var h,g,u,p,f;r._RF.push({},"7fa3eqzDkpBUq8OUNr05VJh","GameCollision",void 0);var y=l.ccclass,C=l.property,d=i("CollisionType",function(i){return i[i.Role=0]="Role",i[i.Ballistic=1]="Ballistic",i[i.Wall=2]="Wall",i}({}));s(d);var T="onTriggerEnter",E="onTriggerStay",m="onTriggerExit",b="onCollisionEnter",v="onCollisionStay",x="onCollisionExit";i("GameCollision",(h=y("GameCollision"),g=C({type:d,tooltip:"碰撞物体类型"}),h((f=o((p=function(i){function o(){for(var o,n=arguments.length,r=new Array(n),l=0;l<n;l++)r[l]=arguments[l];return(o=i.call.apply(i,[this].concat(r))||this).collider=null,t(o,"type",f,e(o)),o}n(o,i);var r=o.prototype;return r.onLoad=function(){this.collider=this.getComponent(c),this.collider.isTrigger?(this.collider.on(T,this.onTrigger,this),this.collider.on(E,this.onTrigger,this),this.collider.on(m,this.onTrigger,this)):(this.collider.on(b,this.onCollision,this),this.collider.on(v,this.onCollision,this),this.collider.on(x,this.onCollision,this))},r.onTrigger=function(i){switch(i.type){case T:this.onTriggerEnter(i);break;case E:this.onTriggerStay(i);break;case m:this.onTriggerExit(i)}},r.onTriggerEnter=function(i){},r.onTriggerStay=function(i){},r.onTriggerExit=function(i){},r.onCollision=function(i){switch(i.type){case b:this.onCollisionEnter(i);break;case v:this.onCollisionStay(i);break;case x:this.onCollisionExit(i)}},r.onCollisionEnter=function(i){},r.onCollisionStay=function(i){},r.onCollisionExit=function(i){},o}(a)).prototype,"type",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return d.Ballistic}}),u=p))||u));r._RF.pop()}}}));

System.register("chunks:///_virtual/GameComponent.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./EventDispatcher.ts","./EventMessage.ts","./ResLoader.ts","./ViewUtil.ts"],(function(e){var t,n,s,o,i,r,a,u,h,c,f,d,l,p,v,y,E,m,g;return{setters:[function(e){t=e.inheritsLoose,n=e.createClass,s=e.asyncToGenerator,o=e.regeneratorRuntime},function(e){i=e.cclegacy,r=e._decorator,a=e.Node,u=e.Button,h=e.EventHandler,c=e.input,f=e.Input,d=e.Component,l=e.isValid,p=e.SpriteFrame},function(e){v=e.oops},function(e){y=e.EventDispatcher},function(e){E=e.EventMessage},function(e){m=e.resLoader},function(e){g=e.ViewUtil}],execute:function(){var P;i._RF.push({},"62362nWbWZP653j6XL/zJDq","GameComponent",void 0);var G=r.ccclass,R=function(e){return e[e.Load=0]="Load",e[e.LoadDir=1]="LoadDir",e[e.Audio=2]="Audio",e}(R||{});e("GameComponent",G("GameComponent")(P=function(e){function i(){for(var t,n=arguments.length,s=new Array(n),o=0;o<n;o++)s[o]=arguments[o];return(t=e.call.apply(e,[this].concat(s))||this)._event=null,t.nodes=null,t.resPaths=null,t}t(i,e);var r=i.prototype;return r.on=function(e,t,n){this.event.on(e,t,n)},r.off=function(e){this.event.off(e)},r.dispatchEvent=function(e){for(var t,n=arguments.length,s=new Array(n>1?n-1:0),o=1;o<n;o++)s[o-1]=arguments[o];(t=this.event).dispatchEvent.apply(t,[e].concat(s))},r.getNode=function(e){if(this.nodes)return this.nodes.get(e)},r.nodeTreeInfoLite=function(){this.nodes=new Map,g.nodeTreeInfoLite(this.node,this.nodes)},r.createPrefabNode=function(e,t){return void 0===t&&(t=v.res.defaultBundleName),g.createPrefabNode(e,t)},r.createPrefabNodeAsync=function(e,t){return void 0===t&&(t=v.res.defaultBundleName),g.createPrefabNodeAsync(e,t)},r.getRes=function(e,t,n){return v.res.get(e,t,n)},r.addPathToRecord=function(e,t,n,s){null==this.resPaths&&(this.resPaths=new Map);var o=this.resPaths.get(e);if(null==o&&(o=new Map,this.resPaths.set(e,o)),n instanceof Array)for(var i=t,r=0;r<n.length;r++){var a=n[r],u=this.getResKey(i,a,s);o.has(u)||o.set(u,{path:a,bundle:i,resId:s})}else if("string"==typeof n){var h=t,c=n,f=this.getResKey(h,c,s);o.has(f)||o.set(f,{path:c,bundle:h,resId:s})}else{var d=v.res.defaultBundleName,l=t,p=this.getResKey(d,l,s);o.has(p)||o.set(p,{path:l,bundle:d,resId:s})}},r.getResKey=function(e,t,n){var s=e+":"+t;return null!=n&&(s+=":"+n),s},r.load=function(e,t,n,s,o){this.addPathToRecord(R.Load,e,t),v.res.load(e,t,n,s,o)},r.loadAsync=function(e,t,n){return this.addPathToRecord(R.Load,e,t),v.res.loadAsync(e,t,n)},r.loadDir=function(e,t,n,s,o){var i,r;"string"==typeof t?(i=t,r=e):(i=e,r=v.res.defaultBundleName),this.addPathToRecord(R.LoadDir,r,i),v.res.loadDir(e,t,n,s,o)},r.release=function(){if(this.resPaths){var e=this.resPaths.get(R.Load);e&&(e.forEach((function(e){v.res.release(e.path,e.bundle)})),e.clear())}},r.releaseDir=function(){if(this.resPaths){var e=this.resPaths.get(R.LoadDir);e&&e.forEach((function(e){v.res.releaseDir(e.path,e.bundle)}))}},r.releaseAudioEffect=function(){if(this.resPaths){var e=this.resPaths.get(R.Audio);e&&e.forEach((function(e){v.audio.putEffect(e.resId,e.path,e.bundle)}))}},r.setSprite=function(){var e=s(o().mark((function e(t,n,s){var i,r,a;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return void 0===s&&(s=m.defaultBundleName),e.next=3,this.loadAsync(s,n,p);case 3:if((i=e.sent)&&l(t)){e.next=8;break}return(r=this.resPaths.get(R.Load))&&(a=this.getResKey(s,n),r.delete(a),v.res.release(n,s)),e.abrupt("return");case 8:t.spriteFrame=i;case 9:case"end":return e.stop()}}),e,this)})));return function(t,n,s){return e.apply(this,arguments)}}(),r.playMusic=function(e,t,n){v.audio.playMusic(e,t,n)},r.playMusicLoop=function(e,t){v.audio.stopMusic(),v.audio.playMusicLoop(e,t)},r.playEffect=function(){var e=s(o().mark((function e(t,n){var s=this;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return null==n&&(n=v.res.defaultBundleName),e.next=3,v.audio.playEffect(t,n,(function(){var e=s.resPaths.get(R.Audio);if(e){var o=s.getResKey(n,t);e.delete(o)}}));case 3:this.addPathToRecord(R.Audio,n,t);case 4:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}(),r.setButton=function(e){var t=this;void 0===e&&(e=!0),e&&this.node.on(a.EventType.TOUCH_END,(function(e){var n=t[e.target.name];n&&n.call(t,e)}),this);var n=/<([^>]+)>/;this.node.getComponentsInChildren(u).forEach((function(e){var s=e.node;if(t[s.name]){var o=new h;o.target=t.node,o.handler=e.node.name,o.component=t.name.match(n)[1],e.clickEvents.push(o)}}))},r.setEvent=function(){for(var e=this,t=arguments.length,n=new Array(t),s=0;s<t;s++)n[s]=arguments[s];for(var o=0,i=n;o<i.length;o++){var r=i[o],a=e[r];a?this.on(r,a,this):console.error("名为【"+r+"】的全局事方法不存在")}},r.setKeyboard=function(e){e?(c.on(f.EventType.KEY_DOWN,this.onKeyDown,this),c.on(f.EventType.KEY_UP,this.onKeyUp,this),c.on(f.EventType.KEY_PRESSING,this.onKeyPressing,this)):(c.off(f.EventType.KEY_DOWN,this.onKeyDown,this),c.off(f.EventType.KEY_UP,this.onKeyUp,this),c.off(f.EventType.KEY_PRESSING,this.onKeyPressing,this))},r.onKeyDown=function(e){},r.onKeyUp=function(e){},r.onKeyPressing=function(e){},r.setGameShow=function(){this.on(E.GAME_SHOW,this.onGameShow,this)},r.setGameHide=function(){this.on(E.GAME_HIDE,this.onGameHide,this)},r.setGameResize=function(){this.on(E.GAME_RESIZE,this.onGameResize,this)},r.setGameFullScreen=function(){this.on(E.GAME_FULL_SCREEN,this.onGameFullScreen,this)},r.setGameOrientation=function(){this.on(E.GAME_ORIENTATION,this.onGameOrientation,this)},r.onGameShow=function(){},r.onGameHide=function(){},r.onGameResize=function(){},r.onGameFullScreen=function(){},r.onGameOrientation=function(){},r.onDestroy=function(){this._event&&(this._event.destroy(),this._event=null),this.nodes&&(this.nodes.clear(),this.nodes=null),this.resPaths&&(this.releaseAudioEffect(),this.release(),this.releaseDir(),this.resPaths.clear(),this.resPaths=null)},n(i,[{key:"event",get:function(){return null==this._event&&(this._event=new y),this._event}}]),i}(d))||P);i._RF.pop()}}}));

System.register("chunks:///_virtual/GameConfig.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts"],(function(t){var e,n,a;return{setters:[function(t){e=t.createClass},function(t){n=t.cclegacy},function(t){a=t.oops}],execute:function(){n._RF.push({},"54585zBsmtGfZEDczLG3SH5","GameConfig",void 0);t("GameConfig",function(){function t(t){this._data=null,this._data=Object.freeze(t.json),a.log.logConfig(this._data,"游戏配置")}return e(t,[{key:"version",get:function(){return this._data.config.version}},{key:"package",get:function(){return this._data.config.package}},{key:"frameRate",get:function(){return this._data.config.frameRate}},{key:"localDataKey",get:function(){return this._data.config.localDataKey}},{key:"localDataIv",get:function(){return this._data.config.localDataIv}},{key:"httpServer",get:function(){return this._data.config.httpServer}},{key:"httpTimeout",get:function(){return this._data.config.httpTimeout}},{key:"language",get:function(){return this._data.language.type||["zh"]}},{key:"languagePathJson",get:function(){return this._data.language.path.json||"language/json"}},{key:"languagePathTexture",get:function(){return this._data.language.path.texture||"language/texture"}},{key:"languageDefault",get:function(){return this._data.language.default||"zh"}},{key:"bundleEnable",get:function(){return this._data.bundle.enable}},{key:"bundleServer",get:function(){return this._data.bundle.server}},{key:"bundleDefault",get:function(){return this._data.bundle.default}},{key:"bundlePackages",get:function(){return this._data.bundle.packages}},{key:"loadingTimeoutGui",get:function(){return this._data.config.loadingTimeoutGui||1e3}},{key:"mobileSafeArea",get:function(){return this._data.config.mobileSafeArea||!1}},{key:"data",get:function(){return this._data}}]),t}());n._RF.pop()}}}));

System.register("chunks:///_virtual/GameEvent.ts",["cc"],(function(e){var n;return{setters:[function(e){n=e.cclegacy}],execute:function(){n._RF.push({},"28ac0rWU79HGpJWrnyK01Gn","GameEvent",void 0);e("GameEvent",function(e){return e.GameServerConnected="GameServerConnected",e.LoginSuccess="LoginSuccess",e.VacuumCleanerAni="VacuumCleanerAni",e.Hm="Hm",e.modifyFunImg="modifyFunImg",e}({}));n._RF.pop()}}}));

System.register("chunks:///_virtual/GameManager.ts",["cc"],(function(e){var t,a;return{setters:[function(e){t=e.cclegacy,a=e.director}],execute:function(){t._RF.push({},"73fa0CEfOhMdJUoZwoFIIZV","GameManager",void 0);e("GameManager",function(){function e(e){this.root=void 0,this.root=e}var t=e.prototype;return t.setTimeScale=function(e){a.globalGameTimeScale=e},t.getTimeScale=function(){return a.globalGameTimeScale},e}());t._RF.pop()}}}));

System.register("chunks:///_virtual/GameQueryConfig.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./StringUtil.ts"],(function(t){var n,e,r,i,o;return{setters:[function(t){n=t.createClass},function(t){e=t.cclegacy,r=t.sys},function(t){i=t.oops},function(t){o=t.StringUtil}],execute:function(){e._RF.push({},"d09acUxcU5Hg4kUjKxVEWLy","GameQueryConfig",void 0);t("GameQueryConfig",function(){function t(){this._data=null,r.isBrowser?(this._data=this.parseUrl(),this._data.username||(this._data.username=o.guid()),i.log.logConfig(this._data,"查询参数")):this._data={}}return t.prototype.parseUrl=function(){if("object"!=typeof window)return{};if(!window.document)return{};var t=window.document.location.href.toString().split("?");if("string"==typeof t[1]){for(var n={},e=0,r=(t=t[1].split("&")).length;e<r;++e){var i=t[e],o=i.indexOf("=");if(!(o<0)){var a=i.substring(0,o),u=i.substring(o+1);n[decodeURIComponent(a)]=u&&decodeURIComponent(u)}}return n}return{}},n(t,[{key:"debug",get:function(){return this._data.debug}},{key:"username",get:function(){return this._data.username}},{key:"lang",get:function(){return this._data.lang||"zh"}},{key:"data",get:function(){return this._data}}]),t}());e._RF.pop()}}}));

System.register("chunks:///_virtual/GameStorageConfig.ts",["cc"],(function(e){var t;return{setters:[function(e){t=e.cclegacy}],execute:function(){t._RF.push({},"a9e20POivtPKppEugdcVI1N","GameStorageConfig",void 0);e("GameStorageConfig",function(e){return e.AccountName="AccountName",e}({}));t._RF.pop()}}}));

System.register("chunks:///_virtual/GameUIConfig.ts",["cc","./LayerManager.ts"],(function(e){var a,n;return{setters:[function(e){a=e.cclegacy},function(e){n=e.LayerType}],execute:function(){var r;a._RF.push({},"14663z2+5JJIYupyDayZnc3","GameUIConfig",void 0);var i=e("UIID",function(e){return e[e.Loading=1]="Loading",e[e.Alert=2]="Alert",e[e.Confirm=3]="Confirm",e[e.Demo=4]="Demo",e[e.Main=5]="Main",e[e.selectFun=6]="selectFun",e}({}));e("UIConfigData",((r={})[i.Loading]={layer:n.UI,prefab:"gui/loading/loading"},r[i.Alert]={layer:n.Dialog,prefab:"common/prefab/alert"},r[i.Confirm]={layer:n.Dialog,prefab:"common/prefab/confirm"},r[i.Demo]={layer:n.UI,prefab:"gui/demo/demo"},r[i.Main]={layer:n.UI,prefab:"gui/main/main"},r[i.selectFun]={layer:n.PopUp,prefab:"gui/selectFun/selectFun"},r));a._RF.pop()}}}));

System.register("chunks:///_virtual/HttpRequest.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,n,r,s;return{setters:[function(e){t=e.createForOfIteratorHelperLoose},function(e){n=e.cclegacy,r=e.error,s=e.warn}],execute:function(){n._RF.push({},"806e5t8UetFy4spn89dnuan","HttpRequest",void 0);var u={},i={},o=e("HttpEvent",function(e){return e.NO_NETWORK="http_request_no_network",e.UNKNOWN_ERROR="http_request_unknown_error",e.TIMEOUT="http_request_timout",e}({})),a=e("HttpReturn",(function(){this.isSucc=!1,this.res=void 0,this.err=void 0}));e("HttpRequest",function(){function e(){this.server="http://127.0.0.1/",this.timeout=1e4,this.header=new Map}var n=e.prototype;return n.addHeader=function(e,t){this.header.set(e,t)},n.get=function(e,t,n){void 0===n&&(n=null),this.sendRequest(e,n,!1,t)},n.getAsync=function(e,t){var n=this;return void 0===t&&(t=null),new Promise((function(r,s){n.sendRequest(e,t,!1,(function(e){r(e)}))}))},n.getByArraybuffer=function(e,t,n){void 0===n&&(n=null),this.sendRequest(e,n,!1,t,"arraybuffer",!1)},n.getAsyncByArraybuffer=function(e,t){var n=this;return void 0===t&&(t=null),new Promise((function(r,s){n.sendRequest(e,t,!1,(function(e){r(e)}),"arraybuffer",!1)}))},n.post=function(e,t,n){void 0===n&&(n=null),this.sendRequest(e,n,!0,t)},n.postAsync=function(e,t){var n=this;return void 0===t&&(t=null),new Promise((function(r,s){n.sendRequest(e,t,!0,(function(e){r(e)}))}))},n.abort=function(e){var t=u[this.server+e];t&&t.abort()},n.getParamString=function(e){var t="";for(var n in e){var r=e[n];if(r instanceof Object)for(var s in r)t+=s+"="+r[s]+"&";else t+=n+"="+r+"&"}return t.substring(0,t.length-1)},n.sendRequest=function(e,n,c,f,d,l){var h=this;if(void 0===l&&(l=!0),null!=e&&""!=e){var v,p,R="";if(v=0==e.toLocaleLowerCase().indexOf("http")?e:this.server+e,n?(R=this.getParamString(n),p=v.indexOf("?")>-1?v+"&"+R:v+"?"+R):p=v,null==u[p]||i[p]!=R){var y=new XMLHttpRequest;u[p]=y,i[p]=R,c?y.open("POST",v):y.open("GET",p);for(var O,_=t(this.header);!(O=_()).done;){var q=O.value,g=q[0],N=q[1];y.setRequestHeader(g,N)}var S={};S.url=v,S.params=n,l&&(y.timeout=this.timeout,y.ontimeout=function(){h.deleteCache(p),m.isSucc=!1,m.err=o.TIMEOUT,f(S)});var m=new a;y.onloadend=function(){500==y.status&&(h.deleteCache(p),m.isSucc=!1,m.err=o.NO_NETWORK,f(m))},y.onerror=function(){h.deleteCache(p),m.isSucc=!1,0==y.readyState||1==y.readyState||0==y.status?m.err=o.NO_NETWORK:m.err=o.UNKNOWN_ERROR,f(m)},y.onreadystatechange=function(){4==y.readyState&&(h.deleteCache(p),200==y.status&&f&&(m.isSucc=!0,"arraybuffer"==d?(y.responseType=d,m.res=y.response):m.res=JSON.parse(y.response),f(m)))},null==n||""==n?y.send():y.send(R)}else s("地址【"+v+"】已正在请求中，不能重复请求")}else r("请求地址不能为空")},n.deleteCache=function(e){delete u[e],delete i[e]},e}());n._RF.pop()}}}));

System.register("chunks:///_virtual/IControl.ts",["cc"],(function(){var t;return{setters:[function(c){t=c.cclegacy}],execute:function(){t._RF.push({},"58450TyE3JB069KO8P5+hl4","IControl",void 0),t._RF.pop()}}}));

System.register("chunks:///_virtual/ImageUtil.ts",["cc"],(function(e){var t,n,r;return{setters:[function(e){t=e.cclegacy,n=e.Color,r=e.Texture2D}],execute:function(){t._RF.push({},"ebdf3rRnEdIYpKgGdW8gSmZ","ImageUtil",void 0);e("ImageUtil",function(){function e(){}return e.getPixelColor=function(e,t,r){var a,i=document.createElement("canvas"),o=i.getContext("2d");i.width=e.width,i.height=e.height;var g=null==(a=e.image)?void 0:a.data;o.drawImage(g,0,0,e.width,e.height);var c=o.getImageData(0,0,e.width,e.height),u=(r-1)*e.width*4+4*(t-1),l=c.data.slice(u,u+4),m=new n(l[0],l[1],l[2],l[3]);return g.remove(),i.remove(),m},e.imageToBase64=function(e,t){return new Promise((function(n){var r,a=null==(r=/\.png|\.jpg|\.jpeg/.exec(e))?void 0:r[0];if([".png",".jpg",".jpeg"].includes(a)){var i=document.createElement("canvas"),o=i.getContext("2d"),g=new Image;g.src=e,g.onload=function(){i.height=g.height,i.width=g.width,o.drawImage(g,0,0),a=".jpg"===a?"jpeg":a.replace(".","");var e=i.toDataURL("image/"+a);t&&t(e),n(e),g.remove(),i.remove()}}else console.warn("Not a jpg/jpeg or png resource!"),t&&t(""),n("")}))},e.base64ToTexture=function(e){var t=document.createElement("img");t.src=e;var n=new r;return n.initWithElement(t),t.remove(),n},e.base64ToBlob=function(e){for(var t=e.split(","),n=/image\/\w+|;/.exec(t[0])[0],r=window.atob(t[1]),a=new ArrayBuffer(r.length),i=new Uint8Array(a),o=0;o<r.length;o++)i[o]=255&r.charCodeAt(o);return new Blob([i],{type:n})},e}());t._RF.pop()}}}));

System.register("chunks:///_virtual/index.ts",["cc","./BehaviorTree.ts","./BranchNode.ts","./Decorator.ts","./BTreeNode.ts","./Priority.ts","./Sequence.ts","./Task.ts","./Selector.ts"],(function(e){var t;return{setters:[function(e){t=e.cclegacy},function(t){e("BehaviorTree",t.BehaviorTree)},function(t){e("BranchNode",t.BranchNode)},function(t){e("Decorator",t.Decorator)},function(t){e("BTreeNode",t.BTreeNode)},function(t){e("Priority",t.Priority)},function(t){e("Sequence",t.Sequence)},function(t){e("Task",t.Task)},function(t){e("Selector",t.Selector)}],execute:function(){t._RF.push({},"96257XYurdITbWhyEf7Qlbn","index",void 0),t._RF.pop()}}}));

System.register("chunks:///_virtual/Initialize.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ECS.ts","./InitRes.ts"],(function(t){var i,n,e,s;return{setters:[function(t){i=t.inheritsLoose},function(t){n=t.cclegacy},function(t){e=t.ecs},function(t){s=t.InitResComp}],execute:function(){var o;n._RF.push({},"ffbceQs6Z9IoI5z6mt1avMw","Initialize",void 0);t("Initialize",e.register("Initialize")(o=function(t){function n(){return t.apply(this,arguments)||this}return i(n,t),n.prototype.init=function(){this.add(s)},n}(e.Entity))||o);n._RF.pop()}}}));

System.register("chunks:///_virtual/InitRes.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./AsyncQueue.ts","./ECS.ts","./ModuleUtil.ts","./GameUIConfig.ts","./LoadingViewComp.ts"],(function(n){var t,e,o,i,u,r,s,a,c,l;return{setters:[function(n){t=n.inheritsLoose,e=n.asyncToGenerator,o=n.regeneratorRuntime},function(n){i=n.cclegacy},function(n){u=n.oops},function(n){r=n.AsyncQueue},function(n){s=n.ecs},function(n){a=n.ModuleUtil},function(n){c=n.UIID},function(n){l=n.LoadingViewComp}],execute:function(){var f,p;i._RF.push({},"2ee0c8+7R9EFKQb+OPn9mlk","InitRes",void 0);var g=n("InitResComp",s.register("InitRes")(f=function(n){function e(){return n.apply(this,arguments)||this}return t(e,n),e.prototype.reset=function(){},e}(s.Comp))||f);n("InitResSystem",s.register("Initialize")(p=function(n){function i(){return n.apply(this,arguments)||this}t(i,n);var f=i.prototype;return f.filter=function(){return s.allOf(g)},f.entityEnter=function(n){var t=new r;this.loadCustom(t),this.loadLanguage(t),this.loadCommon(t),this.onComplete(t,n),t.play()},f.loadCustom=function(n){n.push(e(o().mark((function n(t,e,i){return o().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:u.res.load("language/font/"+u.language.current,t);case 1:case"end":return n.stop()}}),n)}))))},f.loadLanguage=function(n){n.push((function(n,t,e){var o=u.storage.get("language");null!=o&&""!=o||(o="zh",u.storage.set("language",o)),u.language.setLanguage(o,n)}))},f.loadCommon=function(n){n.push((function(n,t,e){u.res.loadDir("common",n)}))},f.onComplete=function(n,t){n.complete=e(o().mark((function n(){return o().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:a.addViewUi(t,l,c.Loading),t.remove(g);case 2:case"end":return n.stop()}}),n)})))},i}(s.ComblockSystem))||p);i._RF.pop()}}}));

System.register("chunks:///_virtual/JsonOb.ts",["cc"],(function(t){var r;return{setters:[function(t){r=t.cclegacy}],execute:function(){r._RF.push({},"000b00Lx19Ke4hAFc9/Qlnh","JsonOb",void 0);var e=Object.prototype,o="[object Object]",c="[object Array]",i=["push","pop","shift","unshift","sort","reverse","splice"];t("JsonOb",function(){function t(t,r){this._callback=void 0,e.toString.call(t)!==o&&e.toString.call(t)!==c&&console.error("请传入一个对象或数组"),this._callback=r,this.observe(t)}var r=t.prototype;return r.observe=function(t,r){var i=this;e.toString.call(t)===c&&this.overrideArrayProto(t,r),Object.keys(t).forEach((function(n){var s=i,a=t[n],l=r&&r.slice();l?l.push(n):l=[n],Object.defineProperty(t,n,{get:function(){return a},set:function(t){if(a!==t){"[object Object]"===e.toString.call(t)&&s.observe(t,l);var r=a;a=t,s._callback(t,r,l)}}}),e.toString.call(t[n])!==o&&e.toString.call(t[n])!==c||i.observe(t[n],l)}),this)},r.overrideArrayProto=function(t,r){var e,o=Array.prototype,c=Object.create(Array.prototype),n=this;i.forEach((function(t){Object.defineProperty(c,t,{value:function(){var c=this.slice();return e=o[t].apply(this,arguments),n.observe(this,r),n._callback(this,c,r),e}})})),t.__proto__=c},t}());r._RF.pop()}}}));

System.register("chunks:///_virtual/JsonUtil.ts",["cc","./ResLoader.ts"],(function(n){var e,o,s;return{setters:[function(n){e=n.cclegacy,o=n.JsonAsset},function(n){s=n.resLoader}],execute:function(){e._RF.push({},"1a24ank4nRC46jfzaIfOmtQ","JsonUtil",void 0);var t="config/game/",a=new Map;n("JsonUtil",function(){function n(){}return n.get=function(n){if(a.has(n))return a.get(n)},n.load=function(n,e){if(a.has(n))e(a.get(n));else{var r=t+n;s.load(r,o,(function(o,t){o?(console.warn(o.message),e(null)):(a.set(n,t.json),s.release(r),e(t.json))}))}},n.loadAsync=function(n){return new Promise((function(e,r){if(a.has(n))e(a.get(n));else{var c=t+n;s.load(c,o,(function(o,t){o?(console.warn(o.message),e(null)):(a.set(n,t.json),s.release(c),e(t.json))}))}}))},n.loadDirAsync=function(){return new Promise((function(n,e){s.loadDir(t,(function(e,o){e?(console.warn(e.message),n(!1)):(o.forEach((function(n){a.set(n.name,n.json)})),s.releaseDir(t),n(!0))}))}))},n.release=function(n){a.delete(n)},n.clear=function(){a.clear()},n}());e._RF.pop()}}}));

System.register("chunks:///_virtual/LabelChange.ts",["./rollupPluginModLoBabelHelpers.js","cc","./LabelNumber.ts"],(function(i){var t,e,n,s,a,r,h;return{setters:[function(i){t=i.applyDecoratedDescriptor,e=i.inheritsLoose,n=i.initializerDefineProperty,s=i.assertThisInitialized},function(i){a=i.cclegacy,r=i._decorator},function(i){h=i.default}],execute:function(){var c,l,o;a._RF.push({},"fff0fLwVNhNe59VirWTCPFJ","LabelChange",void 0);var u=r.ccclass,p=r.property,d=r.menu;i("LabelChange",u("LabelChange")(c=d("OopsFramework/Label/LabelChange （数值变化动画标签）")((o=t((l=function(i){function t(){for(var t,e=arguments.length,a=new Array(e),r=0;r<e;r++)a[r]=arguments[r];return t=i.call.apply(i,[this].concat(a))||this,n(t,"isInteger",o,s(t)),t.duration=0,t.callback=void 0,t.isBegin=!1,t.speed=0,t.end=0,t}e(t,i);var a=t.prototype;return a.changeTo=function(i,t,e){0!=i?this.playAnim(i,this.num,t,e):e&&e()},a.changeBy=function(i,t,e){0!=i?this.playAnim(i,this.num,this.num+t,e):e&&e()},a.stop=function(i){void 0===i&&(i=!0),this.num=this.end,this.isBegin=!1,i&&this.callback&&this.callback()},a.playAnim=function(i,t,e,n){this.duration=i,this.end=e,this.callback=n,this.speed=(e-t)/i,this.num=t,this.isBegin=!0},a.isEnd=function(i){return this.speed>0?i>=this.end:i<=this.end},a.update=function(i){if(this.isBegin){if(this.num==this.end)return this.isBegin=!1,void(this.callback&&this.callback());var t=this.num+i*this.speed;this.isInteger&&(t=this.end<this.num?Math.floor(t):Math.ceil(t)),this.isEnd(t)&&(t=this.end,this.isBegin=!1,this.callback&&this.callback()),this.num=t}},t}(h)).prototype,"isInteger",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),c=l))||c)||c);a._RF.pop()}}}));

System.register("chunks:///_virtual/LabelNumber.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,r,n,i,o,u,a,l;return{setters:[function(t){e=t.applyDecoratedDescriptor,r=t.inheritsLoose,n=t.initializerDefineProperty,i=t.assertThisInitialized,o=t.createClass},function(t){u=t.cclegacy,a=t._decorator,l=t.Label}],execute:function(){var s,p,c,b,m,f,y,h,L;u._RF.push({},"f7b43F70BhPlrz4IPhZGmsL","LabelNumber",void 0);var g=a.ccclass,d=a.property,_=a.menu;t("default",(s=g("LabelNumber"),p=_("OopsFramework/Label/LabelNumber （只显示数字的标签）"),c=d({tooltip:"数字"}),b=d({tooltip:"数字"}),m=d({tooltip:"货币符号"}),s(f=p((h=e((y=function(t){function e(){for(var e,r=arguments.length,o=new Array(r),u=0;u<r;u++)o[u]=arguments[u];return e=t.call.apply(t,[this].concat(o))||this,n(e,"_num",h,i(e)),n(e,"symbol",L,i(e)),e}r(e,t);var u=e.prototype;return u.start=function(){this.updateLabel()},u.updateLabel=function(){this.string=this.num.toString()+this.symbol},o(e,[{key:"num",get:function(){return this._num},set:function(t){this._num=t,this.updateLabel()}}]),e}(l)).prototype,"_num",[c],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),e(y.prototype,"num",[b],Object.getOwnPropertyDescriptor(y.prototype,"num"),y.prototype),L=e(y.prototype,"symbol",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),f=y))||f)||f));u._RF.pop()}}}));

System.register("chunks:///_virtual/LabelTime.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./EventMessage.ts","./TimeUtils.ts"],(function(t){var e,i,n,o,r,s,a,l,c,h;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.inheritsLoose,n=t.initializerDefineProperty,o=t.assertThisInitialized},function(t){r=t.cclegacy,s=t._decorator,a=t.Label},function(t){l=t.oops},function(t){c=t.EventMessage},function(t){h=t.TimeUtil}],execute:function(){var u,m,f,d,p,g,b,S,v,y,D,w;r._RF.push({},"57786GMN6RPbaAT9b9RmX18","LabelTime",void 0);var T=s.ccclass,_=s.property,z=s.menu;t("default",(u=T("LabelTime"),m=z("OopsFramework/Label/LabelTime （倒计时标签）"),f=_({tooltip:"到计时间总时间（单位秒）"}),d=_({tooltip:"天数数据格式化"}),p=_({tooltip:"时间格式化"}),g=_({tooltip:"是否有00"}),u(b=m((v=e((S=function(t){function e(){for(var e,i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return e=t.call.apply(t,[this].concat(r))||this,n(e,"countDown",v,o(e)),n(e,"dayFormat",y,o(e)),n(e,"timeFormat",D,o(e)),n(e,"zeroize",w,o(e)),e.backStartTime=0,e.dateDisable=void 0,e.result=void 0,e.onSecond=null,e.onComplete=null,e}i(e,t);var r=e.prototype;return r.replace=function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),n=1;n<e;n++)i[n-1]=arguments[n];return t.replace(/\{(\d+)\}/g,(function(t,e){return i[e]}))},r.format=function(){var t=this.countDown,e=Math.floor(t/86400);t-=86400*e;var i=Math.floor(t/3600);t-=3600*i;var n=Math.floor(t/60),o=t-=60*n;if(this.dateDisable=this.dateDisable||!1,0==e&&0==i&&0==n&&0==o)this.zeroize?this.result=this.replace(this.timeFormat,"00","00","00"):this.result=this.replace(this.timeFormat,"0","0","0");else if(e>0&&!this.dateDisable){var r=this.dayFormat,s=r.indexOf("{1}");0==i&&s>-1&&(r=r.substring(0,s-1));var a=r;e>1&&r.indexOf("days")<0&&(a=a.replace("day","days")),e<2&&(a=a.replace("days","day")),this.result=this.replace(a,e,i)}else i+=24*e,this.zeroize?this.result=this.replace(this.timeFormat,this.coverString(i),this.coverString(n),this.coverString(o)):this.result=this.replace(this.timeFormat,i,n,o);this.string=this.result},r.coverString=function(t){return t<10?"0"+t:t.toString()},r.setDateDisable=function(t){this.dateDisable=t},r.setTime=function(t){this.countDown=t,this.timing_end(),this.timing_start(),this.format()},r.setTimeStamp=function(t){this.countDown=h.secsBetween(l.timer.getServerTime(),t),this.timing_end(),this.timing_start(),this.format()},r.start=function(){l.message.on(c.GAME_SHOW,this.onGameShow,this),l.message.on(c.GAME_HIDE,this.onGameHide,this),this.timing_start(),this.format()},r.onDestroy=function(){l.message.off(c.GAME_SHOW,this.onGameShow,this),l.message.off(c.GAME_HIDE,this.onGameHide,this)},r.onGameShow=function(){var t=Math.floor((l.timer.getTime()-(this.backStartTime||l.timer.getTime()))/1e3);this.countDown-=t,this.countDown<0&&(this.countDown=0,this.onScheduleComplete())},r.onGameHide=function(){this.backStartTime=l.timer.getTime()},r.onScheduleSecond=function(){this.countDown--,this.format(),this.onSecond&&this.onSecond(this.node),0==this.countDown&&this.onScheduleComplete()},r.onScheduleComplete=function(){this.timing_end(),this.format(),this.onComplete&&this.onComplete(this.node)},r.timing_start=function(){this.schedule(this.onScheduleSecond,1)},r.timing_end=function(){this.unscheduleAllCallbacks()},e}(a)).prototype,"countDown",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1e3}}),y=e(S.prototype,"dayFormat",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return"{0} day"}}),D=e(S.prototype,"timeFormat",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return"{0}:{1}:{2}"}}),w=e(S.prototype,"zeroize",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),b=S))||b)||b));r._RF.pop()}}}));

System.register("chunks:///_virtual/Language.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Logger.ts","./LanguageData.ts","./LanguagePack.ts"],(function(a){var e,n,t,g,u,s;return{setters:[function(a){e=a.createClass},function(a){n=a.cclegacy,t=a.sys},function(a){g=a.Logger},function(a){u=a.LanguageData},function(a){s=a.LanguagePack}],execute:function(){n._RF.push({},"3757cxZqLZObIdvP/gQ6Yuj","Language",void 0);a("LanguageManager",function(){function a(){this._languages=[t.Language.CHINESE,t.Language.ENGLISH],this._languagePack=new s,this._defaultLanguage=t.Language.CHINESE}var n=a.prototype;return n.isExist=function(a){return this.languages.indexOf(a)>-1},n.getNextLang=function(){var a=this.languages,e=a.indexOf(u.current);return a[(e+1)%a.length]},n.setLanguage=function(a,e){var n=this;a=null==a||""==a?this._defaultLanguage:a.toLowerCase(),this.languages.indexOf(a)<0&&(console.log("当前不支持【"+a+"】语言，将自动切换到【"+this._defaultLanguage+"】语言"),a=this._defaultLanguage),a!==u.current?this.loadLanguageAssets(a,(function(t){g.instance.logConfig("当前语言为【"+a+"】");var s=u.current;u.current=a,n._languagePack.updateLanguage(a),n._languagePack.releaseLanguageAssets(s),e&&e(!0)})):e&&e(!1)},n.getLangByID=function(a){return u.getLangByID(a)},n.loadLanguageAssets=function(a,e){return a=a.toLowerCase(),this._languagePack.loadLanguageAssets(a,e)},n.releaseLanguageAssets=function(a){a=a.toLowerCase(),this._languagePack.releaseLanguageAssets(a)},e(a,[{key:"languages",get:function(){return this._languages},set:function(a){this._languages=a}},{key:"default",set:function(a){this._defaultLanguage=a||t.Language.CHINESE}},{key:"current",get:function(){return u.current}},{key:"pack",get:function(){return this._languagePack}}]),a}());n._RF.pop()}}}));

System.register("chunks:///_virtual/LanguageData.ts",["cc"],(function(e){var n;return{setters:[function(e){n=e.cclegacy}],execute:function(){n._RF.push({},"27fb3sjD81JlIP2KFTSWUp4","LanguageData",void 0);var a=e("LanguageData",function(){function e(){}return e.getLangByID=function(e){var n=this.json[e];if(n)return n;if(this.excel){var a=this.excel[e];if(a)return a[this.current]}return e},e}());a.path_json="language/json",a.path_texture="language/texture",a.path_spine="language/spine",a.current="",a.json={},a.excel=null,a.font=null;e("LanguageType",["LanguageLabel","LanguageSprite","LanguageSpine"]);n._RF.pop()}}}));

System.register("chunks:///_virtual/LanguageLabel.ts",["./rollupPluginModLoBabelHelpers.js","cc","./LanguageData.ts"],(function(t){var e,a,n,i,r,o,s,p,u,l,c,g,h;return{setters:[function(t){e=t.applyDecoratedDescriptor,a=t.initializerDefineProperty,n=t.inheritsLoose,i=t.assertThisInitialized,r=t.createClass},function(t){o=t.cclegacy,s=t._decorator,p=t.CCString,u=t.Label,l=t.RichText,c=t.warn,g=t.Component},function(t){h=t.LanguageData}],execute:function(){var d,f,y,m,b,L,_,v,D,I,z,k,w,C;o._RF.push({},"110c8vEd5NEPL/N9meGQnaX","LanguageLabel",void 0);var U=s.ccclass,P=s.property,S=s.menu,F=t("LangLabelParamsItem",U("LangLabelParamsItem")((y=e((f=function(){a(this,"key",y,this),a(this,"value",m,this)}).prototype,"key",[P],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),m=e(f.prototype,"value",[P],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),d=f))||d);t("LanguageLabel",(b=U("LanguageLabel"),L=S("OopsFramework/Language/LanguageLabel （文本多语言）"),_=P({type:F,displayName:"params"}),v=P({type:F,displayName:"params"}),D=P({serializable:!0}),I=P({type:p,serializable:!0}),b(z=L((w=e((k=function(t){function e(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return e=t.call.apply(t,[this].concat(r))||this,a(e,"_params",w,i(e)),a(e,"_dataID",C,i(e)),e.initFontSize=0,e._needUpdate=!1,e}n(e,t);var o=e.prototype;return o.language=function(){this._needUpdate=!0},o.onLoad=function(){this._needUpdate=!0},o.setVars=function(t,e){for(var a=!1,n=0;n<this._params.length;n++){var i=this._params[n];i.key===t&&(i.value=e,a=!0)}if(!a){var r=new F;r.key=t,r.value=e,this._params.push(r)}this._needUpdate=!0},o.update=function(){this._needUpdate&&(this.updateContent(),this._needUpdate=!1)},o.updateContent=function(){var t=this.getComponent(u),e=this.getComponent(l),a=h.font;t?(a&&(t.font=a),t.string=this.string,this.initFontSize=t.fontSize):e?(a&&(e.font=a),e.string=this.string,this.initFontSize=e.fontSize):c("[LanguageLabel], 该节点没有cc.Label || cc.RichText组件")},r(e,[{key:"params",get:function(){return this._params||[]},set:function(t){this._params=t,this._needUpdate=!0}},{key:"dataID",get:function(){return this._dataID||""},set:function(t){this._dataID=t,this._needUpdate=!0}},{key:"string",get:function(){var t=h.getLangByID(this._dataID);return t&&this._params.length>0&&this._params.forEach((function(e){t=t.replace("%{"+e.key+"}",e.value)})),t||(c("[LanguageLabel] 未找到语言标识，使用dataID替换"),t=this._dataID),t}}]),e}(g)).prototype,"_params",[_],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),e(k.prototype,"params",[v],Object.getOwnPropertyDescriptor(k.prototype,"params"),k.prototype),C=e(k.prototype,"_dataID",[D],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),e(k.prototype,"dataID",[I],Object.getOwnPropertyDescriptor(k.prototype,"dataID"),k.prototype),z=k))||z)||z));o._RF.pop()}}}));

System.register("chunks:///_virtual/LanguagePack.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ResLoader.ts","./Logger.ts","./JsonUtil.ts","./LanguageData.ts"],(function(n){var e,t,r,a,o,u,s,c,i,l,f,g;return{setters:[function(n){e=n.asyncToGenerator,t=n.regeneratorRuntime},function(n){r=n.cclegacy,a=n.director,o=n.error,u=n.TTFFont,s=n.JsonAsset},function(n){c=n.resLoader},function(n){i=n.Logger},function(n){l=n.JsonUtil},function(n){f=n.LanguageData,g=n.LanguageType}],execute:function(){r._RF.push({},"2ffebyj59xIc4v4BZty8SDm","LanguagePack",void 0);n("LanguagePack",function(){function n(){}var r=n.prototype;return r.updateLanguage=function(n){for(var e=a.getScene().children,t=function(n){g.forEach((function(t){for(var r=e[n].getComponentsInChildren(t),a=0;a<r.length;a++)r[a].language()}))},r=0;r<e.length;++r)t(r)},r.loadLanguageAssets=function(){var n=e(t().mark((function n(e,r){return t().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,this.loadTexture(e);case 2:return n.next=4,this.loadSpine(e);case 4:return n.next=6,this.loadJson(e);case 6:return n.next=8,this.loadTable(e);case 8:r(e);case 9:case"end":return n.stop()}}),n,this)})));return function(e,t){return n.apply(this,arguments)}}(),r.loadTable=function(n){return new Promise(e(t().mark((function n(e,r){return t().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,l.loadAsync("Language");case 2:f.excel=n.sent,f.excel&&i.instance.logConfig("config/game/Language","下载语言包 table 资源"),e(null);case 5:case"end":return n.stop()}}),n)}))))},r.loadTexture=function(n){return new Promise((function(e,t){var r=f.path_texture+"/"+n;c.loadDir(r,(function(n,t){if(n)return o(n),void e(null);i.instance.logConfig(r,"下载语言包 textures 资源"),e(null)}))}))},r.loadJson=function(n){return new Promise(e(t().mark((function e(r,a){var o,l;return t().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=f.path_json+"/"+n,e.next=3,c.loadAsync(o,s);case 3:if(!(l=e.sent)){e.next=9;break}f.json=l.json,i.instance.logConfig(o,"下载语言包 json 资源"),e.next=11;break;case 9:return r(null),e.abrupt("return");case 11:c.load(o,u,(function(n,e){null==n&&i.instance.logConfig(o,"下载语言包 ttf 资源"),f.font=e,r(null)}));case 12:case"end":return e.stop()}}),e)}))))},r.loadSpine=function(n){return new Promise(e(t().mark((function e(r,a){var u;return t().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:u=f.path_spine+"/"+n,c.loadDir(u,(function(n,e){if(n)return o(n),void r(null);i.instance.logConfig(u,"下载语言包 spine 资源"),r(null)}));case 2:case"end":return e.stop()}}),e)}))))},r.releaseLanguageAssets=function(n){var e=f.path_texture+"/"+n;c.releaseDir(e);var t=f.path_json+"/"+n,r=c.get(t,s);r&&r.decRef();var a=c.get(t,u);a&&a.decRef();var o=f.path_spine+"/"+n;c.release(o)},n}());r._RF.pop()}}}));

System.register("chunks:///_virtual/LanguageSpine.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ResLoader.ts","./LanguageData.ts"],(function(e){var t,a,n,i,o,r,u,p,s,c,l,g;return{setters:[function(e){t=e.applyDecoratedDescriptor,a=e.inheritsLoose,n=e.initializerDefineProperty,i=e.assertThisInitialized,o=e.createClass},function(e){r=e.cclegacy,u=e._decorator,p=e.CCString,s=e.sp,c=e.Component},function(e){l=e.resLoader},function(e){g=e.LanguageData}],execute:function(){var d,f,h,y,D,S,L;r._RF.push({},"53e25hqV6VEJqayXfz6Qam2","LanguageSpine",void 0);var m=u.ccclass,_=u.property,v=u.menu;e("LanguageSpine",(d=m("LanguageSpine"),f=v("OopsFramework/Language/LanguageSpine （Spine 动画多语言）"),h=_({serializable:!0}),y=_({type:p,serializable:!0}),d(D=f((L=t((S=function(e){function t(){for(var t,a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return t=e.call.apply(e,[this].concat(o))||this,n(t,"_dataID",L,i(t)),t._defaultAnimation="",t}a(t,e);var r=t.prototype;return r.onLoad=function(){var e=this.getComponent(s.Skeleton);this._defaultAnimation=e.animation},r.start=function(){this.updateSpine()},r.language=function(){this.updateSpine()},r.updateSpine=function(){var e="language/spine/"+g.current+"/"+this.dataID,t=l.get(e,s.SkeletonData);if(t){var a=this.getComponent(s.Skeleton);a.skeletonData=t,a.setAnimation(0,this._defaultAnimation,!0)}else console.error("[LanguageSpine] 资源不存在 "+e)},o(t,[{key:"dataID",get:function(){return this._dataID||""},set:function(e){this._dataID=e,this.updateSpine()}}]),t}(c)).prototype,"_dataID",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),t(S.prototype,"dataID",[y],Object.getOwnPropertyDescriptor(S.prototype,"dataID"),S.prototype),D=S))||D)||D));r._RF.pop()}}}));

System.register("chunks:///_virtual/LanguageSprite.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ResLoader.ts","./LanguageData.ts"],(function(e){var t,r,a,i,n,o,p,u,s,c,l,g,f,d;return{setters:[function(e){t=e.applyDecoratedDescriptor,r=e.inheritsLoose,a=e.initializerDefineProperty,i=e.assertThisInitialized,n=e.createClass},function(e){o=e.cclegacy,p=e._decorator,u=e.CCString,s=e.SpriteFrame,c=e.Sprite,l=e.UITransform,g=e.Component},function(e){f=e.resLoader},function(e){d=e.LanguageData}],execute:function(){var S,y,h,D,L,m,b,z,I;o._RF.push({},"11b96k/RIZF57Loehxyl6Hs","LanguageSprite",void 0);var v=p.ccclass,_=p.property,w=p.menu;e("LanguageSprite",(S=v("LanguageSprite"),y=w("OopsFramework/Language/LanguageSprite （图片多语言）"),h=_({serializable:!0}),D=_({type:u,serializable:!0}),L=_({tooltip:"是否设置为图片原始资源大小"}),S(m=y((z=t((b=function(e){function t(){for(var t,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return t=e.call.apply(e,[this].concat(n))||this,a(t,"_dataID",z,i(t)),a(t,"isRawSize",I,i(t)),t}r(t,e);var o=t.prototype;return o.start=function(){this.updateSprite()},o.language=function(){this.updateSprite()},o.updateSprite=function(){var e="language/texture/"+d.current+"/"+this.dataID+"/spriteFrame",t=f.get(e,s);if(t){var r=this.getComponent(c);if(r.spriteFrame=t,this.isRawSize){var a,i=t._originalSize;null==(a=r.getComponent(l))||a.setContentSize(i)}}else console.error("[LanguageSprite] 资源不存在 "+e)},n(t,[{key:"dataID",get:function(){return this._dataID||""},set:function(e){this._dataID=e,this.updateSprite()}}]),t}(g)).prototype,"_dataID",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),t(b.prototype,"dataID",[D],Object.getOwnPropertyDescriptor(b.prototype,"dataID"),b.prototype),I=t(b.prototype,"isRawSize",[L],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),m=b))||m)||m));o._RF.pop()}}}));

System.register("chunks:///_virtual/LayerDialog.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Defines.ts","./LayerPopup.ts"],(function(s){var t,a,i,n;return{setters:[function(s){t=s.inheritsLoose},function(s){a=s.cclegacy},function(s){i=s.ViewParams},function(s){n=s.LayerPopUp}],execute:function(){a._RF.push({},"dcad5w8wHlEDJpIKJ4gUxEP","LayerDialog",void 0);s("LayerDialog",function(s){function a(){for(var t,a=arguments.length,i=new Array(a),n=0;n<a;n++)i[n]=arguments[n];return(t=s.call.apply(s,[this].concat(i))||this).params=[],t}t(a,s);var n=a.prototype;return n.add=function(s,t,a){this.ui_nodes.size>0?this.params.push({config:s,params:t,callbacks:a}):this.show(s,t,a)},n.show=function(s,t,a){var n=this.ui_cache.get(s.prefab);null==n&&((n=new i).valid=!0,n.config=s),n.params=t||{},n.callbacks=null!=a?a:{},this.ui_nodes.set(n.config.prefab,n),this.load(n,s.bundle)},n.onCloseWindow=function(t){s.prototype.onCloseWindow.call(this,t),setTimeout(this.next.bind(this),0)},n.setBlackDisable=function(){0==this.params.length&&(this.black.enabled=!1,this.closeVacancyRemove(),this.closeMask())},n.next=function(){if(this.params.length>0){var s=this.params.shift();this.show(s.config,s.params,s.callbacks)}},a}(n));a._RF.pop()}}}));

System.register("chunks:///_virtual/LayerManager.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./DelegateComponent.ts","./LayerDialog.ts","./LayerNotify.ts","./LayerPopup.ts","./LayerUI.ts"],(function(e){var i,t,o,a,n,s,r,c,p,h,u,l,d,f,g,y,v,m;return{setters:[function(e){i=e.asyncToGenerator,t=e.regeneratorRuntime},function(e){o=e.cclegacy,a=e.Camera,n=e.view,s=e.screen,r=e.ResolutionPolicy,c=e.SafeArea,p=e.warn,h=e.Node,u=e.Layers,l=e.Widget},function(e){d=e.oops},function(e){f=e.DelegateComponent},function(e){g=e.LayerDialog},function(e){y=e.LayerNotify},function(e){v=e.LayerPopUp},function(e){m=e.LayerUI}],execute:function(){o._RF.push({},"7ba675xFGdHqIOykTysNzEu","LayerManager",void 0);e("ScreenAdapterType",function(e){return e[e.Auto=0]="Auto",e[e.Landscape=1]="Landscape",e[e.Portrait=2]="Portrait",e}({}));var b=e("LayerType",function(e){return e.Game="LayerGame",e.UI="LayerUI",e.PopUp="LayerPopUp",e.Dialog="LayerDialog",e.System="LayerSystem",e.Notify="LayerNotify",e.Guide="LayerGuide",e}({}));e("LayerManager",function(){function e(){this.root=void 0,this.camera=void 0,this.game=void 0,this.guide=void 0,this.windowAspectRatio=0,this.designAspectRatio=0,this.mobileSafeArea=!1,this.ui=void 0,this.popup=void 0,this.dialog=void 0,this.system=void 0,this.notify=void 0,this.configs={}}var o=e.prototype;return o.initLayer=function(e){this.root=e,this.initScreenAdapter(),this.camera=this.root.getComponentInChildren(a),this.game=this.create_node(b.Game),this.ui=new m(b.UI),this.popup=new v(b.PopUp),this.dialog=new g(b.Dialog),this.system=new g(b.System),this.notify=new y(b.Notify),this.guide=this.create_node(b.Guide),e.addChild(this.game),e.addChild(this.ui),e.addChild(this.popup),e.addChild(this.dialog),e.addChild(this.system),e.addChild(this.notify),e.addChild(this.guide)},o.initScreenAdapter=function(){var e=n.getDesignResolutionSize(),i=s.windowSize;this.windowAspectRatio=i.width/i.height,this.designAspectRatio=e.width/e.height;var t=0,o=0;this.windowAspectRatio>this.designAspectRatio?(t=(o=e.height)*i.width/i.height,d.log.logView("适配屏幕高度","【横屏】")):(o=(t=e.width)*i.height/i.width,d.log.logView("适配屏幕宽度","【竖屏】")),n.setDesignResolutionSize(t,o,r.UNKNOWN),this.mobileSafeArea&&(this.root.addComponent(c),d.log.logView("开启移动设备安全区域适配"))},o.init=function(e){this.configs=e},o.setOpenFailure=function(e){this.ui.onOpenFailure=this.popup.onOpenFailure=this.dialog.onOpenFailure=this.system.onOpenFailure=e},o.toast=function(e,i){void 0===i&&(i=!1),this.notify.toast(e,i)},o.waitOpen=function(){this.notify.waitOpen()},o.waitClose=function(){this.notify.waitClose()},o.setConfig=function(e,i){this.configs[e]=i},o.open=function(e,i,t){void 0===i&&(i=null);var o=this.configs[e];if(null!=o)switch(o.layer){case b.UI:this.ui.add(o,i,t);break;case b.PopUp:this.popup.add(o,i,t);break;case b.Dialog:this.dialog.add(o,i,t);break;case b.System:this.system.add(o,i,t)}else p("打开编号为【"+e+"】的界面失败，配置信息不存在")},o.openAsync=function(){var e=i(t().mark((function e(i,o){var a=this;return t().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return void 0===o&&(o=null),e.abrupt("return",new Promise((function(e,t){var n={onAdded:function(i,t){e(i)},onLoadFailure:function(){e(null)}};a.open(i,o,n)})));case 2:case"end":return e.stop()}}),e)})));return function(i,t){return e.apply(this,arguments)}}(),o.replace=function(e,i,t){var o=this;void 0===t&&(t=null);var a={onAdded:function(i,t){o.remove(e)}};this.open(i,t,a)},o.replaceAsync=function(e,o,a){var n=this;return void 0===a&&(a=null),new Promise(i(t().mark((function i(s,r){var c;return t().wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return i.next=2,n.openAsync(o,a);case 2:(c=i.sent)?(n.remove(e),s(c)):s(null);case 4:case"end":return i.stop()}}),i)}))))},o.has=function(e){var i=this.configs[e];if(null==i)return p("编号为【"+e+"】的界面配置不存在，配置信息不存在"),!1;var t=!1;switch(i.layer){case b.UI:t=this.ui.has(i.prefab);break;case b.PopUp:t=this.popup.has(i.prefab);break;case b.Dialog:t=this.dialog.has(i.prefab);break;case b.System:t=this.system.has(i.prefab)}return t},o.get=function(e){var i=this.configs[e];if(null==i)return p("编号为【"+e+"】的界面配置不存在，配置信息不存在"),null;var t=null;switch(i.layer){case b.UI:t=this.ui.get(i.prefab);break;case b.PopUp:t=this.popup.get(i.prefab);break;case b.Dialog:t=this.dialog.get(i.prefab);break;case b.System:t=this.system.get(i.prefab)}return t},o.remove=function(e,i){var t=this.configs[e];if(null!=t)switch(t.layer){case b.UI:this.ui.remove(t.prefab,i);break;case b.PopUp:this.popup.remove(t.prefab,i);break;case b.Dialog:this.dialog.remove(t.prefab,i);break;case b.System:this.system.remove(t.prefab,i)}else p("删除编号为【"+e+"】的界面失败，配置信息不存在")},o.removeByNode=function(e,i){if(e instanceof h){var t=e.getComponent(f);if(t&&t.vp){if(e.parent)e.parent.remove(t.vp.config.prefab,i);else if(i)switch(t.vp.config.layer){case b.UI:this.ui.removeCache(t.vp.config.prefab);break;case b.PopUp:this.popup.removeCache(t.vp.config.prefab);break;case b.Dialog:this.dialog.removeCache(t.vp.config.prefab);break;case b.System:this.system.removeCache(t.vp.config.prefab)}}else p("当前删除的node不是通过界面管理器添加到舞台上"),e.destroy()}},o.clear=function(e){void 0===e&&(e=!1),this.ui.clear(e),this.popup.clear(e),this.dialog.clear(e),this.system.clear(e)},o.create_node=function(e){var i=new h(e);i.layer=u.Enum.UI_2D;var t=i.addComponent(l);return t.isAlignLeft=t.isAlignRight=t.isAlignTop=t.isAlignBottom=!0,t.left=t.right=t.top=t.bottom=0,t.alignMode=2,t.enabled=!0,i},e}());o._RF.pop()}}}));

System.register("chunks:///_virtual/LayerNotify.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ViewUtil.ts","./Notify.ts"],(function(t){var i,n,e,o,a,l,s,r,h;return{setters:[function(t){i=t.inheritsLoose},function(t){n=t.cclegacy,e=t.Layers,o=t.BlockInputEvents,a=t.instantiate,l=t.Widget,s=t.Node},function(t){r=t.ViewUtil},function(t){h=t.Notify}],execute:function(){n._RF.push({},"da14ax+B2xNsL2taQFOh7we","LayerNotify",void 0);t("LayerNotify",function(t){function n(i){var n;(n=t.call(this,i)||this).black=void 0,n.wait=null,n.notify=null,n.notifyItem=null;var e=n.addComponent(l);return e.isAlignLeft=e.isAlignRight=e.isAlignTop=e.isAlignBottom=!0,e.left=e.right=e.top=e.bottom=0,e.alignMode=2,e.enabled=!0,n.init(),n}i(n,t);var s=n.prototype;return s.init=function(){this.layer=e.Enum.UI_2D,this.black=this.addComponent(o),this.black.enabled=!1},s.waitOpen=function(){null==this.wait&&(this.wait=r.createPrefabNode("common/prefab/wait")),null==this.wait.parent&&(this.wait.parent=this,this.black.enabled=!0)},s.waitClose=function(){this.wait&&this.wait.parent&&(this.wait.parent=null,this.black.enabled=!1)},s.toast=function(t,i){var n=this;null==this.notify&&(this.notify=r.createPrefabNode("common/prefab/notify"),this.notifyItem=this.notify.children[0],this.notifyItem.parent=null),this.notify.parent=this;var e=a(this.notifyItem),o=e.getChildByName("prompt").getComponent(h);e.parent=this.notify,o.onComplete=function(){0==n.notify.children.length&&(n.notify.parent=null)},o.toast(t,i),this.notify.children.length>3&&this.notify.children[0].destroy()},n}(s));n._RF.pop()}}}));

System.register("chunks:///_virtual/LayerPopup.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ViewUtil.ts","./LayerUI.ts"],(function(e){var t,n,i,s,o,a,c,r,h,l;return{setters:[function(e){t=e.inheritsLoose,n=e.createForOfIteratorHelperLoose,i=e.asyncToGenerator,s=e.regeneratorRuntime},function(e){o=e.cclegacy,a=e.Layers,c=e.Node,r=e.BlockInputEvents},function(e){h=e.ViewUtil},function(e){l=e.LayerUI}],execute:function(){o._RF.push({},"25d07BQBCFADaSsh/I3GrTX","LayerPopup",void 0);e("LayerPopUp",function(e){function o(t){var n;return(n=e.call(this,t)||this).black=void 0,n.mask=void 0,n.init(),n}t(o,e);var l=o.prototype;return l.init=function(){this.layer=a.Enum.UI_2D,this.on(c.EventType.CHILD_ADDED,this.onChildAdded,this),this.on(c.EventType.CHILD_REMOVED,this.onChildRemoved,this)},l.onChildAdded=function(e){this.mask&&this.mask.setSiblingIndex(this.children.length-2)},l.onChildRemoved=function(e){this.mask&&this.mask.setSiblingIndex(this.children.length-2)},l.showUi=function(){var t=i(s().mark((function t(n){var i;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.prototype.showUi.call(this,n);case 2:return(i=t.sent)&&(this.openVacancyRemove(n.config),this.black.enabled=!0),t.abrupt("return",i);case 5:case"end":return t.stop()}}),t,this)})));return function(e){return t.apply(this,arguments)}}(),l.onCloseWindow=function(t){e.prototype.onCloseWindow.call(this,t),this.setBlackDisable()},l.setBlackDisable=function(){0==this.ui_nodes.size&&(this.black.enabled=!1,this.closeVacancyRemove(),this.closeMask())},l.closeMask=function(){if(null!=this.mask){for(var e,t=!0,i=n(this.ui_nodes.values());!(e=i()).done;){if(e.value.config.mask){t=!1;break}}t&&(this.mask.parent=null)}},l.openVacancyRemove=function(e){null==this.mask&&(this.mask=h.createPrefabNode("common/prefab/mask"),this.mask.on(c.EventType.TOUCH_END,this.onTouchEnd,this),this.black=this.mask.addComponent(r),this.black.enabled=!1),e.mask&&(this.mask.parent=this)},l.onTouchEnd=function(e){if(this.ui_nodes.size>0){var t=this.ui_nodes.array[this.ui_nodes.size-1];t.valid&&t.config.vacancy&&this.remove(t.config.prefab,t.config.destroy)}},l.closeVacancyRemove=function(){for(var e,t=!0,i=n(this.ui_nodes.values());!(e=i()).done;){if(e.value.config.vacancy){t=!1;break}}t&&this.hasEventListener(c.EventType.TOUCH_END,this.onTouchEnd,this)&&this.off(c.EventType.TOUCH_END,this.onTouchEnd,this)},l.clear=function(t){e.prototype.clear.call(this,t),this.black&&(this.black.enabled=!1),this.closeVacancyRemove(),this.closeMask()},o}(l));o._RF.pop()}}}));

System.register("chunks:///_virtual/LayerUI.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Collection.ts","./Oops.ts","./Defines.ts","./DelegateComponent.ts"],(function(e){var n,t,o,i,a,r,s,c,u,l,d,f,h;return{setters:[function(e){n=e.inheritsLoose,t=e.asyncToGenerator,o=e.regeneratorRuntime},function(e){i=e.cclegacy,a=e.Widget,r=e.Node,s=e.instantiate,c=e.SafeArea,u=e.Prefab},function(e){l=e.Collection},function(e){d=e.oops},function(e){f=e.ViewParams},function(e){h=e.DelegateComponent}],execute:function(){i._RF.push({},"bc8b86Br9dGeKxeLijkyJKE","LayerUI",void 0);e("LayerUI",function(e){function i(n){var t;(t=e.call(this,n)||this).onOpenFailure=null,t.ui_nodes=new l,t.ui_cache=new Map;var o=t.addComponent(a);return o.isAlignLeft=o.isAlignRight=o.isAlignTop=o.isAlignBottom=!0,o.left=o.right=o.top=o.bottom=0,o.alignMode=2,o.enabled=!0,t}n(i,e);var r=i.prototype;return r.add=function(e,n,t){if(this.ui_nodes.has(e.prefab))console.warn("路径为【"+e.prefab+"】的预制重复加载");else{var o=this.ui_cache.get(e.prefab);null==o&&((o=new f).config=e),this.ui_nodes.set(e.prefab,o),o.params=null!=n?n:{},o.callbacks=null!=t?t:{},o.valid=!0,this.load(o,e.bundle)}},r.load=function(){var e=t(o().mark((function e(n,t){var i,a,r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=setTimeout(this.onLoadingTimeoutGui,d.config.game.loadingTimeoutGui),!n||!n.node){e.next=6;break}return e.next=4,this.showUi(n);case 4:e.next=22;break;case 6:return t=t||d.res.defaultBundleName,e.next=9,d.res.loadAsync(t,n.config.prefab,u);case 9:if(!(a=e.sent)){e.next=20;break}return n.node=s(a),n.config.safeArea&&n.node.addComponent(c),(r=n.node.addComponent(h)).vp=n,r.onCloseWindow=this.onCloseWindow.bind(this),e.next=18,this.showUi(n);case 18:e.next=22;break;case 20:console.warn("路径为【"+n.config.prefab+"】的预制加载失败"),this.failure(n);case 22:d.gui.waitClose(),clearTimeout(i);case 24:case"end":return e.stop()}}),e,this)})));return function(n,t){return e.apply(this,arguments)}}(),r.onLoadingTimeoutGui=function(){d.gui.waitOpen()},r.onCloseWindow=function(e){this.ui_nodes.delete(e.config.prefab)},r.showUi=function(){var e=t(o().mark((function e(n){var t,i;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.node.getComponent(h),e.next=3,t.add();case 3:return(i=e.sent)?(n.node.parent=this,n.valid=!0):(console.warn("路径为【"+n.config.prefab+"】的自定义预处理逻辑异常.检查预制上绑定的组件中 onAdded 方法,返回true才能正确完成窗口显示流程"),this.failure(n)),e.abrupt("return",i);case 6:case"end":return e.stop()}}),e,this)})));return function(n){return e.apply(this,arguments)}}(),r.failure=function(e){this.onCloseWindow(e),e.callbacks&&e.callbacks.onLoadFailure&&e.callbacks.onLoadFailure(),this.onOpenFailure&&this.onOpenFailure()},r.remove=function(e,n){var t=void 0;void 0!==n&&(t=n);var o=this.ui_nodes.get(e);o&&(void 0===t&&(t=void 0===o.config.destroy||o.config.destroy),!1===t&&this.ui_cache.set(o.config.prefab,o),o.node.getComponent(h).remove(t));!0===t&&this.removeCache(e)},r.removeCache=function(e){var n=this.ui_cache.get(e);n&&(this.onCloseWindow(n),this.ui_cache.delete(e),n.node.destroy())},r.get=function(e){var n=this.ui_nodes.get(e);return n?n.node:null},r.has=function(e){return this.ui_nodes.has(e)},r.clear=function(e){var n=this;this.ui_nodes.forEach((function(t,o){n.remove(t.config.prefab,e),t.valid=!1})),this.ui_nodes.clear(),e&&this.ui_cache.forEach((function(e,t){n.removeCache(t)}))},i}(r));i._RF.pop()}}}));

System.register("chunks:///_virtual/LayerUtil.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var n,t;return{setters:[function(e){n=e.createClass},function(e){t=e.cclegacy}],execute:function(){t._RF.push({},"b7a864Zpb5N4Zm7onWE1i9D","LayerUtil",void 0);var i=e("LayerItem",function(){function e(e,n){this._value=void 0,this._name=void 0,this._value=e,this._name=n}return n(e,[{key:"value",get:function(){return this._value}},{key:"name",get:function(){return this._name}},{key:"mask",get:function(){return 1<<this._value}}]),e}()),r=e("LayerUtil",function(){function e(){}return e.setNodeLayer=function(n,t){t.layer=n.mask,t.children.forEach((function(t){t.layer=n.mask,e.setNodeLayer(n,t)}))},e}());r.MAP=new i(0,"MAP"),r.AVATAR=new i(1,"AVATAR"),r.IGNORE_RAYCAST=new i(20,"IGNORE_RAYCAST"),r.GIZMOS=new i(21,"GIZMOS"),r.EDITOR=new i(22,"EDITOR"),r.UI_3D=new i(23,"UI_3D"),r.SCENE_GIZMO=new i(24,"SCENE_GIZMO"),r.UI_2D=new i(25,"UI_2D"),r.PROFILTER=new i(28,"PROFILTER"),r.DEFAULT=new i(30,"DEFAULT"),t._RF.pop()}}}));

System.register("chunks:///_virtual/List.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,n;return{setters:[function(e){t=e.createClass},function(e){n=e.cclegacy}],execute:function(){n._RF.push({},"f4d36IVkDZEFYGJyOy6wiZw","List",void 0);e("List",function(){function e(e){void 0===e&&(e=!0),this.element=void 0,this.only=!1,this.count=0,this.only=e,this.element=[]}var n=e.prototype;return n.push=function(e){if(this.only&&this.element.indexOf(e)>=0)return!1;return this.element.push(e),this.count=this.element.length,!0},n.unshift=function(e){if(this.only&&this.element.indexOf(e)>=0)return!1;return this.element.unshift(e),this.count=this.element.length,!0},n.pop=function(){if(this.element.length>0){var e=this.element.pop();return this.count=this.element.length,e}return null},n.shift=function(){if(this.element.length>0){var e=this.element.shift();return this.count=this.element.length,e}return null},n.removeAt=function(e){if(e>=this.element.length)throw new Error("删除索引超出范围！");var t=this.element[e];return this.element.splice(e,1),this.count=this.element.length,t},n.remove=function(e){var t=this.element.indexOf(e);if(t<0)throw new Error("要删除的内容不在列表中！"+e);this.element[t];this.element.splice(t,1),this.count=this.element.length},n.clear=function(){this.count=0,this.element.length=0},n.has=function(e){return this.find(e)>=0},n.find=function(e){return this.element.indexOf(e)},n.findIndex=function(e){return this.element.findIndex(e)},n.get=function(e){if(e>=this.element.length)throw new Error("超出索引范围:"+e+"/"+this.element.length);return this.element[e]},t(e,[{key:"elements",get:function(){return this.element}}]),e}());n._RF.pop()}}}));

System.register("chunks:///_virtual/LoadingIndicator.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var o,i,n,r,e,a,l,c;return{setters:[function(t){o=t.applyDecoratedDescriptor,i=t.inheritsLoose,n=t.initializerDefineProperty,r=t.assertThisInitialized},function(t){e=t.cclegacy,a=t._decorator,l=t.Node,c=t.Component}],execute:function(){var s,d,u,p,g;e._RF.push({},"95143M/82NCOLKGzw14JlmS","LoadingIndicator",void 0);var h=a.ccclass,f=a.property;t("LoadingIndicator",(s=h("LoadingIndicator"),d=f(l),s((g=o((p=function(t){function o(){for(var o,i=arguments.length,e=new Array(i),a=0;a<i;a++)e[a]=arguments[a];return o=t.call.apply(t,[this].concat(e))||this,n(o,"loading",g,r(o)),o.loading_rotate=0,o}return i(o,t),o.prototype.update=function(t){this.loading_rotate+=220*t,this.loading.setRotationFromEuler(0,0,-this.loading_rotate%360),this.loading_rotate>360&&(this.loading_rotate-=360)},o}(c)).prototype,"loading",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),u=p))||u));e._RF.pop()}}}));

System.register("chunks:///_virtual/LoadingViewComp.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./ECS.ts","./CCVMParentComp.ts","./ModuleUtil.ts","./SingletonModuleComp.ts","./GameUIConfig.ts","./shipMain.ts"],(function(t){var n,e,o,a,i,r,s,c,u,l,p,d;return{setters:[function(t){n=t.inheritsLoose,e=t.asyncToGenerator,o=t.regeneratorRuntime},function(t){a=t.cclegacy,i=t._decorator},function(t){r=t.oops},function(t){s=t.ecs},function(t){c=t.CCVMParentComp},function(t){u=t.ModuleUtil},function(t){l=t.smc},function(t){p=t.UIID},function(t){d=t.shipMain}],execute:function(){var g;a._RF.push({},"92429ykTnxFCrcGyW58JWjj","LoadingViewComp",void 0);var h=i.ccclass;i.property,t("LoadingViewComp",h("LoadingViewComp")(g=s.register("LoadingView",!1)(g=function(t){function a(){for(var n,e=arguments.length,o=new Array(e),a=0;a<e;a++)o[a]=arguments[a];return(n=t.call.apply(t,[this].concat(o))||this).data={finished:0,total:0,progress:"0",prompt:""},n.progress=0,n}n(a,t);var i=a.prototype;return i.start=function(){this.enter()},i.enter=function(){this.loadRes()},i.loadRes=function(){var t=e(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.data.progress=0,t.next=3,this.loadCustom();case 3:this.loadGameRes();case 4:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}(),i.loadCustom=function(){this.data.prompt=r.language.getLangByID("loading_load_json")},i.loadGameRes=function(){this.data.prompt=r.language.getLangByID("loading_load_game"),r.res.loadDir("game",this.onProgressCallback.bind(this),this.onCompleteCallback.bind(this))},i.onProgressCallback=function(t,n,e){this.data.finished=t,this.data.total=n;var o=t/n;o>this.progress&&(this.progress=o,this.data.progress=(100*o).toFixed(2))},i.onCompleteCallback=function(){var t=e(o().mark((function t(){return o().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return this.data.prompt=r.language.getLangByID("loading_load_player"),t.next=3,u.addViewUiAsync(l.account,d,p.Main);case 3:u.removeViewUi(this.ent,a,p.Loading);case 4:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}(),i.reset=function(){},a}(c))||g)||g);a._RF.pop()}}}));

System.register("chunks:///_virtual/Logger.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var n,i,e;return{setters:[function(t){n=t.createClass},function(t){i=t.cclegacy,e=t.log}],execute:function(){i._RF.push({},"479cdJANP5KaJgU+8z0DdSE","Logger",void 0);var s=t("LogType",function(t){return t[t.Net=1]="Net",t[t.Model=2]="Model",t[t.Business=4]="Business",t[t.View=8]="View",t[t.Config=16]="Config",t[t.Trace=32]="Trace",t}({})),o={1:"网络日志",2:"数据日志",4:"业务日志",8:"视图日志",16:"配置日志",32:"标准日志"};t("Logger",function(){function t(){this.tags=0,this.lc=null}var i=t.prototype;return i.setLoggerConsole=function(t){this.lc=t},i.init=function(){this.tags=s.Net|s.Model|s.Business|s.View|s.Config|s.Trace},i.setTags=function(t){void 0===t&&(t=null),t&&(this.tags=t)},i.start=function(t){void 0===t&&(t="Time"),console.time(t)},i.end=function(t){void 0===t&&(t="Time"),console.timeEnd(t)},i.table=function(t,n){this.isOpen(s.Trace)&&console.table(t)},i.trace=function(t,n){void 0===n&&(n="#000000"),this.print(s.Trace,t,n)},i.logNet=function(t,n){this.orange(s.Net,t,n)},i.logModel=function(t,n){this.violet(s.Model,t,n)},i.logBusiness=function(t,n){this.blue(s.Business,t,n)},i.logView=function(t,n){this.green(s.View,t,n)},i.logConfig=function(t,n){this.gray(s.Config,t,n)},i.orange=function(t,n,i){this.print(t,n,"#ee7700",i)},i.violet=function(t,n,i){this.print(t,n,"#800080",i)},i.blue=function(t,n,i){this.print(t,n,"#3a5fcd",i)},i.green=function(t,n,i){this.print(t,n,"#008000",i)},i.gray=function(t,n,i){this.print(t,n,"#808080",i)},i.isOpen=function(t){return 0!=(this.tags&t)},i.print=function(t,n,i,s){if(this.isOpen(t)){var r=o[t];if(null==this.lc){var c=console.log||e;i="color:"+i+";",s?c.call(null,"%c%s%s%s:%s%o",i,this.getDateString(),"["+r+"]",this.stack(5),s,n):c.call(null,"%c%s%s%s:%o",i,this.getDateString(),"["+r+"]",this.stack(5),n)}else this.lc.trace(this.getDateString()+"["+r+"]"+n,i)}},i.stack=function(t){var n=(new Error).stack.split("\n"),i=[];n.forEach((function(t){var n,e=(t=t.substring(7)).split(" ");e.length<2?i.push(e[0]):i.push(((n={})[e[0]]=e[1],n))}));var e,s=[],o=[];if(t<i.length-1)for(var r in i[t])if(2==(o=r.split(".")).length)s=o.concat();else{var c=(e=i[t][r]).lastIndexOf("/"),l=e.lastIndexOf(".");if(c>-1&&l>-1){var g=e.substring(c+1,l);s.push(g)}else s.push(e)}return 1==s.length?"["+s[0]+".ts]":2==s.length?"["+s[0]+".ts->"+s[1]+"]":""},i.getDateString=function(){var t=new Date,n=t.getHours().toString(),i="";return i+=(1==n.length?"0"+n:n)+":",i+=(1==(n=t.getMinutes().toString()).length?"0"+n:n)+":",i+=(1==(n=t.getSeconds().toString()).length?"0"+n:n)+":",1==(n=t.getMilliseconds().toString()).length&&(n="00"+n),2==n.length&&(n="0"+n),i="["+(i+=n)+"]"},n(t,null,[{key:"instance",get:function(){return null==this._instance&&(this._instance=new t,this._instance.init()),this._instance}}]),t}())._instance=void 0,i._RF.pop()}}}));

System.register("chunks:///_virtual/main",["./Main.ts","./Account.ts","./AccountModelComp.ts","./DemoViewComp.ts","./SingletonModuleComp.ts","./GameEvent.ts","./GameStorageConfig.ts","./GameUIConfig.ts","./TableLanguage.ts","./TablePromptWindow.ts","./TipsManager.ts","./Initialize.ts","./InitRes.ts","./LoadingViewComp.ts","./dataInterface.ts","./playerAni.ts","./selectFun.ts","./shipMain.ts","./Oops.ts","./Root.ts","./AudioEffect.ts","./AudioEffectPool.ts","./AudioManager.ts","./AudioMusic.ts","./EventDispatcher.ts","./EventMessage.ts","./MessageManager.ts","./ResLoader.ts","./Logger.ts","./RandomManager.ts","./SeedRandom.ts","./StorageManager.ts","./StorageSecurityCrypto.ts","./StorageSecuritySimple.ts","./Timer.ts","./TimerManager.ts","./GameManager.ts","./Defines.ts","./DelegateComponent.ts","./LayerDialog.ts","./LayerManager.ts","./LayerNotify.ts","./LayerPopup.ts","./LayerUI.ts","./CommonPrompt.ts","./LoadingIndicator.ts","./Notify.ts","./ArrayUtil.ts","./CameraUtil.ts","./DeviceUtil.ts","./EncryptUtil.ts","./ImageUtil.ts","./JsonUtil.ts","./LayerUtil.ts","./MathUtil.ts","./ObjectUtil.ts","./PhysicsUtil.ts","./PlatformUtil.ts","./RegexUtil.ts","./RotateUtil.ts","./StringUtil.ts","./TimeUtils.ts","./Vec3Util.ts","./ViewUtil.ts","./Ambilight.ts","./FlashSpine.ts","./FlashSprite.ts","./SpineFinishedRelease.ts","./Effect2DFollow3D.ts","./EffectDelayRelease.ts","./EffectEvent.ts","./EffectFinishedRelease.ts","./EffectSingleCase.ts","./MoveRigidBody.ts","./MoveTo.ts","./MoveTranslate.ts","./AnimatorAnimation.ts","./AnimatorCustomization.ts","./AnimatorDragonBones.ts","./AnimatorSkeletal.ts","./AnimatorSpine.ts","./AnimatorSpineSecondary.ts","./AnimatorBase.ts","./AnimatorCondition.ts","./AnimatorController.ts","./AnimatorParams.ts","./AnimatorState.ts","./AnimatorStateLogic.ts","./AnimatorTransition.ts","./BTreeNode.ts","./BehaviorTree.ts","./BranchNode.ts","./Decorator.ts","./IControl.ts","./Priority.ts","./Selector.ts","./Sequence.ts","./Task.ts","./index.ts","./FreeFlightCamera.ts","./OrbitCamera.ts","./AsyncQueue.ts","./Collection.ts","./List.ts","./ECS.ts","./ECSComp.ts","./ECSEntity.ts","./ECSGroup.ts","./ECSMask.ts","./ECSMatcher.ts","./ECSModel.ts","./ECSSystem.ts","./ArrayExt.ts","./DateExt.ts","./DirectorExt.ts","./NodeDragExt.ts","./NodeExt.ts","./ButtonEffect.ts","./ButtonSimple.ts","./ButtonTouchLong.ts","./UIButton.ts","./LabelChange.ts","./LabelNumber.ts","./LabelTime.ts","./Language.ts","./LanguageData.ts","./LanguageLabel.ts","./LanguagePack.ts","./LanguageSpine.ts","./LanguageSprite.ts","./JsonOb.ts","./StringFormat.ts","./VMBase.ts","./VMCompsEdit.ts","./VMCustom.ts","./VMEnv.ts","./VMEvent.ts","./VMLabel.ts","./VMModify.ts","./VMParent.ts","./VMProgress.ts","./VMState.ts","./ViewModel.ts","./BhvButtonGroup.ts","./BhvFrameIndex.ts","./BhvRollNumber.ts","./BhvSwitchPage.ts","./HttpRequest.ts","./NetInterface.ts","./NetManager.ts","./NetNode.ts","./NetProtocolPako.ts","./WebSock.ts","./RtToModel.ts","./RtToSprite.ts","./CCComp.ts","./CCVMParentComp.ts","./GameCollision.ts","./GameComponent.ts","./ModuleUtil.ts","./BuildTimeConstants.ts","./Config.ts","./GameConfig.ts","./GameQueryConfig.ts"],(function(){return{setters:[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],execute:function(){}}}));

System.register("chunks:///_virtual/Main.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./Root.ts","./ECS.ts","./Account.ts","./SingletonModuleComp.ts","./GameUIConfig.ts","./Initialize.ts"],(function(t){var n,i,o,c,u,e,s,r,a,f;return{setters:[function(t){n=t.inheritsLoose},function(t){i=t.cclegacy,o=t._decorator},function(t){c=t.oops},function(t){u=t.Root},function(t){e=t.ecs},function(t){s=t.Account},function(t){r=t.smc},function(t){a=t.UIConfigData},function(t){f=t.Initialize}],execute:function(){var l;i._RF.push({},"0eec0s4qrZF7onPlYBrD+y+","Main",void 0);var p=o.ccclass;o.property,t("Main",p("Main")(l=function(t){function i(){return t.apply(this,arguments)||this}n(i,t);var o=i.prototype;return o.start=function(){},o.run=function(){r.initialize=e.getEntity(f),r.account=e.getEntity(s)},o.initGui=function(){c.gui.init(a)},i}(u))||l);i._RF.pop()}}}));

System.register("chunks:///_virtual/MathUtil.ts",["cc"],(function(t){var n;return{setters:[function(t){n=t.cclegacy}],execute:function(){n._RF.push({},"8c615ZS4PRMPKPA9ZqKjiJC","MathUtil",void 0);var r=t("MathUtil",function(){function t(){}return t.sign=function(t){return t>0?1:t<0?-1:0},t.progress=function(t,n,r){return t+(n-t)*r},t.lerp=function(t,n,r){return r>1?r=1:r<0&&(r=0),t*(1-r)+n*r},t.lerpAngle=function(n,r,e){var u=(r%=360)-(n%=360);return u>180?r=n-(360-u):u<-180&&(r=n+(360+u)),(t.lerp(n,r,e)%360+360)%360},t.angleTowards=function(t,n,r){var e=(n%=360)-(t%=360);e>180?n=t-(360-e):e<-180&&(n=t+(360+e));var u=n-t;return r>Math.abs(u)?n:((t+r*Math.sign(u))%360+360)%360},t.clamp=function(t,n,r){return t<n?n:t>r?r:t},t.probability=function(t){return Math.random()<t},t}());r.deg2Rad=Math.PI/180,r.rad2Deg=180/Math.PI,n._RF.pop()}}}));

System.register("chunks:///_virtual/MessageManager.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,n,r,s;return{setters:[function(e){t=e.createForOfIteratorHelperLoose},function(e){n=e.cclegacy,r=e.warn,s=e.log}],execute:function(){n._RF.push({},"a401fY+wj9NsqOACoZ7Zy/R","MessageManager",void 0);var o=function(){this.event=void 0,this.listener=void 0,this.object=void 0},a=(e("MessageEventData",function(){function e(){this.events=new Map}var n=e.prototype;return n.on=function(e,t,n){var r=this.events.get(e);null==r&&(r=[],this.events.set(e,r));var s=new o;s.event=e,s.listener=t,s.object=n,r.push(s),i.on(e,t,n)},n.off=function(e){var n=this.events.get(e);if(n){for(var r,s=t(n);!(r=s()).done;){var o=r.value;i.off(e,o.listener,o.object)}this.events.delete(e)}},n.dispatchEvent=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];i.dispatchEvent.apply(i,[e].concat(n))},n.clear=function(){for(var e=0,t=Array.from(this.events.keys());e<t.length;e++){var n=t[e];this.off(n)}},e}()),e("MessageManager",function(){function e(){this.events=new Map}var t=e.prototype;return t.on=function(e,t,n){if(e&&t){var s=this.events.get(e);null==s&&(s=[],this.events.set(e,s));for(var a=s.length,i=0;i<a;i++){var v=s[i];v.listener==t&&v.object==n&&r("名为【"+e+"】的事件重复注册侦听器")}var c=new o;c.event=e,c.listener=t,c.object=n,s.push(c)}else r("注册【"+e+"】事件的侦听器函数为空")},t.once=function(e,t,n){var r=this,s=function(o){r.off(e,s,n),s=null;for(var a=arguments.length,i=new Array(a>1?a-1:0),v=1;v<a;v++)i[v-1]=arguments[v];t.call(n,o,i)};this.on(e,s,n)},t.off=function(e,t,n){var r=this.events.get(e);if(r){for(var o=r.length,a=0;a<o;a++){var i=r[a];if(i.listener==t&&i.object==n){r.splice(a,1);break}}0==r.length&&this.events.delete(e)}else s("名为【"+e+"】的事件不存在")},t.dispatchEvent=function(e){var t=this.events.get(e);if(null!=t){for(var n=t.concat(),r=n.length,s=arguments.length,o=new Array(s>1?s-1:0),a=1;a<s;a++)o[a-1]=arguments[a];for(var i=0;i<r;i++){var v,c=n[i];(v=c.listener).call.apply(v,[c.object,e].concat(o))}}},e}())),i=e("message",new a);n._RF.pop()}}}));

System.register("chunks:///_virtual/ModuleUtil.ts",["cc","./Oops.ts","./ViewUtil.ts"],(function(n){var e,o,t;return{setters:[function(n){e=n.cclegacy},function(n){o=n.oops},function(n){t=n.ViewUtil}],execute:function(){e._RF.push({},"52a6cdAO5tGxaeE1TprZ5VK","ModuleUtil",void 0);n("ModuleUtil",function(){function n(){}return n.addViewUi=function(n,e,t,i){void 0===i&&(i=null);var u={onAdded:function(o,t){var i=o.getComponent(e);n.has(e)||n.add(i)}};o.gui.open(t,i,u)},n.addViewUiAsync=function(n,e,t,i){return void 0===i&&(i=null),new Promise((function(u,d){var c={onAdded:function(o,t){var i=o.getComponent(e);n.add(i),u(o)},onLoadFailure:function(){u(null)}};o.gui.open(t,i,c)}))},n.addView=function(n,e,o,i){var u=t.createPrefabNode(i),d=u.getComponent(e);n.add(d),u.parent=o},n.removeViewUi=function(n,e,t,i){void 0===i&&(i=!0),i&&n.remove(e,i),o.gui.remove(t,i)},n}());e._RF.pop()}}}));

System.register("chunks:///_virtual/MoveRigidBody.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i,r,o,n,s,a,p,l,c,y;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.inheritsLoose,r=t.initializerDefineProperty,o=t.assertThisInitialized,n=t.createClass},function(t){s=t.cclegacy,a=t._decorator,p=t.Vec3,l=t.RigidBody,c=t.EPSILON,y=t.Component}],execute:function(){var d,u,h,g,_,f,v,m,b,B,M;s._RF.push({},"4e8cedkWeJDEZoUMtauac/M","MoveRigidBody",void 0);var w=a.ccclass,A=a.property,S=new p,z=new p;t("MoveRigidBody",(d=w("MoveRigidBody"),u=A({tooltip:"阻尼"}),h=A({tooltip:"重力"}),g=A({tooltip:"移动速度"}),_=A({tooltip:"速度比率"}),d((m=e((v=function(t){function e(){for(var e,i=arguments.length,n=new Array(i),s=0;s<i;s++)n[s]=arguments[s];return e=t.call.apply(t,[this].concat(n))||this,r(e,"damping",m,o(e)),r(e,"gravity",b,o(e)),r(e,"_speed",B,o(e)),r(e,"_ratio",M,o(e)),e._rigidBody=null,e._grounded=!0,e._curMaxSpeed=0,e._prevAngleY=0,e._stateX=0,e._stateZ=0,e._velocity=new p,e}i(e,t);var s=e.prototype;return s.start=function(){this._rigidBody=this.getComponent(l),this._prevAngleY=this.node.eulerAngles.y},s.stop=function(){this._stateX=0,this._stateZ=0,this._rigidBody.clearVelocity()},s.update=function(t){this.applyGravity(),this.applyDamping(t),this.grounded&&this.applyLinearVelocity(S,1)},s.applyGravity=function(){var t=this.gravity,e=this._rigidBody.mass;z.set(0,e*t,0),this._rigidBody.applyForce(z)},s.applyDamping=function(t){this._rigidBody.getLinearVelocity(z),z.lengthSqr()>c&&(z.multiplyScalar(Math.pow(1-this.damping,t)),this._rigidBody.setLinearVelocity(z))},s.applyLinearVelocity=function(t,e){if(this._stateX||this._stateZ){S.set(this._stateX,0,this._stateZ),S.normalize(),this._rigidBody.getLinearVelocity(z),p.scaleAndAdd(z,z,t,e);var i=this._curMaxSpeed,r=1;z.lengthSqr()>i&&(Math.abs(this.node.eulerAngles.y-this._prevAngleY)>=10&&(r=2),this._prevAngleY=this.node.eulerAngles.y,z.normalize(),z.multiplyScalar(i/r)),this._rigidBody.setLinearVelocity(z)}},n(e,[{key:"speed",get:function(){return this._speed},set:function(t){this._speed=t,this._curMaxSpeed=t*this.ratio}},{key:"ratio",get:function(){return this._ratio},set:function(t){this._ratio=t,this._curMaxSpeed=this.speed*t}},{key:"grounded",get:function(){return this._grounded}},{key:"velocity",get:function(){return this._velocity},set:function(t){this._velocity=t;var e=t.x,i=t.z;(e>0&&this._stateX<0||e<0&&this._stateX>0||i>0&&this._stateZ<0||i<0&&this._stateZ>0)&&this._rigidBody.clearVelocity(),this._stateX=e,this._stateZ=i}}]),e}(y)).prototype,"damping",[u],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return.5}}),b=e(v.prototype,"gravity",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return-10}}),B=e(v.prototype,"_speed",[A],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 5}}),e(v.prototype,"speed",[g],Object.getOwnPropertyDescriptor(v.prototype,"speed"),v.prototype),M=e(v.prototype,"_ratio",[A],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),e(v.prototype,"ratio",[_],Object.getOwnPropertyDescriptor(v.prototype,"ratio"),v.prototype),f=v))||f));s._RF.pop()}}}));

System.register("chunks:///_virtual/MoveTo.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Timer.ts","./Vec3Util.ts"],(function(t){var e,i,s,o,n,l,h,r;return{setters:[function(t){e=t.inheritsLoose},function(t){i=t.cclegacy,s=t._decorator,o=t.Node,n=t.Vec3,l=t.Component},function(t){h=t.Timer},function(t){r=t.Vec3Util}],execute:function(){var a;i._RF.push({},"5e22a+qWUpI6ZHSVRRj2DYT","MoveTo",void 0);var c=s.ccclass;s.property,t("MoveTo",c("MoveTo")(a=function(t){function i(){for(var e,i=arguments.length,s=new Array(i),n=0;n<i;n++)s[n]=arguments[n];return(e=t.call.apply(t,[this].concat(s))||this).target=null,e.velocity=r.zero,e.speed=0,e.hasYAxis=!0,e.ns=o.NodeSpace.LOCAL,e.offset=0,e.offsetVector=null,e.onStart=null,e.onComplete=null,e.onChange=null,e.timer=new h,e.end=null,e}e(i,t);var s=i.prototype;return s.onLoad=function(){this.enabled=!1},s.move=function(){this.enabled=!0},s.update=function(t){var e;if(console.assert(this.speed>0,"移动速度必须要大于零"),null!=(e=this.target instanceof o?this.ns==o.NodeSpace.WORLD?this.target.worldPosition:this.target.position:this.target)){if(null==this.end||!this.end.strictEquals(e)){var i,s=e.clone();this.offsetVector&&(s=s.add(this.offsetVector)),0==this.hasYAxis&&(s.y=0);var l=this.ns==o.NodeSpace.WORLD?this.node.worldPosition:this.node.position;this.velocity=r.sub(s,l).normalize();var h,a=n.distance(l,s)-this.offset;if(null==(i=this.onChange)||i.call(this),a<=0)return void this.exit();null==(h=this.onStart)||h.call(this),this.timer.step=a/this.speed,this.end=e.clone()}if(this.speed>0){var c=r.mul(this.velocity,this.speed*t);this.ns==o.NodeSpace.WORLD?this.node.worldPosition=r.add(this.node.worldPosition,c):this.node.position=r.add(this.node.position,c)}this.timer.update(t)&&(0==this.offset&&(this.ns==o.NodeSpace.WORLD?this.node.worldPosition=this.end:this.node.position=this.end),this.exit())}else this.exit()},s.exit=function(){var t;null==(t=this.onComplete)||t.call(this),this.enabled=!1,this.target=null,this.velocity=r.zero,this.speed=0,this.hasYAxis=!0,this.ns=o.NodeSpace.LOCAL,this.offset=0,this.offsetVector=null,this.onStart=null,this.onComplete=null,this.onChange=null,this.timer.reset(),this.end=null},i}(l))||a);i._RF.pop()}}}));

System.register("chunks:///_virtual/MoveTranslate.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Vec3Util.ts"],(function(e){var t,o,r,n,c,s,a;return{setters:[function(e){t=e.inheritsLoose},function(e){o=e.cclegacy,r=e._decorator,n=e.Vec3,c=e.Node,s=e.Component},function(e){a=e.Vec3Util}],execute:function(){var i;o._RF.push({},"e626612zClLO4OZDEWvT+fr","MoveTranslate",void 0);var l=r.ccclass;r.property,e("MoveTranslate",l("MoveTranslate")(i=function(e){function o(){for(var t,o=arguments.length,r=new Array(o),c=0;c<o;c++)r[c]=arguments[c];return(t=e.call.apply(e,[this].concat(r))||this).velocity=a.zero,t.speed=0,t.vector=new n,t}return t(o,e),o.prototype.update=function(e){this.speed>0&&(n.multiplyScalar(this.vector,this.velocity,this.speed*e),this.node.translate(this.vector,c.NodeSpace.WORLD))},o}(s))||i);o._RF.pop()}}}));

System.register("chunks:///_virtual/NetInterface.ts",["cc"],(function(){var e;return{setters:[function(t){e=t.cclegacy}],execute:function(){e._RF.push({},"d9f8b+CV69FyKwnUdCjOtad","NetInterface",void 0),e._RF.pop()}}}));

System.register("chunks:///_virtual/NetManager.ts",["cc"],(function(n){var e;return{setters:[function(n){e=n.cclegacy}],execute:function(){e._RF.push({},"d8cd5el6GBGTYTW+N8b8EuJ","NetManager",void 0),n("NetManager",function(){function n(){this._channels={}}n.getInstance=function(){return this._instance||(this._instance=new n),this._instance};var e=n.prototype;return e.setNetNode=function(n,e){void 0===e&&(e=0),this._channels[e]=n},e.removeNetNode=function(n){delete this._channels[n]},e.connect=function(n,e){return void 0===e&&(e=0),!!this._channels[e]&&this._channels[e].connect(n)},e.send=function(n,e,t){void 0===e&&(e=!1),void 0===t&&(t=0);var i=this._channels[t];return i?i.send(n,e):-1},e.request=function(n,e,t,i,s){void 0===t&&(t=!0),void 0===i&&(i=!1),void 0===s&&(s=0);var c=this._channels[s];c&&c.request(n,e,t,i)},e.requestUnique=function(n,e,t,i,s){void 0===t&&(t=!0),void 0===i&&(i=!1),void 0===s&&(s=0);var c=this._channels[s];return!!c&&c.requestUnique(n,e,t,i)},e.close=function(n,e,t){if(void 0===t&&(t=0),this._channels[t])return this._channels[t].closeSocket(n,e)},n}())._instance=void 0,e._RF.pop()}}}));

System.register("chunks:///_virtual/NetNode.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Logger.ts"],(function(e){var t,s,i,n,o;return{setters:[function(e){t=e.createForOfIteratorHelperLoose},function(e){s=e.cclegacy,i=e.error,n=e.warn},function(e){o=e.Logger}],execute:function(){s._RF.push({},"57f0fB90kNBUJ98yyu+jxjx","NetNode",void 0);var r=["已关闭","连接中","验证中","可传输数据"],c=e("NetTipsType",function(e){return e[e.Connecting=0]="Connecting",e[e.ReConnecting=1]="ReConnecting",e[e.Requesting=2]="Requesting",e}({})),l=e("NetNodeState",function(e){return e[e.Closed=0]="Closed",e[e.Connecting=1]="Connecting",e[e.Checking=2]="Checking",e[e.Working=3]="Working",e}({}));e("NetNode",function(){function e(){this._connectOptions=null,this._autoReconnect=0,this._isSocketInit=!1,this._isSocketOpen=!1,this._state=l.Closed,this._socket=null,this._networkTips=null,this._protocolHelper=null,this._connectedCallback=null,this._disconnectCallback=null,this._callbackExecuter=null,this._keepAliveTimer=null,this._receiveMsgTimer=null,this._reconnectTimer=null,this._heartTime=1e4,this._receiveTime=6e6,this._reconnetTimeOut=8e6,this._requests=Array(),this._listener={}}var s=e.prototype;return s.init=function(e,t,s,i){void 0===s&&(s=null),void 0===i&&(i=null),o.logNet("网络初始化"),this._socket=e,this._protocolHelper=t,this._networkTips=s,this._callbackExecuter=i||function(e,t){e.callback.call(e.target,t)}},s.connect=function(e){return!(!this._socket||this._state!=l.Closed)&&(this._isSocketInit||this.initSocket(),this._state=l.Connecting,this._socket.connect(e)?(null==this._connectOptions&&"number"==typeof e.autoReconnect&&(this._autoReconnect=e.autoReconnect),this._connectOptions=e,this.updateNetTips(c.Connecting,!0),!0):(this.updateNetTips(c.Connecting,!1),!1))},s.initSocket=function(){var e=this;this._socket&&(this._socket.onConnected=function(t){e.onConnected(t)},this._socket.onMessage=function(t){e.onMessage(t)},this._socket.onError=function(t){e.onError(t)},this._socket.onClosed=function(t){e.onClosed(t)},this._isSocketInit=!0)},s.updateNetTips=function(e,t){this._networkTips&&(e==c.Requesting?this._networkTips.requestTips(t):e==c.Connecting?this._networkTips.connectTips(t):e==c.ReConnecting&&this._networkTips.reconnectTips(t))},s.onConnected=function(e){var t=this;o.logNet("网络已连接"),this._isSocketOpen=!0,null!==this._connectedCallback?(this._state=l.Checking,this._connectedCallback((function(){t.onChecked()}))):this.onChecked(),o.logNet("网络已连接当前状态为【"+r[this._state]+"】")},s.onChecked=function(){o.logNet("连接验证成功，进入工作状态"),this._state=l.Working,this.updateNetTips(c.Connecting,!1),this.updateNetTips(c.ReConnecting,!1);var e=this._requests.concat();if(e.length>0){o.logNet("请求【"+this._requests.length+"】个待发送的信息");for(var t=0;t<e.length;){var s=e[t];this._socket.send(s.buffer),null==s.rspObject||""!=s.rspCmd?e.splice(t,1):++t}this.updateNetTips(c.Requesting,this._requests.length>0)}},s.onMessage=function(e){var s=JSON.parse(e);if(this._protocolHelper.checkResponsePackage(s)){this._protocolHelper.handlerResponsePackage(s)||this._networkTips&&this._networkTips.responseErrorCode(s.code),this.resetReceiveMsgTimer(),this.resetHearbeatTimer();var n=this._protocolHelper.getPackageId(s);if(o.logNet("接受到命令【"+n+"】的消息"),this._requests.length>0){for(var r in this._requests){var l=this._requests[r];if(l.rspCmd==n&&l.rspObject){o.logNet("触发请求命令【"+n+"】的回调"),this._callbackExecuter(l.rspObject,s.data),this._requests.splice(parseInt(r),1);break}}0==this._requests.length?this.updateNetTips(c.Requesting,!1):o.logNet("请求队列中还有【"+this._requests.length+"】个请求在等待")}var h=this._listener[n];if(null!=h)for(var u,a=t(h);!(u=a()).done;){var _=u.value;o.logNet("触发监听命令【"+n+"】的回调"),this._callbackExecuter(_,s.data)}}else i("校验接受消息数据异常")},s.onError=function(e){i(e)},s.onClosed=function(e){var t=this;this.clearTimer(),!this._disconnectCallback||this._disconnectCallback()?this.isAutoReconnect()?(this.updateNetTips(c.ReConnecting,!0),this._reconnectTimer=setTimeout((function(){t._socket.close(),t._state=l.Closed,t.connect(t._connectOptions),t._autoReconnect>0&&(t._autoReconnect-=1)}),this._reconnetTimeOut)):this._state=l.Closed:o.logNet("断开连接")},s.close=function(e,t){this.clearTimer(),this._listener={},this._requests.length=0,this._networkTips&&(this._networkTips.connectTips(!1),this._networkTips.reconnectTips(!1),this._networkTips.requestTips(!1)),this._socket?this._socket.close(e,t):this._state=l.Closed},s.closeSocket=function(e,t){this._socket&&this._socket.close(e,t)},s.send=function(e,t){return void 0===t&&(t=!1),this._state==l.Working||t?this._socket.send(e):this._state==l.Checking||this._state==l.Connecting?(this._requests.push({buffer:e,rspCmd:"",rspObject:null}),o.logNet("当前状态为【"+r[this._state]+"】,繁忙并缓冲发送数据"),0):(i("当前状态为【"+r[this._state]+"】,请求错误"),-1)},s.request=function(e,t,s,i){void 0===s&&(s=!0),void 0===i&&(i=!1);var n=this._protocolHelper.handlerRequestPackage(e);this.base_request(e,n,t,s,i)},s.requestUnique=function(e,t,s,i){void 0===s&&(s=!0),void 0===i&&(i=!1);for(var n=this._protocolHelper.handlerRequestPackage(e),r=0;r<this._requests.length;++r)if(this._requests[r].rspCmd==n)return o.logNet("命令【"+n+"】重复请求"),!1;return this.base_request(e,n,t,s,i),!0},s.base_request=function(e,t,s,i,n){void 0===i&&(i=!0),void 0===n&&(n=!1);var r=JSON.stringify(e);(this._state==l.Working||n)&&this._socket.send(r),o.logNet("队列命令为【"+t+"】的请求，等待请求数据的回调"),this._requests.push({buffer:r,rspCmd:t,rspObject:s}),i&&this.updateNetTips(c.Requesting,!0)},s.setResponeHandler=function(e,t,s){return null==t?(i("命令为【"+e+"】设置响应处理程序错误"),!1):(this._listener[e]=[{target:s,callback:t}],!0)},s.addResponeHandler=function(e,t,s){if(null==t)return i("命令为【"+e+"】添加响应处理程序错误"),!1;var n={target:s,callback:t};null==this._listener[e]?this._listener[e]=[n]:-1==this.getNetListenersIndex(e,n)&&this._listener[e].push(n);return!0},s.removeResponeHandler=function(e,t,s){if(null!=this._listener[e]&&null!=t){var i=this.getNetListenersIndex(e,{target:s,callback:t});-1!=i&&this._listener[e].splice(i,1)}},s.cleanListeners=function(e){void 0===e&&(e=""),""==e?this._listener={}:delete this._listener[e]},s.getNetListenersIndex=function(e,t){for(var s=-1,i=0;i<this._listener[e].length;i++){var n=this._listener[e][i];if(n.callback==t.callback&&n.target==t.target){s=i;break}}return s},s.resetReceiveMsgTimer=function(){var e=this;null!==this._receiveMsgTimer&&clearTimeout(this._receiveMsgTimer),this._receiveMsgTimer=setTimeout((function(){n("接收消息定时器关闭网络连接"),e._socket.close()}),this._receiveTime)},s.resetHearbeatTimer=function(){var e=this;null!==this._keepAliveTimer&&clearTimeout(this._keepAliveTimer),this._keepAliveTimer=setTimeout((function(){o.logNet("网络节点保持活跃发送心跳信息"),e.send(e._protocolHelper.getHearbeat())}),this._heartTime)},s.clearTimer=function(){null!==this._receiveMsgTimer&&clearTimeout(this._receiveMsgTimer),null!==this._keepAliveTimer&&clearTimeout(this._keepAliveTimer),null!==this._reconnectTimer&&clearTimeout(this._reconnectTimer)},s.isAutoReconnect=function(){return 0!=this._autoReconnect},s.rejectReconnect=function(){this._autoReconnect=0,this.clearTimer()},e}());s._RF.pop()}}}));

System.register("chunks:///_virtual/NetProtocolPako.ts",["cc"],(function(t){var e;return{setters:[function(t){e=t.cclegacy}],execute:function(){e._RF.push({},"88ae0lIg5BFWb1O1E8/Etwi","NetProtocolPako",void 0);t("NetProtocolPako",function(){function t(){}var e=t.prototype;return e.getHeadlen=function(){return 0},e.getHearbeat=function(){return""},e.getPackageLen=function(t){return t.toString().length},e.checkResponsePackage=function(t){return!0},e.handlerResponsePackage=function(t){return 1==t.code&&(t.isCompress&&(t.data=(e=t.data,n=e.split("").map((function(t){return t.charCodeAt(0)})),a=new Uint8Array(n),pako.inflate(a,{to:"string"}))),t.data=JSON.parse(t.data),!0);var e,n,a},e.handlerRequestPackage=function(t){var e,n=t.cmd;return t.callback=n,t.isCompress&&(t.data=(e=t.data,pako.gzip(e,{to:"string"}))),n},e.getPackageId=function(t){return t.callback},t}());e._RF.pop()}}}));

System.register("chunks:///_virtual/NodeDragExt.ts",["cc"],(function(){var t,i,n,e,o;return{setters:[function(s){t=s.cclegacy,i=s.Node,n=s.js,e=s.Vec2,o=s.v3}],execute:function(){if(t._RF.push({},"1a072/udu9MtbdbyL5xB8iR","NodeDragExt",void 0),!i.prototype.__$NodeDragExt$__){i.prototype.__$NodeDragExt$__=!0;n.mixin(i,{DragEvent:{DRAG_START:"drag_start",DRAG_MOVE:"drag_move",DRAG_END:"drag_end"}}),n.mixin(i.prototype,{_draggable:!1,_dragging:!1,_dragTesting:!1,_dragStartPoint:null,initDrag:function(){this._draggable?(this.on(i.EventType.TOUCH_START,this.onTouchBegin_0,this),this.on(i.EventType.TOUCH_MOVE,this.onTouchMove_0,this),this.on(i.EventType.TOUCH_END,this.onTouchEnd_0,this),this.on(i.EventType.TOUCH_CANCEL,this.onTouchCancel_0,this)):(this.off(i.EventType.TOUCH_START,this.onTouchBegin_0,this),this.off(i.EventType.TOUCH_MOVE,this.onTouchMove_0,this),this.off(i.EventType.TOUCH_END,this.onTouchEnd_0,this),this.off(i.EventType.TOUCH_CANCEL,this.onTouchCancel_0,this))},onTouchBegin_0:function(t){null==this._dragStartPoint&&(this._dragStartPoint=new e);var i=t.getUILocation();this._dragStartPoint.set(i),this._dragTesting=!0},onTouchMove_0:function(t){if(!this._dragging&&this._draggable&&this._dragTesting){var n=t.getUILocation();if(Math.abs(this._dragStartPoint.x-n.x)<10&&Math.abs(this._dragStartPoint.y-n.y)<10)return;this._dragging=!0,this._dragTesting=!1,this.emit(i.DragEvent.DRAG_START,t)}if(this._dragging){var e=t.getUIDelta(),s=o(e.x,e.y,0).add(this.position);this.position=s,this.emit(i.DragEvent.DRAG_MOVE,t)}},onTouchEnd_0:function(t){this._dragging&&(this._dragging=!1,this.emit(i.DragEvent.DRAG_END,t))},onTouchCancel_0:function(t){this._dragging&&(this._dragging=!1,this.emit(i.DragEvent.DRAG_END,t))},startDrag:function(){this.activeInHierarchy&&this.dragBegin()},dragBegin:function(){this._dragging=!0,this._dragTesting=!0,this.on(i.EventType.TOUCH_MOVE,this.onTouchMove_0,this),this.on(i.EventType.TOUCH_END,this.onTouchEnd_0,this),this.on(i.EventType.TOUCH_CANCEL,this.onTouchCancel_0,this)},dragEnd:function(){this._dragging&&(this._dragTesting=!1,this._dragging=!1)},stopDrag:function(){this.dragEnd()},removeDragEvent:function(){this.off(i.EventType.TOUCH_START,this.onTouchBegin_0,this),this.off(i.EventType.TOUCH_MOVE,this.onTouchMove_0,this),this.off(i.EventType.TOUCH_END,this.onTouchEnd_0,this),this.off(i.EventType.TOUCH_CANCEL,this.onTouchCancel_0,this)}}),Object.defineProperty(i.prototype,"draggable",{get:function(){return this._draggable},set:function(t){this._draggable!=t&&(this._draggable=t,this.initDrag())},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"dragTesting",{get:function(){return this._dragTesting},set:function(t){this._dragTesting!=t&&(this._dragTesting=t)},enumerable:!0,configurable:!0})}t._RF.pop()}}}));

System.register("chunks:///_virtual/NodeExt.ts",["cc"],(function(){var t,e,n,o,r,i,p,c,s,u,f,g,y,h,l,a,d,m,C,P,b,O,j;return{setters:[function(v){t=v.cclegacy,e=v.Node,n=v.Graphics,o=v.Label,r=v.RichText,i=v.Sprite,p=v.Button,c=v.Canvas,s=v.EditBox,u=v.Layout,f=v.PageView,g=v.ProgressBar,y=v.ScrollView,h=v.Slider,l=v.Toggle,a=v.Widget,d=v.UIOpacity,m=v.UITransform,C=v.Mask,P=v.Size,b=v.UIRenderer,O=v.Color,j=v.v3}],execute:function(){t._RF.push({},"493a6vtAsNCi7/drbKHIAaL","NodeExt",void 0),Object.defineProperty(e.prototype,"uiGraphics",{get:function(){return this.getComponent(n)},set:function(t){}}),Object.defineProperty(e.prototype,"uiLabel",{get:function(){return this.getComponent(o)},set:function(t){}}),Object.defineProperty(e.prototype,"uiRichText",{get:function(){return this.getComponent(r)},set:function(t){}}),Object.defineProperty(e.prototype,"uiSprite",{get:function(){return this.getComponent(i)},set:function(t){}}),Object.defineProperty(e.prototype,"uiButton",{get:function(){return this.getComponent(p)},set:function(t){}}),Object.defineProperty(e.prototype,"uiCanvas",{get:function(){return this.getComponent(c)},set:function(t){}}),Object.defineProperty(e.prototype,"uiEditBox",{get:function(){return this.getComponent(s)},set:function(t){}}),Object.defineProperty(e.prototype,"uiLayout",{get:function(){return this.getComponent(u)},set:function(t){}}),Object.defineProperty(e.prototype,"uiPageView",{get:function(){return this.getComponent(f)},set:function(t){}}),Object.defineProperty(e.prototype,"uiProgressBar",{get:function(){return this.getComponent(g)},set:function(t){}}),Object.defineProperty(e.prototype,"uiScrollView",{get:function(){return this.getComponent(y)},set:function(t){}}),Object.defineProperty(e.prototype,"uiSlider",{get:function(){return this.getComponent(h)},set:function(t){}}),Object.defineProperty(e.prototype,"uiToggle",{get:function(){return this.getComponent(l)},set:function(t){}}),Object.defineProperty(e.prototype,"uiWidget",{get:function(){return this.getComponent(a)},set:function(t){}}),Object.defineProperty(e.prototype,"uiOpacity",{get:function(){return this.getComponent(d)},set:function(t){}}),Object.defineProperty(e.prototype,"uiTransform",{get:function(){return this.getComponent(m)},set:function(t){}}),Object.defineProperty(e.prototype,"uiMask",{get:function(){return this.getComponent(C)},set:function(t){}}),Object.defineProperty(e.prototype,"x",{get:function(){return this.position.x},set:function(t){this.setPosition(t,this.position.y)}}),Object.defineProperty(e.prototype,"y",{get:function(){return this.position.y},set:function(t){this.setPosition(this.position.x,t)}}),Object.defineProperty(e.prototype,"z",{get:function(){return this.position.z},set:function(t){var e=this;e.setPosition(e.position.x,e.position.y,t)}}),Object.defineProperty(e.prototype,"w",{configurable:!0,get:function(){var t,e;return null!=(t=null==(e=this.getComponent(m))?void 0:e.width)?t:0},set:function(t){(this.getComponent(m)||this.addComponent(m)).width=t}}),Object.defineProperty(e.prototype,"h",{configurable:!0,get:function(){var t,e;return null!=(t=null==(e=this.getComponent(m))?void 0:e.height)?t:0},set:function(t){(this.getComponent(m)||this.addComponent(m)).height=t}}),Object.defineProperty(e.prototype,"size",{get:function(){var t=this.getComponent(m);return new P(t.width,t.height)},set:function(t){var e=this.getComponent(m)||this.addComponent(m);e.width=t.width,e.height=t.height}}),Object.defineProperty(e.prototype,"opacity",{get:function(){var t=this.getComponent(d);if(null!=t)return t.opacity;var e=this.getComponent(b);return e?e.color.a:255},set:function(t){var e=this,n=e.getComponent(d);if(null==n){var o=e.getComponent(b);o?(this.$__color__?this.$__color__.a=t:this.$__color__=new O(o.color.r,o.color.g,o.color.b,t),o.color=this.$__color__):e.addComponent(d).opacity=t}else n.opacity=t}}),Object.defineProperty(e.prototype,"color",{get:function(){var t;return null==(t=this.getComponent(b))?void 0:t.color},set:function(t){var e=this.getComponent(b);e&&(e.color=t)}}),Object.defineProperty(e.prototype,"scale_x",{get:function(){return this.scale.x},set:function(t){var e=this;e.scale=j(t,e.scale.y,e.scale.z)}}),Object.defineProperty(e.prototype,"scale_y",{get:function(){return this.scale.y},set:function(t){var e=this;e.scale=j(e.scale.x,t,e.scale.z)}}),Object.defineProperty(e.prototype,"scale_z",{get:function(){return this.scale.z},set:function(t){var e=this;e.scale=j(e.scale.x,e.scale.y,t)}}),Object.defineProperty(e.prototype,"anchor_x",{get:function(){var t,e;return null!=(t=null==(e=this.getComponent(m))?void 0:e.anchorX)?t:.5},set:function(t){(this.getComponent(m)||this.addComponent(m)).anchorX=t}}),Object.defineProperty(e.prototype,"anchor_y",{get:function(){var t,e;return null!=(t=null==(e=this.getComponent(m))?void 0:e.anchorY)?t:.5},set:function(t){(this.getComponent(m)||this.addComponent(m)).anchorY=t}}),Object.defineProperty(e.prototype,"angle_x",{get:function(){return this.eulerAngles.x},set:function(t){var e=this;e.setRotationFromEuler(t,e.eulerAngles.y,e.eulerAngles.z)}}),Object.defineProperty(e.prototype,"angle_y",{get:function(){return this.eulerAngles.y},set:function(t){var e=this;e.setRotationFromEuler(e.eulerAngles.x,t,e.eulerAngles.z)}}),Object.defineProperty(e.prototype,"angle_z",{get:function(){return this.eulerAngles.y},set:function(t){var e=this;e.setRotationFromEuler(e.eulerAngles.x,e.eulerAngles.y,t)}}),t._RF.pop()}}}));

System.register("chunks:///_virtual/Notify.ts",["./rollupPluginModLoBabelHelpers.js","cc","./LanguageLabel.ts"],(function(n){var t,e,i,o,a,r,l,s,c,u;return{setters:[function(n){t=n.applyDecoratedDescriptor,e=n.inheritsLoose,i=n.initializerDefineProperty,o=n.assertThisInitialized},function(n){a=n.cclegacy,r=n._decorator,l=n.Label,s=n.Animation,c=n.Component},function(n){u=n.LanguageLabel}],execute:function(){var p,f,h,b,y,m,d;a._RF.push({},"01391Mp6X1Gn554rkzavN4K","Notify",void 0);var g=r.ccclass,v=r.property;n("Notify",(p=g("Notify"),f=v(l),h=v(s),p((m=t((y=function(n){function t(){for(var t,e=arguments.length,a=new Array(e),r=0;r<e;r++)a[r]=arguments[r];return t=n.call.apply(n,[this].concat(a))||this,i(t,"lab_content",m,o(t)),i(t,"animation",d,o(t)),t.onComplete=null,t}e(t,n);var a=t.prototype;return a.onLoad=function(){this.animation&&this.animation.on(s.EventType.FINISHED,this.onFinished,this)},a.onFinished=function(){this.node.parent.destroy(),this.onComplete&&this.onComplete(),this.onComplete=null},a.toast=function(n,t){var e=this.lab_content.getComponent(u);t?(e.enabled=!0,e.dataID=n):(e.enabled=!1,this.lab_content.string=n)},t}(c)).prototype,"lab_content",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),d=t(y.prototype,"animation",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),b=y))||b));a._RF.pop()}}}));

System.register("chunks:///_virtual/ObjectUtil.ts",["cc"],(function(t){var e;return{setters:[function(t){e=t.cclegacy}],execute:function(){e._RF.push({},"86827QLFSRM7Zojsx0WqWuQ","ObjectUtil",void 0);t("ObjectUtil",function(){function t(){}return t.isObject=function(t){return"[object Object]"===Object.prototype.toString.call(t)},t.deepCopy=function(t){if(null==t||"object"!=typeof t)return t;var e=null;if(t instanceof Date)return(e=new Date).setTime(t.getTime()),e;if(t instanceof Array){e=[];for(var n=0,r=t.length;n<r;n++)e[n]=this.deepCopy(t[n]);return e}if(t instanceof Object){for(var c in e={},t)t.hasOwnProperty(c)&&(e[c]=this.deepCopy(t[c]));return e}console.warn("不支持的类型："+e)},t.copy=function(t){return JSON.parse(JSON.stringify(t))},t}());e._RF.pop()}}}));

System.register("chunks:///_virtual/Oops.ts",["cc","./EffectSingleCase.ts","./ECS.ts","./Language.ts","./ViewModel.ts","./HttpRequest.ts","./NetManager.ts","./Config.ts","./Logger.ts","./RandomManager.ts"],(function(n){var e,t,o,i,s,a,c,g,u,f;return{setters:[function(n){e=n.cclegacy},function(n){t=n.EffectSingleCase},function(n){o=n.ecs},function(n){i=n.LanguageManager},function(n){s=n.VM},function(n){a=n.HttpRequest},function(n){c=n.NetManager},function(n){g=n.Config},function(n){u=n.Logger},function(n){f=n.RandomManager}],execute:function(){e._RF.push({},"cbae5wzfSZGzZMuyeAetSfg","Oops",void 0);n("version","2.0.0.20250127");var r=n("oops",(function(){}));r.log=u.instance,r.config=new g,r.storage=void 0,r.res=void 0,r.message=void 0,r.random=f.instance,r.timer=void 0,r.audio=void 0,r.gui=void 0,r.game=void 0,r.language=new i,r.http=new a,r.tcp=new c,r.ecs=new o.RootSystem,r.mvvm=s,r.pool=t.instance,e._RF.pop()}}}));

System.register("chunks:///_virtual/OrbitCamera.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i,o,r,a,n,s,u,l,h,c,p,g,R,_;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.inheritsLoose,o=t.initializerDefineProperty,r=t.assertThisInitialized,a=t.createClass},function(t){n=t.cclegacy,s=t._decorator,u=t.Vec3,l=t.Quat,h=t.Node,c=t.input,p=t.Input,g=t.lerp,R=t.Component,_=t.Vec2}],execute:function(){var d,f,b,y,w,m,S,T,v,x,z,O,C,E,D,M,P,Y,k,A,U,j,F,H,W,Q,L,N,V,B,I,X;n._RF.push({},"4e454G/OQ1NB7tjzAUf269U","OrbitCamera",void 0);var G=s.ccclass,q=s.property,J=s.menu,K=new u,Z=new u,$=new l;t("OrbitCamera",(d=G("OrbitCamera"),f=J("OopsFramework/Camera/OrbitCamera （轨道摄影机）"),b=q({tooltip:"是否启动触摸控制"}),y=q({tooltip:"是否开启启用缩放半径（鼠标滚轮控制摄像机与目标距离）"}),w=q({tooltip:"摄像机与目标的半径缩放速度",visible:function(){return!0===this.enableScaleRadius}}),m=q({tooltip:"摄像机与目标的半径最小值",visible:function(){return!0===this.enableScaleRadius}}),S=q({tooltip:"摄像机与目标的半径最大值",visible:function(){return!0===this.enableScaleRadius}}),T=q({tooltip:"自动旋转是否开启"}),v=q({tooltip:"自动旋转速度",visible:function(){return!0===this.autoRotate}}),x=q({tooltip:"旋转速度"}),z=q({tooltip:"跟随速度"}),O=q({tooltip:"X轴旋转范围（人物上下看的角度控制）"}),C=q({tooltip:"摄像机与目标的距离（以玩家为中心环绕球半径）"}),E=q({type:h,tooltip:"跟随目标"}),D=q({type:u,tooltip:"目标旋转偏移量（初始旋转向量）"}),M=q({tooltip:"是否跟随目标 Y 轴旋转"}),d(P=f((k=e((Y=function(t){function e(){for(var e,i=arguments.length,a=new Array(i),n=0;n<i;n++)a[n]=arguments[n];return e=t.call.apply(t,[this].concat(a))||this,o(e,"enableTouch",k,r(e)),o(e,"enableScaleRadius",A,r(e)),o(e,"radiusScaleSpeed",U,r(e)),o(e,"minRadius",j,r(e)),o(e,"maxRadius",F,r(e)),o(e,"autoRotate",H,r(e)),o(e,"autoRotateSpeed",W,r(e)),o(e,"rotateSpeed",Q,r(e)),o(e,"followSpeed",L,r(e)),o(e,"xRotationRange",N,r(e)),o(e,"_targetRadius",V,r(e)),o(e,"_target",B,r(e)),o(e,"_startRotation",I,r(e)),o(e,"followTargetRotationY",X,r(e)),e._center=new u,e._targetCenter=new u,e._touched=!1,e._targetRotation=new u,e._rotation=new l,e._radius=10,e}i(e,t);var n=e.prototype;return n.start=function(){this.enableTouch&&(c.on(p.EventType.TOUCH_START,this.onTouchStart,this),c.on(p.EventType.TOUCH_MOVE,this.onTouchMove,this),c.on(p.EventType.TOUCH_END,this.onTouchEnd,this)),this.enableScaleRadius&&c.on(p.EventType.MOUSE_WHEEL,this.onMouseWheel,this),this.target&&this.resetTargetRotation(),l.fromEuler(this._rotation,this._targetRotation.x,this._targetRotation.y,this._targetRotation.z),this.target&&(this._targetCenter.set(this.target.worldPosition),this._center.set(this._targetCenter)),this._radius=this.radius,this.limitRotation()},n.resetTargetRotation=function(){var t=this._targetRotation.set(this._startRotation);this.followTargetRotationY&&(t=Z.set(t),l.toEuler(K,this.target.worldRotation),t.add(K))},n.limitRotation=function(){var t=this._targetRotation;t.x<this.xRotationRange.x?t.x=this.xRotationRange.x:t.x>this.xRotationRange.y&&(t.x=this.xRotationRange.y),t.z=0},n.onTouchStart=function(){this._touched=!0},n.onTouchMove=function(t){if(this._touched){var e=t.touch.getDelta();l.fromEuler($,this._targetRotation.x,this._targetRotation.y,this._targetRotation.z),l.rotateX($,$,.005*-e.y),l.rotateY($,$,.005*-e.x),l.toEuler(this._targetRotation,$),this.limitRotation()}},n.onTouchEnd=function(){this._touched=!1},n.onMouseWheel=function(t){var e=t.getScrollY();this._targetRadius+=this.radiusScaleSpeed*-Math.sign(e),this._targetRadius=Math.min(this.maxRadius,Math.max(this.minRadius,this._targetRadius))},n.update=function(t){var e=this._targetRotation;this.autoRotate&&!this._touched&&(e.y+=this.autoRotateSpeed*t),this.target&&(this._targetCenter.set(this.target.worldPosition),this.followTargetRotationY&&(e=Z.set(e),l.toEuler(K,this.target.worldRotation),e.y+=K.y)),l.fromEuler($,e.x,e.y,e.z),l.slerp(this._rotation,this._rotation,$,7*t*this.rotateSpeed),u.lerp(this._center,this._center,this._targetCenter,5*t*this.followSpeed),this._radius=g(this._radius,this._targetRadius,5*t),u.transformQuat(K,u.FORWARD,this._rotation),u.multiplyScalar(K,K,this._radius),K.add(this._center),this.node.position=K,this.node.lookAt(this._center)},n.follow=function(){var t=this._targetRotation;this.target&&(this._targetCenter.set(this.target.worldPosition),this.followTargetRotationY&&(t=Z.set(t),l.toEuler(K,this.target.worldRotation),t.y+=K.y)),l.fromEuler($,t.x,t.y,t.z),this._rotation=$,this._center=this._targetCenter,this._radius=this._targetRadius,u.transformQuat(K,u.FORWARD,this._rotation),u.multiplyScalar(K,K,this._radius),K.add(this._center),this.node.position=K,this.node.lookAt(this._center)},a(e,[{key:"radius",get:function(){return this._targetRadius},set:function(t){this._targetRadius=t}},{key:"target",get:function(){return this._target},set:function(t){this._target=t,this._targetRotation.set(this._startRotation),this._targetCenter.set(t.worldPosition)}},{key:"targetRotation",get:function(){return this._startRotation.set(this._targetRotation),this._startRotation},set:function(t){this._targetRotation.set(t),this._startRotation.set(t)}}]),e}(R)).prototype,"enableTouch",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),A=e(Y.prototype,"enableScaleRadius",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),U=e(Y.prototype,"radiusScaleSpeed",[w],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),j=e(Y.prototype,"minRadius",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 5}}),F=e(Y.prototype,"maxRadius",[S],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 10}}),H=e(Y.prototype,"autoRotate",[T],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),W=e(Y.prototype,"autoRotateSpeed",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 90}}),Q=e(Y.prototype,"rotateSpeed",[x],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),L=e(Y.prototype,"followSpeed",[z],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),N=e(Y.prototype,"xRotationRange",[O],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new _(5,70)}}),V=e(Y.prototype,"_targetRadius",[q],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 10}}),e(Y.prototype,"radius",[C],Object.getOwnPropertyDescriptor(Y.prototype,"radius"),Y.prototype),B=e(Y.prototype,"_target",[q],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),e(Y.prototype,"target",[E],Object.getOwnPropertyDescriptor(Y.prototype,"target"),Y.prototype),I=e(Y.prototype,"_startRotation",[q],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return new u}}),e(Y.prototype,"targetRotation",[D],Object.getOwnPropertyDescriptor(Y.prototype,"targetRotation"),Y.prototype),X=e(Y.prototype,"followTargetRotationY",[M],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),P=Y))||P)||P));n._RF.pop()}}}));

System.register("chunks:///_virtual/PhysicsUtil.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,n;return{setters:[function(e){t=e.createClass},function(e){n=e.cclegacy}],execute:function(){n._RF.push({},"c1584nuvI9HtJ5IHcmFEBzR","PhysicsUtil",void 0);var i=e("GroupItem",function(){function e(e,t){this._value=void 0,this._name=void 0,this._value=e,this._name=t}return t(e,[{key:"value",get:function(){return this._value}},{key:"name",get:function(){return this._name}},{key:"mask",get:function(){return 1<<this._value}}]),e}()),u=e("PhysicsUtil",function(){function e(){}return e.setNodeLayer=function(t,n){n.layer=t.mask,n.children.forEach((function(n){n.layer=t.mask,e.setNodeLayer(t,n)}))},e}());u.DEFAULT=new i(0,"DEFAULT"),u.GAME_OBJECT_SELECT=new i(1,"GAME_OBJECT_SELECT"),u.GAME_OWNER=new i(2,"GAME_OWNER"),n._RF.pop()}}}));

System.register("chunks:///_virtual/PlatformUtil.ts",["cc"],(function(t){var e,n,o;return{setters:[function(t){e=t.cclegacy,n=t.sys,o=t.native}],execute:function(){e._RF.push({},"c08229jnmdPP5vR721N6GG9","PlatformUtil",void 0);t("PlatformUtil",function(){function t(){}var e=t.prototype;return e.getNetworkType=function(){return n.getNetworkType()},e.getBatteryLevel=function(){return n.getBatteryLevel()},e.openURL=function(t){n.openURL(t)},e.copyText=function(t){o.copyTextToClipboard(t)},t}());e._RF.pop()}}}));

System.register("chunks:///_virtual/playerAni.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ECS.ts","./ModuleUtil.ts","./SingletonModuleComp.ts","./selectFun.ts","./GameUIConfig.ts"],(function(e){var n,t,i,r,o,a,c,l,s,u,p,f,y,h,d,A,m;return{setters:[function(e){n=e.applyDecoratedDescriptor,t=e.inheritsLoose,i=e.initializerDefineProperty,r=e.assertThisInitialized,o=e.asyncToGenerator,a=e.regeneratorRuntime},function(e){c=e.cclegacy,l=e._decorator,s=e.sp,u=e.Vec3,p=e.tween,f=e.Component},function(e){y=e.ecs},function(e){h=e.ModuleUtil},function(e){d=e.smc},function(e){A=e.selectFun},function(e){m=e.UIID}],execute:function(){var v,w,g,C,k,b;c._RF.push({},"933ff3tWEBN5bP/Tf8jT93q","playerAni",void 0);var _=l.ccclass,x=l.property;e("playerAni",(v=_("playerAni"),w=y.register("playerAniView",!1),g=x(s.Skeleton),v(C=w((b=n((k=function(e){function n(){for(var n,t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];return n=e.call.apply(e,[this].concat(o))||this,i(n,"playerAni",b,r(n)),n}t(n,e);var c=n.prototype;return c.onLoad=function(){this.playerAni&&this.playerAni.skeletonData&&(this.playerAni.node.scale=new u(-.3,.3,0),this.playerAni.setAnimation(0,"front_walk",!1),this.playAniPlayer())},c.start=function(){},c.playAniPlayer=function(){var e=this;this.playerAni&&(this.playerAni.setCompleteListener((function(n){n&&"front_walk"==n.animation.name&&(e.playerAni&&e.playerAni.setAnimation(0,"front_idle",!0),e.playerEmo())})),this.scheduleOnce((function(){var n=new u(e.node.x-38,e.node.y-38);p(e.node).to(.75,{position:n}).start()}),.1))},c.playerEmo=function(){var e=this,n=this.node.getChildByName("emo");n&&this.scheduleOnce((function(){n.active=!0,p(n).to(.5,{scale:new u(1.1,1.1)}).call((function(){e.onCompleteCallback()})).start()}),.2)},c.onCompleteCallback=function(){var e=o(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:this.scheduleOnce(o(a().mark((function e(){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,h.addViewUiAsync(d.account,A,m.selectFun);case 2:case"end":return e.stop()}}),e)}))),.2);case 1:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}(),c.update=function(e){},n}(f)).prototype,"playerAni",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),C=k))||C)||C));c._RF.pop()}}}));

System.register("chunks:///_virtual/Priority.ts",["./rollupPluginModLoBabelHelpers.js","cc","./BranchNode.ts"],(function(t){var i,s,c;return{setters:[function(t){i=t.inheritsLoose},function(t){s=t.cclegacy},function(t){c=t.BranchNode}],execute:function(){s._RF.push({},"f7555DSpj9LbYpRDi8/UKdN","Priority",void 0);t("Priority",function(t){function s(){return t.apply(this,arguments)||this}i(s,t);var c=s.prototype;return c.success=function(){t.prototype.success.call(this),this._control.success()},c.fail=function(){t.prototype.fail.call(this),this._actualTask+=1,this._actualTask<this.children.length?this._run(this._blackboard):this._control.fail()},s}(c));s._RF.pop()}}}));

System.register("chunks:///_virtual/RandomManager.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(n){var t,e;return{setters:[function(n){t=n.createClass},function(n){e=n.cclegacy}],execute:function(){e._RF.push({},"3e09eJBwfZBsLPqFszZLvMS","RandomManager",void 0),n("RandomManager",function(){function n(){this.random=null}var e=n.prototype;return e.setRandom=function(n){this.random=n},e.getRandom=function(){return this.random()},e.getRandomFloat=function(n,t){return void 0===n&&(n=0),void 0===t&&(t=1),this.getRandom()*(t-n)+n},e.getRandomInt=function(n,t,e){switch(void 0===e&&(e=2),n=Math.ceil(n),t=Math.floor(t),e){case 1:return Math.floor(this.getRandom()*(t-n))+n;case 2:return Math.floor(this.getRandom()*(t-n+1))+n;case 3:return Math.floor(this.getRandom()*(t-n-1))+n+1}return 0},e.getRandomByMinMaxList=function(n,t,e){for(var o=[],a=0;a<e;a++)o.push(this.getRandomInt(n,t));return o},e.getRandomByObjectList=function(n,t){for(var e=n.slice(),o=[],a=0;a<t;a++){var r=this.getRandomInt(0,e.length,1);o.push(e.splice(r,1)[0])}return o},e.getRandomBySumList=function(n,t){for(var e=t,o=0,a=[],r=0;r<n;r++)o=this.getRandomInt(0,e,3),r==n-1?o=e:e-=o,a.push(o);return a},t(n,null,[{key:"instance",get:function(){return null==this._instance&&(this._instance=new n,this._instance.setRandom(Math.random)),this._instance}}]),n}())._instance=void 0,e._RF.pop()}}}));

System.register("chunks:///_virtual/RegexUtil.ts",["cc"],(function(e){var t;return{setters:[function(e){t=e.cclegacy}],execute:function(){t._RF.push({},"dec9bVPigFCmKy5NVk+0y7h","RegexUtil",void 0);e("RegexUtil",function(){function e(){}return e.isDoubleWord=function(e){return/[^\x00-\xff]/.test(e)},e}());t._RF.pop()}}}));

System.register("chunks:///_virtual/ResLoader.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var n,r,t,s,o,a,l,u,d,i;return{setters:[function(e){n=e.createClass,r=e.asyncToGenerator,t=e.regeneratorRuntime},function(e){s=e.cclegacy,o=e.assetManager,a=e.error,l=e.warn,u=e.Asset,d=e.js,i=e.resources}],execute:function(){s._RF.push({},"1a2e4jFffpHrYjrpxbnC760","ResLoader",void 0);var c=e("ResLoader",function(){function e(){this.defaultBundleName="resources",this.cdn=!1,this.bundles=new Map}var s=e.prototype;return s.init=function(e){for(var n in this.cdn=e.enable,e.packages)this.bundles.set(n,e.packages[n])},s.loadRemote=function(e){var n=null,r=null;2==(arguments.length<=1?0:arguments.length-1)?(n=arguments.length<=1?void 0:arguments[1],r=arguments.length<=2?void 0:arguments[2]):r=arguments.length<=1?void 0:arguments[1],o.loadRemote(e,n,r)},s.loadBundle=function(e,n){return new Promise((function(r,t){o.loadBundle(e,{version:n},(function(e,n){if(e)return a(e);r(n)}))}))},s.removeBundle=function(e){var n=o.bundles.get(e);n&&(n.releaseAll(),o.removeBundle(n))},s.preload=function(e,n,r,t,s){var o=null;"string"==typeof n||n instanceof Array?(o=this.parseLoadResArgs(n,r,t,s)).bundle=e:(o=this.parseLoadResArgs(e,n,r,t)).bundle=this.defaultBundleName,o.preload=!0,this.loadByArgs(o)},s.preloadAsync=function(e,n,r){var t=this;return new Promise((function(s,o){t.preload(e,n,r,(function(e,n){e&&l(e.message),s(n)}))}))},s.preloadDir=function(e,n,r,t,s){var o=null;"string"==typeof n?(o=this.parseLoadResArgs(n,r,t,s)).bundle=e:(o=this.parseLoadResArgs(e,n,r,t)).bundle=this.defaultBundleName,o.dir=o.paths,o.preload=!0,this.loadByArgs(o)},s.load=function(e,n,r,t,s){var o=null;"string"==typeof n||n instanceof Array?(o=this.parseLoadResArgs(n,r,t,s)).bundle=e:(o=this.parseLoadResArgs(e,n,r,t)).bundle=this.defaultBundleName,this.loadByArgs(o)},s.loadAsync=function(e,n,r){var t=this;return new Promise((function(s,o){t.load(e,n,r,(function(e,n){e&&l(e.message),s(n)}))}))},s.loadDir=function(e,n,r,t,s){var o=null;"string"==typeof n?(o=this.parseLoadResArgs(n,r,t,s)).bundle=e:(o=this.parseLoadResArgs(e,n,r,t)).bundle=this.defaultBundleName,o.dir=o.paths,this.loadByArgs(o)},s.release=function(e,n){void 0===n&&(n=this.defaultBundleName);var r=o.getBundle(n);if(r){var t=r.get(e);t&&this.releasePrefabtDepsRecursively(t)}},s.releaseDir=function(e,n){var r=this;void 0===n&&(n=this.defaultBundleName);var t=o.getBundle(n);if(t){var s=t.getDirWithPath(e);s&&s.map((function(e){r.releasePrefabtDepsRecursively(e.uuid)})),""==e&&"resources"!=n&&o.removeBundle(t)}},s.releasePrefabtDepsRecursively=function(e){if(e instanceof u)e.decRef();else{var n=o.assets.get(e);n&&n.decRef()}},s.get=function(e,n,r){return void 0===r&&(r=this.defaultBundleName),o.getBundle(r).get(e,n)},s.parseLoadResArgs=function(e,n,r,t){var s=e,o=n,a=r,l=t;if(void 0===t){var i=d.isChildClassOf(n,u);r?(l=r,i&&(a=null)):void 0!==r||i||(l=n,a=null,o=null),void 0===r||i||(a=n,o=null)}return{paths:s,type:o,onProgress:a,onComplete:l}},s.loadByBundleAndArgs=function(e,n){n.dir?n.preload?e.preloadDir(n.paths,n.type,n.onProgress,n.onComplete):e.loadDir(n.paths,n.type,n.onProgress,n.onComplete):n.preload?e.preload(n.paths,n.type,n.onProgress,n.onComplete):e.load(n.paths,n.type,n.onProgress,n.onComplete)},s.loadByArgs=function(){var e=r(t().mark((function e(n){var r,s;return t().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!n.bundle){e.next=13;break}if(!(r=o.bundles.get(n.bundle))){e.next=6;break}this.loadByBundleAndArgs(r,n),e.next=11;break;case 6:return s=this.cdn?this.bundles.get(n.bundle):"",e.next=9,this.loadBundle(n.bundle,s);case 9:(r=e.sent)&&this.loadByBundleAndArgs(r,n);case 11:e.next=14;break;case 13:this.loadByBundleAndArgs(i,n);case 14:case"end":return e.stop()}}),e,this)})));return function(n){return e.apply(this,arguments)}}(),s.dump=function(){o.assets.forEach((function(e,n){console.log(o.assets.get(n))})),console.log("当前资源总数:"+o.assets.count)},n(e,[{key:"maxConcurrency",get:function(){return o.downloader.maxConcurrency},set:function(e){o.downloader.maxConcurrency=e}},{key:"maxRequestsPerFrame",get:function(){return o.downloader.maxRequestsPerFrame},set:function(e){o.downloader.maxRequestsPerFrame=e}},{key:"maxRetryCount",get:function(){return o.downloader.maxRetryCount},set:function(e){o.downloader.maxRetryCount=e}},{key:"retryInterval",get:function(){return o.downloader.retryInterval},set:function(e){o.downloader.retryInterval=e}}]),e}());e("resLoader",new c);s._RF.pop()}}}));

System.register("chunks:///_virtual/Root.ts",["./rollupPluginModLoBabelHelpers.js","cc","./GameConfig.ts","./GameQueryConfig.ts","./Oops.ts","./AudioManager.ts","./EventMessage.ts","./MessageManager.ts","./ResLoader.ts","./StorageManager.ts","./StorageSecuritySimple.ts","./TimerManager.ts","./GameManager.ts","./LayerManager.ts"],(function(e){var t,n,i,o,a,r,s,u,c,g,f,l,p,m,d,h,y,E,v,S,M,w,b,A,G,C,R,_,L;return{setters:[function(e){t=e.applyDecoratedDescriptor,n=e.inheritsLoose,i=e.initializerDefineProperty,o=e.assertThisInitialized,a=e.asyncToGenerator,r=e.regeneratorRuntime},function(e){s=e.cclegacy,u=e._decorator,c=e.Node,g=e.game,f=e.Game,l=e.sys,p=e.screen,m=e.director,d=e.Component,h=e.JsonAsset},function(e){y=e.GameConfig},function(e){E=e.GameQueryConfig},function(e){v=e.version,S=e.oops},function(e){M=e.AudioManager},function(e){w=e.EventMessage},function(e){b=e.message},function(e){A=e.resLoader},function(e){G=e.StorageManager},function(e){C=e.StorageSecuritySimple},function(e){R=e.TimerManager},function(e){_=e.GameManager},function(e){L=e.LayerManager}],execute:function(){var N,T,O,H,D;s._RF.push({},"90b9cOmlmBCnpCpEpgvdrQr","Root",void 0);var I=u.property,z=!1;e("Root",(N=I({type:c,tooltip:"游戏层"}),T=I({type:c,tooltip:"界面层"}),H=t((O=function(e){function t(){for(var t,n=arguments.length,a=new Array(n),r=0;r<n;r++)a[r]=arguments[r];return t=e.call.apply(e,[this].concat(a))||this,i(t,"game",H,o(t)),i(t,"gui",D,o(t)),t.persist=null,t}n(t,e);var s=t.prototype;return s.onLoad=function(){z||(z=!0,console.log("Oops Framework v"+v),this.enabled=!1,this.iniStart(),this.loadConfig().then())},s.loadConfig=function(){var e=a(r().mark((function e(){var t,n;return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.persist=new c("OopsFrameworkPersistNode"),m.addPersistRootNode(this.persist),S.res=A,t="config",e.next=6,S.res.loadAsync(t,h);case 6:(n=e.sent)?(S.config.query=new E,S.config.game=new y(n),S.res.defaultBundleName=S.config.game.bundleDefault,S.res.init(S.config.game.data.bundle),S.storage=new G,S.storage.init(new C),S.message=b,S.audio=this.persist.addComponent(M),S.audio.load(),S.timer=this.persist.addComponent(R),S.game=new _(this.game),S.gui=new L,S.gui.mobileSafeArea=S.config.game.mobileSafeArea,S.gui.initLayer(this.gui),S.http.server=S.config.game.httpServer,S.http.timeout=S.config.game.httpTimeout,g.frameRate=S.config.game.frameRate,this.enabled=!0,this.init(),this.run(),S.res.release(t)):this.loadConfig().then();case 8:case"end":return e.stop()}}),e,this)})));return function(){return e.apply(this,arguments)}}(),s.update=function(e){S.ecs.execute(e)},s.iniStart=function(){},s.initGui=function(){},s.initEcsSystem=function(){},s.run=function(){},s.init=function(){this.initGui(),this.initEcsSystem(),S.ecs.init(),g.on(f.EVENT_SHOW,this.onShow,this),g.on(f.EVENT_HIDE,this.onHide,this),l.isMobile||(p.on("window-resize",(function(){S.message.dispatchEvent(w.GAME_RESIZE)}),this),p.on("fullscreen-change",(function(){S.message.dispatchEvent(w.GAME_FULL_SCREEN)}),this)),p.on("orientation-change",(function(){S.message.dispatchEvent(w.GAME_ORIENTATION)}),this)},s.onShow=function(){S.timer.load(),S.audio.resumeAll(),m.resume(),g.resume(),S.message.dispatchEvent(w.GAME_SHOW)},s.onHide=function(){S.timer.save(),S.audio.pauseAll(),m.pause(),g.pause(),S.message.dispatchEvent(w.GAME_HIDE)},t}(d)).prototype,"game",[N],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),D=t(O.prototype,"gui",[T],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),O));s._RF.pop()}}}));

System.register("chunks:///_virtual/RotateUtil.ts",["cc","./Vec3Util.ts"],(function(t){var o,n,r,e,i;return{setters:[function(t){o=t.cclegacy,n=t.Quat,r=t.Vec3,e=t.toRadian},function(t){i=t.Vec3Util}],execute:function(){o._RF.push({},"103324kr75Hi5d7RZCcRt3P","RotateUtil",void 0);t("RotateUtil",function(){function t(){}return t.rotateAround=function(t,o,r){var e=new n;n.rotateAround(e,t.getRotation(),o.normalize(),r),t.setRotation(e)},t.rotateAroundTarget=function(t,o,e,i){var a=t.worldPosition,u=o.worldPosition,c=new n,s=new r;n.fromAxisAngle(c,e,i),r.subtract(s,u,a),r.transformQuat(s,s,c),r.add(s,a,s),o.setWorldPosition(s),n.rotateAround(c,o.worldRotation,e,i),n.normalize(c,c),o.setWorldRotation(c)},t.circularEdgePosition=function(t,o,a){var u=i.z.multiplyScalar(o),c=i.sub(u,t),s=new r,l=new n;return n.fromAxisAngle(l,r.UP,e(a)),r.transformQuat(s,c,l),r.add(s,t,s),s},t}());o._RF.pop()}}}));

System.register("chunks:///_virtual/RtToModel.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,r,i,n,o,a,l,s,c,u,h,p;return{setters:[function(e){t=e.applyDecoratedDescriptor,r=e.inheritsLoose,i=e.initializerDefineProperty,n=e.assertThisInitialized},function(e){o=e.cclegacy,a=e._decorator,l=e.Camera,s=e.MeshRenderer,c=e.RenderTexture,u=e.view,h=e.gfx,p=e.Component}],execute:function(){var d,f,m,y,g,w,b;o._RF.push({},"dbd7dMQYutDs7I7uj+3zIiU","RtToModel",void 0);var v=a.ccclass,R=a.property;e("RtToModel",(d=v("RtToModel"),f=R(l),m=R(s),d((w=t((g=function(e){function t(){for(var t,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return t=e.call.apply(e,[this].concat(o))||this,i(t,"camara",w,n(t)),i(t,"model",b,n(t)),t.rt=new c,t}r(t,e);var o=t.prototype;return o.start=function(){var e=u.getVisibleSize(),t=new h.ColorAttachment,r=new h.DepthStencilAttachment,i=new h.RenderPassInfo([t],r);this.rt.reset({width:e.width,height:e.height,passInfo:i}),this.camara.targetTexture=this.rt,this.model.material.setProperty("mainTexture",this.rt)},o.onDestroy=function(){this.rt.destroy()},t}(p)).prototype,"camara",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),b=t(g.prototype,"model",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),y=g))||y));o._RF.pop()}}}));

System.register("chunks:///_virtual/RtToSprite.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(t){var e,i,o,r,n,s,h,a,p,u,c,l,f,T;return{setters:[function(t){e=t.applyDecoratedDescriptor,i=t.inheritsLoose,o=t.initializerDefineProperty,r=t.assertThisInitialized},function(t){n=t.cclegacy,s=t._decorator,h=t.Camera,a=t.Sprite,p=t.Node,u=t.RenderTexture,c=t.UITransform,l=t.gfx,f=t.SpriteFrame,T=t.Component}],execute:function(){var d,y,v,m,g,E,b,C,R,S,w;n._RF.push({},"f608cdDWBNEKLILVNBcQYvf","RtToSprite",void 0);var _=s.ccclass,O=s.property;t("RtToSprite",(d=_("RtToSprite"),y=O({type:h,tooltip:"渲染模型的三维摄像机"}),v=O({type:a,tooltip:"显示模型的二维精灵组件"}),m=O({tooltip:"是否触摸控制旋转"}),g=O({type:p,tooltip:"三维模型",visible:function(){return!0===this.rotation}}),d((C=e((b=function(t){function e(){for(var e,i=arguments.length,n=new Array(i),s=0;s<i;s++)n[s]=arguments[s];return e=t.call.apply(t,[this].concat(n))||this,o(e,"camera",C,r(e)),o(e,"sprite",R,r(e)),o(e,"rotation",S,r(e)),o(e,"model",w,r(e)),e.rt=new u,e.touched=!1,e}i(e,t);var n=e.prototype;return n.start=function(){var t=this.sprite.getComponent(c);this.refreshRenderTexture(t.width,t.height),this.rotation&&(this.sprite.node.on(p.EventType.TOUCH_START,this.onTouchStart,this),this.sprite.node.on(p.EventType.TOUCH_MOVE,this.onTouchMove,this),this.sprite.node.on(p.EventType.TOUCH_END,this.onTouchEnd,this),this.sprite.node.on(p.EventType.TOUCH_CANCEL,this.onTouchEnd,this))},n.onTouchStart=function(t){this.touched=!0},n.onTouchMove=function(t){if(this.touched){var e=this.model.eulerAngles,i=t.touch.getDelta().x;e.y+=-i,this.model.eulerAngles=e}},n.onTouchEnd=function(t){this.touched=!1},n.refreshRenderTexture=function(t,e){var i=new l.ColorAttachment,o=new l.DepthStencilAttachment,r=new l.RenderPassInfo([i],o);this.rt.reset({width:t,height:e,passInfo:r});var n=this.sprite.spriteFrame,s=new f;s.reset({originalSize:n.originalSize,rect:n.rect,offset:n.offset,isRotate:n.rotated,borderTop:n.insetTop,borderLeft:n.insetLeft,borderBottom:n.insetBottom,borderRight:n.insetRight}),this.camera.targetTexture=this.rt,s.texture=this.rt,this.sprite.spriteFrame=s},n.onDestroy=function(){this.rotation&&(this.sprite.node.off(p.EventType.TOUCH_START,this.onTouchStart,this),this.sprite.node.off(p.EventType.TOUCH_MOVE,this.onTouchMove,this),this.sprite.node.off(p.EventType.TOUCH_END,this.onTouchEnd,this),this.sprite.node.off(p.EventType.TOUCH_CANCEL,this.onTouchEnd,this)),this.rt.destroy()},e}(T)).prototype,"camera",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),R=e(b.prototype,"sprite",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),S=e(b.prototype,"rotation",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),w=e(b.prototype,"model",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),E=b))||E));n._RF.pop()}}}));

System.register("chunks:///_virtual/SeedRandom.ts",["./rollupPluginModLoBabelHelpers.js","cc","./RandomManager.ts"],(function(n){var t,e,r;return{setters:[function(n){t=n.createClass},function(n){e=n.cclegacy},function(n){r=n.RandomManager}],execute:function(){e._RF.push({},"9b02bnNwwZEWq9Ft59BRCIB","SeedRandom",void 0);n("SeedRandom",function(){function n(n){this.rm=void 0,this.sr=void 0,this.sr=new Math.seedrandom(n),this.rm=new r,this.rm.setRandom(this.sr)}return n.prototype.destroy=function(){this.rm=null,this.sr=null},t(n,[{key:"random",get:function(){return this.rm}}]),n}());e._RF.pop()}}}));

System.register("chunks:///_virtual/selectFun.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./ECS.ts","./CCComp.ts","./GameEvent.ts"],(function(t){var e,n,i,o,r,a,s,l,u,c,f,g,h,m;return{setters:[function(t){e=t.applyDecoratedDescriptor,n=t.inheritsLoose,i=t.initializerDefineProperty,o=t.assertThisInitialized},function(t){r=t.cclegacy,a=t._decorator,s=t.Node,l=t.Button,u=t.Sprite,c=t.SpriteFrame},function(t){f=t.oops},function(t){g=t.ecs},function(t){h=t.CCComp},function(t){m=t.GameEvent}],execute:function(){var p,d,v,y,C,F,R,b;r._RF.push({},"65e88px/MRH5rNNA958wOIM","selectFun",void 0);var _=a.ccclass,I=a.property;t("selectFun",(p=_("selectFun"),d=g.register("selectFunView",!1),v=I(s),y=I(s),p(C=d((R=e((F=function(t){function e(){for(var e,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return e=t.call.apply(t,[this].concat(r))||this,i(e,"ndLeft",R,o(e)),i(e,"ndRight",b,o(e)),e}n(e,t);var r=e.prototype;return r.reset=function(){},r.onLoad=function(){f.message.on(m.modifyFunImg,this.rightImgState,this)},r.start=function(){var t,e=null==(t=this.ndRight)?void 0:t.getComponent(l);e&&(e.interactable=!1)},r.OnclicBotton=function(t){if("left"==t.target.name){var e;f.message.dispatchEvent(m.VacuumCleanerAni,{name:"牛逼",img:"没有"});var n=null==(e=this.ndLeft)?void 0:e.getComponent(u);n&&n.spriteFrame&&(this.loadImg(this.ndLeft,"one_left_none"),this.modifyButtonState("left"))}if("right"==t.target.name){var i;f.message.dispatchEvent(m.Hm);var o=null==(i=this.ndRight)?void 0:i.getComponent(u);o&&o.spriteFrame&&(this.loadImg(this.ndRight,"one_right_none"),this.modifyButtonState("right"))}},r.modifyButtonState=function(t){var e,n=this.ndLeft;"left"==t&&(n=this.ndLeft),"right"==t&&(n=this.ndRight);var i=null==(e=n)?void 0:e.getComponent(l);i&&(i.interactable=!1)},r.rightImgState=function(){var t;this.loadImg(this.ndRight,"one_right_active");var e=null==(t=this.ndRight)?void 0:t.getComponent(l);e&&(e.interactable=!0)},r.loadImg=function(t,e){f.res.load("resources","img/selectFun/"+e+"/spriteFrame",c,(function(e,n){if(e)console.error("加载图片失败：",e);else{var i=t.getComponent(u);i&&(i.spriteFrame=n)}}))},r.update=function(t){},e}(h)).prototype,"ndLeft",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),b=e(F.prototype,"ndRight",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),C=F))||C)||C));r._RF.pop()}}}));

System.register("chunks:///_virtual/Selector.ts",["./rollupPluginModLoBabelHelpers.js","cc","./BranchNode.ts"],(function(t){var n,c,o;return{setters:[function(t){n=t.inheritsLoose},function(t){c=t.cclegacy},function(t){o=t.BranchNode}],execute:function(){c._RF.push({},"90470XqT/FGHo/PRQktLcYy","Selector",void 0);t("Selector",function(t){function c(){return t.apply(this,arguments)||this}n(c,t);var o=c.prototype;return o.success=function(){t.prototype.success.call(this),this._control.success()},o.fail=function(){t.prototype.fail.call(this),this._actualTask+=1,this._actualTask<this.children.length?this._run(this._blackboard):this._control.fail()},o._run=function(n){this._nodeRunning?this._nodeRunning.run(this._blackboard):t.prototype._run.call(this)},c}(o));c._RF.pop()}}}));

System.register("chunks:///_virtual/Sequence.ts",["./rollupPluginModLoBabelHelpers.js","cc","./BranchNode.ts"],(function(t){var n,e,c;return{setters:[function(t){n=t.inheritsLoose},function(t){e=t.cclegacy},function(t){c=t.BranchNode}],execute:function(){e._RF.push({},"1ef80bgYZBPXqCDIpzHpbBJ","Sequence",void 0);t("Sequence",function(t){function e(n){return t.call(this,n)||this}n(e,t);var c=e.prototype;return c.success=function(){t.prototype.success.call(this),this._actualTask+=1,this._actualTask<this.children.length?this._run(this._blackboard):this._control.success()},c.fail=function(){t.prototype.fail.call(this),this._control.fail()},c._run=function(n){this._nodeRunning?this._nodeRunning.run(this._blackboard):t.prototype._run.call(this)},e}(c));e._RF.pop()}}}));

System.register("chunks:///_virtual/shipMain.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts","./ECS.ts","./CCComp.ts","./GameEvent.ts"],(function(e){var t,i,n,o,a,r,u,c,s,l,p,h,f,m,y,d,w;return{setters:[function(e){t=e.applyDecoratedDescriptor,i=e.inheritsLoose,n=e.initializerDefineProperty,o=e.assertThisInitialized,a=e.asyncToGenerator,r=e.regeneratorRuntime},function(e){u=e.cclegacy,c=e._decorator,s=e.Node,l=e.Vec3,p=e.tween,h=e.SpriteFrame,f=e.Sprite},function(e){m=e.oops},function(e){y=e.ecs},function(e){d=e.CCComp},function(e){w=e.GameEvent}],execute:function(){var v,b,g,x,C,E,V,z,_,M,O,P,S,q,A,F,j,H;u._RF.push({},"6e451P45ttLabEMHSdpJO8O","shipMain",void 0);var I=c.ccclass,L=c.property;e("shipMain",(v=I("shipMain"),b=y.register("shipMainView",!1),g=L(s),x=L(s),C=L(s),E=L(s),V=L(s),z=L(s),_=L(s),v(M=b((P=t((O=function(e){function t(){for(var t,i=arguments.length,a=new Array(i),r=0;r<i;r++)a[r]=arguments[r];return t=e.call.apply(e,[this].concat(a))||this,n(t,"ndVacuumCleaner",P,o(t)),n(t,"qiu",S,o(t)),n(t,"yazi",q,o(t)),n(t,"laji",A,o(t)),n(t,"yc",F,o(t)),n(t,"hm",j,o(t)),n(t,"playerEmo",H,o(t)),t}i(t,e);var u=t.prototype;return u.reset=function(){},u.onLoad=function(){m.audio.playMusicLoop("audio/bgm","resources"),m.audio.playEffect("audio/whistle","resources"),m.message.on(w.VacuumCleanerAni,this.PlayVacuumCleaner,this),m.message.on(w.Hm,this.PlayHm,this)},u.start=function(){},u.PlayVacuumCleaner=function(e,t){var i=this;this.ndVacuumCleaner&&(this.ndVacuumCleaner.active=!0,this.scheduleOnce((function(){if(i.ndVacuumCleaner){var e=i.ndVacuumCleaner.position,t=new l(e.x-260,e.y);p(i.ndVacuumCleaner).to(1,{position:t}).call((function(){i.playAudio()})).start()}}),.1))},u.PlayHm=function(){var e=this;if(this.hm){this.hm.active=!0;var t=this.hm.position,i=m.audio.playEffect("audio/hm","resources");this.scheduleOnce((function(){e.hm&&p(e.hm).to(.5,{position:new l(t.x-200,t.y-20)}).to(.5,{position:new l(t.x+200,t.y-40)}).to(.5,{position:new l(t.x-200,t.y-60)}).to(.5,{position:new l(t.x+200,t.y-80)}).to(.5,{position:new l(t.x-200,t.y-100)}).to(.5,{position:new l(t.x+200,t.y-120)}).to(.5,{position:new l(t.x-200,t.y-140)}).to(.5,{position:new l(t.x+200,t.y-160)}).to(.5,{position:new l(t.x-200,t.y-180)}).to(.5,{position:new l(t.x+200,t.y-200)}).call(a(r().mark((function t(){return r().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e.yc&&e.loadImg(e.yc,"yc_b"),e.hm&&(e.hm.active=!1),t.t0=m.audio,t.next=5,i;case 5:t.t1=t.sent,t.t0.putEffect.call(t.t0,t.t1,"audio/hm","resources"),e.playerEmo&&(e.playerEmo.active=!1);case 8:case"end":return t.stop()}}),t)})))).start()}),.1)}},u.playAudio=function(){var e=this,t=m.audio.playEffect("audio/xcq","resources");this.scheduleOnce((function(){e.handleWaste(t)}),.1)},u.closeAudio=function(e){var t=this;this.scheduleOnce(a(r().mark((function i(){return r().wrap((function(i){for(;;)switch(i.prev=i.next){case 0:return i.t0=m.audio,i.next=3,e;case 3:i.t1=i.sent,i.t0.putEffect.call(i.t0,i.t1,"audio/xcq","resources"),t.ndVacuumCleaner&&(t.ndVacuumCleaner.active=!1),t.switchShip();case 7:case"end":return i.stop()}}),i)}))),.5)},u.switchShip=function(){var e=this;this.scheduleOnce((function(){m.message.dispatchEvent(w.modifyFunImg),e.yc&&e.loadImg(e.yc,"yc_h")}),1)},u.loadImg=function(e,t){m.res.load("resources","img/yc/"+t+"/spriteFrame",h,(function(t,i){if(t)console.error("加载图片失败：",t);else{var n=e.getComponent(f);n&&(n.spriteFrame=i)}}))},u.handleWaste=function(e){var t=this;this.qiu&&p(this.qiu).to(.5,{opacity:0}).start();var i=function(i){var n=new l(i.x,i.y-120);p(i).to(2,{position:n,scale_x:0,scale_y:0}).call((function(){"img_trash"==i.name&&t.closeAudio(e)})).start()};this.yazi&&i(this.yazi),this.laji&&i(this.laji)},t}(d)).prototype,"ndVacuumCleaner",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),S=t(O.prototype,"qiu",[x],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),q=t(O.prototype,"yazi",[C],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),A=t(O.prototype,"laji",[E],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),F=t(O.prototype,"yc",[V],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),j=t(O.prototype,"hm",[z],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),H=t(O.prototype,"playerEmo",[_],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),M=O))||M)||M));u._RF.pop()}}}));

System.register("chunks:///_virtual/SingletonModuleComp.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ECS.ts"],(function(n){var e,t,o;return{setters:[function(n){e=n.inheritsLoose},function(n){t=n.cclegacy},function(n){o=n.ecs}],execute:function(){var i;t._RF.push({},"17a56vOVQFMMarANxr6JvP7","SingletonModuleComp",void 0);var r=n("SingletonModuleComp",o.register("SingletonModule")(i=function(n){function t(){for(var e,t=arguments.length,o=new Array(t),i=0;i<t;i++)o[i]=arguments[i];return(e=n.call.apply(n,[this].concat(o))||this).initialize=null,e.account=null,e}return e(t,n),t.prototype.reset=function(){},t}(o.Comp))||i);n("smc",o.getSingleton(r));t._RF.pop()}}}));

System.register("chunks:///_virtual/SpineFinishedRelease.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts"],(function(e){var t,i,n,s,o,r,a,p,l;return{setters:[function(e){t=e.applyDecoratedDescriptor,i=e.inheritsLoose,n=e.initializerDefineProperty,s=e.assertThisInitialized},function(e){o=e.cclegacy,r=e._decorator,a=e.sp,p=e.Component},function(e){l=e.oops}],execute:function(){var h,c,u;o._RF.push({},"9589eKB/RZKXpxoYhz5SyC7","SpineFinishedRelease",void 0);var d=r.ccclass,f=r.property;e("SpineFinishedRelease",d("SpineFinishedRelease")((u=t((c=function(e){function t(){for(var t,i=arguments.length,o=new Array(i),r=0;r<i;r++)o[r]=arguments[r];return t=e.call.apply(e,[this].concat(o))||this,n(t,"isDestroy",u,s(t)),t.spine=void 0,t.resPath=null,t}i(t,e);var o=t.prototype;return o.setResPath=function(e){this.resPath=e},o.onLoad=function(){var e=this;this.spine=this.getComponent(a.Skeleton),this.spine.setCompleteListener(this.onSpineComplete.bind(this)),this.resPath?l.res.load(this.resPath,a.SkeletonData,(function(t,i){t?console.error("加载【"+e.resPath+"】的 SPINE 资源不存在"):(e.spine.skeletonData=i,e.spine.setAnimation(0,"animation",!1))})):this.spine.setAnimation(0,"animation",!1)},o.onSpineComplete=function(){this.isDestroy?this.node.destroy():this.node.removeFromParent()},t}(p)).prototype,"isDestroy",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!0}}),h=c))||h);o._RF.pop()}}}));

System.register("chunks:///_virtual/StorageManager.ts",["./rollupPluginModLoBabelHelpers.js","cc","./env"],(function(e){var t,r,n,i;return{setters:[function(e){t=e.createClass},function(e){r=e.cclegacy,n=e.sys},function(e){i=e.PREVIEW}],execute:function(){r._RF.push({},"ed226gLF85Oyr+WhA9TJZLX","StorageManager",void 0);e("StorageManager",function(){function e(){this.id=null,this.iss=null}var r=e.prototype;return r.init=function(e){this.iss=e},r.setUser=function(e){this.id=e},r.set=function(e,t){var r=this.getKey(e);if(null!=e){if(this.encrypted&&(r=this.iss.encryptKey(r)),null==t)return console.warn("存储的值为空，则直接移除该存储"),void this.remove(e);if("function"!=typeof t){if("object"==typeof t)try{t=JSON.stringify(t)}catch(e){return void console.error("解析失败，str = "+t)}else"number"==typeof t?t+="":"boolean"==typeof t&&(t=String(t));this.encrypted&&(t=this.iss.encrypt(t)),n.localStorage.setItem(r,t)}else console.error("储存的值不能为方法")}else console.error("存储的key不能为空")},r.get=function(e,t){if(void 0===t&&(t=""),null==e)return console.error("存储的key不能为空"),null;e=this.getKey(e),this.encrypted&&(e=this.iss.encryptKey(e));var r=n.localStorage.getItem(e);return null!=r&&""!==r&&this.encrypted&&(r=this.iss.decrypt(r)),null===r?t:r},r.getNumber=function(e,t){void 0===t&&(t=0);var r=this.get(e);return"0"==r?Number(r):Number(r)||t},r.getBoolean=function(e){return"true"===this.get(e).toLowerCase()},r.getJson=function(e,t){var r=this.get(e);return r&&JSON.parse(r)||t},r.remove=function(e){if(null!=e){var t=this.getKey(e);this.encrypted&&(t=this.iss.encryptKey(t)),n.localStorage.removeItem(t)}else console.error("存储的key不能为空")},r.clear=function(){n.localStorage.clear()},r.getKey=function(e){return null==this.id||""==this.id?e:this.id+"_"+e},t(e,[{key:"encrypted",get:function(){return!i}}]),e}());r._RF.pop()}}}));

System.register("chunks:///_virtual/StorageSecurityCrypto.ts",["cc"],(function(){var t;return{setters:[function(e){t=e.cclegacy}],execute:function(){t._RF.push({},"fbbbdioMCNOmI7KMEU46FfN","StorageSecurityCrypto",void 0),t._RF.pop()}}}));

System.register("chunks:///_virtual/StorageSecuritySimple.ts",["cc","./Oops.ts"],(function(e){var t,r;return{setters:[function(e){t=e.cclegacy},function(e){r=e.oops}],execute:function(){t._RF.push({},"386e3+fu+RJB5VSgow0kwS4","StorageSecuritySimple",void 0);e("StorageSecuritySimple",function(){function e(){this.secretkey=null;var e=r.config.game.localDataKey,t=r.config.game.localDataIv;this.secretkey=e+t}var t=e.prototype;return t.encrypt=function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e.charCodeAt(r)^this.secretkey.charCodeAt(r%this.secretkey.length));return t},t.decrypt=function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e.charCodeAt(r)^this.secretkey.charCodeAt(r%this.secretkey.length));return t},t.encryptKey=function(e){return this.encrypt(e)},e}());t._RF.pop()}}}));

System.register("chunks:///_virtual/StringFormat.ts",["cc"],(function(t){var e;return{setters:[function(t){e=t.cclegacy}],execute:function(){e._RF.push({},"85fe8Gc6h5Ava+JsdbBs8cR","StringFormat",void 0);t("StringFormatFunction",new(function(){function t(){}var e=t.prototype;return e.deal=function(t,e){if(""===e)return t;var n=(e=e.toLowerCase().trim()).match(/^[a-z|A-Z]+/gi),i=e.match(/\d+$/gi),r="",o=0,c="";if(n&&(r=n[0]),i&&(o=parseInt(i[0])),"number"==typeof t)switch(r){case"int":c=this.int(t);break;case"fix":c=this.fix(t,o);break;case"kmbt":c=this.KMBT(t);break;case"per":c=this.per(t,o);break;case"sep":c=this.sep(t)}else{switch(r){case"limit":c=this.limit(t,o)}c=t}return c},e.sep=function(t){return Math.round(t).toString().replace(new RegExp("(\\d)(?=(\\d{3})+$)","ig"),"$1,")},e.time_m=function(t){},e.time_s=function(t){},e.time_ms=function(t){},e.timeStamp=function(t){return new Date(t).toString()},e.per=function(t,e){return Math.round(100*t).toFixed(e)},e.int=function(t){return Math.round(t)},e.fix=function(t,e){return t.toFixed(e)},e.limit=function(t,e){return t.substring(0,e)},e.KMBT=function(t,e){return this.compressUnit(t,[1e3,1e6,1e9,1e12],["","K","M","B","T"],2)},e.compressUnit=function(t,e,n,i){void 0===i&&(i=2);var r,o=e,c=n,u="";for(r=0;r<o.length;r++){if(t<o[r]){u=r>0?(t/o[r-1]).toFixed(i):t.toFixed(0);break}}return u+c[r]},t}()));e._RF.pop()}}}));

System.register("chunks:///_virtual/StringUtil.ts",["cc"],(function(r){var t;return{setters:[function(r){t=r.cclegacy}],execute:function(){t._RF.push({},"aa8435LSBtAR5HPsje6IJ2w","StringUtil",void 0);r("StringUtil",function(){function r(){}return r.guid=function(){for(var r="",t=1;t<=32;t++){r+=Math.floor(16*Math.random()).toString(16),8!=t&&12!=t&&16!=t&&20!=t||(r+="-")}return r},r.numberTotPermil=function(r){return r.toLocaleString()},r.numberToThousand=function(r,t){void 0===t&&(t=2);var n=1e3;if(r<n)return r.toString();var e=Math.floor(Math.log(r)/Math.log(n));return(r/Math.pow(n,e)).toFixed(t)+["","K","M","G"][e]},r.numberToTenThousand=function(r,t){void 0===t&&(t=2);var n=1e4;if(r<n)return r.toString();var e=Math.floor(Math.log(r)/Math.log(n));return(r/Math.pow(n,e)).toFixed(t)+["","万","亿","万亿"][e]},r.stringToArray1=function(r){return""==r?[]:r.split(",")},r.stringToArray2=function(r){return""==r?[]:r.split("|")},r.stringToArray3=function(r){return""==r?[]:r.split(":")},r.stringToArray4=function(r){return""==r?[]:r.split(";")},r.sub=function(r,t,n){void 0===n&&(n=!1);var e=/[^\x00-\xff]/g;if(r.replace(e,"mm").length<=t)return r;for(var o=Math.floor(t/2);o<r.length;o++)if(r.substr(0,o).replace(e,"mm").length>=t)return n?r.substr(0,o)+"...":r.substr(0,o);return r},r.stringLen=function(r){for(var t=0,n=r.length,e=-1,o=0;o<n;o++)t+=(e=r.charCodeAt(o))>=0&&e<=128?1:2;return t},r.IsEmpty=function(r){return null==r||null==r||0==r.length},r.substitute=function(r){if(null==r)return"";for(var t=arguments.length,n=new Array(t>1?t-1:0),e=1;e<t;e++)n[e-1]=arguments[e];var o,u=n.length;1==u&&n[0]instanceof Array?u=(o=n[0]).length:o=n;for(var i=0;i<u;i++)r=r.replace(new RegExp("\\{"+i+"\\}","g"),o[i]);return r},r}());t._RF.pop()}}}));

System.register("chunks:///_virtual/TableLanguage.ts",["./rollupPluginModLoBabelHelpers.js","cc","./JsonUtil.ts"],(function(t){var e,n,a;return{setters:[function(t){e=t.createClass},function(t){n=t.cclegacy},function(t){a=t.JsonUtil}],execute:function(){n._RF.push({},"74f4fgFfZxHnqCfURfaciMV","TableLanguage",void 0),t("TableLanguage",function(){function t(){this.data=void 0,this.id=0}return t.prototype.init=function(e){var n=a.get(t.TableName);this.data=n[e],this.id=e},e(t,[{key:"zh",get:function(){return this.data.zh}},{key:"en",get:function(){return this.data.en}}]),t}()).TableName="Language",n._RF.pop()}}}));

System.register("chunks:///_virtual/TablePromptWindow.ts",["./rollupPluginModLoBabelHelpers.js","cc","./JsonUtil.ts"],(function(t){var i,e,n;return{setters:[function(t){i=t.createClass},function(t){e=t.cclegacy},function(t){n=t.JsonUtil}],execute:function(){e._RF.push({},"1e3d7uann5MRokAL2wULm9y","TablePromptWindow",void 0),t("TablePromptWindow",function(){function t(){this.data=void 0,this.id=0,this.id1=0,this.id2=0}return t.prototype.init=function(i,e,r){var a=n.get(t.TableName);this.data=a[i][e][r],this.id=i,this.id1=e,this.id2=r},i(t,[{key:"title",get:function(){return this.data.title}},{key:"describe",get:function(){return this.data.describe}},{key:"array",get:function(){return this.data.array}},{key:"hp",get:function(){return this.data.hp}}]),t}()).TableName="PromptWindow",e._RF.pop()}}}));

System.register("chunks:///_virtual/Task.ts",["./rollupPluginModLoBabelHelpers.js","cc","./BTreeNode.ts"],(function(e){var n,t,o;return{setters:[function(e){n=e.inheritsLoose},function(e){t=e.cclegacy},function(e){o=e.BTreeNode}],execute:function(){t._RF.push({},"95087QhEU1G1LWnM2D7haTQ","Task",void 0);e("Task",function(e){function t(){return e.apply(this,arguments)||this}return n(t,e),t.prototype.run=function(e){},t}(o));t._RF.pop()}}}));

System.register("chunks:///_virtual/Timer.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,s;return{setters:[function(e){t=e.createClass},function(e){s=e.cclegacy}],execute:function(){s._RF.push({},"6021fct1uhJsImEuhdFWC0f","Timer",void 0);e("Timer",function(){function e(e){void 0===e&&(e=0),this.callback=null,this._elapsedTime=0,this._step=-1,this.step=e}var s=e.prototype;return s.update=function(e){return!(this.step<=0)&&(this._elapsedTime+=e,this._elapsedTime>=this._step&&(this._elapsedTime-=this._step,null==(t=this.callback)||t.call(this),!0));var t},s.reset=function(){this._elapsedTime=0},s.stop=function(){this._elapsedTime=0,this.step=-1},t(e,[{key:"elapsedTime",get:function(){return this._elapsedTime}},{key:"step",get:function(){return this._step},set:function(e){this._step=e,this._elapsedTime=0}},{key:"progress",get:function(){return this._elapsedTime/this._step}}]),e}());s._RF.pop()}}}));

System.register("chunks:///_virtual/TimerManager.ts",["./rollupPluginModLoBabelHelpers.js","cc","./StringUtil.ts","./Timer.ts"],(function(e){var t,i,n,s,r,o;return{setters:[function(e){t=e.inheritsLoose},function(e){i=e.cclegacy,n=e.game,s=e.Component},function(e){r=e.StringUtil},function(e){o=e.Timer}],execute:function(){i._RF.push({},"73600VLsIBLOKhOhd7td4P8","TimerManager",void 0);e("TimerManager",function(e){function i(){for(var t,i=arguments.length,n=new Array(i),s=0;s<i;s++)n[s]=arguments[s];return(t=e.call.apply(e,[this].concat(n))||this).times={},t.date_s=new Date,t.date_s_start=new Date,t.polymeric_s=0,t.date_c=new Date,t}t(i,e);var s=i.prototype;return s.update=function(e){for(var t in this.times){var i=this.times[t];i.timer.update(e)&&i.object[i.field]>0&&(i.object[i.field]--,0==i.object[i.field]?this.onTimerComplete(i):i.onSecond&&i.onSecond.call(i.object))}},s.onTimerComplete=function(e){e.onComplete&&e.onComplete.call(e.target,e.object),e.event&&this.node.dispatchEvent(e.event),delete this.times[e.id]},s.register=function(e,t,i,n,s){var a=new o;a.step=1;var m={};return m.id=r.guid(),m.timer=a,m.object=e,m.field=t,m.onSecond=n,m.onComplete=s,m.target=i,this.times[m.id]=m,m.id},s.unRegister=function(e){this.times[e]&&delete this.times[e]},s.setServerTime=function(e){this.polymeric_s=this.getTime(),this.date_s_start.setTime(e)},s.getServerTime=function(){return this.date_s_start.getTime()+this.getTime()-this.polymeric_s},s.getServerDate=function(){return this.date_s.setTime(this.getServerTime()),this.date_s},s.getClientTime=function(){return Date.now()},s.getClientDate=function(){return this.date_c.setTime(this.getClientTime()),this.date_c},s.getTime=function(){return n.totalTime},s.save=function(){for(var e in this.times)this.times[e].startTime=this.getTime()},s.load=function(){for(var e in this.times){var t=Math.floor((this.getTime()-(this.times[e].startTime||this.getTime()))/1e3),i=this.times[e];i.object[i.field]=i.object[i.field]-t,i.object[i.field]<=0?(i.object[i.field]=0,this.onTimerComplete(i)):this.times[e].startTime=null}},i}(s));i._RF.pop()}}}));

System.register("chunks:///_virtual/TimeUtils.ts",["./rollupPluginModLoBabelHelpers.js","cc"],(function(e){var t,n,r;return{setters:[function(e){t=e.asyncToGenerator,n=e.regeneratorRuntime},function(e){r=e.cclegacy}],execute:function(){r._RF.push({},"c2070jsq0FDcaTrFhyA8yzm","TimeUtils",void 0);e("TimeUtil",function(){function e(){}return e.daysBetween=function(e,t){null==t&&(t=+new Date);var n=new Date(e).toLocaleDateString(),r=new Date(t).toLocaleDateString(),u=new Date(n).getTime(),a=new Date(r).getTime();return Math.abs(u-a)/864e5},e.secsBetween=function(e,t){var n=Math.abs(t-e)/1e3;return n=Math.floor(n)+1},e.sleep=function(){var e=t(n().mark((function e(t){return n().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e){setTimeout((function(){e()}),t)})));case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),e}());r._RF.pop()}}}));

System.register("chunks:///_virtual/TipsManager.ts",["cc","./Oops.ts","./GameUIConfig.ts"],(function(o){var e,n,t,c,r;return{setters:[function(o){e=o.cclegacy,n=o.tween,t=o.Vec3},function(o){c=o.oops},function(o){r=o.UIID}],execute:function(){e._RF.push({},"9748eriEcJOp6OSdnZ/qhs5","TipsManager",void 0);var i=o("tips",new(function(){function o(){}var e=o.prototype;return e.alert=function(o,e,n,t){var f={title:n||"common_prompt_title",content:o,okWord:t||"common_prompt_ok",okFunc:e,needCancel:!1};c.gui.open(r.Alert,f,i.getPopCommonEffect())},e.confirm=function(o,e,n,t,f){var m={title:t||"common_prompt_title",content:o,okWord:f||"common_prompt_ok",cancelWord:"common_prompt_cancal",okFunc:e,cancelFunc:n,needCancel:!0};c.gui.open(r.Confirm,m,i.getPopCommonEffect())},e.getPopCommonEffect=function(o){var e={onAdded:function(o,e){o.setScale(.1,.1,.1),n(o).to(.2,{scale:new t(1,1,1)}).start()},onBeforeRemove:function(o,e){n(o).to(.2,{scale:new t(.1,.1,.1)}).call(e).start()}};if(o){if(o&&o.onAdded){var c=o.onAdded;o.onAdded=function(o,n){c(o,n),e.onAdded(o,n)}}if(o&&o.onBeforeRemove){var r=o.onBeforeRemove;o.onBeforeRemove=function(o,n){r(o,n),e.onBeforeRemove(o,n)}}return o}return e},o}()));e._RF.pop()}}}));

System.register("chunks:///_virtual/UIButton.ts",["./rollupPluginModLoBabelHelpers.js","cc","./Oops.ts"],(function(t){var e,o,n,i,r,u,c,a,p,l,s,f;return{setters:[function(t){e=t.applyDecoratedDescriptor,o=t.inheritsLoose,n=t.initializerDefineProperty,i=t.assertThisInitialized,r=t.asyncToGenerator,u=t.regeneratorRuntime},function(t){c=t.cclegacy,a=t._decorator,p=t.AudioClip,l=t.game,s=t.Button},function(t){f=t.oops}],execute:function(){var h,d,y,m,v,_,g,E,b,T;c._RF.push({},"86cefAWukVE77lEwgfFdYeD","UIButton",void 0);var w=a.ccclass,B=a.property,z=a.menu;t("default",(h=w("UIButton"),d=z("OopsFramework/Button/UIButton （通用按钮）"),y=B({tooltip:"每次触发间隔"}),m=B({tooltip:"是否只触发一次"}),v=B({tooltip:"触摸音效",type:p}),h(_=d((E=e((g=function(t){function e(){for(var e,o=arguments.length,r=new Array(o),u=0;u<o;u++)r[u]=arguments[u];return e=t.call.apply(t,[this].concat(r))||this,n(e,"interval",E,i(e)),n(e,"once",b,i(e)),n(e,"effect",T,i(e)),e._touchCount=0,e._touchEndTime=0,e}o(e,t);var c=e.prototype;return c._onTouchEnded=function(e){if(this.once){if(this._touchCount>0)return void(e.propagationStopped=!0);this._touchCount++}this._touchEndTime&&l.totalTime-this._touchEndTime<this.interval?e.propagationStopped=!0:(this._touchEndTime=l.totalTime,t.prototype._onTouchEnded.call(this,e),this.playEffect())},c.playEffect=function(){var t=r(u().mark((function t(){return u().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:this.effect&&f.audio.playEffect(this.effect);case 1:case"end":return t.stop()}}),t,this)})));return function(){return t.apply(this,arguments)}}(),e}(s)).prototype,"interval",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 500}}),b=e(g.prototype,"once",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),T=e(g.prototype,"effect",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),_=g))||_)||_));c._RF.pop()}}}));

System.register("chunks:///_virtual/Vec3Util.ts",["./rollupPluginModLoBabelHelpers.js","cc","./MathUtil.ts"],(function(n){var e,r,t,u,a;return{setters:[function(n){e=n.createClass},function(n){r=n.cclegacy,t=n.Vec3,u=n.Mat4},function(n){a=n.MathUtil}],execute:function(){r._RF.push({},"38947ih8d5EQ7HG4buug+SR","Vec3Util",void 0);n("Vec3Util",function(){function n(){}return n.progress=function(n,e,r){var u=new t;return u.x=a.progress(n.x,e.x,r),u.y=a.progress(n.y,e.y,r),u.z=a.progress(n.z,e.z,r),u},n.add=function(n,e){var r=new t;return t.add(r,n,e),r},n.sub=function(n,e){var r=new t;return t.subtract(r,n,e),r},n.mul=function(n,e){var r=new t;return t.multiplyScalar(r,n,e),r},n.div=function(n,e){var r=new t;return r.x=n.x/e,r.y=n.y/e,r.z=n.z/e,r},n.equals=function(n,e){return n.x==e.x&&n.y==e.y&&n.z==e.z},n.magnitude=function(n){return n.length()},n.normalize=function(n){return new t(n.x,n.y,n.z).normalize()},n.direction=function(n,e){var r=new t;return t.subtract(r,e,n),r.normalize()},n.distance=function(n,e){return t.distance(n,e)},n.lerp=function(n,e,r){return this.bezierOne(r,n,e)},n.slerp=function(n,e,r){if(r<=0)return n;if(r>=1)return e;var u=this.rotateTo(n,e,t.angle(n,e)/Math.PI*180*r),a=e.length()*r+n.length()*(1-r);return u.normalize().multiplyScalar(a)},n.rotateTo=function(n,e,r){if(0==t.angle(n,e))return e;var a=new t;t.cross(a,n,e),a.normalize();var i=r*Math.PI/180,l=new u;return l.rotate(i,a),new t(n.x*l.m00+n.y*l.m04+n.z*l.m08,n.x*l.m01+n.y*l.m05+n.z*l.m09,n.x*l.m02+n.y*l.m06+n.z*l.m10)},n.bezierOne=function(n,e,r){n>1?n=1:n<0&&(n=0);var t=e.clone(),u=r.clone();return t.multiplyScalar(1-n).add(u.multiplyScalar(n))},n.bezierTwo=function(n,e,r,u){n>1?n=1:n<0&&(n=0);var a=1-n,i=n*n,l=e.clone(),o=new t,c=r.clone(),y=u.clone();return o.add(l.multiplyScalar(a*a)),o.add(c.multiplyScalar(2*a*n)),o.add(y.multiplyScalar(i)),o},n.bezierThree=function(n,e,r,t,u){n>1?n=1:n<0&&(n=0);var a=1-n,i=a*a,l=i*a,o=n*n,c=o*n,y=e.clone(),f=e.clone(),s=r.clone(),d=t.clone(),m=u.clone();return f.add(y.multiplyScalar(l)),f.add(s.multiplyScalar(3*i*n)),f.add(d.multiplyScalar(3*a*o)),f.add(m.multiplyScalar(c)),f},n.dot=function(n,e){var r=n,t=e;return r.x*t.x+r.y*t.y+r.z*t.z},n.cross=function(n,e){var r=new t(1,0,0),u=new t(0,1,0),a=new t(0,0,1),i=new t(n.x,n.y,n.z),l=new t(e.x,e.y,e.z),o=r.multiplyScalar(i.y*l.z-l.y*i.z),c=u.multiplyScalar(l.x*i.z-i.x*l.z),y=a.multiplyScalar(i.x*l.y-l.x*i.y);return o.add(c).add(y)},n.angle=function(n,e){var r=this.dot(n.clone().normalize(),e.clone().normalize());return Math.acos(r)/Math.PI*180*Math.sign(r)},n.dirAngle=function(e,r){var t=n.cross(e,r);return n.angle(e,r)*Math.sign(n.dot(t.normalize(),n.cross(r.normalize(),e.normalize())))},e(n,null,[{key:"x",get:function(){return new t(1,0,0)}},{key:"y",get:function(){return new t(0,1,0)}},{key:"z",get:function(){return new t(0,0,1)}},{key:"left",get:function(){return new t(-1,0,0)}},{key:"right",get:function(){return new t(1,0,0)}},{key:"up",get:function(){return new t(0,1,0)}},{key:"down",get:function(){return new t(0,-1,0)}},{key:"forward",get:function(){return new t(0,0,1)}},{key:"back",get:function(){return new t(0,0,-1)}},{key:"one",get:function(){return new t(1,1,1)}},{key:"zero",get:function(){return new t(0,0,0)}}]),n}());r._RF.pop()}}}));

System.register("chunks:///_virtual/ViewModel.ts",["cc","./JsonOb.ts"],(function(t){var e,n,i;return{setters:[function(t){e=t.cclegacy,n=t.director},function(t){i=t.JsonOb}],execute:function(){e._RF.push({},"54f75k4X+RP0qaXOzrfZysL","ViewModel",void 0);var o="VC:";function r(t,e,n,i){void 0===i&&(i="");for(var o=e.split("."),r=0;r<o.length;r++){var a=o[r];if(a in t==!1){console.error("["+a+"] not find in "+i+"."+e);break}r==o.length-1?t[a]=n:t=t[a]}}function a(t,e,n,i){void 0===i&&(i="");for(var o=e.split("."),r=0;r<o.length;r++){var a=o[r];if(a in t==!1)return console.error("["+a+"] not find in "+i+"."+e),n;t=t[a]}return null==t&&(t=n),t}var s=function(){function t(t,e){this.$data=void 0,this._tag=null,this.active=!0,this.emitToRootPath=!1,new i(t,this._callback.bind(this)),this.$data=t,this._tag=e}var e=t.prototype;return e._callback=function(t,e,i){if(1==this.active){var r=o+this._tag+"."+i.join(".");if(n.emit(r,t,e,[this._tag].concat(i)),this.emitToRootPath&&n.emit(o+this._tag,t,e,i),i.length>=2)for(var a=0;a<i.length-1;a++)i[a]}},e.setValue=function(t,e){r(this.$data,t,e,this._tag)},e.getValue=function(t,e){return a(this.$data,t,e,this._tag)},t}();t("VM",new(function(){function t(){this._mvs=new Map,this.setObjValue=r,this.getObjValue=a}var e=t.prototype;return e.add=function(t,e,n){void 0===e&&(e="global"),void 0===n&&(n=!1);var i=new s(t,e),o=this._mvs.get(e);e.includes(".")?console.error("cant write . in tag:",e):o?console.error("already set VM tag:"+e):(i.emitToRootPath=n,this._mvs.set(e,i))},e.remove=function(t){this._mvs.delete(t)},e.get=function(t){return this._mvs.get(t)},e.addValue=function(t,e){var n=(t=t.trim()).split(".");n.length<2&&console.error("Cant find path:"+t);var i=this.get(n[0]);if(i){var o=n.slice(1).join(".");i.setValue(o,i.getValue(o)+e)}else console.error("Cant Set VM:"+n[0])},e.getValue=function(t,e){var n=(t=t.trim()).split(".");if(n.length<2)console.error("Get Value Cant find path:"+t);else{var i=this.get(n[0]);if(i)return i.getValue(n.slice(1).join("."),e);console.error("Cant Get VM:"+n[0])}},e.setValue=function(t,e){var n=(t=t.trim()).split(".");if(n.length<2)console.error("Set Value Cant find path:"+t);else{var i=this.get(n[0]);i?i.setValue(n.slice(1).join("."),e):console.error("Cant Set VM:"+n[0])}},e.bindPath=function(t,e,i,r){""!=(t=t.trim())?"*"!==t.split(".")[0]?n.on(o+t,e,i,r):console.error(t,"路径不合法,可能错误覆盖了 VMParent 的onLoad 方法, 或者父节点并未挂载 VMParent 相关的组件脚本"):console.error(i.node.name,"节点绑定的路径为空")},e.unbindPath=function(t,e,i){"*"!==(t=t.trim()).split(".")[0]?n.off(o+t,e,i):console.error(t,"路径不合法,可能错误覆盖了 VMParent 的onLoad 方法, 或者父节点并未挂载 VMParent 相关的组件脚本")},e.inactive=function(){this._mvs.forEach((function(t){t.active=!1}))},e.active=function(){this._mvs.forEach((function(t){t.active=!1}))},t}()));e._RF.pop()}}}));

System.register("chunks:///_virtual/ViewUtil.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ResLoader.ts"],(function(e){var n,t,o,r,a,i,c,u,l,f,s;return{setters:[function(e){n=e.asyncToGenerator,t=e.regeneratorRuntime},function(e){o=e.cclegacy,r=e.UITransform,a=e.v3,i=e.Size,c=e.Prefab,u=e.instantiate,l=e.Animation,f=e.AnimationClip},function(e){s=e.resLoader}],execute:function(){o._RF.push({},"f607cCjAEZHVKVZ/FyRs5bA","ViewUtil",void 0);e("ViewUtil",function(){function e(){}return e.nodeTreeInfoLite=function(n,t){for(var o=t||new Map,r=n.children,a=0;a<r.length;a++){var i=r[a];i.name.indexOf(" ")<0&&o.set(i.name,i),e.nodeTreeInfoLite(i,o)}return o},e.findNodes=function(n,t,o){for(var r=o||[],a=t.children,i=0;i<a.length;i++){var c=a[i].name;n.test(c)&&r.push(a[i]),e.findNodes(n,a[i],r)}return r},e.calculateASpaceToBSpacePos=function(e,n,t){var o=e.getComponent(r).convertToWorldSpaceAR(t);return n.getComponent(r).convertToNodeSpaceAR(o)},e.calculateScreenPosToSpacePos=function(e,n){var t=e.getUILocation(),o=a(t.x,t.y);return n.getComponent(r).convertToNodeSpaceAR(o)},e.uniformScale=function(e,n,t,o){var r,a=t/e,c=o/n;return r=a<c?a:c,new i(Math.floor(e*r),Math.floor(n*r))},e.createPrefabNode=function(e,n){void 0===n&&(n=s.defaultBundleName);var t=s.get(e,c,n);return t?u(t):null},e.createPrefabNodeAsync=function(e,o){return void 0===o&&(o=s.defaultBundleName),new Promise(n(t().mark((function n(r,a){var i;return t().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,s.loadAsync(o,e,c);case 2:(i=n.sent)?r(u(i)):(console.error("名为【"+e+"】的资源加载失败"),r(null));case 4:case"end":return n.stop()}}),n)}))))},e.addNodeAnimation=function(e,n,t,o){if(void 0===t&&(t=!0),void 0===o&&(o=!1),n&&n.isValid){var r=n.getComponent(l);null==r&&(r=n.addComponent(l));var a=s.get(e,f);if(a&&!(t&&r.getState(a.name)&&r.getState(a.name).isPlaying)){if(o)return r.defaultClip=a,void r.play();r.once(l.EventType.FINISHED,(function(){r.defaultClip&&r.play()}),this),r.getState(a.name)||r.createState(a,a.name),r.play(a.name)}}},e}());o._RF.pop()}}}));

System.register("chunks:///_virtual/VMBase.ts",["./rollupPluginModLoBabelHelpers.js","cc","./ViewModel.ts","./VMEnv.ts"],(function(t){var n,e,i,a,h,o,r;return{setters:[function(t){n=t.inheritsLoose},function(t){e=t.cclegacy,i=t._decorator,a=t.log,h=t.Component},function(t){o=t.VM},function(t){r=t.VMEnv}],execute:function(){var s;e._RF.push({},"2f6f36IvUdPO7xynnVTPgzb","VMBase",void 0);var c=i.ccclass,l=i.help;t("VMBase",c(s=l("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037631&doc_id=2873565")(s=function(t){function e(){for(var n,e=arguments.length,i=new Array(e),a=0;a<e;a++)i[a]=arguments[a];return(n=t.call.apply(t,[this].concat(i))||this).VM=o,n.watchPath="",n.templateMode=!1,n.watchPathArr=[],n.templateValueArr=[],n}n(e,t);var i=e.prototype;return i.onLoad=function(){var t=this;if(!r.editor){for(var n=this.watchPath.split("."),e=1;e<n.length;e++){if("*"==n[e]){var i=this.node.parent.children.findIndex((function(n){return n===t.node}));i<=0&&(i=0),n[e]=i.toString();break}}this.watchPath=n.join(".");var h=this.watchPathArr;if(h.length>=1)for(var o=0;o<h.length;o++){for(var s=h[o].split("."),c=1;c<s.length;c++){if("*"==s[c]){var l=this.node.parent.children.findIndex((function(n){return n===t.node}));l<=0&&(l=0),s[c]=l.toString();break}}this.watchPathArr[o]=s.join(".")}""==this.watchPath&&""==this.watchPathArr.join("")&&a("可能未设置路径的节点:",this.node.parent.name+"."+this.node.name)}},i.onEnable=function(){r.editor||(this.templateMode?this.setMultPathEvent(!0):""!=this.watchPath&&this.VM.bindPath(this.watchPath,this.onValueChanged,this),this.onValueInit())},i.onDisable=function(){r.editor||(this.templateMode?this.setMultPathEvent(!1):""!=this.watchPath&&this.VM.unbindPath(this.watchPath,this.onValueChanged,this))},i.setMultPathEvent=function(t){if(void 0===t&&(t=!0),!r.editor)for(var n=this.watchPathArr,e=0;e<n.length;e++){var i=n[e];t?this.VM.bindPath(i,this.onValueChanged,this):this.VM.unbindPath(i,this.onValueChanged,this)}},i.onValueInit=function(){},i.onValueChanged=function(t,n,e){},e}(h))||s)||s);e._RF.pop()}}}));

System.register("chunks:///_virtual/VMCompsEdit.ts",["./rollupPluginModLoBabelHelpers.js","cc","./VMEnv.ts"],(function(e){var t,r,o,i,n,a,c,l,s,p,u,h,f;return{setters:[function(e){t=e.applyDecoratedDescriptor,r=e.inheritsLoose,o=e.initializerDefineProperty,i=e.assertThisInitialized,n=e.createClass},function(e){a=e.cclegacy,c=e._decorator,l=e.CCString,s=e.Enum,p=e.Node,u=e.log,h=e.Component},function(e){f=e.VMEnv}],execute:function(){var _,g,d,E,y,T,P,b,C,N,O,v,m,A,w,M,L,k,H,D,R,j,z;a._RF.push({},"2359eFXKF5HFYS74K7Y17/U","VMCompsEdit",void 0);var S=c.ccclass,V=c.property,F=c.executeInEditMode,B=c.menu,W=c.help,x=function(e){return e[e.SEARCH_COMPONENT=0]="SEARCH_COMPONENT",e[e.ENABLE_COMPONENT=1]="ENABLE_COMPONENT",e[e.REPLACE_WATCH_PATH=2]="REPLACE_WATCH_PATH",e[e.DELETE_COMPONENT=3]="DELETE_COMPONENT",e}(x||{});e("default",(_=B("OopsFramework/Mvvm/Edit-Comps （快速组件操作）"),g=W("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037632&doc_id=2873565"),d=V({type:[l]}),E=V({type:s(x)}),y=V({tooltip:"勾选后,会自动查找 find list 中填写的组件",visible:function(){return this.actionType===x.SEARCH_COMPONENT}}),T=V({tooltip:"勾选后,会批量激活 find list 中填写的组件",visible:function(){return this.actionType===x.ENABLE_COMPONENT}}),P=V({tooltip:"勾选后,会批量关闭 find list 中填写的组件",visible:function(){return this.actionType===x.ENABLE_COMPONENT}}),b=V({tooltip:"允许删除节点的组件,确定需要移除请勾选,防止误操作",visible:function(){return this.actionType===x.DELETE_COMPONENT}}),C=V({tooltip:"勾选后,会批量删除 find list 中填写的组件",displayName:"[ X DELETE X ]",visible:function(){return this.allowDelete&&this.actionType===x.DELETE_COMPONENT}}),N=V({tooltip:"勾选后,会批量替换掉指定的路径",visible:function(){return this.actionType===x.REPLACE_WATCH_PATH}}),O=V({tooltip:"匹配的路径,匹配规则: 搜索开头为 game的路径",visible:function(){return this.actionType===x.REPLACE_WATCH_PATH}}),v=V({tooltip:"替换的路径,将匹配到的路径替换",visible:function(){return this.actionType===x.REPLACE_WATCH_PATH}}),m=V({tooltip:"是否搜集绑定VM组件的节点?",visible:function(){return this.actionType===x.SEARCH_COMPONENT}}),A=V({type:[p],readonly:!0,tooltip:"收集到绑定了VM组件相关的节点，可以自己跳转过去",visible:function(){return this.canCollectNodes&&this.actionType===x.SEARCH_COMPONENT}}),S(w=F(w=_(w=g((L=t((M=function(e){function t(){for(var t,r=arguments.length,n=new Array(r),a=0;a<r;a++)n[a]=arguments[a];return t=e.call.apply(e,[this].concat(n))||this,o(t,"findList",L,i(t)),o(t,"actionType",k,i(t)),o(t,"allowDelete",H,i(t)),o(t,"targetPath",D,i(t)),o(t,"replacePath",R,i(t)),o(t,"canCollectNodes",j,i(t)),o(t,"collectNodes",z,i(t)),t}r(t,e);var a=t.prototype;return a.onLoad=function(){if(!f.editor){var e=this.getNodePath(this.node);console.error("you forget delete MVEditFinder,[path]",e)}},a.setComponents=function(e){var t=this,r=this.findList,o="搜索到当前节点下面的组件";switch(e){case 0:o="搜索到当前节点下面的组件";break;case 1:o="激活以下节点的组件";break;case 2:o="关闭以下节点的组件";break;case 3:o="删除以下节点的组件";break;case 4:o="替换以下节点的路径"}u(o),u("______________________"),r.forEach((function(r){t.searchComponent(r,e)})),u("______________________")},a.searchComponent=function(e,t){var r=this;void 0===t&&(t=0),this.collectNodes=[];var o=this.node.getComponentsInChildren(e);null==o||o.length<1||(u("["+e+"]:"),o.forEach((function(e){var o="";switch(t<=3&&(o=!0===e.templateMode?e.watchPathArr?":[Path:"+e.watchPathArr.join("|")+"]":"":e.watchPath?":[Path:"+e.watchPath+"]":""),u(r.getNodePath(e.node)+o),t){case 0:r.canCollectNodes&&-1===r.collectNodes.indexOf(e.node)&&r.collectNodes.push(e.node);break;case 1:e.enabled=!0;break;case 2:e.enabled=!1;break;case 3:e.node.removeComponent(e);break;case 4:var i=r.targetPath,n=r.replacePath;if(!0===e.templateMode)for(var a=0;a<e.watchPathArr.length;a++){var c=e.watchPathArr[a];e.watchPathArr[a]=r.replaceNodePath(c,i,n)}else e.watchPath=r.replaceNodePath(e.watchPath,i,n)}})))},a.replaceNodePath=function(e,t,r){for(var o=e.split("."),i=t.split("."),n=r.split("."),a=!0,c=0;c<i.length;c++)if(o[c]!==i[c]){a=!1;break}if(!0===a){for(var l=0;l<n.length;l++)o[l]=n[l];u(" 路径更新:",e,">>>",o.join("."))}return o.join(".")},a.getNodePath=function(e){for(var t=e,r=[];t;){var o=t.getParent();if(!o)break;r.push(t.name),t=o}return r.reverse().join("/")},n(t,[{key:"findTrigger",get:function(){return!1},set:function(e){this.setComponents(0)}},{key:"enableTrigger",get:function(){return!1},set:function(e){this.setComponents(1)}},{key:"disableTrigger",get:function(){return!1},set:function(e){this.setComponents(2)}},{key:"deleteTrigger",get:function(){return!1},set:function(e){this.setComponents(3)}},{key:"replaceTrigger",get:function(){return!1},set:function(e){this.setComponents(4)}}]),t}(h)).prototype,"findList",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return["VMBase","VMParent"]}}),k=t(M.prototype,"actionType",[E],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return x.SEARCH_COMPONENT}}),t(M.prototype,"findTrigger",[y],Object.getOwnPropertyDescriptor(M.prototype,"findTrigger"),M.prototype),t(M.prototype,"enableTrigger",[T],Object.getOwnPropertyDescriptor(M.prototype,"enableTrigger"),M.prototype),t(M.prototype,"disableTrigger",[P],Object.getOwnPropertyDescriptor(M.prototype,"disableTrigger"),M.prototype),H=t(M.prototype,"allowDelete",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),t(M.prototype,"deleteTrigger",[C],Object.getOwnPropertyDescriptor(M.prototype,"deleteTrigger"),M.prototype),t(M.prototype,"replaceTrigger",[N],Object.getOwnPropertyDescriptor(M.prototype,"replaceTrigger"),M.prototype),D=t(M.prototype,"targetPath",[O],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return"game"}}),R=t(M.prototype,"replacePath",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return"*"}}),j=t(M.prototype,"canCollectNodes",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),z=t(M.prototype,"collectNodes",[A],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),w=M))||w)||w)||w)||w));a._RF.pop()}}}));

System.register("chunks:///_virtual/VMCustom.ts",["./rollupPluginModLoBabelHelpers.js","cc","./VMBase.ts","./VMEnv.ts"],(function(t){var e,o,n,i,r,c,a,s,l;return{setters:[function(t){e=t.applyDecoratedDescriptor,o=t.inheritsLoose,n=t.initializerDefineProperty,i=t.assertThisInitialized},function(t){r=t.cclegacy,c=t._decorator,a=t.Toggle},function(t){s=t.VMBase},function(t){l=t.VMEnv}],execute:function(){var h,p,u,m,f,d,g,C,V,_,y,b,w,v;r._RF.push({},"ce662fwsSVPLKpmHx+KocFu","VMCustom",void 0);var P=c.ccclass,M=c.property,k=c.executeInEditMode,x=c.menu,B=c.help,R=[["BhvFrameIndex","index",!1],["BhvGroupToggle","index",!1],["BhvRollNumber","targetValue",!1],["cc.Label","string",!1],["cc.RichText","string",!1],["cc.EditBox","string",!0],["cc.Slider","progress",!0],["cc.ProgressBar","progress",!1],["cc.Toggle","isChecked",!0]];t("VMCustom",(h=x("OopsFramework/Mvvm/VM-Custom （自定义）"),p=B("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037634&doc_id=2873565"),u=M({tooltip:"激活controller,以开启双向绑定，否则只能接收消息"}),m=M({tooltip:"监视对象路径"}),f=M({tooltip:"绑定组件的名字"}),d=M({tooltip:"组件上需要监听的属性"}),g=M({tooltip:"刷新间隔频率(只影响脏检查的频率)",step:.01,range:[0,1],visible:function(){return!0===this.controller}}),P(C=k(C=h(C=p((_=e((V=function(t){function e(){for(var e,o=arguments.length,r=new Array(o),c=0;c<o;c++)r[c]=arguments[c];return e=t.call.apply(t,[this].concat(r))||this,n(e,"controller",_,i(e)),n(e,"watchPath",y,i(e)),n(e,"componentName",b,i(e)),n(e,"componentProperty",w,i(e)),n(e,"refreshRate",v,i(e)),e._timer=0,e._watchComponent=null,e._canWatchComponent=!1,e._oldValue=null,e}o(e,t);var r=e.prototype;return r.onLoad=function(){t.prototype.onLoad.call(this),this.checkEditorComponent(),l.editor||(this._watchComponent=this.node.getComponent(this.componentName),this.checkComponentState())},r.onRestore=function(){this.checkEditorComponent()},r.start=function(){this.onValueInit()},r.checkEditorComponent=function(){if(!l.editor)for(var t=R,e=0;e<t.length;e++){var o=t[e];if(this.node.getComponent(o[0])){""==this.componentName&&(this.componentName=o[0]),""==this.componentProperty&&(this.componentProperty=o[1]),null!==o[2]&&(this.controller=o[2]);break}}},r.checkComponentState=function(){this._canWatchComponent=!1,this._watchComponent?this.componentProperty?this.componentProperty in this._watchComponent!=!1?this._canWatchComponent=!0:console.error("需要监听的组件的属性不存在"):console.error("未设置需要监听的组件 的属性"):console.error("未设置需要监听的组件")},r.getComponentValue=function(){return this._watchComponent[this.componentProperty]},r.setComponentValue=function(t){"cc.Toggle"==this.componentName?this.node.getComponent(a).isChecked=t:this._watchComponent[this.componentProperty]=t},r.onValueInit=function(){l.editor||this.setComponentValue(this.VM.getValue(this.watchPath))},r.onValueController=function(t,e){this.VM.setValue(this.watchPath,t)},r.onValueChanged=function(t,e,o){this.setComponentValue(t)},r.update=function(t){if(!l.editor&&this.controller&&this._canWatchComponent&&!1!==this._watchComponent.enabled&&(this._timer+=t,!(this._timer<this.refreshRate))){this._timer=0;var e=this._oldValue,o=this.getComponentValue();this._oldValue!==o&&(this._oldValue=this.getComponentValue(),this.onValueController(o,e))}},e}(s)).prototype,"controller",[u],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),y=e(V.prototype,"watchPath",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),b=e(V.prototype,"componentName",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),w=e(V.prototype,"componentProperty",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),v=e(V.prototype,"refreshRate",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return.1}}),C=V))||C)||C)||C)||C));r._RF.pop()}}}));

System.register("chunks:///_virtual/VMEnv.ts",["./rollupPluginModLoBabelHelpers.js","cc","./env"],(function(n){var e,t,u;return{setters:[function(n){e=n.createClass},function(n){t=n.cclegacy},function(n){u=n.EDITOR}],execute:function(){t._RF.push({},"fdf72Q91PdCXpPQ+62s1ufi","VMEnv",void 0);n("VMEnv",function(){function n(){}return e(n,null,[{key:"editor",get:function(){return u}}]),n}());t._RF.pop()}}}));

System.register("chunks:///_virtual/VMEvent.ts",["./rollupPluginModLoBabelHelpers.js","cc","./VMBase.ts"],(function(e){var t,r,n,i,a,o,c,u,l,s;return{setters:[function(e){t=e.applyDecoratedDescriptor,r=e.inheritsLoose,n=e.initializerDefineProperty,i=e.assertThisInitialized},function(e){a=e.cclegacy,o=e._decorator,c=e.CCString,u=e.Enum,l=e.EventHandler},function(e){s=e.VMBase}],execute:function(){var p,f,h,b,g,d,m,v,y,w,M,k,E,z,V,P,A,C;a._RF.push({},"a9ce7kf8XZJeLPlT2iWn2zD","VMEvent",void 0);var _=o.ccclass,D=o.property,O=o.executeInEditMode,B=o.menu,F=o.help,I=function(e){return e[e.none=0]="none",e[e["=="]=1]="==",e[e["!="]=2]="!=",e[e[">"]=3]=">",e[e[">="]=4]=">=",e[e["<"]=5]="<",e[e["<="]=6]="<=",e}(I||{});e("default",(p=B("OopsFramework/Mvvm/VM-EventCall （调用函数）"),f=F("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037640&doc_id=2873565"),h=D({tooltip:"使用模板模式，可以使用多路径监听"}),b=D({tooltip:"监听获取值的路径",visible:function(){return!1===this.templateMode}}),g=D({tooltip:"触发一次后会自动关闭该事件"}),d=D({tooltip:"监听获取值的多条路径,这些值的改变都会通过这个函数回调,请使用 pathArr 区分获取的值 ",type:[c],visible:function(){return!0===this.templateMode}}),m=D({tooltip:"过滤模式，会根据条件过滤掉时间的触发",type:u(I)}),v=D({visible:function(){return this.filterMode!==I.none}}),y=D([l]),_(w=O(w=p(w=f((k=t((M=function(e){function t(){for(var t,r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return t=e.call.apply(e,[this].concat(a))||this,n(t,"templateMode",k,i(t)),n(t,"watchPath",E,i(t)),n(t,"triggerOnce",z,i(t)),n(t,"watchPathArr",V,i(t)),n(t,"filterMode",P,i(t)),n(t,"compareValue",A,i(t)),n(t,"changeEvents",C,i(t)),t}r(t,e);var a=t.prototype;return a.onValueInit=function(){},a.onValueChanged=function(e,t,r){this.conditionCheck(e,this.compareValue)&&(Array.isArray(this.changeEvents)&&this.changeEvents.forEach((function(n){n.emit([e,t,r])})),!0===this.triggerOnce&&(this.enabled=!1))},a.conditionCheck=function(e,t){var r=I;switch(this.filterMode){case r.none:return!0;case r["=="]:if(e==t)return!0;break;case r["!="]:if(e!=t)return!0;break;case r["<"]:if(e<t)return!0;break;case r[">"]:if(e>t)return!0;break;case r[">="]:if(e>=t)return!0;break;case r["<"]:if(e<t)return!0;break;case r["<="]:if(e<=t)return!0}return!1},t}(s)).prototype,"templateMode",[h],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),E=t(M.prototype,"watchPath",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),z=t(M.prototype,"triggerOnce",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),V=t(M.prototype,"watchPathArr",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),P=t(M.prototype,"filterMode",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return I.none}}),A=t(M.prototype,"compareValue",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),C=t(M.prototype,"changeEvents",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),w=M))||w)||w)||w)||w));a._RF.pop()}}}));

System.register("chunks:///_virtual/VMLabel.ts",["./rollupPluginModLoBabelHelpers.js","cc","./StringFormat.ts","./VMBase.ts","./VMEnv.ts"],(function(t){var e,r,i,a,n,l,o,s,c,u,h;return{setters:[function(t){e=t.applyDecoratedDescriptor,r=t.inheritsLoose,i=t.initializerDefineProperty,a=t.assertThisInitialized},function(t){n=t.cclegacy,l=t._decorator,o=t.CCString,s=t.error},function(t){c=t.StringFormatFunction},function(t){u=t.VMBase},function(t){h=t.VMEnv}],execute:function(){var p,f,m,g,b,d,V,v,y,L,M,T;n._RF.push({},"545c05XsG9GDJispEGWKvYv","VMLabel",void 0);var w=l.ccclass,x=l.property,A=l.menu,F=l.executeInEditMode,P=l.help,k="cc.Label";t("default",(p=A("OopsFramework/Mvvm/VM-Label （标签）"),f=P("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037641&doc_id=2873565"),m=x({tooltip:"是否启用模板代码,只能在运行时之前设置,\n将会动态解析模板语法 {{0}},并且自动设置监听的路径"}),g=x({visible:function(){return!1===this.templateMode}}),b=x({readonly:!0}),d=x({type:[o],visible:function(){return!0===this.templateMode}}),w(V=F(V=p(V=f((y=e((v=function(t){function e(){for(var e,r=arguments.length,n=new Array(r),l=0;l<r;l++)n[l]=arguments[l];return e=t.call.apply(t,[this].concat(n))||this,i(e,"templateMode",y,a(e)),i(e,"watchPath",L,a(e)),i(e,"labelType",M,a(e)),i(e,"watchPathArr",T,a(e)),e.templateValueArr=[],e.templateFormatArr=[],e.originText=null,e}r(e,t);var n=e.prototype;return n.onRestore=function(){this.checkLabel()},n.onLoad=function(){t.prototype.onLoad.call(this),this.checkLabel(),h.editor||this.templateMode&&(this.originText=this.getLabelValue(),this.parseTemplate())},n.start=function(){h.editor||this.onValueInit()},n.parseTemplate=function(){var t=/\{\{(.+?)\}\}/,e=this.originText.match(/\{\{(.+?)\}\}/g);if(null!=e)for(var r=0;r<e.length;r++){var i=e[r].match(t)[1].split(":")[1]||"";this.templateFormatArr[r]=i}},n.getReplaceText=function(){if(!this.originText)return"";var t=/\{\{(.+?)\}\}/,e=this.originText.match(/\{\{(.+?)\}\}/g);if(null==e)return"";for(var r=this.originText,i=0;i<e.length;i++){var a,n=e[i],l=n.match(t),o=parseInt(l[1]||"0")||0,s=this.templateFormatArr[i];a=this.templateValueArr[o],r=r.replace(n,this.getValueFromFormat(a,s))}return r},n.getValueFromFormat=function(t,e){return c.deal(t,e)},n.onValueInit=function(){if(!1===this.templateMode)this.setLabelValue(this.VM.getValue(this.watchPath));else{for(var t=this.watchPathArr.length,e=0;e<t;e++)this.templateValueArr[e]=this.VM.getValue(this.watchPathArr[e],"?");this.setLabelValue(this.getReplaceText())}},n.onValueChanged=function(t,e,r){if(!1===this.templateMode)this.setLabelValue(t);else{var i=r.join("."),a=this.watchPathArr.findIndex((function(t){return t===i}));a>=0&&(this.templateValueArr[a]=t,this.setLabelValue(this.getReplaceText()))}},n.setLabelValue=function(t){this.getComponent(this.labelType).string=t+""},n.getLabelValue=function(){return this.getComponent(this.labelType).string},n.checkLabel=function(){for(var t=["cc.Label","cc.RichText","cc.EditBox"],e=0;e<t.length;e++){var r=t[e];if(this.node.getComponent(r))return this.labelType=r,!0}return s("没有挂载任何label组件"),!1},e}(u)).prototype,"templateMode",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),L=e(v.prototype,"watchPath",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),M=e(v.prototype,"labelType",[b],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return k}}),T=e(v.prototype,"watchPathArr",[d],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),V=v))||V)||V)||V)||V));n._RF.pop()}}}));

System.register("chunks:///_virtual/VMModify.ts",["./rollupPluginModLoBabelHelpers.js","cc","./VMBase.ts"],(function(t){var a,e,i,n,r,u,l,o;return{setters:[function(t){a=t.applyDecoratedDescriptor,e=t.inheritsLoose,i=t.initializerDefineProperty,n=t.assertThisInitialized},function(t){r=t.cclegacy,u=t._decorator,l=t.Enum},function(t){o=t.VMBase}],execute:function(){var s,h,c,v,p,M,f,d,m,V,b,w,g,y;r._RF.push({},"7d2a4voaOJJGJZRWFPG6Bk7","VMModify",void 0);var P=u.ccclass,I=u.property,A=u.menu,C=u.help,N=function(t){return t[t.MIN=0]="MIN",t[t.MAX=1]="MAX",t[t.MIN_MAX=2]="MIN_MAX",t}(N||{});t("default",(s=A("OopsFramework/Mvvm/VM-Modify （修改数据）"),h=C("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037642&doc_id=2873565"),c=I({tooltip:"监视对象路径"}),v=I({tooltip:"是不启用取值范围限制"}),p=I({type:l(N),visible:function(){return!0===this.valueClamp}}),M=I({visible:function(){return!0===this.valueClamp&&this.valueClampMode!==N.MAX}}),f=I({visible:function(){return!0===this.valueClamp&&this.valueClampMode!==N.MIN}}),P(d=s(d=h((V=a((m=function(t){function a(){for(var a,e=arguments.length,r=new Array(e),u=0;u<e;u++)r[u]=arguments[u];return a=t.call.apply(t,[this].concat(r))||this,i(a,"watchPath",V,n(a)),i(a,"valueClamp",b,n(a)),i(a,"valueClampMode",w,n(a)),i(a,"valueMin",g,n(a)),i(a,"valueMax",y,n(a)),a}e(a,t);var r=a.prototype;return r.clampValue=function(t){var a=this.valueMin,e=this.valueMax;if(0==this.valueClamp)return t;switch(this.valueClampMode){case N.MIN_MAX:t>e&&(t=e),t<a&&(t=a);break;case N.MIN:t<a&&(t=a);break;case N.MAX:t>e&&(t=e)}return t},r.vAddInt=function(t,a){this.vAdd(t,a,!0)},r.vSubInt=function(t,a){this.vSub(t,a,!0)},r.vMulInt=function(t,a){this.vMul(t,a,!0)},r.vDivInt=function(t,a){this.vDiv(t,a,!0)},r.vAdd=function(t,a,e){void 0===e&&(e=!1);var i=parseFloat(a),n=this.VM.getValue(this.watchPath,0)+i;e&&(n=Math.round(n)),this.VM.setValue(this.watchPath,this.clampValue(n))},r.vSub=function(t,a,e){void 0===e&&(e=!1);var i=parseFloat(a),n=this.VM.getValue(this.watchPath,0)-i;e&&(n=Math.round(n)),this.VM.setValue(this.watchPath,this.clampValue(n))},r.vMul=function(t,a,e){void 0===e&&(e=!1);var i=parseFloat(a),n=this.VM.getValue(this.watchPath,0)*i;e&&(n=Math.round(n)),this.VM.setValue(this.watchPath,this.clampValue(n))},r.vDiv=function(t,a,e){void 0===e&&(e=!1);var i=parseFloat(a),n=this.VM.getValue(this.watchPath,0)/i;e&&(n=Math.round(n)),this.VM.setValue(this.watchPath,this.clampValue(n))},r.vString=function(t,a){var e=a;this.VM.setValue(this.watchPath,e)},r.vNumberInt=function(t,a){this.vNumber(t,a,!0)},r.vNumber=function(t,a,e){void 0===e&&(e=!1);var i=parseFloat(a);e&&(i=Math.round(i)),this.VM.setValue(this.watchPath,this.clampValue(i))},a}(o)).prototype,"watchPath",[c],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),b=a(m.prototype,"valueClamp",[v],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),w=a(m.prototype,"valueClampMode",[p],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return N.MIN_MAX}}),g=a(m.prototype,"valueMin",[M],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),y=a(m.prototype,"valueMax",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 1}}),d=m))||d)||d)||d));r._RF.pop()}}}));

System.register("chunks:///_virtual/VMParent.ts",["./rollupPluginModLoBabelHelpers.js","cc","./GameComponent.ts","./ViewModel.ts"],(function(t){var n,e,o,i,a;return{setters:[function(t){n=t.inheritsLoose},function(t){e=t.cclegacy,o=t._decorator},function(t){i=t.GameComponent},function(t){a=t.VM}],execute:function(){var r;e._RF.push({},"15ccciO+ZRH476sPKD/LvB7","VMParent",void 0);var s=o.ccclass,c=o.help,h=o.executionOrder;t("default",s(r=h(-1)(r=c("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037729&doc_id=2873565")(r=function(t){function e(){for(var n,e=arguments.length,o=new Array(e),i=0;i<e;i++)o[i]=arguments[i];return(n=t.call.apply(t,[this].concat(o))||this).tag="_temp",n.data={},n.VM=a,n}n(e,t);var o=e.prototype;return o.onLoad=function(){if(null!=this.data){this.tag="_temp<"+this.node.uuid.replace(".","")+">",a.add(this.data,this.tag);for(var t=this.getVMComponents(),n=0;n<t.length;n++){var e=t[n];this.replaceVMPath(e,this.tag)}this.onBind()}},o.onBind=function(){},o.onUnBind=function(){},o.replaceVMPath=function(t,n){var e=t.watchPath;if(1==t.templateMode){var o=t.watchPathArr;if(o)for(var i=0;i<o.length;i++){var a=o[i];o[i]=a.replace("*",n)}}else"*"===e.split(".")[0]&&(t.watchPath=e.replace("*",n))},o.getVMComponents=function(){var t=this,n=this.node.getComponentsInChildren("VMBase"),e=this.node.getComponentsInChildren("VMParent").filter((function(n){return n.uuid!==t.uuid})),o=[];return e.forEach((function(t){o=o.concat(t.getComponentsInChildren("VMBase"))})),n=n.filter((function(t){return o.indexOf(t)<0}))},o.onDestroy=function(){this.onUnBind(),a.remove(this.tag),this.data=null,t.prototype.onDestroy.call(this)},e}(i))||r)||r)||r);e._RF.pop()}}}));

System.register("chunks:///_virtual/VMProgress.ts",["./rollupPluginModLoBabelHelpers.js","cc","./StringFormat.ts","./VMCustom.ts","./VMEnv.ts"],(function(t){var e,r,a,i,n,o,s,l,u,h;return{setters:[function(t){e=t.applyDecoratedDescriptor,r=t.inheritsLoose,a=t.initializerDefineProperty,i=t.assertThisInitialized},function(t){n=t.cclegacy,o=t._decorator,s=t.CCString},function(t){l=t.StringFormatFunction},function(t){u=t.VMCustom},function(t){h=t.VMEnv}],execute:function(){var c,p,m,f,V,g,d,v,w,P;n._RF.push({},"2a50eqI7JZNV5Sh0y/Qd9C6","VMProgress",void 0);var y=o.ccclass,A=o.property,M=o.menu,b=o.help;t("default",(c=M("OopsFramework/Mvvm/VM-Progress （进度条）"),p=b("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037843&doc_id=2873565"),m=A({visible:!1,override:!0}),f=A({type:[s],tooltip:"第一个值是min 值，第二个值 是 max 值，会计算出两者的比例"}),V=A({visible:function(){return"string"===this.componentProperty},tooltip:"字符串格式化，和 VMLabel 的字段一样，需要填入对应的格式化字符串"}),y(g=c(g=p((v=e((d=function(t){function e(){for(var e,r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return e=t.call.apply(t,[this].concat(n))||this,a(e,"watchPath",v,i(e)),a(e,"watchPathArr",w,i(e)),e.templateMode=!0,a(e,"stringFormat",P,i(e)),e}r(e,t);var n=e.prototype;return n.onLoad=function(){(this.watchPathArr.length<2||"[min]"==this.watchPathArr[0]||"[max]"==this.watchPathArr[1])&&console.error("VMProgress must have two values!"),t.prototype.onLoad.call(this)},n.start=function(){h.editor||this.onValueInit()},n.onValueInit=function(){for(var t=this.watchPathArr.length,e=0;e<t;e++)this.templateValueArr[e]=this.VM.getValue(this.watchPathArr[e]);var r=this.templateValueArr[0]/this.templateValueArr[1];this.setComponentValue(r)},n.setComponentValue=function(e){if(""!==this.stringFormat){var r=l.deal(e,this.stringFormat);t.prototype.setComponentValue.call(this,r)}else t.prototype.setComponentValue.call(this,e)},n.onValueController=function(t,e){var r=Math.round(t*this.templateValueArr[1]);Number.isNaN(r)&&(r=0),this.VM.setValue(this.watchPathArr[0],r)},n.onValueChanged=function(t,e,r){if(!1!==this.templateMode){var a=r.join("."),i=this.watchPathArr.findIndex((function(t){return t===a}));i>=0&&(this.templateValueArr[i]=t);var n=this.templateValueArr[0]/this.templateValueArr[1];n>1&&(n=1),(n<0||Number.isNaN(n))&&(n=0),this.setComponentValue(n)}},e}(u)).prototype,"watchPath",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),w=e(d.prototype,"watchPathArr",[f],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return["[min]","[max]"]}}),P=e(d.prototype,"stringFormat",[V],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),g=d))||g)||g)||g));n._RF.pop()}}}));

System.register("chunks:///_virtual/VMState.ts",["./rollupPluginModLoBabelHelpers.js","cc","./VMBase.ts","./ViewModel.ts"],(function(e){var t,i,n,o,a,r,l,u,c,s,p,h,f,N,C,d;return{setters:[function(e){t=e.applyDecoratedDescriptor,i=e.inheritsLoose,n=e.initializerDefineProperty,o=e.assertThisInitialized},function(e){a=e.cclegacy,r=e._decorator,l=e.Enum,u=e.CCInteger,c=e.Node,s=e.Button,p=e.Sprite,h=e.UIRenderer,f=e.color,N=e.UIOpacity},function(e){C=e.VMBase},function(e){d=e.VM}],execute:function(){var b,v,O,m,E,y,A,T,_,g,w,D,M,V,I,S,P,k,L,R,z,B,U,Y,F,X,G,j,x,H,q;a._RF.push({},"47052uw/Y5O1LXaLObj4ARx","VMState",void 0);var J=r.ccclass,K=r.property,Q=r.menu,W=r.help,Z=function(e){return e[e["=="]=0]="==",e[e["!="]=1]="!=",e[e[">"]=2]=">",e[e[">="]=3]=">=",e[e["<"]=4]="<",e[e["<="]=5]="<=",e[e.range=6]="range",e}(Z||{}),$=function(e){return e[e.NODE_ACTIVE=0]="NODE_ACTIVE",e[e.NODE_VISIBLE=1]="NODE_VISIBLE",e[e.NODE_OPACITY=2]="NODE_OPACITY",e[e.NODE_COLOR=3]="NODE_COLOR",e[e.COMPONENT_CUSTOM=4]="COMPONENT_CUSTOM",e[e.SPRITE_GRAYSCALE=5]="SPRITE_GRAYSCALE",e[e.BUTTON_INTERACTABLE=6]="BUTTON_INTERACTABLE",e}($||{}),ee=function(e){return e[e.NODE_INDEX=0]="NODE_INDEX",e[e.NODE_NAME=1]="NODE_NAME",e}(ee||{});e("default",(b=Q("OopsFramework/Mvvm/VM-State （状态控制）"),v=W("https://gitee.com/dgflash/oops-framework/wikis/pages?sort_id=12037846&doc_id=2873565"),O=K({tooltip:"遍历子节点,根据子节点的名字或名字转换为值，判断值满足条件 来激活"}),m=K({type:l(Z)}),E=K({type:l(ee),tooltip:"遍历子节点,根据子节点的名字转换为值，判断值满足条件 来激活",visible:function(){return!0===this.foreachChildMode}}),y=K({displayName:"Value: a",visible:function(){return!1===this.foreachChildMode}}),A=K({displayName:"Value: b",visible:function(){return!1===this.foreachChildMode&&this.condition===Z.range}}),T=K({type:l($),tooltip:"一旦满足条件就对节点执行操作"}),_=K({visible:function(){return this.valueAction===$.NODE_OPACITY},range:[0,255],type:u,displayName:"Action Opacity"}),g=K({visible:function(){return this.valueAction===$.NODE_COLOR},displayName:"Action Color"}),w=K({visible:function(){return this.valueAction===$.COMPONENT_CUSTOM},displayName:"Component Name"}),D=K({visible:function(){return this.valueAction===$.COMPONENT_CUSTOM},displayName:"Component Property"}),M=K({visible:function(){return this.valueAction===$.COMPONENT_CUSTOM},displayName:"Default Value"}),V=K({visible:function(){return this.valueAction===$.COMPONENT_CUSTOM},displayName:"Action Value"}),I=K({type:[c],tooltip:"需要执行条件的节点，如果不填写则默认会执行本节点以及本节点的所有子节点 的状态"}),J(S=b(S=v((k=t((P=function(e){function t(){for(var t,i=arguments.length,a=new Array(i),r=0;r<i;r++)a[r]=arguments[r];return t=e.call.apply(e,[this].concat(a))||this,n(t,"watchPath",k,o(t)),n(t,"foreachChildMode",L,o(t)),n(t,"condition",R,o(t)),n(t,"foreachChildType",z,o(t)),n(t,"valueA",B,o(t)),n(t,"valueB",U,o(t)),n(t,"valueAction",Y,o(t)),n(t,"valueActionOpacity",F,o(t)),n(t,"valueActionColor",X,o(t)),n(t,"valueComponentName",G,o(t)),n(t,"valueComponentProperty",j,o(t)),n(t,"valueComponentDefaultValue",x,o(t)),n(t,"valueComponentActionValue",H,o(t)),n(t,"watchNodes",q,o(t)),t}i(t,e);var a=t.prototype;return a.onLoad=function(){e.prototype.onLoad.call(this),0==this.watchNodes.length&&(this.valueAction!==$.NODE_ACTIVE&&!1===this.foreachChildMode&&this.watchNodes.push(this.node),this.watchNodes=this.watchNodes.concat(this.node.children))},a.start=function(){this.enabled&&this.onValueInit()},a.onValueInit=function(){var e=d.getValue(this.watchPath);this.checkNodeFromValue(e)},a.onValueChanged=function(e,t,i){this.checkNodeFromValue(e)},a.checkNodeFromValue=function(e){var t=this;if(this.foreachChildMode)this.watchNodes.forEach((function(i,n){var o=t.foreachChildType===ee.NODE_INDEX?n:i.name,a=t.conditionCheck(e,o);t.setNodeState(i,a)}));else{var i=this.conditionCheck(e,this.valueA,this.valueB);this.setNodesStates(i)}},a.setNodesStates=function(e){var t=this,i=this.watchNodes,n=e;i.forEach((function(e){t.setNodeState(e,n)}))},a.setNodeState=function(e,t){var i=t;switch(this.valueAction){case $.NODE_ACTIVE:e.active=!!i;break;case $.NODE_VISIBLE:var n=e.getComponent(N);null==n&&(n=e.addComponent(N)),n&&(n.opacity=i?255:0);break;case $.NODE_OPACITY:var o=e.getComponent(N);null==o&&(o=e.addComponent(N)),o&&(o.opacity=i?this.valueActionOpacity:255);break;case $.NODE_COLOR:var a=e.getComponent(h);a&&(a.color=i?this.valueActionColor:f(255,255,255));break;case $.COMPONENT_CUSTOM:var r=e.getComponent(this.valueComponentName);if(null==r)return;this.valueComponentProperty in r&&(r[this.valueComponentProperty]=i?this.valueComponentActionValue:this.valueComponentDefaultValue);break;case $.SPRITE_GRAYSCALE:var l=e.getComponent(p);l&&(l.grayscale=i);break;case $.BUTTON_INTERACTABLE:var u=e.getComponent(s);u&&(u.interactable=i)}},a.conditionCheck=function(e,t,i){var n=Z;switch(this.condition){case n["=="]:if(e==t)return!0;break;case n["!="]:if(e!=t)return!0;break;case n["<"]:if(e<t)return!0;break;case n[">"]:if(e>t)return!0;break;case n[">="]:if(e>=t)return!0;break;case n["<"]:if(e<t)return!0;break;case n["<="]:if(e<=t)return!0;break;case n.range:if(e>=t&&e<=i)return!0}return!1},t}(C)).prototype,"watchPath",[K],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),L=t(P.prototype,"foreachChildMode",[O],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),R=t(P.prototype,"condition",[m],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return Z["=="]}}),z=t(P.prototype,"foreachChildType",[E],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return ee.NODE_INDEX}}),B=t(P.prototype,"valueA",[y],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),U=t(P.prototype,"valueB",[A],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),Y=t(P.prototype,"valueAction",[T],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return $.NODE_ACTIVE}}),F=t(P.prototype,"valueActionOpacity",[_],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return 0}}),X=t(P.prototype,"valueActionColor",[g],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return f(155,155,155)}}),G=t(P.prototype,"valueComponentName",[w],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),j=t(P.prototype,"valueComponentProperty",[D],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),x=t(P.prototype,"valueComponentDefaultValue",[M],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),H=t(P.prototype,"valueComponentActionValue",[V],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return""}}),q=t(P.prototype,"watchNodes",[I],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return[]}}),S=P))||S)||S)||S));a._RF.pop()}}}));

System.register("chunks:///_virtual/WebSock.ts",["cc","./Logger.ts"],(function(t){var e,n;return{setters:[function(t){e=t.cclegacy},function(t){n=t.Logger}],execute:function(){e._RF.push({},"70df2VbIU9B66Fr+op8FKJp","WebSock",void 0);t("WebSock",function(){function t(){this._ws=null,this.onConnected=null,this.onMessage=null,this.onError=null,this.onClosed=null}var e=t.prototype;return e.connect=function(t){var e=this;if(this._ws&&this._ws.readyState===WebSocket.CONNECTING)return n.logNet("websocket connecting, wait for a moment..."),!1;var s=null;if(t.url)s=t.url;else{var o=t.ip,r=t.port;s=t.protocol+"://"+o+":"+r}return this._ws=new WebSocket(s),this._ws.binaryType=t.binaryType?t.binaryType:"arraybuffer",this._ws.onmessage=function(t){(0,e.onMessage)(t.data)},this._ws.onopen=this.onConnected,this._ws.onerror=this.onError,this._ws.onclose=this.onClosed,!0},e.send=function(t){return this._ws&&this._ws.readyState==WebSocket.OPEN?(this._ws.send(t),1):-1},e.close=function(t,e){this._ws&&this._ws.close(t,e)},t}());e._RF.pop()}}}));

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9nYW1lL2FjY291bnQvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9hc3NldHMvc2NyaXB0L2dhbWUvYWNjb3VudC9BY2NvdW50LnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9hc3NldHMvc2NyaXB0L2dhbWUvYWNjb3VudC9tb2RlbC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9hY2NvdW50L21vZGVsL0FjY291bnRNb2RlbENvbXAudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC8yZC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC8yZC9BbWJpbGlnaHQudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3IvQW5pbWF0b3JBbmltYXRpb24udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2NvcmUvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci9jb3JlL0FuaW1hdG9yQmFzZS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3IvY29yZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2NvcmUvQW5pbWF0b3JDb25kaXRpb24udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2NvcmUvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci9jb3JlL0FuaW1hdG9yQ29udHJvbGxlci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3IvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci9BbmltYXRvckN1c3RvbWl6YXRpb24udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3IvQW5pbWF0b3JEcmFnb25Cb25lcy50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3IvY29yZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2NvcmUvQW5pbWF0b3JQYXJhbXMudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3IvQW5pbWF0b3JTa2VsZXRhbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3IvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci9BbmltYXRvclNwaW5lLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL0FuaW1hdG9yU3BpbmVTZWNvbmRhcnkudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2NvcmUvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci9jb3JlL0FuaW1hdG9yU3RhdGUudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2NvcmUvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci9jb3JlL0FuaW1hdG9yU3RhdGVMb2dpYy50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3IvY29yZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yL2NvcmUvQW5pbWF0b3JUcmFuc2l0aW9uLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9leHRlbnNpb24vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9leHRlbnNpb24vQXJyYXlFeHQudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvQXJyYXlVdGlsLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9jb2xsZWN0aW9uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvY29sbGVjdGlvbi9Bc3luY1F1ZXVlLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9jb21tb24vYXVkaW8vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9jb21tb24vYXVkaW8vQXVkaW9FZmZlY3QudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9hdWRpby9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9hdWRpby9BdWRpb0VmZmVjdFBvb2wudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9hdWRpby9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9hdWRpby9BdWRpb01hbmFnZXIudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9hdWRpby9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9hdWRpby9BdWRpb011c2ljLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9iZWhhdmlvci10cmVlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYmVoYXZpb3ItdHJlZS9CZWhhdmlvclRyZWUudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL21vZGVsLXZpZXcvdWkvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L3VpL0JodkJ1dHRvbkdyb3VwLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L3VpL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy91aS9CaHZGcmFtZUluZGV4LnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L3VpL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy91aS9CaHZSb2xsTnVtYmVyLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L3VpL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy91aS9CaHZTd2l0Y2hQYWdlLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9iZWhhdmlvci10cmVlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYmVoYXZpb3ItdHJlZS9CcmFuY2hOb2RlLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9iZWhhdmlvci10cmVlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYmVoYXZpb3ItdHJlZS9CVHJlZU5vZGUudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9tb2R1bGUvY29uZmlnL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL21vZHVsZS9jb25maWcvQnVpbGRUaW1lQ29uc3RhbnRzLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9ndWkvYnV0dG9uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZ3VpL2J1dHRvbi9CdXR0b25FZmZlY3QudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9idXR0b24vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9ndWkvYnV0dG9uL0J1dHRvblNpbXBsZS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZ3VpL2J1dHRvbi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9idXR0b24vQnV0dG9uVG91Y2hMb25nLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL0NhbWVyYVV0aWwudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9tb2R1bGUvY29tbW9uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL21vZHVsZS9jb21tb24vQ0NDb21wLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbW9kdWxlL2NvbW1vbi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9tb2R1bGUvY29tbW9uL0NDVk1QYXJlbnRDb21wLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9jb2xsZWN0aW9uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvY29sbGVjdGlvbi9Db2xsZWN0aW9uLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9ndWkvcHJvbXB0L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL3Byb21wdC9Db21tb25Qcm9tcHQudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9tb2R1bGUvY29uZmlnL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL21vZHVsZS9jb25maWcvQ29uZmlnLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9hc3NldHMvc2NyaXB0L2d1aS9iYXNlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9ndWkvYmFzZS9kYXRhSW50ZXJmYWNlLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9leHRlbnNpb24vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9leHRlbnNpb24vRGF0ZUV4dC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYmVoYXZpb3ItdHJlZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2JlaGF2aW9yLXRyZWUvRGVjb3JhdG9yLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9ndWkvbGF5ZXIvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9ndWkvbGF5ZXIvRGVmaW5lcy50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL2xheWVyL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL2xheWVyL0RlbGVnYXRlQ29tcG9uZW50LnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9hc3NldHMvc2NyaXB0L2dhbWUvYWNjb3VudC92aWV3L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9nYW1lL2FjY291bnQvdmlldy9EZW1vVmlld0NvbXAudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvRGV2aWNlVXRpbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZXh0ZW5zaW9uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZXh0ZW5zaW9uL0RpcmVjdG9yRXh0LnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9lY3MvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9lY3MvRUNTLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9lY3MvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9lY3MvRUNTQ29tcC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL0VDU0VudGl0eS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL0VDU0dyb3VwLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9lY3MvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9lY3MvRUNTTWFzay50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL0VDU01hdGNoZXIudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2Vjcy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2Vjcy9FQ1NNb2RlbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL0VDU1N5c3RlbS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3ItZWZmZWN0L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3ItZWZmZWN0L0VmZmVjdDJERm9sbG93M0QudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC9FZmZlY3REZWxheVJlbGVhc2UudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC9FZmZlY3RFdmVudC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3ItZWZmZWN0L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3ItZWZmZWN0L0VmZmVjdEZpbmlzaGVkUmVsZWFzZS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3ItZWZmZWN0L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3ItZWZmZWN0L0VmZmVjdFNpbmdsZUNhc2UudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvRW5jcnlwdFV0aWwudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9ldmVudC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9ldmVudC9FdmVudERpc3BhdGNoZXIudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9ldmVudC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9ldmVudC9FdmVudE1lc3NhZ2UudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC8yZC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC8yZC9GbGFzaFNwaW5lLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci1lZmZlY3QvMmQvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci1lZmZlY3QvMmQvRmxhc2hTcHJpdGUudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2NhbWVyYS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2NhbWVyYS9GcmVlRmxpZ2h0Q2FtZXJhLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbW9kdWxlL2NvbW1vbi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9tb2R1bGUvY29tbW9uL0dhbWVDb2xsaXNpb24udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9tb2R1bGUvY29tbW9uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL21vZHVsZS9jb21tb24vR2FtZUNvbXBvbmVudC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL21vZHVsZS9jb25maWcvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbW9kdWxlL2NvbmZpZy9HYW1lQ29uZmlnLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9hc3NldHMvc2NyaXB0L2dhbWUvY29tbW9uL2NvbmZpZy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9jb21tb24vY29uZmlnL0dhbWVFdmVudC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ2FtZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2dhbWUvR2FtZU1hbmFnZXIudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9tb2R1bGUvY29uZmlnL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL21vZHVsZS9jb25maWcvR2FtZVF1ZXJ5Q29uZmlnLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9hc3NldHMvc2NyaXB0L2dhbWUvY29tbW9uL2NvbmZpZy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9jb21tb24vY29uZmlnL0dhbWVTdG9yYWdlQ29uZmlnLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9hc3NldHMvc2NyaXB0L2dhbWUvY29tbW9uL2NvbmZpZy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9jb21tb24vY29uZmlnL0dhbWVVSUNvbmZpZy50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbmV0d29yay9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL25ldHdvcmsvSHR0cFJlcXVlc3QudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2JlaGF2aW9yLXRyZWUvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9iZWhhdmlvci10cmVlL0lDb250cm9sLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL0ltYWdlVXRpbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYmVoYXZpb3ItdHJlZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2JlaGF2aW9yLXRyZWUvaW5kZXgudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9pbml0aWFsaXplL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9nYW1lL2luaXRpYWxpemUvSW5pdGlhbGl6ZS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9nYW1lL2luaXRpYWxpemUvYmxsL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9nYW1lL2luaXRpYWxpemUvYmxsL0luaXRSZXMudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL21vZGVsLXZpZXcvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L0pzb25PYi50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9Kc29uVXRpbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZ3VpL2xhYmVsL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZ3VpL2xhYmVsL0xhYmVsQ2hhbmdlLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9ndWkvbGFiZWwvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9ndWkvbGFiZWwvTGFiZWxOdW1iZXIudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9sYWJlbC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9sYWJlbC9MYWJlbFRpbWUudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9sYW5ndWFnZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9sYW5ndWFnZS9MYW5ndWFnZS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZ3VpL2xhbmd1YWdlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZ3VpL2xhbmd1YWdlL0xhbmd1YWdlRGF0YS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZ3VpL2xhbmd1YWdlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZ3VpL2xhbmd1YWdlL0xhbmd1YWdlTGFiZWwudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9sYW5ndWFnZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9sYW5ndWFnZS9MYW5ndWFnZVBhY2sudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9sYW5ndWFnZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9sYW5ndWFnZS9MYW5ndWFnZVNwaW5lLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9ndWkvbGFuZ3VhZ2UvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9ndWkvbGFuZ3VhZ2UvTGFuZ3VhZ2VTcHJpdGUudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2d1aS9sYXllci9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2d1aS9sYXllci9MYXllckRpYWxvZy50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL2xheWVyL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL2xheWVyL0xheWVyTWFuYWdlci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL2xheWVyL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL2xheWVyL0xheWVyTm90aWZ5LnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9ndWkvbGF5ZXIvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9ndWkvbGF5ZXIvTGF5ZXJQb3B1cC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL2xheWVyL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL2xheWVyL0xheWVyVUkudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvTGF5ZXJVdGlsLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9jb2xsZWN0aW9uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvY29sbGVjdGlvbi9MaXN0LnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9ndWkvcHJvbXB0L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL3Byb21wdC9Mb2FkaW5nSW5kaWNhdG9yLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9hc3NldHMvc2NyaXB0L2dhbWUvaW5pdGlhbGl6ZS92aWV3L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9nYW1lL2luaXRpYWxpemUvdmlldy9Mb2FkaW5nVmlld0NvbXAudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9sb2cvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9jb21tb24vbG9nL0xvZ2dlci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvTWFpbi50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9NYXRoVXRpbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvY29tbW9uL2V2ZW50L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvY29tbW9uL2V2ZW50L01lc3NhZ2VNYW5hZ2VyLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbW9kdWxlL2NvbW1vbi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9tb2R1bGUvY29tbW9uL01vZHVsZVV0aWwudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLW1vdmUvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci1tb3ZlL01vdmVSaWdpZEJvZHkudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLW1vdmUvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9hbmltYXRvci1tb3ZlL01vdmVUby50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYW5pbWF0b3ItbW92ZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLW1vdmUvTW92ZVRyYW5zbGF0ZS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbmV0d29yay9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL25ldHdvcmsvTmV0SW50ZXJmYWNlLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9uZXR3b3JrL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbmV0d29yay9OZXRNYW5hZ2VyLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9uZXR3b3JrL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbmV0d29yay9OZXROb2RlLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9uZXR3b3JrL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbmV0d29yay9OZXRQcm90b2NvbFBha28udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2V4dGVuc2lvbi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2V4dGVuc2lvbi9Ob2RlRHJhZ0V4dC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZXh0ZW5zaW9uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZXh0ZW5zaW9uL05vZGVFeHQudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2d1aS9wcm9tcHQvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9ndWkvcHJvbXB0L05vdGlmeS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9PYmplY3RVdGlsLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL09vcHMudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2NhbWVyYS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2NhbWVyYS9PcmJpdENhbWVyYS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9QaHlzaWNzVXRpbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9QbGF0Zm9ybVV0aWwudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ3VpL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9ndWkvcGxheWVyQW5pLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9iZWhhdmlvci10cmVlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYmVoYXZpb3ItdHJlZS9Qcmlvcml0eS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvY29tbW9uL3JhbmRvbS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9yYW5kb20vUmFuZG9tTWFuYWdlci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9SZWdleFV0aWwudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9sb2FkZXIvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9jb21tb24vbG9hZGVyL1Jlc0xvYWRlci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9Sb290LnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL1JvdGF0ZVV0aWwudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL3JlbmRlci10ZXh0dXJlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvcmVuZGVyLXRleHR1cmUvUnRUb01vZGVsLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9yZW5kZXItdGV4dHVyZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL3JlbmRlci10ZXh0dXJlL1J0VG9TcHJpdGUudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9yYW5kb20vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9jb21tb24vcmFuZG9tL1NlZWRSYW5kb20udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ3VpL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9ndWkvc2VsZWN0RnVuLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9iZWhhdmlvci10cmVlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYmVoYXZpb3ItdHJlZS9TZWxlY3Rvci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvYmVoYXZpb3ItdHJlZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2JlaGF2aW9yLXRyZWUvU2VxdWVuY2UudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ3VpL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9ndWkvc2hpcE1haW4udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9jb21tb24vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9hc3NldHMvc2NyaXB0L2dhbWUvY29tbW9uL1NpbmdsZXRvbk1vZHVsZUNvbXAudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC8yZC9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2FuaW1hdG9yLWVmZmVjdC8yZC9TcGluZUZpbmlzaGVkUmVsZWFzZS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvY29tbW9uL3N0b3JhZ2UvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9jb21tb24vc3RvcmFnZS9TdG9yYWdlTWFuYWdlci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvY29tbW9uL3N0b3JhZ2UvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9jb21tb24vc3RvcmFnZS9TdG9yYWdlU2VjdXJpdHlDcnlwdG8udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi9zdG9yYWdlL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvY29tbW9uL3N0b3JhZ2UvU3RvcmFnZVNlY3VyaXR5U2ltcGxlLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy9TdHJpbmdGb3JtYXQudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvU3RyaW5nVXRpbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9nYW1lL2NvbW1vbi90YWJsZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9jb21tb24vdGFibGUvVGFibGVMYW5ndWFnZS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vYXNzZXRzL3NjcmlwdC9nYW1lL2NvbW1vbi90YWJsZS9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9jb21tb24vdGFibGUvVGFibGVQcm9tcHRXaW5kb3cudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2JlaGF2aW9yLXRyZWUvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9iZWhhdmlvci10cmVlL1Rhc2sudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi90aW1lci9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2NvbW1vbi90aW1lci9UaW1lci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvY29tbW9uL3RpbWVyL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvY29tbW9uL3RpbWVyL1RpbWVyTWFuYWdlci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9UaW1lVXRpbHMudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9jb21tb24vdGlwcy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2Fzc2V0cy9zY3JpcHQvZ2FtZS9jb21tb24vdGlwcy9UaXBzTWFuYWdlci50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZ3VpL2J1dHRvbi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2d1aS9idXR0b24vVUlCdXR0b24udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvVmVjM1V0aWwudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL21vZGVsLXZpZXcvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L1ZpZXdNb2RlbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvdXRpbHMvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9WaWV3VXRpbC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL21vZGVsLXZpZXcvVk1CYXNlLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy9WTUNvbXBzRWRpdC50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL21vZGVsLXZpZXcvVk1DdXN0b20udHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL21vZGVsLXZpZXcvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L1ZNRW52LnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy9WTUV2ZW50LnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy9WTUxhYmVsLnRzIiwiLi4vZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy9WTU1vZGlmeS50cyIsIi4uL2ZpbGU6L0Q6L215R2FtZS9jb2Nvc190ZXh0X2RlbW8vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvbW9kZWwtdmlldy9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL21vZGVsLXZpZXcvVk1QYXJlbnQudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL21vZGVsLXZpZXcvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L1ZNUHJvZ3Jlc3MudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL21vZGVsLXZpZXcvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9tb2RlbC12aWV3L1ZNU3RhdGUudHMiLCIuLi9maWxlOi9EOi9teUdhbWUvY29jb3NfdGV4dF9kZW1vL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL25ldHdvcmsvZmlsZTovRDovbXlHYW1lL2NvY29zX3RleHRfZGVtby9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9uZXR3b3JrL1dlYlNvY2sudHMiXSwibmFtZXMiOlsiZWNzIiwicmVnaXN0ZXIiLCJfZGVjIiwiX2NsYXNzIiwiX2VjcyRFbnRpdHkiLCJBY2NvdW50IiwiX3RoaXMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsIkFjY291bnRNb2RlbCIsIl9pbmhlcml0c0xvb3NlIiwicHJvdG90eXBlIiwiaW5pdCIsInRoaXMiLCJhZGRDb21wb25lbnRzIiwiQWNjb3VudE1vZGVsQ29tcCIsIkVudGl0eSIsIl9SRiIsInBvcCIsIl9lY3MkQ29tcCIsIkFjY291bnROYW1lIiwicmVzZXQiLCJDb21wIiwiY2NjbGFzcyIsIl9kZWNvcmF0b3IiLCJwcm9wZXJ0eSIsIl9kZWMyIiwiQ0NJbnRlZ2VyIiwiX2Rlc2NyaXB0b3IiLCJfYXBwbHlEZWNvcmF0ZWREZXNjcmlwdG9yIiwiX2NsYXNzMiIsIl9Db21wb25lbnQiLCJBbWJpbGlnaHQiLCJfaW5pdGlhbGl6ZXJEZWZpbmVQcm9wZXJ0eSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfc3RhcnQiLCJfbWF0ZXJpYWwiLCJfcHJvdG8iLCJ1cGRhdGUiLCJkdCIsIm5vZGUiLCJnZXRDb21wb25lbnQiLCJTcHJpdGUiLCJnZXRNYXRlcmlhbCIsImFjdGl2ZSIsIl9zZXRTaGFkZXJUaW1lIiwic3RhcnQiLCJtYXgiLCJzZXRQcm9wZXJ0eSIsIl9jcmVhdGVDbGFzcyIsImtleSIsImdldCIsIl9tYXgiLCJzZXQiLCJ2YWx1ZSIsIkNvbXBvbmVudCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImluaXRpYWxpemVyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwicmVxdWlyZUNvbXBvbmVudCIsImRpc2FsbG93TXVsdGlwbGUiLCJtZW51IiwiaGVscCIsIkFuaW1hdGlvbiIsIl9kZWMzIiwiX0FuaW1hdG9yQmFzZSIsIkFuaW1hdG9yQW5pbWF0aW9uIiwiX2FuaW1hdGlvbiIsIl9hbmltU3RhdGUiLCJfd3JhcE1vZGVNYXAiLCJNYXAiLCJQbGF5T25TdGFydCIsIl9oYXNJbml0Iiwib24iLCJFdmVudFR5cGUiLCJGSU5JU0hFRCIsIm9uQW5pbUZpbmlzaGVkIiwiTEFTVEZSQU1FIiwiQXNzZXRSYXdVcmwiLCJpbml0SnNvbiIsImpzb24iLCJvbkluaXQiLCJpbml0QXJncyIsInBsYXlBbmltYXRpb24iLCJhbmltTmFtZSIsImxvb3AiLCJwbGF5IiwiZ2V0U3RhdGUiLCJoYXMiLCJ3cmFwTW9kZSIsInNjYWxlVGltZSIsInNjYWxlIiwic3BlZWQiLCJBbmltYXRvckJhc2UiLCJleGVjdXRpb25PcmRlciIsInR5cGUiLCJKc29uQXNzZXQiLCJ0b29sdGlwIiwiX2RlYzQiLCJfZGVjNSIsIl9kZXNjcmlwdG9yMiIsIl9kZXNjcmlwdG9yMyIsIl9hYyIsIl9zdGF0ZUxvZ2ljTWFwIiwiX29uU3RhdGVDaGFuZ2VDYWxsIiwiX2FuaW1hdGlvblBsYXllciIsIm9uRnJhbWVFdmVudCIsInBhcmFtIiwiX3RoaXMkX2FuaW1hdGlvblBsYXllIiwib25GcmFtZUV2ZW50Q2FsbGJhY2siLCJuYW1lIiwic3RhdGVzIiwiX3RoaXMyIiwiX2xlbjIiLCJfa2V5MiIsImZvckVhY2giLCJhcmciLCJ1cGRhdGVBbmltYXRvciIsIl90aGlzJF9hYyRwYXJhbXMkZ2V0TiIsInBsYXlTcGVlZCIsImN1clN0YXRlIiwibXVsdGkiLCJwYXJhbXMiLCJnZXROdW1iZXIiLCJjdXJMb2dpYyIsIm9uVXBkYXRlIiwiQXV0b1VwZGF0ZSIsIm1hbnVhbFVwZGF0ZSIsIkFuaW1hdG9yQ29udHJvbGxlciIsIl90aGlzJF9hbmltYXRpb25QbGF5ZTIiLCJvbkFuaW1hdGlvbkNvbXBsZXRlIiwib25GaW5pc2hlZENhbGxiYWNrIiwib25TdGF0ZUNoYW5nZSIsImZyb21TdGF0ZSIsInRvU3RhdGUiLCJtb3Rpb24iLCJmcm9tU3RhdGVOYW1lIiwiZnJvbUxvZ2ljIiwib25FeGl0IiwidG9Mb2dpYyIsIm9uRW50cnkiLCJzZXRCb29sIiwiZ2V0Qm9vbCIsInNldE51bWJlciIsInNldFRyaWdnZXIiLCJyZXNldFRyaWdnZXIiLCJhdXRvVHJpZ2dlciIsInN0YXRlTmFtZSIsIlBhcmFtVHlwZSIsIkxvZ2ljVHlwZSIsIkFuaW1hdG9yQ29uZGl0aW9uIiwiZGF0YSIsImFjIiwiX3BhcmFtIiwiX3ZhbHVlIiwiX2xvZ2ljIiwiRVFVQUwiLCJsb2dpYyIsImdldFBhcmFtTmFtZSIsImdldFBhcmFtVHlwZSIsImNoZWNrIiwiQk9PTEVBTiIsIk5VTUJFUiIsIkFVVE9fVFJJR0dFUiIsImdldEF1dG9UcmlnZ2VyIiwiVFJJR0dFUiIsImdldFRyaWdnZXIiLCJlcnJvciIsIk5PVEVRVUFMIiwiR1JFQVRFUiIsIkxFU1MiLCJHUkVBVEVSX0VRVUFMIiwiTEVTU19FUVVBTCIsInBsYXllciIsIl9qc29uRGF0YSIsIl9hbmltYXRvciIsIl9wYXJhbXMiLCJfc3RhdGVzIiwiX2FueVN0YXRlIiwiX2N1clN0YXRlIiwiX2NoYW5nZUNvdW50IiwiYW5pbUNvbXBsZXRlU3RhdGUiLCJhbmltQ29tcGxldGUiLCJBbmltYXRvclBhcmFtcyIsInBhcmFtZXRlcnMiLCJkZWZhdWx0U3RhdGUiLCJBbmltYXRvclN0YXRlIiwiYW55U3RhdGUiLCJpIiwic3RhdGUiLCJjaGFuZ2VTdGF0ZSIsInVwZGF0ZVN0YXRlIiwiY2hlY2tBbmRUcmFucyIsInJlc2V0QWxsQXV0b1RyaWdnZXIiLCJvbGRTdGF0ZSIsIm92ZXJyaWRlIiwidmlzaWJsZSIsIkFuaW1hdG9yQ3VzdG9taXphdGlvbiIsImRyYWdvbkJvbmVzIiwiQXJtYXR1cmVEaXNwbGF5IiwiQW5pbWF0b3JEcmFnb25Cb25lcyIsIl9kcmFnb25Cb25lcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aW1lU2NhbGUiLCJkYXRhQXJyIiwiX3BhcmFtTWFwIiwicmVzZXRBdXRvVHJpZ2dlciIsIlNrZWxldGFsQW5pbWF0aW9uIiwiQ0NGbG9hdCIsIl9BbmltYXRvckFuaW1hdGlvbiIsIkFuaW1hdG9yU2tlbGV0YWwiLCJjcm9zc19kdXJhdGlvbiIsImN1cnJlbnRfdGltZSIsIm9uTG9hZCIsImR1cmF0aW9uIiwiZ2FtZSIsInRvdGFsVGltZSIsImNyb3NzRmFkZSIsInNwIiwiU2tlbGV0b24iLCJBbmltYXRvclNwaW5lIiwiX3NwaW5lIiwiX2NvbXBsZXRlTGlzdGVuZXJNYXAiLCJfc2Vjb25kYXJ5TGlzdGVuZXJNYXAiLCJzZXRFdmVudExpc3RlbmVyIiwib25TcGluZUV2ZW50IiwiYmluZCIsInNldENvbXBsZXRlTGlzdGVuZXIiLCJvblNwaW5lQ29tcGxldGUiLCJnZXRCb25lIiwiZmluZEJvbmUiLCJ0cmFja0VudHJ5IiwiZXZlbnQiLCJhbmltYXRpb25OYW1lIiwiYW5pbWF0aW9uIiwiZW50cnkiLCJ0cmFja0luZGV4IiwidGFyZ2V0IiwiY2IiLCJUcmFja0luZGV4Iiwic2V0QW5pbWF0aW9uIiwiY2xlYXJUcmFjayIsImFkZFNlY29uZGFyeUxpc3RlbmVyIiwiYWRkQ29tcGxldGVMaXN0ZW5lciIsInJlbW92ZUNvbXBsZXRlTGlzdGVuZXIiLCJjbGVhckNvbXBsZXRlTGlzdGVuZXIiLCJjbGVhciIsIkFuaW1hdG9yU3BpbmVTZWNvbmRhcnkiLCJfbWFpbiIsIl9uYW1lIiwiX21vdGlvbiIsIl9sb29wIiwiX3NwZWVkIiwiX211bHRpIiwiX3RyYW5zaXRpb25zIiwibXVsdGlwbGllciIsInRyYW5zaXRpb25zIiwidHJhbnNpdGlvbiIsIkFuaW1hdG9yVHJhbnNpdGlvbiIsImlzVmFsaWQiLCJwdXNoIiwiZG9UcmFucyIsIkFuaW1hdG9yU3RhdGVMb2dpYyIsIl90b1N0YXRlTmFtZSIsIl9oYXNFeGl0VGltZSIsIl9jb25kaXRpb25zIiwiaGFzRXhpdFRpbWUiLCJjb25kaXRpb25zIiwiY29uZGl0aW9uIiwiX19jY19leHRlbmRlZCIsImRlZmluZVByb3BlcnRpZXMiLCJyZW1vdmUiLCJmaWx0ZXIiLCJzcGxpY2UiLCJyZW1vdmVPbmUiLCJyYW5kb20iLCJNYXRoIiwiZmxvb3IiLCJmYXN0UmVtb3ZlQXQiLCJpbmRleCIsInJlcyIsImZhc3RSZW1vdmUiLCJfeCIsInRvU3RyaW5nIiwiaW5kZXhPZiIsImZpcnN0IiwibGFzdCIsIm1hcHBlciIsInRlbXAiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyIiwiYSIsImIiLCJtaW4iLCJkaXN0aW5jdCIsInYiLCJhcnIiLCJmaWx0ZXJJbmRleCIsIm91dHB1dCIsImNvdW50IiwicmVzdWx0Iiwic3VtIiwiYXZlcmFnZSIsIm9yZGVyQnkiLCJtYXBwZXJzIiwiX2kiLCJzbGljZSIsInNvcnQiLCJ2YSIsInZiIiwib3JkZXJCeURlc2MiLCJiaW5hcnlTZWFyY2giLCJfdmFsdWUyIiwiX3gyIiwiX3gzIiwia2V5TWFwcGVyIiwibG93IiwiaGlnaCIsIm1pZCIsIm1pZFZhbHVlIiwiYmluYXJ5SW5zZXJ0IiwiaXRlbSIsInVuaXF1ZSIsInVuZGVmaW5lZCIsIk5hTiIsIml0ZW1WYWx1ZSIsImJpbmFyeURpc3RpbmN0IiwiZmluZExhc3QiLCJwcmVkaWNhdGUiLCJmaW5kTGFzdEluZGV4IiwiZ3JvdXBCeSIsImdyb3VwZXIiLCJncm91cCIsIm5leHQiLCJncm91cEtleSIsImtleXMiLCJtYXAiLCJBcnJheVV0aWwiLCJub1JlcGVhdGVkIiwicmVwZWF0IiwiaiIsImNvcHkyREFycmF5IiwiYXJyYXkiLCJuZXdBcnJheSIsImZpc2hlcllhdGVzU2h1ZmZsZSIsImNvbmZvdW5kIiwiZmxhdHRlbmluZyIsInNvbWUiLCJpc0FycmF5IiwicmVtb3ZlSXRlbSIsImNvbWJpbmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJnZXRSYW5kb21WYWx1ZUluQXJyYXkiLCJBc3luY1F1ZXVlIiwiX3J1bm5pbmdBc3luY1Rhc2siLCJfcXVldWVzIiwiX2lzUHJvY2Vzc2luZ1Rhc2tVVUlEIiwiX2VuYWJsZSIsImNvbXBsZXRlIiwiY2FsbGJhY2siLCJ1dWlkIiwiXyR1dWlkX2NvdW50IiwiY2FsbGJhY2tzIiwicHVzaE11bHRpIiwiX3RoaXMkX3J1bm5pbmdBc3luY1RhIiwid2FybiIsInN0ZXAiLCJpc1Byb2Nlc3NpbmciLCJhY3Rpb25EYXRhIiwic2hpZnQiLCJ0YXNrVVVJRCIsIm5leHRBcmdzIiwiZm51bSIsIm5leHRBcmdzQXJyIiwibmV4dEZ1bmMiLCJrbnVtIiwieWllbGRUaW1lIiwidGltZSIsIl90Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImRlcyIsImxvZyIsImV4Y3V0ZVRpbWVzIiwidmFsIiwic2l6ZSIsIl9BdWRpb1NvdXJjZSIsIkF1ZGlvRWZmZWN0Iiwib25Db21wbGV0ZSIsIkF1ZGlvU291cmNlIiwiRU5ERUQiLCJvbkF1ZGlvRW5kZWQiLCJBdWRpb0VmZmVjdFBvb2wiLCJfc3dpdGNoIiwiX3ZvbHVtZSIsInBvb2wiLCJOb2RlUG9vbCIsImVmZmVjdHMiLCJfYWVJZCIsImdldEFlSWQiLCJsb2FkIiwiX2xvYWQiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZTIiLCJ1cmwiLCJidW5kbGVOYW1lIiwib25QbGF5Q29tcGxldGUiLCJ3cmFwIiwiX2NvbnRleHQyIiwicmVzTG9hZGVyIiwiZGVmYXVsdEJ1bmRsZU5hbWUiLCJhYnJ1cHQiLCJQcm9taXNlIiwiX2NhbGxlZSIsInJlc29sdmUiLCJyZWplY3QiLCJjbGlwIiwiYWVpZCIsImFlIiwiX2NvbnRleHQiLCJBdWRpb0NsaXAiLCJsb2FkQXN5bmMiLCJzZW50IiwiTm9kZSIsInBhcmVudCIsIm9vcHMiLCJhdWRpbyIsImFkZENvbXBvbmVudCIsInB1dCIsInZvbHVtZSIsInN0b3AiLCJyZWxlYXNlIiwiZGVzdHJveSIsInBhdXNlIiwiTE9DQUxfU1RPUkVfS0VZIiwiQXVkaW9NYW5hZ2VyIiwibXVzaWMiLCJlZmZlY3QiLCJsb2NhbF9kYXRhIiwic2V0TXVzaWNDb21wbGV0ZSIsInBsYXlNdXNpYyIsInRoZW4iLCJwbGF5TXVzaWNMb29wIiwic3RvcE11c2ljIiwicGxheWluZyIsInBsYXlFZmZlY3QiLCJwdXRFZmZlY3QiLCJyZXN1bWVBbGwiLCJwcm9ncmVzcyIsInBhdXNlQWxsIiwic3RvcEFsbCIsInNhdmUiLCJ2b2x1bWVfbXVzaWMiLCJ2b2x1bWVfZWZmZWN0Iiwic3dpdGNoX211c2ljIiwic3dpdGNoX2VmZmVjdCIsInN0b3JhZ2UiLCJBdWRpb011c2ljIiwiZ2V0SnNvbiIsInNldFN0YXRlIiwiX3VudXNlZCIsInNldFN0YXRlRGVmYXVsdCIsIl9wcm9ncmVzcyIsIl9pc0xvYWRpbmciLCJfbmV4dEJ1bmRsZU5hbWUiLCJfbmV4dFVybCIsImRlY1JlZiIsImN1cnJlbnRUaW1lIiwiY291bnRVbm5hbWVkIiwiQmVoYXZpb3JUcmVlIiwiYmxhY2tib2FyZCIsInRpdGxlIiwiX3Jvb3QiLCJfY3VycmVudCIsIl9zdGFydGVkIiwiX2JsYWNrYm9hcmQiLCJjb25zdHJ1Y3RvciIsInNldE9iamVjdCIsInJ1biIsImNvbnNvbGUiLCJnZXROb2RlIiwic2V0Q29udHJvbCIsInJ1bm5pbmciLCJzdWNjZXNzIiwiZW5kIiwiZmFpbCIsIl9yZWdpc3RlcmVkTm9kZXMiLCJCVHJlZU5vZGUiLCJFcnJvciIsIlBBUkFNX1RZUEUiLCJFbnVtIiwiQnV0dG9uIiwiVHJhbnNpdGlvbiIsIkNPTE9SIiwiX2RlYzYiLCJfZGVjNyIsIlNwcml0ZUZyYW1lIiwiU1BSSVRFIiwiX2RlYzgiLCJfZGVjOSIsIl9kZWMxMCIsIl9kZWMxMSIsIlNDQUxFIiwiX2RlYzEyIiwiX2RlYzEzIiwiX2RlYzE0IiwiRXZlbnRIYW5kbGVyIiwiX2RlYzE1IiwicmVhZG9ubHkiLCJCaHZCdXR0b25Hcm91cCIsIl9kZXNjcmlwdG9yNCIsIl9kZXNjcmlwdG9yNSIsIl9kZXNjcmlwdG9yNiIsIl9kZXNjcmlwdG9yNyIsIl9kZXNjcmlwdG9yOCIsIl9kZXNjcmlwdG9yOSIsIl9kZXNjcmlwdG9yMTAiLCJfZGVzY3JpcHRvcjExIiwiX2Rlc2NyaXB0b3IxMiIsIl9kZXNjcmlwdG9yMTMiLCJfZGVzY3JpcHRvcjE0IiwiY2hpbGRyZW4iLCJub2RlSW5kZXgiLCJjb21wIiwidG91Y2hFdmVudHMiLCJoZCIsImNvbXBvbmVudCIsIkV2ZW50SGFuZGxlcl9jb21wb25lbnQiLCJoYW5kbGVyIiwicGFyYW1UeXBlIiwiQ0hJTERSRU5fSU5ERVgiLCJjdXN0b21FdmVudERhdGEiLCJjbGlja0V2ZW50cyIsIk5PTkUiLCJjb2xvciIsImV4ZWN1dGVJbkVkaXRNb2RlIiwiQmh2RnJhbWVJbmRleCIsInNldE5hbWUiLCJzcHJpdGVGcmFtZXMiLCJmaW5kSW5kZXgiLCJmcmFtZU1heCIsInByZXZpb3VzIiwiX2luZGV4Iiwic3ByaXRlRnJhbWUiLCJWQUxVRV9UWVBFIiwiTGFiZWwiLCJCaHZSb2xsTnVtYmVyIiwib25DdXN0b20iLCJpc1Njcm9sbGluZyIsImxhYmVsIiwicGxheUF0U3RhcnQiLCJ1cGRhdGVMYWJlbCIsInNjcm9sbCIsInJ1bldhaXRUaW1lciIsInNjaGVkdWxlT25jZSIsInRhcmdldFZhbHVlIiwibGVycCIsInNjcm9sbFRvIiwic3RyaW5nIiwidmFsdWVUeXBlIiwiSU5URUdFUiIsInJvdW5kIiwiRklYRURfMiIsInRvRml4ZWQiLCJUSU1FUiIsInRpbWVyIiwiaXNGdWxsVGltZXIiLCJ0IiwiaG91cnMiLCJtaW5zIiwic2VjcyIsIm0iLCJzIiwicGFyc2VUaW1lciIsIlBFUkNFTlRBR0UiLCJLTUJUX0ZJWEVEMiIsIk51bWJlciIsIk1BWF9WQUxVRSIsIkNVU1RPTUVSIiwic2hvd1BsdXNTeW1ib2wiLCJhYnMiLCJfdGFyZ2V0VmFsdWUiLCJCaHZTd2l0Y2hQYWdlIiwicHJlSW5kZXgiLCJfaXNDaGFuZ2luZyIsIl91cGRhdGVFZGl0b3JQYWdlIiwicGFnZSIsIlZNRW52IiwiZWRpdG9yIiwiX3VwZGF0ZVBhZ2UiLCJjdXJJbmRleCIsInByZU5vZGUiLCJzaG93Tm9kZSIsImlzQ2hhbmdpbmciLCJzZXRFdmVudEluZGV4IiwiZSIsImlzTG9vcFBhZ2UiLCJfQlRyZWVOb2RlIiwiQnJhbmNoTm9kZSIsIm5vZGVzIiwiX2FjdHVhbFRhc2siLCJfcnVubmluZ05vZGUiLCJfbm9kZVJ1bm5pbmciLCJfY29udHJvbCIsIl9ydW4iLCJjb250cm9sIiwiYnVpbGRUaW1lQ29uc3RhbnRzIiwia2V5TmFtZU1heExlbiIsImxlbiIsImVudmlyb21lbnQiLCJ2YWx1ZVJlcCIsInBhZFN0YXJ0IiwiX0J1dHRvblNpbXBsZSIsIkJ1dHRvbkVmZmVjdCIsImFuaW0iLCJhY19zdGFydCIsIkFuaW1hdGlvbkNsaXAiLCJhY19lbmQiLCJkZWZhdWx0Q2xpcCIsImNyZWF0ZVN0YXRlIiwiVE9VQ0hfU1RBUlQiLCJvblRvdWNodFN0YXJ0IiwiZGlzYWJsZWRFZmZlY3QiLCJvblRvdWNoRW5kIiwib25EZXN0cm95Iiwib2ZmIiwiZ3JheXNjYWxlIiwiQnV0dG9uU2ltcGxlIiwidG91Y2hDb3VudCIsInRvdWNodEVuZFRpbWUiLCJUT1VDSF9FTkQiLCJUT1VDSF9DQU5DRUwiLCJvbmNlIiwicHJvcGFnYXRpb25TdG9wcGVkIiwiaW50ZXJ2YWwiLCJfcGxheUVmZmVjdCIsIl9CdXR0b25FZmZlY3QiLCJCdXR0b25Ub3VjaExvbmciLCJfcGFzc1RpbWUiLCJfaXNUb3VjaExvbmciLCJfZXZlbnQiLCJyZW1vdmVUb3VjaExvbmciLCJlbWl0IiwiQ2FtZXJhVXRpbCIsImlzSW5WaWV3IiwiY2FtZXJhIiwid29ybGRQb3MiLCJjYW1lcmFQb3MiLCJnZXRXb3JsZFBvc2l0aW9uIiwidmlld1BvcyIsIndvcmxkVG9TY3JlZW4iLCJkaXIiLCJWZWMzIiwibm9ybWFsaXplIiwic3VidHJhY3QiLCJmb3J3YXJkIiwiZG90Iiwidmlld3BvcnRSZWN0IiwidmlldyIsImdldFZpZXdwb3J0UmVjdCIsIngiLCJ3aWR0aCIsInkiLCJoZWlnaHQiLCJfR2FtZUNvbXBvbmVudCIsIkNDQ29tcCIsImNhblJlY3ljbGUiLCJlbnQiLCJHYW1lQ29tcG9uZW50IiwidGlkIiwiY29tcE5hbWUiLCJfVk1QYXJlbnQiLCJDQ1ZNUGFyZW50Q29tcCIsIlZNUGFyZW50IiwiX01hcCIsIkNvbGxlY3Rpb24iLCJfYXJyYXkiLCJvbGQiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiTGFuZ3VhZ2VMYWJlbCIsIkNvbW1vblByb21wdCIsImNvbmZpZyIsIm9uQWRkZWQiLCJzZXRUaXRsZSIsInNldENvbnRlbnQiLCJzZXRCdG5Pa0xhYmVsIiwic2V0QnRuQ2FuY2VsTGFiZWwiLCJsYWJfdGl0bGUiLCJkYXRhSUQiLCJsYWJfY29udGVudCIsImNvbnRlbnQiLCJsYWJfb2siLCJva1dvcmQiLCJsYWJfY2FuY2VsIiwiY2FuY2VsV29yZCIsIm5lZWRDYW5jZWwiLCJvbk9rIiwib2tGdW5jIiwiY2xvc2UiLCJvbkNsb3NlIiwiY2xvc2VGdW5jIiwib25DYW5jZWwiLCJjYW5jZWxGdW5jIiwiZ3VpIiwicmVtb3ZlQnlOb2RlIiwicXVlcnkiLCJEYXRlIiwiZm9ybWF0IiwieWVhciIsImdldEZ1bGxZZWFyIiwibW9udGgiLCJnZXRNb250aCIsImRheSIsImdldERhdGUiLCJnZXRIb3VycyIsIm1pbnV0ZXMiLCJnZXRNaW51dGVzIiwic2Vjb25kcyIsImdldFNlY29uZHMiLCJyZXBsYWNlIiwiRGVjb3JhdG9yIiwic2V0Tm9kZSIsInZhbGlkIiwiRGVsZWdhdGVDb21wb25lbnQiLCJ2cCIsIm9uQ2xvc2VXaW5kb3ciLCJhZGQiLCJmdW5jIiwiY29tcG9uZW50cyIsInQwIiwiaXNEZXN0cm95IiwiYXBwbHlDb21wb25lbnRzRnVuY3Rpb24iLCJvbkJlZm9yZVJlbW92ZSIsIm9uQmVmb3JlUmVtb3ZlTmV4dCIsInJlbW92ZWQiLCJvblJlbW92ZWQiLCJwcmVmYWIiLCJyZW1vdmVGcm9tUGFyZW50IiwiZnVuTmFtZSIsIl9DQ0NvbXAiLCJEZW1vVmlld0NvbXAiLCJEZXZpY2VVdGlsIiwiZ2V0U2FmZUFyZWFSZWN0Iiwic3lzIiwicGxhdGZvcm0iLCJvcyIsImlzTmF0aXZlIiwiaXNCcm93c2VyIiwiaXNNb2JpbGUiLCJQbGF0Zm9ybSIsIkFORFJPSUQiLCJJT1MiLCJNT0JJTEVfQlJPV1NFUiIsIkRFU0tUT1BfQlJPV1NFUiIsIldFQ0hBVF9HQU1FIiwiQllURURBTkNFX01JTklfR0FNRSIsIkJBSURVX01JTklfR0FNRSIsIlZJVk9fTUlOSV9HQU1FIiwiT1BQT19NSU5JX0dBTUUiLCJYSUFPTUlfUVVJQ0tfR0FNRSIsIkhVQVdFSV9RVUlDS19HQU1FIiwiQUxJUEFZX01JTklfR0FNRSIsIk9QRU5IQVJNT05ZIiwiRGlyZWN0b3IiLCJvbGRUaWNrIiwiZGlyZWN0b3IiLCJ0aWNrIiwiZ2xvYmFsR2FtZVRpbWVTY2FsZSIsImpzIiwibWl4aW4iLCJfZWNzIiwiRUNTRW50aXR5IiwiRUNTQ29tcCIsIlN5c3RlbSIsIkVDU1N5c3RlbSIsIlJvb3RTeXN0ZW0iLCJFQ1NSb290U3lzdGVtIiwiQ29tYmxvY2tTeXN0ZW0iLCJFQ1NDb21ibG9ja1N5c3RlbSIsImNyZWF0ZUVudGl0eVdpdGhDb21wIiwiY3RvciIsImVudGl0eSIsImVpZCIsIkVDU01vZGVsIiwiZWlkMkVudGl0eSIsImNyZWF0ZUVudGl0eSIsImNhbk5ldyIsInN5c3RlbSIsInN5c3RlbXMiLCJlbnRpdHlDdG9ycyIsImNvbXBUaWQiLCJjb21wQ3RvcnMiLCJjb21wUG9vbHMiLCJjb21wQWRkT3JSZW1vdmUiLCJnZXRFbnRpdHkiLCJlbnRpdHlOYW1lIiwiZW50aXR5UG9vbCIsIm1hdGNoZXIiLCJncm91cHMiLCJjcmVhdGVHcm91cCIsIm9uQ29tcG9uZW50QWRkT3JSZW1vdmUiLCJtYXRjaEVudGl0aWVzIiwiY2FsbGJhY2tMc3QiLCJnZXRFbnRpdHlCeUVpZCIsImFjdGl2ZUVudGl0eUNvdW50IiwiYWxsT2YiLCJfRUNTTWF0Y2hlciIsIkVDU01hdGNoZXIiLCJhbnlPZiIsIl9FQ1NNYXRjaGVyMiIsIm9ubHlPZiIsIl9FQ1NNYXRjaGVyMyIsImV4Y2x1ZGVPZiIsIl9FQ1NNYXRjaGVyNCIsImdldFNpbmdsZXRvbiIsInRpZDJjb21wIiwiYWRkU2luZ2xldG9uIiwib2JqIiwiYnJvYWRjYXN0Q29tcEFkZE9yUmVtb3ZlIiwiY29tcG9uZW50VHlwZUlkIiwiZXZlbnRzIiwibWFzayIsIkVDU01hc2siLCJjb21wVGlkMkN0b3IiLCJjb21wVGlkMk9iaiIsIl9wYXJlbnQiLCJfY2hpbGRyZW4iLCJhZGRDaGlsZCIsInJlbW92ZUNoaWxkIiwiaXNSZUFkZCIsImNjdCIsImNyZWF0ZUNvbXAiLCJ0bXBDdG9yIiwiY3RvcnMiLCJfY3RvcnMiLCJpc1JlY3ljbGUiLCJoYXNDb21wIiwiX3JlbW92ZSIsImVudGl0eXMiLCJkZXN0cm95RW50aXR5IiwiRUNTR3JvdXAiLCJfbWF0Y2hFbnRpdGllcyIsIl9lbnRpdGllc0NhY2hlIiwiX2VudGVyZWRFbnRpdGllcyIsIl9yZW1vdmVkRW50aXRpZXMiLCJpc01hdGNoIiwid2F0Y2hFbnRpdHlFbnRlckFuZFJlbW92ZSIsImVudGVyZWRFbnRpdGllcyIsInJlbW92ZWRFbnRpdGllcyIsIl90aGlzJF9lbnRlcmVkRW50aXRpZSIsIl90aGlzJF9yZW1vdmVkRW50aXRpZSIsImZyb20iLCJ2YWx1ZXMiLCJjZWlsIiwiVWludDMyQXJyYXkiLCJudW0iLCJvciIsIm90aGVyIiwiYW5kIiwibWFjaGVySWQiLCJCYXNlT2YiLCJydWxlcyIsIl9pbmRpY2VzIiwiX2NvbnN0cnVjdCIsIkFueU9mIiwiYmluZE1hdGNoTWV0aG9kIiwiQWxsT2YiLCJfbGVuMyIsIl9rZXkzIiwiX3N0ZXAiLCJvdGhlclRpZHMiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIiwiZG9uZSIsIkV4Y2x1ZGVPZiIsIl9sZW40IiwiX2tleTQiLCJpc01hdGNoMSIsImlzTWF0Y2gyIiwiaXNNYXRjaE1vcmUiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiY2xvbmUiLCJuZXdNYXRjaGVyIiwicnVsZSIsImdldEtleSIsImluZGljZXMiLCJfbGVuNSIsIl9rZXk1Iiwiam9pbiIsIl9CYXNlT2YiLCJfcHJvdG8zIiwiX0Jhc2VPZjIiLCJfcHJvdG80IiwiX0Jhc2VPZjMiLCJfcHJvdG81IiwiY2FyZUNvbXBvbmVudFR5cGVJZHMiLCJoYXNFbnRpdHlFbnRlciIsImhhc0VudGl0eVJlbW92ZSIsImhhc1VwZGF0ZSIsInRtcEV4ZWN1dGUiLCJleGVjdXRlIiwiaGFzT3duUHJvcGVydHkiLCJnZXRQcm90b3R5cGVPZiIsImhhc0ZpcnN0VXBkYXRlIiwiZXhlY3V0ZTEiLCJleGVjdXRlMCIsInVwZGF0ZU9uY2UiLCJoYXNFbnRpdHkiLCJlbnRpdGllcyIsImVudGl0eUVudGVyIiwiZmlyc3RVcGRhdGUiLCJfc3RlcDMiLCJfaXRlcmF0b3IzIiwiX3N0ZXA0IiwiX2l0ZXJhdG9yNCIsImVudGl0eVJlbW92ZSIsIl9zdGVwNSIsIl9pdGVyYXRvcjUiLCJfc3RlcDYiLCJfaXRlcmF0b3I2IiwiZXhlY3V0ZVN5c3RlbUZsb3dzIiwic3lzdGVtQ250IiwiX3Byb3RvMiIsImNvbWJsb2NrU3lzdGVtcyIsIl9jb21ibG9ja1N5c3RlbXMiLCJFZmZlY3QyREZvbGxvdzNEIiwicG9zIiwic2V0VGFyZ2V0Iiwibm9kZTNkIiwiem9vbSIsInNldFNjYWxlIiwibGF0ZVVwZGF0ZSIsIk1hdGhVdGlsIiwiY29udmVydFRvVUlOb2RlIiwid29ybGRQb3NpdGlvbiIsIm5vZGVVaSIsInNldFBvc2l0aW9uIiwidHJhbnNmb3JtTWF0NCIsIl9jYW1lcmEiLCJtYXRWaWV3IiwicmF0aW8iLCJkaXN0YW5jZSIsInoiLCJFZmZlY3REZWxheVJlbGVhc2UiLCJvbkVuYWJsZSIsIm9uRGVsYXkiLCJkZWxheSIsIkVmZmVjdFNpbmdsZUNhc2UiLCJpbnN0YW5jZSIsIkVmZmVjdEV2ZW50IiwiRWZmZWN0RmluaXNoZWRSZWxlYXNlIiwibWF4RHVyYXRpb24iLCJzcGluZSIsInNrZWxldG9uRGF0YSIsInNrZWxldG9uSnNvbiIsImFuaW1hdGlvbnMiLCJvblJlY292ZXJ5IiwiYW5pbXMiLCJnZXRDb21wb25lbnRzSW5DaGlsZHJlbiIsImFuaW1hdG9yIiwiX2FuaW1hdG9yJGRlZmF1bHRDbGlwIiwiYW5pTmFtZSIsImFuaVN0YXRlIiwiUGFydGljbGVTeXN0ZW0iLCJwYXJ0aWNsZSIsIm1lc3NhZ2UiLCJkaXNwYXRjaEV2ZW50IiwiUHV0IiwiZWZmZWN0c191c2UiLCJvblB1dCIsImdldENvdW50IiwicGF0aCIsIm5wIiwicHJlbG9hZCIsIlByZWZhYiIsIlZpZXdVdGlsIiwiY3JlYXRlUHJlZmFiTm9kZSIsInJlc19wYXRoIiwibG9hZEFuZFNob3ciLCJfbm9kZSIsInNob3ciLCJpc1BsYXlGaW5pc2hlZFJlbGVhc2UiLCJzZXRTcGVlZCIsInBvc2l0aW9uIiwiX3RoaXMzIiwic2ltdWxhdGlvblNwZWVkIiwiX3RoaXM0IiwiX2luc3RhbmNlIiwiRXZlbnREaXNwYXRjaGVyIiwiX21zZyIsImxpc3RlbmVyIiwib2JqZWN0IiwiTWVzc2FnZUV2ZW50RGF0YSIsIl90aGlzJF9tc2ciLCJFdmVudE1lc3NhZ2UiLCJGbGFzaFNwaW5lIiwiX21lZGlhbiIsIl90aW1lIiwiX3NrZWxldG9uIiwiY3VzdG9tTWF0ZXJpYWwiLCJyYXRlIiwibWF0IiwiTWF0ZXJpYWwiLCJjb3B5IiwiY2xpY2tGbGFzaCIsIkZsYXNoU3ByaXRlIiwiVmVjMiIsIm1hdGgiLCJRdWF0IiwidjJfMSIsInYyXzIiLCJ2M18xIiwicXRfMSIsIktFWUNPREUiLCJjaGFyQ29kZUF0IiwiS2V5Q29kZSIsIlNISUZUX0xFRlQiLCJzbGlkZSIsInJhbmdlIiwiRnJlZUZsaWdodENhbWVyYSIsIl9ldWxlciIsIl92ZWxvY2l0eSIsIl9wb3NpdGlvbiIsIl9zcGVlZFNjYWxlIiwiaW5wdXQiLCJJbnB1dCIsIk1PVVNFX1dIRUVMIiwib25Nb3VzZVdoZWVsIiwiS0VZX0RPV04iLCJvbktleURvd24iLCJLRVlfVVAiLCJvbktleVVwIiwib25Ub3VjaFN0YXJ0IiwiVE9VQ0hfTU9WRSIsIm9uVG91Y2hNb3ZlIiwiZXVsZXJBbmdsZXMiLCJ0cmFuc2Zvcm1RdWF0Iiwicm90YXRpb24iLCJzY2FsZUFuZEFkZCIsIm1vdmVTcGVlZCIsImRhbXAiLCJmcm9tRXVsZXIiLCJzbGVycCIsInNldFJvdGF0aW9uIiwiZGVsdGEiLCJnZXRTY3JvbGxZIiwiVU5JVF9aIiwia2V5Q29kZSIsIm1vdmVTcGVlZFNoaWZ0U2NhbGUiLCJjYW52YXMiLCJyZXF1ZXN0UG9pbnRlckxvY2siLCJnZXRTdGFydExvY2F0aW9uIiwiZ2V0RGVsdGEiLCJyb3RhdGVTcGVlZCIsImdldExvY2F0aW9uIiwiZG9jdW1lbnQiLCJleGl0UG9pbnRlckxvY2siLCJDb2xsaXNpb25UeXBlIiwiY2NlbnVtIiwiRXZlbnRfVHJpZ2dlckVudGVyIiwiRXZlbnRfVHJpZ2dlclN0YXkiLCJFdmVudF9UcmlnZ2VyRXhpdCIsIkV2ZW50X0NvbGxpc2lvbkVudGVyIiwiRXZlbnRfQ29sbGlzaW9uU3RheSIsIkV2ZW50X0NvbGxpc2lvbkV4aXQiLCJHYW1lQ29sbGlzaW9uIiwiY29sbGlkZXIiLCJDb2xsaWRlciIsImlzVHJpZ2dlciIsIm9uVHJpZ2dlciIsIm9uQ29sbGlzaW9uIiwib25UcmlnZ2VyRW50ZXIiLCJvblRyaWdnZXJTdGF5Iiwib25UcmlnZ2VyRXhpdCIsIm9uQ29sbGlzaW9uRW50ZXIiLCJvbkNvbGxpc2lvblN0YXkiLCJvbkNvbGxpc2lvbkV4aXQiLCJCYWxsaXN0aWMiLCJSZXNUeXBlIiwicmVzUGF0aHMiLCJfdGhpcyRldmVudCIsIm5vZGVUcmVlSW5mb0xpdGUiLCJjcmVhdGVQcmVmYWJOb2RlQXN5bmMiLCJnZXRSZXMiLCJhZGRQYXRoVG9SZWNvcmQiLCJwYXRocyIsInJlc0lkIiwicnBzIiwicmVhbEJ1bmRsZSIsInJlYWxQYXRoIiwiZ2V0UmVzS2V5IiwiYnVuZGxlIiwib25Qcm9ncmVzcyIsIkxvYWQiLCJsb2FkRGlyIiwicmVhbERpciIsIkxvYWREaXIiLCJyZWxlYXNlRGlyIiwicmVsZWFzZUF1ZGlvRWZmZWN0IiwiQXVkaW8iLCJzZXRTcHJpdGUiLCJfc2V0U3ByaXRlIiwiX3g0IiwiX3g1Iiwic2V0QnV0dG9uIiwiYmluZFJvb3RFdmVudCIsInJlZ2V4IiwibWF0Y2giLCJzZXRFdmVudCIsInNlbGYiLCJfYXJnczMiLCJzZXRLZXlib2FyZCIsIktFWV9QUkVTU0lORyIsIm9uS2V5UHJlc3NpbmciLCJzZXRHYW1lU2hvdyIsIkdBTUVfU0hPVyIsIm9uR2FtZVNob3ciLCJzZXRHYW1lSGlkZSIsIkdBTUVfSElERSIsIm9uR2FtZUhpZGUiLCJzZXRHYW1lUmVzaXplIiwiR0FNRV9SRVNJWkUiLCJvbkdhbWVSZXNpemUiLCJzZXRHYW1lRnVsbFNjcmVlbiIsIkdBTUVfRlVMTF9TQ1JFRU4iLCJvbkdhbWVGdWxsU2NyZWVuIiwic2V0R2FtZU9yaWVudGF0aW9uIiwiR0FNRV9PUklFTlRBVElPTiIsIm9uR2FtZU9yaWVudGF0aW9uIiwiR2FtZUNvbmZpZyIsIl9kYXRhIiwiZnJlZXplIiwibG9nQ29uZmlnIiwiZnJhbWVSYXRlIiwibG9jYWxEYXRhS2V5IiwibG9jYWxEYXRhSXYiLCJodHRwU2VydmVyIiwiaHR0cFRpbWVvdXQiLCJsYW5ndWFnZSIsInRleHR1cmUiLCJlbmFibGUiLCJzZXJ2ZXIiLCJwYWNrYWdlcyIsImxvYWRpbmdUaW1lb3V0R3VpIiwibW9iaWxlU2FmZUFyZWEiLCJHYW1lRXZlbnQiLCJHYW1lTWFuYWdlciIsInJvb3QiLCJzZXRUaW1lU2NhbGUiLCJnZXRUaW1lU2NhbGUiLCJHYW1lUXVlcnlDb25maWciLCJwYXJzZVVybCIsIlN0cmluZ1V0aWwiLCJndWlkIiwid2luZG93IiwidSIsImxvY2F0aW9uIiwiaHJlZiIsInNwbGl0IiwibCIsInN1YnN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsIkdhbWVTdG9yYWdlQ29uZmlnIiwiVUlJRCIsIl9VSUNvbmZpZ0RhdGEiLCJMb2FkaW5nIiwibGF5ZXIiLCJMYXllclR5cGUiLCJVSSIsIkFsZXJ0IiwiRGlhbG9nIiwiQ29uZmlybSIsIkRlbW8iLCJNYWluIiwic2VsZWN0RnVuIiwiUG9wVXAiLCJ1cmxzIiwicmVxcGFyYW1zIiwiSHR0cEV2ZW50IiwiSHR0cFJldHVybiIsImlzU3VjYyIsImVyciIsIkh0dHBSZXF1ZXN0IiwidGltZW91dCIsImhlYWRlciIsImFkZEhlYWRlciIsInNlbmRSZXF1ZXN0IiwiZ2V0QXN5bmMiLCJyZXQiLCJnZXRCeUFycmF5YnVmZmVyIiwiZ2V0QXN5bmNCeUFycmF5YnVmZmVyIiwicG9zdCIsInBvc3RBc3luYyIsImFib3J0IiwieGhyIiwiZ2V0UGFyYW1TdHJpbmciLCJpc1Bvc3QiLCJyZXNwb25zZVR5cGUiLCJpc09wZW5UaW1lb3V0IiwibmV3VXJsIiwicGFyYW1zU3RyIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJfc3RlcCR2YWx1ZSIsInNldFJlcXVlc3RIZWFkZXIiLCJvbnRpbWVvdXQiLCJkZWxldGVDYWNoZSIsIlRJTUVPVVQiLCJvbmxvYWRlbmQiLCJzdGF0dXMiLCJOT19ORVRXT1JLIiwib25lcnJvciIsInJlYWR5U3RhdGUiLCJVTktOT1dOX0VSUk9SIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2UiLCJKU09OIiwicGFyc2UiLCJzZW5kIiwiSW1hZ2VVdGlsIiwiZ2V0UGl4ZWxDb2xvciIsIl90ZXh0dXJlJGltYWdlIiwiY3JlYXRlRWxlbWVudCIsImN0eCIsImdldENvbnRleHQiLCJpbWFnZSIsImRyYXdJbWFnZSIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsInBpeGVsSW5kZXgiLCJwaXhlbERhdGEiLCJDb2xvciIsImltYWdlVG9CYXNlNjQiLCJfZXhlYyIsImV4dG5hbWUiLCJleGVjIiwiaW5jbHVkZXMiLCJJbWFnZSIsInNyYyIsIm9ubG9hZCIsImRhdGFVUkwiLCJ0b0RhdGFVUkwiLCJiYXNlNjRUb1RleHR1cmUiLCJiYXNlNjQiLCJUZXh0dXJlMkQiLCJpbml0V2l0aEVsZW1lbnQiLCJiYXNlNjRUb0Jsb2IiLCJzdHJpbmdzIiwiYXRvYiIsImFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJ1aW50OEFycmF5IiwiVWludDhBcnJheSIsIkJsb2IiLCJJbml0aWFsaXplIiwiSW5pdFJlc0NvbXAiLCJfZWNzJENvbWJsb2NrU3lzdGVtIiwiSW5pdFJlc1N5c3RlbSIsInF1ZXVlIiwibG9hZEN1c3RvbSIsImxvYWRMYW5ndWFnZSIsImxvYWRDb21tb24iLCJjdXJyZW50IiwibGFuIiwic2V0TGFuZ3VhZ2UiLCJNb2R1bGVVdGlsIiwiYWRkVmlld1VpIiwiTG9hZGluZ1ZpZXdDb21wIiwiT1AiLCJ0eXBlcyIsIk9BTSIsIkpzb25PYiIsIl9jYWxsYmFjayIsIm9ic2VydmUiLCJvdmVycmlkZUFycmF5UHJvdG8iLCJvbGRWYWwiLCJwYXRoQXJyYXkiLCJkZWZpbmVQcm9wZXJ0eSIsIm5ld1ZhbCIsIm92Iiwib3JpZ2luYWxQcm90byIsIm92ZXJyaWRlUHJvdG8iLCJjcmVhdGUiLCJtZXRob2QiLCJKc29uVXRpbCIsImxvYWREaXJBc3luYyIsImFzc2V0cyIsImFzc2V0IiwiX0xhYmVsTnVtYmVyIiwiTGFiZWxDaGFuZ2UiLCJpc0JlZ2luIiwiY2hhbmdlVG8iLCJwbGF5QW5pbSIsImNoYW5nZUJ5IiwiZXhjQ2FsbGJhY2siLCJiZWdpbiIsImlzRW5kIiwiaXNJbnRlZ2VyIiwiTGFiZWxOdW1iZXIiLCJfTGFiZWwiLCJzeW1ib2wiLCJfbnVtIiwiTGFiZWxUaW1lIiwiYmFja1N0YXJ0VGltZSIsImRhdGVEaXNhYmxlIiwib25TZWNvbmQiLCJjIiwiY291bnREb3duIiwiZGF0ZSIsInplcm9pemUiLCJ0aW1lRm9ybWF0IiwiZGF0YUZvcm1hdCIsImRheUZvcm1hdCIsImRmIiwiY292ZXJTdHJpbmciLCJzZXREYXRlRGlzYWJsZSIsImZsYWciLCJzZXRUaW1lIiwic2Vjb25kIiwidGltaW5nX2VuZCIsInRpbWluZ19zdGFydCIsInNldFRpbWVTdGFtcCIsInRpbWVTdGFtcCIsIlRpbWVVdGlsIiwic2Vjc0JldHdlZW4iLCJnZXRTZXJ2ZXJUaW1lIiwiZ2V0VGltZSIsIm9uU2NoZWR1bGVDb21wbGV0ZSIsIm9uU2NoZWR1bGVTZWNvbmQiLCJzY2hlZHVsZSIsInVuc2NoZWR1bGVBbGxDYWxsYmFja3MiLCJMYW5ndWFnZU1hbmFnZXIiLCJfbGFuZ3VhZ2VzIiwiTGFuZ3VhZ2UiLCJDSElORVNFIiwiRU5HTElTSCIsIl9sYW5ndWFnZVBhY2siLCJMYW5ndWFnZVBhY2siLCJfZGVmYXVsdExhbmd1YWdlIiwiaXNFeGlzdCIsImxhbmciLCJsYW5ndWFnZXMiLCJnZXROZXh0TGFuZyIsInN1cHBvcnRMYW5ncyIsIkxhbmd1YWdlRGF0YSIsInRvTG93ZXJDYXNlIiwibG9hZExhbmd1YWdlQXNzZXRzIiwiTG9nZ2VyIiwib2xkTGFuZ3VhZ2UiLCJ1cGRhdGVMYW5ndWFnZSIsInJlbGVhc2VMYW5ndWFnZUFzc2V0cyIsImdldExhbmdCeUlEIiwibGFiSWQiLCJ0ZXh0IiwiZXhjZWwiLCJyZWNvcmQiLCJwYXRoX2pzb24iLCJwYXRoX3RleHR1cmUiLCJwYXRoX3NwaW5lIiwiZm9udCIsIkxhbmdMYWJlbFBhcmFtc0l0ZW0iLCJkaXNwbGF5TmFtZSIsInNlcmlhbGl6YWJsZSIsIkNDU3RyaW5nIiwiX2NsYXNzNCIsIl9jbGFzczUiLCJpbml0Rm9udFNpemUiLCJfbmVlZFVwZGF0ZSIsInNldFZhcnMiLCJoYXNrZXkiLCJlbGVtZW50IiwiaWkiLCJ1cGRhdGVDb250ZW50IiwicmljaHRleHQiLCJSaWNoVGV4dCIsImZvbnRTaXplIiwiX2RhdGFJRCIsIl9zdHJpbmciLCJyb290Tm9kZXMiLCJnZXRTY2VuZSIsIkxhbmd1YWdlVHlwZSIsImNvbXBzIiwiX2xvYWRMYW5ndWFnZUFzc2V0cyIsImxvYWRUZXh0dXJlIiwibG9hZFNwaW5lIiwibG9hZEpzb24iLCJsb2FkVGFibGUiLCJfY2FsbGVlMyIsImpzb25Bc3NldCIsIl9jb250ZXh0MyIsIlRURkZvbnQiLCJfY2FsbGVlNCIsIl9jb250ZXh0NCIsImxhbmdUZXh0dXJlIiwibGFuZ0pzb24iLCJsYW5nU3BpbmUiLCJMYW5ndWFnZVNwaW5lIiwiX2RlZmF1bHRBbmltYXRpb24iLCJ1cGRhdGVTcGluZSIsIlNrZWxldG9uRGF0YSIsIkxhbmd1YWdlU3ByaXRlIiwidXBkYXRlU3ByaXRlIiwic3Bjb21wIiwiaXNSYXdTaXplIiwiX3NwY29tcCRnZXRDb21wb25lbnQiLCJyYXdTaXplIiwiX29yaWdpbmFsU2l6ZSIsIlVJVHJhbnNmb3JtIiwic2V0Q29udGVudFNpemUiLCJfTGF5ZXJQb3BVcCIsIkxheWVyRGlhbG9nIiwidWlfbm9kZXMiLCJ1aV9jYWNoZSIsIlZpZXdQYXJhbXMiLCJzZXRCbGFja0Rpc2FibGUiLCJibGFjayIsImVuYWJsZWQiLCJjbG9zZVZhY2FuY3lSZW1vdmUiLCJjbG9zZU1hc2siLCJMYXllclBvcFVwIiwiU2NyZWVuQWRhcHRlclR5cGUiLCJMYXllck1hbmFnZXIiLCJndWlkZSIsIndpbmRvd0FzcGVjdFJhdGlvIiwiZGVzaWduQXNwZWN0UmF0aW8iLCJ1aSIsInBvcHVwIiwiZGlhbG9nIiwibm90aWZ5IiwiY29uZmlncyIsImluaXRMYXllciIsImluaXRTY3JlZW5BZGFwdGVyIiwiZ2V0Q29tcG9uZW50SW5DaGlsZHJlbiIsIkNhbWVyYSIsImNyZWF0ZV9ub2RlIiwiR2FtZSIsIkxheWVyVUkiLCJMYXllck5vdGlmeSIsIk5vdGlmeSIsIkd1aWRlIiwiZHJzIiwiZ2V0RGVzaWduUmVzb2x1dGlvblNpemUiLCJ3cyIsInNjcmVlbiIsIndpbmRvd1NpemUiLCJmaW5hbFciLCJmaW5hbEgiLCJsb2dWaWV3Iiwic2V0RGVzaWduUmVzb2x1dGlvblNpemUiLCJSZXNvbHV0aW9uUG9saWN5IiwiVU5LTk9XTiIsIlNhZmVBcmVhIiwic2V0T3BlbkZhaWx1cmUiLCJvbk9wZW5GYWlsdXJlIiwidG9hc3QiLCJ1c2VJMThuIiwid2FpdE9wZW4iLCJ3YWl0Q2xvc2UiLCJzZXRDb25maWciLCJ1aUlkIiwidWlBcmdzIiwib3BlbkFzeW5jIiwiX29wZW5Bc3luYyIsIm9uTG9hZEZhaWx1cmUiLCJyZW1vdmVVaUlkIiwib3BlblVpSWQiLCJyZXBsYWNlQXN5bmMiLCJyZW1vdmVDYWNoZSIsIkxheWVycyIsIlVJXzJEIiwidyIsIldpZGdldCIsImlzQWxpZ25MZWZ0IiwiaXNBbGlnblJpZ2h0IiwiaXNBbGlnblRvcCIsImlzQWxpZ25Cb3R0b20iLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJhbGlnbk1vZGUiLCJfTm9kZSIsIndhaXQiLCJub3RpZnlJdGVtIiwid2lkZ2V0IiwiQmxvY2tJbnB1dEV2ZW50cyIsImNoaWxkTm9kZSIsImluc3RhbnRpYXRlIiwidG9hc3RDb20iLCJnZXRDaGlsZEJ5TmFtZSIsIl9MYXllclVJIiwiQ0hJTERfQURERUQiLCJvbkNoaWxkQWRkZWQiLCJDSElMRF9SRU1PVkVEIiwib25DaGlsZFJlbW92ZWQiLCJjaGlsZCIsInNldFNpYmxpbmdJbmRleCIsInNob3dVaSIsIl9zaG93VWkiLCJyIiwib3BlblZhY2FuY3lSZW1vdmUiLCJ2YWNhbmN5IiwiaGFzRXZlbnRMaXN0ZW5lciIsInRpbWVySWQiLCJkYyIsIm9uTG9hZGluZ1RpbWVvdXRHdWkiLCJzYWZlQXJlYSIsImZhaWx1cmUiLCJwcmVmYWJQYXRoIiwiTGF5ZXJJdGVtIiwiTGF5ZXJVdGlsIiwic2V0Tm9kZUxheWVyIiwibiIsIk1BUCIsIkFWQVRBUiIsIklHTk9SRV9SQVlDQVNUIiwiR0laTU9TIiwiRURJVE9SIiwiVUlfM0QiLCJTQ0VORV9HSVpNTyIsIlBST0ZJTFRFUiIsIkRFRkFVTFQiLCJMaXN0Iiwib25seSIsInVuc2hpZnQiLCJyZW1vdmVBdCIsImZpbmQiLCJMb2FkaW5nSW5kaWNhdG9yIiwibG9hZGluZ19yb3RhdGUiLCJsb2FkaW5nIiwic2V0Um90YXRpb25Gcm9tRXVsZXIiLCJfQ0NWTVBhcmVudENvbXAiLCJmaW5pc2hlZCIsInRvdGFsIiwicHJvbXB0IiwiZW50ZXIiLCJsb2FkUmVzIiwiX2xvYWRSZXMiLCJsb2FkR2FtZVJlcyIsIm9uUHJvZ3Jlc3NDYWxsYmFjayIsIm9uQ29tcGxldGVDYWxsYmFjayIsIl9vbkNvbXBsZXRlQ2FsbGJhY2siLCJhZGRWaWV3VWlBc3luYyIsInNtYyIsImFjY291bnQiLCJzaGlwTWFpbiIsInJlbW92ZVZpZXdVaSIsIkxvZ1R5cGUiLCJuYW1lcyIsIjEiLCIyIiwiNCIsIjgiLCIxNiIsIjMyIiwidGFncyIsImxjIiwic2V0TG9nZ2VyQ29uc29sZSIsIk5ldCIsIk1vZGVsIiwiQnVzaW5lc3MiLCJWaWV3IiwiQ29uZmlnIiwiVHJhY2UiLCJzZXRUYWdzIiwidGFnIiwiZGVzY3JpYmUiLCJ0aW1lRW5kIiwidGFibGUiLCJtc2ciLCJpc09wZW4iLCJ0cmFjZSIsInByaW50IiwibG9nTmV0Iiwib3JhbmdlIiwibG9nTW9kZWwiLCJ2aW9sZXQiLCJsb2dCdXNpbmVzcyIsImJsdWUiLCJncmVlbiIsImdyYXkiLCJiYWNrTG9nIiwiZ2V0RGF0ZVN0cmluZyIsInN0YWNrIiwibGluZXMiLCJsaW5lIiwiX3Jlc3VsdCRwdXNoIiwibGluZUJyZWFrIiwibGlzdCIsInNwbGl0TGlzdCIsImxhc3RJbmRleE9mIiwiZCIsInN0ciIsInRpbWVTdHIiLCJnZXRNaWxsaXNlY29uZHMiLCJfUm9vdCIsImluaXRpYWxpemUiLCJpbml0R3VpIiwiVUlDb25maWdEYXRhIiwiUm9vdCIsInNpZ24iLCJudW1TdGFydCIsIm51bUVuZCIsImxlcnBBbmdsZSIsImRBbmdsZSIsImFuZ2xlVG93YXJkcyIsImNsYW1wIiwibWluTGltaXQiLCJtYXhMaW1pdCIsInByb2JhYmlsaXR5IiwiZGVnMlJhZCIsIlBJIiwicmFkMkRlZyIsIkV2ZW50RGF0YSIsIk1lc3NhZ2VNYW5hZ2VyIiwiZWRzIiwiZWQiLCJlYiIsIl9rZXlzIiwiYmluIiwiX2xpc3RlbmVyIiwiJGV2ZW50IiwiJGFyZ3MiLCJfZXZlbnRCaW4kbGlzdGVuZXIiLCJldmVudEJpbiIsInVpYyIsImFkZFZpZXciLCJ2M18wIiwiTW92ZVJpZ2lkQm9keSIsIl9yaWdpZEJvZHkiLCJfZ3JvdW5kZWQiLCJfY3VyTWF4U3BlZWQiLCJfcHJldkFuZ2xlWSIsIl9zdGF0ZVgiLCJfc3RhdGVaIiwiUmlnaWRCb2R5IiwiY2xlYXJWZWxvY2l0eSIsImFwcGx5R3Jhdml0eSIsImFwcGx5RGFtcGluZyIsImdyb3VuZGVkIiwiYXBwbHlMaW5lYXJWZWxvY2l0eSIsImciLCJncmF2aXR5IiwibWFzcyIsImFwcGx5Rm9yY2UiLCJnZXRMaW5lYXJWZWxvY2l0eSIsImxlbmd0aFNxciIsIkVQU0lMT04iLCJtdWx0aXBseVNjYWxhciIsInBvdyIsImRhbXBpbmciLCJzZXRMaW5lYXJWZWxvY2l0eSIsIm1zIiwiX3JhdGlvIiwiTW92ZVRvIiwidmVsb2NpdHkiLCJWZWMzVXRpbCIsInplcm8iLCJoYXNZQXhpcyIsIm5zIiwiTm9kZVNwYWNlIiwiTE9DQUwiLCJvZmZzZXQiLCJvZmZzZXRWZWN0b3IiLCJvblN0YXJ0Iiwib25DaGFuZ2UiLCJUaW1lciIsIm1vdmUiLCJhc3NlcnQiLCJXT1JMRCIsInN0cmljdEVxdWFscyIsIl90aGlzJG9uQ2hhbmdlIiwic3ViIiwiX3RoaXMkb25TdGFydCIsImV4aXQiLCJ0cmFucyIsIm11bCIsIl90aGlzJG9uQ29tcGxldGUiLCJNb3ZlVHJhbnNsYXRlIiwidmVjdG9yIiwidHJhbnNsYXRlIiwiTmV0TWFuYWdlciIsIl9jaGFubmVscyIsImdldEluc3RhbmNlIiwic2V0TmV0Tm9kZSIsImNoYW5uZWxJZCIsInJlbW92ZU5ldE5vZGUiLCJjb25uZWN0Iiwib3B0aW9ucyIsImJ1ZiIsImZvcmNlIiwicmVxdWVzdCIsInJlcVByb3RvY29sIiwicnNwT2JqZWN0Iiwic2hvd1RpcHMiLCJyZXF1ZXN0VW5pcXVlIiwiY29kZSIsInJlYXNvbiIsImNsb3NlU29ja2V0IiwiTmV0Tm9kZVN0YXRlU3RycyIsIk5ldFRpcHNUeXBlIiwiTmV0Tm9kZVN0YXRlIiwiTmV0Tm9kZSIsIl9jb25uZWN0T3B0aW9ucyIsIl9hdXRvUmVjb25uZWN0IiwiX2lzU29ja2V0SW5pdCIsIl9pc1NvY2tldE9wZW4iLCJfc3RhdGUiLCJDbG9zZWQiLCJfc29ja2V0IiwiX25ldHdvcmtUaXBzIiwiX3Byb3RvY29sSGVscGVyIiwiX2Nvbm5lY3RlZENhbGxiYWNrIiwiX2Rpc2Nvbm5lY3RDYWxsYmFjayIsIl9jYWxsYmFja0V4ZWN1dGVyIiwiX2tlZXBBbGl2ZVRpbWVyIiwiX3JlY2VpdmVNc2dUaW1lciIsIl9yZWNvbm5lY3RUaW1lciIsIl9oZWFydFRpbWUiLCJfcmVjZWl2ZVRpbWUiLCJfcmVjb25uZXRUaW1lT3V0IiwiX3JlcXVlc3RzIiwic29ja2V0IiwicHJvdG9jb2wiLCJuZXR3b3JrVGlwcyIsImV4ZWNGdW5jIiwiYnVmZmVyIiwiaW5pdFNvY2tldCIsIkNvbm5lY3RpbmciLCJhdXRvUmVjb25uZWN0IiwidXBkYXRlTmV0VGlwcyIsIm9uQ29ubmVjdGVkIiwib25NZXNzYWdlIiwib25FcnJvciIsIm9uQ2xvc2VkIiwidGlwc1R5cGUiLCJpc1Nob3ciLCJSZXF1ZXN0aW5nIiwicmVxdWVzdFRpcHMiLCJjb25uZWN0VGlwcyIsIlJlQ29ubmVjdGluZyIsInJlY29ubmVjdFRpcHMiLCJDaGVja2luZyIsIm9uQ2hlY2tlZCIsIldvcmtpbmciLCJyZXF1ZXN0cyIsInJlcSIsInJzcENtZCIsImNoZWNrUmVzcG9uc2VQYWNrYWdlIiwiaGFuZGxlclJlc3BvbnNlUGFja2FnZSIsInJlc3BvbnNlRXJyb3JDb2RlIiwicmVzZXRSZWNlaXZlTXNnVGltZXIiLCJyZXNldEhlYXJiZWF0VGltZXIiLCJnZXRQYWNrYWdlSWQiLCJyZXFJZHgiLCJwYXJzZUludCIsImxpc3RlbmVycyIsInJzcCIsImNsZWFyVGltZXIiLCJpc0F1dG9SZWNvbm5lY3QiLCJoYW5kbGVyUmVxdWVzdFBhY2thZ2UiLCJiYXNlX3JlcXVlc3QiLCJzdHJpbmdpZnkiLCJzZXRSZXNwb25lSGFuZGxlciIsImNtZCIsImFkZFJlc3BvbmVIYW5kbGVyIiwiZ2V0TmV0TGlzdGVuZXJzSW5kZXgiLCJyZW1vdmVSZXNwb25lSGFuZGxlciIsImNsZWFuTGlzdGVuZXJzIiwiaXRlcmF0b3IiLCJfdGhpczUiLCJnZXRIZWFyYmVhdCIsInJlamVjdFJlY29ubmVjdCIsIk5ldFByb3RvY29sUGFrbyIsImdldEhlYWRsZW4iLCJnZXRQYWNrYWdlTGVuIiwicmVzcFByb3RvY29sIiwiaXNDb21wcmVzcyIsImNoYXJEYXRhIiwiYmluRGF0YSIsInBha28iLCJpbmZsYXRlIiwidG8iLCJnemlwIiwiRHJhZ0V2ZW50IiwiRFJBR19TVEFSVCIsIkRSQUdfTU9WRSIsIkRSQUdfRU5EIiwiX2RyYWdnYWJsZSIsIl9kcmFnZ2luZyIsIl9kcmFnVGVzdGluZyIsIl9kcmFnU3RhcnRQb2ludCIsImluaXREcmFnIiwib25Ub3VjaEJlZ2luXzAiLCJvblRvdWNoTW92ZV8wIiwib25Ub3VjaEVuZF8wIiwib25Ub3VjaENhbmNlbF8wIiwiZ2V0VUlMb2NhdGlvbiIsImdldFVJRGVsdGEiLCJuZXdQb3MiLCJ2MyIsInN0YXJ0RHJhZyIsImFjdGl2ZUluSGllcmFyY2h5IiwiZHJhZ0JlZ2luIiwiZHJhZ0VuZCIsInN0b3BEcmFnIiwicmVtb3ZlRHJhZ0V2ZW50IiwiR3JhcGhpY3MiLCJDYW52YXMiLCJFZGl0Qm94IiwiTGF5b3V0IiwiUGFnZVZpZXciLCJQcm9ncmVzc0JhciIsIlNjcm9sbFZpZXciLCJTbGlkZXIiLCJUb2dnbGUiLCJVSU9wYWNpdHkiLCJNYXNrIiwiX3NlbGYkZ2V0Q29tcG9uZW50JHdpIiwiX3NlbGYkZ2V0Q29tcG9uZW50IiwiX3NlbGYkZ2V0Q29tcG9uZW50JGhlIiwiX3NlbGYkZ2V0Q29tcG9uZW50MiIsInVpVHJhbnNmb3JtIiwiU2l6ZSIsIm9wIiwib3BhY2l0eSIsInJlbmRlciIsIlVJUmVuZGVyZXIiLCIkX19jb2xvcl9fIiwiX3NlbGYkZ2V0Q29tcG9uZW50MyIsIl9zZWxmJGdldENvbXBvbmVudCRhbiIsIl9zZWxmJGdldENvbXBvbmVudDQiLCJhbmNob3JYIiwiX3NlbGYkZ2V0Q29tcG9uZW50JGFuMiIsIl9zZWxmJGdldENvbXBvbmVudDUiLCJhbmNob3JZIiwib25GaW5pc2hlZCIsIk9iamVjdFV0aWwiLCJpc09iamVjdCIsImRlZXBDb3B5IiwiUmFuZG9tTWFuYWdlciIsImh0dHAiLCJ0Y3AiLCJtdnZtIiwiVk0iLCJ0ZW1wVmVjMyIsInRlbXBWZWMzXzIiLCJ0ZW1wUXVhdCIsImVuYWJsZVNjYWxlUmFkaXVzIiwiYXV0b1JvdGF0ZSIsIl9kZWMxNiIsIk9yYml0Q2FtZXJhIiwiX2NlbnRlciIsIl90YXJnZXRDZW50ZXIiLCJfdG91Y2hlZCIsIl90YXJnZXRSb3RhdGlvbiIsIl9yb3RhdGlvbiIsIl9yYWRpdXMiLCJlbmFibGVUb3VjaCIsInJlc2V0VGFyZ2V0Um90YXRpb24iLCJyYWRpdXMiLCJsaW1pdFJvdGF0aW9uIiwidGFyZ2V0Um90YXRpb24iLCJfc3RhcnRSb3RhdGlvbiIsImZvbGxvd1RhcmdldFJvdGF0aW9uWSIsInRvRXVsZXIiLCJ3b3JsZFJvdGF0aW9uIiwieFJvdGF0aW9uUmFuZ2UiLCJ0b3VjaCIsInJvdGF0ZVgiLCJyb3RhdGVZIiwic2Nyb2xsWSIsIl90YXJnZXRSYWRpdXMiLCJyYWRpdXNTY2FsZVNwZWVkIiwibWF4UmFkaXVzIiwibWluUmFkaXVzIiwiYXV0b1JvdGF0ZVNwZWVkIiwiZm9sbG93U3BlZWQiLCJGT1JXQVJEIiwibG9va0F0IiwiZm9sbG93IiwiX3RhcmdldCIsIkdyb3VwSXRlbSIsIlBoeXNpY3NVdGlsIiwiR0FNRV9PQkpFQ1RfU0VMRUNUIiwiR0FNRV9PV05FUiIsIlBsYXRmb3JtVXRpbCIsImdldE5ldHdvcmtUeXBlIiwiZ2V0QmF0dGVyeUxldmVsIiwib3BlblVSTCIsImNvcHlUZXh0IiwibmF0aXZlIiwiY29weVRleHRUb0NsaXBib2FyZCIsInBsYXllckFuaSIsInBsYXlBbmlQbGF5ZXIiLCJUcmFja0VudHJ5IiwicGxheWVyRW1vIiwiUGxheWVyVGFyZ2V0UG9zIiwidHdlZW4iLCJOZGVtbyIsImRlbHRhVGltZSIsIl9CcmFuY2hOb2RlIiwiUHJpb3JpdHkiLCJzZXRSYW5kb20iLCJnZXRSYW5kb20iLCJnZXRSYW5kb21GbG9hdCIsImdldFJhbmRvbUludCIsImdldFJhbmRvbUJ5TWluTWF4TGlzdCIsImdldFJhbmRvbUJ5T2JqZWN0TGlzdCIsIm9iamVjdHMiLCJnZXRSYW5kb21CeVN1bUxpc3QiLCJyZXNpZHVlIiwiUmVnZXhVdGlsIiwiaXNEb3VibGVXb3JkIiwidGVzdCIsIlJlc0xvYWRlciIsImNkbiIsImJ1bmRsZXMiLCJsb2FkUmVtb3RlIiwiYXNzZXRNYW5hZ2VyIiwibG9hZEJ1bmRsZSIsInZlcnNpb24iLCJyZW1vdmVCdW5kbGUiLCJyZWxlYXNlQWxsIiwicGFyc2VMb2FkUmVzQXJncyIsImxvYWRCeUFyZ3MiLCJwcmVsb2FkQXN5bmMiLCJwcmVsb2FkRGlyIiwiZ2V0QnVuZGxlIiwicmVsZWFzZVByZWZhYnREZXBzUmVjdXJzaXZlbHkiLCJpbmZvcyIsImdldERpcldpdGhQYXRoIiwiaW5mbyIsIkFzc2V0IiwicGF0aHNPdXQiLCJ0eXBlT3V0Iiwib25Qcm9ncmVzc091dCIsIm9uQ29tcGxldGVPdXQiLCJpc1ZhbGlkVHlwZSIsImlzQ2hpbGRDbGFzc09mIiwibG9hZEJ5QnVuZGxlQW5kQXJncyIsIl9sb2FkQnlBcmdzIiwicmVzb3VyY2VzIiwiZHVtcCIsImRvd25sb2FkZXIiLCJtYXhDb25jdXJyZW5jeSIsIm1heFJlcXVlc3RzUGVyRnJhbWUiLCJtYXhSZXRyeUNvdW50IiwicmV0cnlJbnRlcnZhbCIsImlzSW5pdGVkIiwicGVyc2lzdCIsImluaVN0YXJ0IiwibG9hZENvbmZpZyIsIl9sb2FkQ29uZmlnIiwiY29uZmlnX25hbWUiLCJhZGRQZXJzaXN0Um9vdE5vZGUiLCJidW5kbGVEZWZhdWx0IiwiU3RvcmFnZU1hbmFnZXIiLCJTdG9yYWdlU2VjdXJpdHlTaW1wbGUiLCJUaW1lck1hbmFnZXIiLCJpbml0RWNzU3lzdGVtIiwiRVZFTlRfU0hPVyIsIm9uU2hvdyIsIkVWRU5UX0hJREUiLCJvbkhpZGUiLCJyZXN1bWUiLCJSb3RhdGVVdGlsIiwicm90YXRlQXJvdW5kIiwiYXhpcyIsInJhZCIsInF1YXQiLCJnZXRSb3RhdGlvbiIsInJvdGF0ZUFyb3VuZFRhcmdldCIsInBvaW50X2xvb2tBdCIsInBvaW50X3RhcmdldCIsInZlYzMiLCJmcm9tQXhpc0FuZ2xlIiwic2V0V29ybGRQb3NpdGlvbiIsInNldFdvcmxkUm90YXRpb24iLCJjaXJjdWxhckVkZ2VQb3NpdGlvbiIsImNlbnRlciIsImFuZ2xlIiwiZWRnZSIsIlVQIiwidG9SYWRpYW4iLCJNZXNoUmVuZGVyZXIiLCJSdFRvTW9kZWwiLCJydCIsIlJlbmRlclRleHR1cmUiLCJnZXRWaXNpYmxlU2l6ZSIsImNvbG9yQXR0YWNobWVudCIsImdmeCIsIkNvbG9yQXR0YWNobWVudCIsImRlcHRoU3RlbmNpbEF0dGFjaG1lbnQiLCJEZXB0aFN0ZW5jaWxBdHRhY2htZW50IiwicGkiLCJSZW5kZXJQYXNzSW5mbyIsInBhc3NJbmZvIiwiY2FtYXJhIiwidGFyZ2V0VGV4dHVyZSIsIm1vZGVsIiwibWF0ZXJpYWwiLCJSdFRvU3ByaXRlIiwidG91Y2hlZCIsInNwcml0ZSIsInJlZnJlc2hSZW5kZXJUZXh0dXJlIiwiZGVsdGFYIiwiaCIsInNwcml0ZWZyYW1lIiwib3JpZ2luYWxTaXplIiwicmVjdCIsImlzUm90YXRlIiwicm90YXRlZCIsImJvcmRlclRvcCIsImluc2V0VG9wIiwiYm9yZGVyTGVmdCIsImluc2V0TGVmdCIsImJvcmRlckJvdHRvbSIsImluc2V0Qm90dG9tIiwiYm9yZGVyUmlnaHQiLCJpbnNldFJpZ2h0IiwiU2VlZFJhbmRvbSIsInNlZWQiLCJybSIsInNyIiwic2VlZHJhbmRvbSIsIm1vZGlmeUZ1bkltZyIsInJpZ2h0SW1nU3RhdGUiLCJfdGhpcyRuZFJpZ2h0IiwicmlnaHRidXR0b24iLCJuZFJpZ2h0IiwiaW50ZXJhY3RhYmxlIiwiT25jbGljQm90dG9uIiwiX3RoaXMkbmRMZWZ0IiwiVmFjdXVtQ2xlYW5lckFuaSIsImltZyIsInNwcmllIiwibmRMZWZ0IiwibG9hZEltZyIsIm1vZGlmeUJ1dHRvblN0YXRlIiwiX3RoaXMkbmRSaWdodDIiLCJIbSIsIl9uZE5hbWUiLCJuZE5hbWUiLCJidXR0b24iLCJfdGhpcyRuZFJpZ2h0MyIsImltZ05vZGUiLCJ1cmxOYW1lIiwibm9kZUluZm8iLCJTZWxlY3RvciIsIlNlcXVlbmNlIiwiUGxheVZhY3V1bUNsZWFuZXIiLCJQbGF5SG0iLCJldmVudE5hbWUiLCJuZFZhY3V1bUNsZWFuZXIiLCJuZXdUYXJnZXRQb3MiLCJwbGF5QXVkaW8iLCJobSIsIm5ld3BvcyIsImhtSWQiLCJ5YyIsInQxIiwieGNxRWZmZWN0IiwiaGFuZGxlV2FzdGUiLCJjbG9zZUF1ZGlvIiwiYXVkaW9JZCIsInN3aXRjaFNoaXAiLCJfdGhpczYiLCJfdGhpczciLCJxaXUiLCJtb2RpZnlQb3MiLCJNb3ZlTm9kZSIsIm5ld1l6UG9zIiwic2NhbGVfeCIsInNjYWxlX3kiLCJ5YXppIiwibGFqaSIsIlNpbmdsZXRvbk1vZHVsZUNvbXAiLCJTcGluZUZpbmlzaGVkUmVsZWFzZSIsInJlc1BhdGgiLCJzZXRSZXNQYXRoIiwic2QiLCJpZCIsImlzcyIsImlpcyIsInNldFVzZXIiLCJrZXl3b3JkcyIsImVuY3J5cHRlZCIsImVuY3J5cHRLZXkiLCJTdHJpbmciLCJlbmNyeXB0IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImRlZmF1bHRWYWx1ZSIsImdldEl0ZW0iLCJkZWNyeXB0IiwiZ2V0Qm9vbGVhbiIsIlBSRVZJRVciLCJzZWNyZXRrZXkiLCJpdiIsImVyIiwiZnJvbUNoYXJDb2RlIiwiZHIiLCJTdHJpbmdGb3JtYXQiLCJkZWFsIiwibWF0Y2hfZnVuYyIsInRyaW0iLCJtYXRjaF9udW0iLCJmaXgiLCJLTUJUIiwicGVyIiwic2VwIiwibGltaXQiLCJSZWdFeHAiLCJ0aW1lX20iLCJ0aW1lX3MiLCJ0aW1lX21zIiwiZmQiLCJjb21wcmVzc1VuaXQiLCJ2YWx1ZUFyciIsInVuaXRBcnIiLCJmaXhOdW0iLCJjb3VudHMiLCJ1bml0cyIsIm51bWJlclRvdFBlcm1pbCIsInRvTG9jYWxlU3RyaW5nIiwibnVtYmVyVG9UaG91c2FuZCIsImZpeGVkIiwiayIsIm51bWJlclRvVGVuVGhvdXNhbmQiLCJzdHJpbmdUb0FycmF5MSIsInN0cmluZ1RvQXJyYXkyIiwic3RyaW5nVG9BcnJheTMiLCJzdHJpbmdUb0FycmF5NCIsInNob3dkb3QiLCJzdWJzdHIiLCJzdHJpbmdMZW4iLCJyZWFsTGVuZ3RoIiwiY2hhckNvZGUiLCJJc0VtcHR5Iiwic3Vic3RpdHV0ZSIsInJlc3QiLCJUYWJsZUxhbmd1YWdlIiwiVGFibGVOYW1lIiwiemgiLCJlbiIsIlRhYmxlUHJvbXB0V2luZG93IiwiaWQxIiwiaWQyIiwiaHAiLCJUYXNrIiwiX2VsYXBzZWRUaW1lIiwiX3RoaXMkY2FsbGJhY2siLCJ0aW1lcyIsImRhdGVfcyIsImRhdGVfc19zdGFydCIsInBvbHltZXJpY19zIiwiZGF0ZV9jIiwiZmllbGQiLCJvblRpbWVyQ29tcGxldGUiLCJ1blJlZ2lzdGVyIiwic2V0U2VydmVyVGltZSIsImdldFNlcnZlckRhdGUiLCJnZXRDbGllbnRUaW1lIiwibm93IiwiZ2V0Q2xpZW50RGF0ZSIsInN0YXJ0VGltZSIsImRheXNCZXR3ZWVuIiwidGltZTEiLCJ0aW1lMiIsInN0YXJ0RGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImVuZERhdGUiLCJlbmRUaW1lIiwiZGF0ZXMiLCJzbGVlcCIsIl9zbGVlcCIsInRpcHMiLCJUaXBzTWFuYWdlciIsImFsZXJ0Iiwib3BlcmF0ZSIsImdldFBvcENvbW1vbkVmZmVjdCIsImNvbmZpcm0iLCJuZXdDYWxsYmFja3MiLCJfQnV0dG9uIiwiVUlCdXR0b24iLCJfdG91Y2hDb3VudCIsIl90b3VjaEVuZFRpbWUiLCJfb25Ub3VjaEVuZGVkIiwicG9zMSIsInBvczIiLCJvdXRQb3MiLCJzY2FsYXIiLCJkaXYiLCJlcXVhbHMiLCJtYWduaXR1ZGUiLCJkaXJlY3Rpb24iLCJwb3NTdGFydCIsInBvc0VuZCIsImJlemllck9uZSIsInJvdGF0ZVRvIiwibGVuZ2h0IiwiY3Jvc3MiLCJyYWRpYW4iLCJyb3RhdGVNYXRyaXgiLCJNYXQ0Iiwicm90YXRlIiwibTAwIiwibTA0IiwibTA4IiwibTAxIiwibTA1IiwibTA5IiwibTAyIiwibTA2IiwibTEwIiwicFN0YXJ0IiwicEVuZCIsImJlemllclR3byIsInBvc0NvbiIsInR0IiwicENvbiIsImJlemllclRocmVlIiwicG9zQ29uMSIsInBvc0NvbjIiLCJubiIsIm5ubiIsInR0dCIsInBDb24xIiwicENvbjIiLCJkaXIxIiwiZGlyMiIsInRlbXBEaXIxIiwidGVtcERpcjIiLCJqdiIsImt2IiwiZG90VmFsdWUiLCJhY29zIiwiZGlyQW5nbGUiLCJWTV9FTUlUX0hFQUQiLCJzZXRWYWx1ZUZyb21QYXRoIiwicHJvcHMiLCJwcm9wTmFtZSIsImdldFZhbHVlRnJvbVBhdGgiLCJkZWYiLCJWaWV3TW9kZWwiLCIkZGF0YSIsIl90YWciLCJlbWl0VG9Sb290UGF0aCIsIm8iLCJzZXRWYWx1ZSIsImdldFZhbHVlIiwiVk1NYW5hZ2VyIiwiX212cyIsInNldE9ialZhbHVlIiwiZ2V0T2JqVmFsdWUiLCJhY3RpdmVSb290T2JqZWN0Iiwidm0iLCJhZGRWYWx1ZSIsInJzIiwiYmluZFBhdGgiLCJ1c2VDYXB0dXJlIiwidW5iaW5kUGF0aCIsImluYWN0aXZlIiwibXYiLCJpdGVtcyIsImZpbmROb2RlcyIsInJlZyIsImNhbGN1bGF0ZUFTcGFjZVRvQlNwYWNlUG9zIiwiYVBvcyIsIndvcmxkIiwiY29udmVydFRvV29ybGRTcGFjZUFSIiwiY29udmVydFRvTm9kZVNwYWNlQVIiLCJjYWxjdWxhdGVTY3JlZW5Qb3NUb1NwYWNlUG9zIiwic3BhY2UiLCJ1aWwiLCJ1bmlmb3JtU2NhbGUiLCJ0YXJnZXRXaWR0aCIsInRhcmdldEhlaWdodCIsImRlZmF1bHRXaWR0aCIsImRlZmF1bHRIZWlnaHQiLCJ3aWR0aFJhdGlvIiwiaGVpZ2h0UmF0aW8iLCJwIiwiYWRkTm9kZUFuaW1hdGlvbiIsIm9ubHlPbmUiLCJpc0RlZmF1bHRDbGlwIiwiaXNQbGF5aW5nIiwiVk1CYXNlIiwid2F0Y2hQYXRoIiwidGVtcGxhdGVNb2RlIiwid2F0Y2hQYXRoQXJyIiwidGVtcGxhdGVWYWx1ZUFyciIsInBhdGhBcnIiLCJzZXRNdWx0UGF0aEV2ZW50Iiwib25WYWx1ZUNoYW5nZWQiLCJvblZhbHVlSW5pdCIsIm9uRGlzYWJsZSIsIkFDVElPTl9NT0RFIiwiYWN0aW9uVHlwZSIsIlNFQVJDSF9DT01QT05FTlQiLCJFTkFCTEVfQ09NUE9ORU5UIiwiREVMRVRFX0NPTVBPTkVOVCIsImFsbG93RGVsZXRlIiwiUkVQTEFDRV9XQVRDSF9QQVRIIiwiY2FuQ29sbGVjdE5vZGVzIiwiTVZDb21wc0VkaXQiLCJnZXROb2RlUGF0aCIsInNldENvbXBvbmVudHMiLCJmaW5kTGlzdCIsInNlYXJjaENvbXBvbmVudCIsImNsYXNzTmFtZSIsImNvbGxlY3ROb2RlcyIsImV4dCIsInJlbW92ZUNvbXBvbmVudCIsInRhcmdldFBhdGgiLCJyZXBsYWNlUGF0aCIsInJlcGxhY2VOb2RlUGF0aCIsInNlYXJjaCIsInNlYXJjaEFyciIsInJlcGxhY2VBcnIiLCJnZXRQYXJlbnQiLCJyZXZlcnNlIiwiQ09NUF9BUlJBWV9DSEVDSyIsImNvbnRyb2xsZXIiLCJfVk1CYXNlIiwiVk1DdXN0b20iLCJfdGltZXIiLCJfd2F0Y2hDb21wb25lbnQiLCJfY2FuV2F0Y2hDb21wb25lbnQiLCJfb2xkVmFsdWUiLCJjaGVja0VkaXRvckNvbXBvbmVudCIsImNvbXBvbmVudE5hbWUiLCJjaGVja0NvbXBvbmVudFN0YXRlIiwib25SZXN0b3JlIiwiY2hlY2tBcnJheSIsImNvbXBvbmVudFByb3BlcnR5IiwiZ2V0Q29tcG9uZW50VmFsdWUiLCJzZXRDb21wb25lbnRWYWx1ZSIsImlzQ2hlY2tlZCIsIm9uVmFsdWVDb250cm9sbGVyIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsInJlZnJlc2hSYXRlIiwiRklMVEVSX01PREUiLCJmaWx0ZXJNb2RlIiwibm9uZSIsIlZNRXZlbnQiLCJuZXdWYXIiLCJvbGRWYXIiLCJjb25kaXRpb25DaGVjayIsImNvbXBhcmVWYWx1ZSIsImNoYW5nZUV2ZW50cyIsInRyaWdnZXJPbmNlIiwiY29kIiwiTEFCRUxfVFlQRSIsIlZNTGFiZWwiLCJ0ZW1wbGF0ZUZvcm1hdEFyciIsIm9yaWdpblRleHQiLCJjaGVja0xhYmVsIiwiZ2V0TGFiZWxWYWx1ZSIsInBhcnNlVGVtcGxhdGUiLCJtYXRjaEluZm8iLCJnZXRSZXBsYWNlVGV4dCIsImluZGV4TnVtIiwiZ2V0VmFsdWVGcm9tRm9ybWF0IiwiU3RyaW5nRm9ybWF0RnVuY3Rpb24iLCJzZXRMYWJlbFZhbHVlIiwibGFiZWxUeXBlIiwiQ0xBTVBfTU9ERSIsInZhbHVlQ2xhbXAiLCJ2YWx1ZUNsYW1wTW9kZSIsIk1BWCIsIk1JTiIsIlZNTW9kaWZ5IiwiY2xhbXBWYWx1ZSIsInZhbHVlTWluIiwidmFsdWVNYXgiLCJNSU5fTUFYIiwidkFkZEludCIsInZBZGQiLCJ2U3ViSW50IiwidlN1YiIsInZNdWxJbnQiLCJ2TXVsIiwidkRpdkludCIsInZEaXYiLCJpbnQiLCJwYXJzZUZsb2F0IiwidlN0cmluZyIsInZOdW1iZXJJbnQiLCJ2TnVtYmVyIiwiZ2V0Vk1Db21wb25lbnRzIiwicmVwbGFjZVZNUGF0aCIsIm9uQmluZCIsIm9uVW5CaW5kIiwicGFyZW50cyIsImZpbHRlcnMiLCJfVk1DdXN0b20iLCJWTVByb2dyZXNzIiwic3RyaW5nRm9ybWF0IiwiaXNOYU4iLCJDT05ESVRJT04iLCJBQ1RJT04iLCJDSElMRF9NT0RFX1RZUEUiLCJmb3JlYWNoQ2hpbGRNb2RlIiwidmFsdWVBY3Rpb24iLCJOT0RFX09QQUNJVFkiLCJOT0RFX0NPTE9SIiwiQ09NUE9ORU5UX0NVU1RPTSIsIlZNU3RhdGUiLCJ3YXRjaE5vZGVzIiwiTk9ERV9BQ1RJVkUiLCJjaGVja05vZGVGcm9tVmFsdWUiLCJmb3JlYWNoQ2hpbGRUeXBlIiwiTk9ERV9JTkRFWCIsInNldE5vZGVTdGF0ZSIsInZhbHVlQSIsInZhbHVlQiIsInNldE5vZGVzU3RhdGVzIiwiY2hlY2tTdGF0ZSIsIk5PREVfVklTSUJMRSIsInZhbHVlQWN0aW9uT3BhY2l0eSIsInVpciIsInZhbHVlQWN0aW9uQ29sb3IiLCJ2YWx1ZUNvbXBvbmVudE5hbWUiLCJ2YWx1ZUNvbXBvbmVudFByb3BlcnR5IiwidmFsdWVDb21wb25lbnRBY3Rpb25WYWx1ZSIsInZhbHVlQ29tcG9uZW50RGVmYXVsdFZhbHVlIiwiU1BSSVRFX0dSQVlTQ0FMRSIsIkJVVFRPTl9JTlRFUkFDVEFCTEUiLCJXZWJTb2NrIiwiX3dzIiwiV2ViU29ja2V0IiwiQ09OTkVDVElORyIsImlwIiwicG9ydCIsImJpbmFyeVR5cGUiLCJvbm1lc3NhZ2UiLCJvbm9wZW4iLCJvbmNsb3NlIiwiT1BFTiJdLCJtYXBwaW5ncyI6IndYQVVDQSxFQUFJQyxTQUFTLFVBQVVDLENBQUFDLFdBQUFDLEdBQUEsU0FBQUMsSUFBQSxJQUFBLElBQUFDLEVBQUFDLEVBQUFDLFVBQUFDLE9BQUFDLE1BQUFDLE1BQUFKLEdBQUFLLElBQUFBLEVBQUFMLEVBQUFLLElBQUFGLEVBQUFFLEdBQUFKLFVBQUFJLEdBRVIsT0FGUU4sRUFBQUYsRUFBQVMsS0FBQUMsTUFBQVYsU0FBQVcsT0FBQUwsV0FFcEJNLG9CQUFZVixFQUlYLE9BTm1CVyxFQUFBWixFQUFBRCxHQUVSQyxFQUFBYSxVQUVGQyxLQUFWLFdBQ0lDLEtBQUtDLGNBQXdCQyxJQUNoQ2pCLEdBTHdCTCxFQUFJdUIsVUFBTXBCLEtBTXRDcUIsSUFBQUM7O3VWQ0pBekIsRUFBSUMsU0FB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c0QsUUFDeEJqc0QsS0FBSzQzRSxJQUFJUSxRQUFVcDRFLEtBQUtrc0QsVUFDakIsR0FHWDFxRCxFQUlBc3FDLEtBQUEsU0FBSzRmLEdBQ0QsT0FBSTFyRCxLQUFLNDNFLEtBQU81M0UsS0FBSzQzRSxJQUFJcHNDLFlBQWNxc0MsVUFBVVEsTUFDN0NyNEUsS0FBSzQzRSxJQUFJOXJDLEtBQUs0ZixHQUNQLElBRUgsR0FHWmxxRCxFQUtBNHBCLE1BQUEsU0FBTXcrQixFQUFlQyxHQUNiN3BELEtBQUs0M0UsS0FDTDUzRSxLQUFLNDNFLElBQUl4c0QsTUFBTXcrQixFQUFNQyxJQUU1Qjh0QixRQUNKdjNFLElBQUFDIiwiZmlsZSI6ImFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjEtMTEtMTEgMTc6NDU6MjNcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDgtMDEgMTM6NDk6MzdcclxuICovXHJcbmltcG9ydCB7IGVjcyB9IGZyb20gXCIuLi8uLi8uLi8uLi9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9lY3MvRUNTXCI7XHJcbmltcG9ydCB7IEFjY291bnRNb2RlbENvbXAgfSBmcm9tIFwiLi9tb2RlbC9BY2NvdW50TW9kZWxDb21wXCI7XHJcblxyXG4vKiog6LSm5Y+35qih5Z2XICovXHJcbkBlY3MucmVnaXN0ZXIoJ0FjY291bnQnKVxyXG5leHBvcnQgY2xhc3MgQWNjb3VudCBleHRlbmRzIGVjcy5FbnRpdHkge1xyXG4gICAgQWNjb3VudE1vZGVsITogQWNjb3VudE1vZGVsQ29tcDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLmFkZENvbXBvbmVudHM8ZWNzLkNvbXA+KEFjY291bnRNb2RlbENvbXApO1xyXG4gICAgfVxyXG59IiwiXHJcblxyXG4vKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTExLTEyIDEwOjAyOjMxXHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA3LTI1IDE3OjAzOjQ1XHJcbiAqL1xyXG5pbXBvcnQgeyBlY3MgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL0VDU1wiO1xyXG5cclxuLyoqIFxyXG4gKiDmuLjmiI/otKblj7fmlbDmja4gXHJcbiAqL1xyXG5AZWNzLnJlZ2lzdGVyKCdBY2NvdW50TW9kZWwnKVxyXG5leHBvcnQgY2xhc3MgQWNjb3VudE1vZGVsQ29tcCBleHRlbmRzIGVjcy5Db21wIHtcclxuICAgIC8qKiDotKblj7flkI0gKi9cclxuICAgIEFjY291bnROYW1lOiBzdHJpbmcgPSBudWxsITtcclxuXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICB0aGlzLkFjY291bnROYW1lID0gbnVsbCE7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IHsgQ0NJbnRlZ2VyLCBDb21wb25lbnQsIE1hdGVyaWFsLCBTcHJpdGUsIF9kZWNvcmF0b3IgfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnQW1iaWxpZ2h0JylcclxuLyoqIOa1geWFieaViOaenCAqL1xyXG5leHBvcnQgY2xhc3MgQW1iaWxpZ2h0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgX21heDogbnVtYmVyID0gMTtcclxuICAgIEBwcm9wZXJ0eShDQ0ludGVnZXIpXHJcbiAgICBnZXQgbWF4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heDtcclxuICAgIH1cclxuICAgIHNldCBtYXgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX21heCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3N0YXJ0ID0gMDtcclxuICAgIF9tYXRlcmlhbCAhOiBNYXRlcmlhbDtcclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX21hdGVyaWFsID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChTcHJpdGUpIS5nZXRNYXRlcmlhbCgwKSE7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm5vZGUuYWN0aXZlICYmIHRoaXMuX21hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldFNoYWRlclRpbWUoZHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9zZXRTaGFkZXJUaW1lKGR0OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLl9zdGFydDtcclxuICAgICAgICBpZiAoc3RhcnQgPiB0aGlzLm1heCkgc3RhcnQgPSAwO1xyXG4gICAgICAgIHN0YXJ0ICs9IDAuMDE1O1xyXG4gICAgICAgIHRoaXMuX21hdGVyaWFsLnNldFByb3BlcnR5KCdzcGVlZCcsIHN0YXJ0KTtcclxuXHJcbiAgICAgICAgdGhpcy5fc3RhcnQgPSBzdGFydDtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgQW5pbWF0aW9uLCBBbmltYXRpb25TdGF0ZSwgX2RlY29yYXRvciB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgQW5pbWF0b3JCYXNlLCB7IEFuaW1hdGlvblBsYXllciB9IGZyb20gXCIuL2NvcmUvQW5pbWF0b3JCYXNlXCI7XHJcbmltcG9ydCB7IEFuaW1hdG9yU3RhdGVMb2dpYyB9IGZyb20gXCIuL2NvcmUvQW5pbWF0b3JTdGF0ZUxvZ2ljXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5LCByZXF1aXJlQ29tcG9uZW50LCBkaXNhbGxvd011bHRpcGxlLCBtZW51LCBoZWxwIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIFxyXG4gKiBDb2NvcyBBbmltYXRpb27nirbmgIHmnLrnu4Tku7ZcclxuICovXHJcbkBjY2NsYXNzXHJcbkBkaXNhbGxvd011bHRpcGxlXHJcbkByZXF1aXJlQ29tcG9uZW50KEFuaW1hdGlvbilcclxuQG1lbnUoJ09vcHNGcmFtZXdvcmsvQW5pbWF0b3IvQW5pbWF0b3JBbmltYXRpb24g77yI5Yqo55S754q25oCB5py677yJJylcclxuQGhlbHAoJ2h0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNjI3OSZkb2NfaWQ9Mjg3MzU2NScpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdG9yQW5pbWF0aW9uIGV4dGVuZHMgQW5pbWF0b3JCYXNlIHtcclxuICAgIC8qKiBBbmltYXRpb27nu4Tku7YgKi9cclxuICAgIHByb3RlY3RlZCBfYW5pbWF0aW9uOiBBbmltYXRpb24gPSBudWxsITtcclxuICAgIC8qKiDlvZPliY3nmoTliqjnlLvlrp7kvosgKi9cclxuICAgIHByb3RlY3RlZCBfYW5pbVN0YXRlOiBBbmltYXRpb25TdGF0ZSA9IG51bGwhO1xyXG4gICAgLyoqIOiusOW9leWIneWni+eahHdyYXBtb2RlICovXHJcbiAgICBwcm90ZWN0ZWQgX3dyYXBNb2RlTWFwOiBNYXA8QW5pbWF0aW9uU3RhdGUsIG51bWJlcj4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgcHJvdGVjdGVkIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5QbGF5T25TdGFydCB8fCB0aGlzLl9oYXNJbml0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGFzSW5pdCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbiA9IHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdGlvbikhO1xyXG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbi5vbihBbmltYXRpb24uRXZlbnRUeXBlLkZJTklTSEVELCB0aGlzLm9uQW5pbUZpbmlzaGVkLCB0aGlzKTtcclxuICAgICAgICB0aGlzLl9hbmltYXRpb24ub24oQW5pbWF0aW9uLkV2ZW50VHlwZS5MQVNURlJBTUUsIHRoaXMub25BbmltRmluaXNoZWQsIHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5Bc3NldFJhd1VybCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRKc29uKHRoaXMuQXNzZXRSYXdVcmwuanNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omL5Yqo5Yid5aeL5YyW54q25oCB5py677yM5Y+v5Lyg5YWlMC0z5Liq5Y+C5pWw77yM57G75Z6L5aaC5LiLXHJcbiAgICAgKiAtIG9uU3RhdGVDaGFuZ2VDYWxsIOeKtuaAgeWIh+aNouaXtueahOWbnuiwg1xyXG4gICAgICogLSBzdGF0ZUxvZ2ljTWFwIOWQhOS4queKtuaAgemAu+i+keaOp+WItlxyXG4gICAgICogLSBhbmltYXRpb25QbGF5ZXIg6Ieq5a6a5LmJ5Yqo55S75o6n5Yi2XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uSW5pdCguLi5hcmdzOiBBcnJheTxNYXA8c3RyaW5nLCBBbmltYXRvclN0YXRlTG9naWM+IHwgKChmcm9tU3RhdGU6IHN0cmluZywgdG9TdGF0ZTogc3RyaW5nKSA9PiB2b2lkKSB8IEFuaW1hdGlvblBsYXllcj4pIHtcclxuICAgICAgICBpZiAodGhpcy5QbGF5T25TdGFydCB8fCB0aGlzLl9oYXNJbml0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGFzSW5pdCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdEFyZ3MoLi4uYXJncyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbiA9IHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdGlvbikhO1xyXG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbi5vbihBbmltYXRpb24uRXZlbnRUeXBlLkZJTklTSEVELCB0aGlzLm9uQW5pbUZpbmlzaGVkLCB0aGlzKTtcclxuICAgICAgICB0aGlzLl9hbmltYXRpb24ub24oQW5pbWF0aW9uLkV2ZW50VHlwZS5MQVNURlJBTUUsIHRoaXMub25BbmltRmluaXNoZWQsIHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5Bc3NldFJhd1VybCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRKc29uKHRoaXMuQXNzZXRSYXdVcmwuanNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pKt5pS+5Yqo55S7XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqIEBwYXJhbSBhbmltTmFtZSDliqjnlLvlkI1cclxuICAgICAqIEBwYXJhbSBsb29wIOaYr+WQpuW+queOr+aSreaUvlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcGxheUFuaW1hdGlvbihhbmltTmFtZTogc3RyaW5nLCBsb29wOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKCFhbmltTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9hbmltYXRpb24ucGxheShhbmltTmFtZSk7XHJcbiAgICAgICAgdGhpcy5fYW5pbVN0YXRlID0gdGhpcy5fYW5pbWF0aW9uLmdldFN0YXRlKGFuaW1OYW1lKTtcclxuICAgICAgICBpZiAoIXRoaXMuX2FuaW1TdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5fd3JhcE1vZGVNYXAuaGFzKHRoaXMuX2FuaW1TdGF0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fd3JhcE1vZGVNYXAuc2V0KHRoaXMuX2FuaW1TdGF0ZSwgdGhpcy5fYW5pbVN0YXRlLndyYXBNb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYW5pbVN0YXRlLndyYXBNb2RlID0gbG9vcCA/IDIgOiB0aGlzLl93cmFwTW9kZU1hcC5nZXQodGhpcy5fYW5pbVN0YXRlKSE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnvKnmlL7liqjnlLvmkq3mlL7pgJ/njodcclxuICAgICAqIEBvdmVycmlkZVxyXG4gICAgICogQHBhcmFtIHNjYWxlIOe8qeaUvuWAjeeOh1xyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgc2NhbGVUaW1lKHNjYWxlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fYW5pbVN0YXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1TdGF0ZS5zcGVlZCA9IHNjYWxlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEpzb25Bc3NldCwgX2RlY29yYXRvciB9IGZyb20gJ2NjJztcclxuaW1wb3J0IEFuaW1hdG9yQ29udHJvbGxlciBmcm9tIFwiLi9BbmltYXRvckNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IEFuaW1hdG9yU3RhdGUgZnJvbSBcIi4vQW5pbWF0b3JTdGF0ZVwiO1xyXG5pbXBvcnQgeyBBbmltYXRvclN0YXRlTG9naWMgfSBmcm9tICcuL0FuaW1hdG9yU3RhdGVMb2dpYyc7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5LCBleGVjdXRpb25PcmRlciwgbWVudSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKlxyXG4gKiDoh6rlrprkuYnmjqfliLbliqjnlLvmkq3mlL7nmoTmjqXlj6NcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0aW9uUGxheWVyIHtcclxuICAgIC8qKiDorr7nva7liqjnlLvmkq3mlL7nu5PmnZ/nmoTlm57osIMgKi9cclxuICAgIG9uRmluaXNoZWRDYWxsYmFjayh0YXJnZXQ6IEFuaW1hdG9yQmFzZSk6IHZvaWQ7XHJcbiAgICAvKiog6K6+572u5Yqo55S75bin5LqL5Lu255qE5Zue6LCDICovXHJcbiAgICBvbkZyYW1lRXZlbnRDYWxsYmFjayh0eXBlOiBzdHJpbmcsIHRhcmdldDogQW5pbWF0b3JCYXNlKTogdm9pZFxyXG4gICAgLyoqIOaSreaUvuWKqOeUuyAqL1xyXG4gICAgcGxheUFuaW1hdGlvbihhbmltTmFtZTogc3RyaW5nLCBsb29wOiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKiDnvKnmlL7liqjnlLvmkq3mlL7pgJ/njocgKi9cclxuICAgIHNjYWxlVGltZShzY2FsZTogbnVtYmVyKTogdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIOeKtuaAgeacuue7hOS7tuWfuuexuyDkvJjlhYjmiafooYznlJ/lkb3lkajmnJ9cclxuICovXHJcbkBjY2NsYXNzXHJcbkBleGVjdXRpb25PcmRlcigtMTAwMClcclxuQG1lbnUoJ2FuaW1hdG9yL0FuaW1hdG9yQmFzZScpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdG9yQmFzZSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICAvKiogLS0tLS0tLS0tLSDlkI7nu63mianlsZXku6PnoIEg5byA5aeLIC0tLS0tLS0tLS0gKi9cclxuXHJcbiAgICAvKiog5LiJ57u06aqo6aq85Yqo55S75Yqo55S75bin6Ieq5a6a5LmJ5LqL5Lu2ICovXHJcbiAgICBwcml2YXRlIG9uRnJhbWVFdmVudChwYXJhbTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uUGxheWVyPy5vbkZyYW1lRXZlbnRDYWxsYmFjayhwYXJhbSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIC0tLS0tLS0tLS0g5ZCO57ut5omp5bGV5Luj56CBIOe7k+adnyAtLS0tLS0tLS0tICovXHJcblxyXG4gICAgQHByb3BlcnR5KHsgdHlwZTogSnNvbkFzc2V0LCB0b29sdGlwOiAn54q25oCB5py6anNvbuaWh+S7ticgfSlcclxuICAgIEFzc2V0UmF3VXJsOiBKc29uQXNzZXQgPSBudWxsITtcclxuXHJcbiAgICBAcHJvcGVydHkoeyB0b29sdGlwOiAn5piv5ZCm5Zyoc3RhcnTkuK3oh6rliqjlkK/liqjnirbmgIHmnLonIH0pXHJcbiAgICBQbGF5T25TdGFydDogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgQHByb3BlcnR5KHsgdG9vbHRpcDogJ+aYr+WQpuWcqHVwZGF0ZeS4reiHquWKqOinpuWPkeeKtuaAgeacuumAu+i+keabtOaWsCcgfSlcclxuICAgIEF1dG9VcGRhdGU6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIC8qKiDmmK/lkKbliJ3lp4vljJYgKi9cclxuICAgIHByb3RlY3RlZCBfaGFzSW5pdDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoqIOeKtuaAgeacuuaOp+WItiAqL1xyXG4gICAgcHJvdGVjdGVkIF9hYzogQW5pbWF0b3JDb250cm9sbGVyID0gbnVsbCE7XHJcblxyXG4gICAgLyoqIOWQhOS4queKtuaAgemAu+i+keaOp+WItu+8jGtleeS4uueKtuaAgeWQjSAqL1xyXG4gICAgcHJvdGVjdGVkIF9zdGF0ZUxvZ2ljTWFwOiBNYXA8c3RyaW5nLCBBbmltYXRvclN0YXRlTG9naWM+ID0gbnVsbCE7XHJcbiAgICAvKiog54q25oCB5YiH5o2i5pe255qE5Zue6LCDICovXHJcbiAgICBwcm90ZWN0ZWQgX29uU3RhdGVDaGFuZ2VDYWxsOiAoZnJvbVN0YXRlOiBzdHJpbmcsIHRvU3RhdGU6IHN0cmluZykgPT4gdm9pZCA9IG51bGwhO1xyXG4gICAgLyoqIOiHquWumuS5ieeahOWKqOeUu+aSreaUvuaOp+WItuWZqCAqL1xyXG4gICAgcHJvdGVjdGVkIF9hbmltYXRpb25QbGF5ZXI6IEFuaW1hdGlvblBsYXllciA9IG51bGwhO1xyXG5cclxuICAgIC8qKiDlvZPliY3nirbmgIHlkI0gKi9cclxuICAgIHB1YmxpYyBnZXQgY3VyU3RhdGVOYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjLmN1clN0YXRlLm5hbWU7XHJcbiAgICB9XHJcbiAgICAvKiog5b2T5YmN5Yqo55S75ZCNICovXHJcbiAgICBwdWJsaWMgZ2V0IGN1clN0YXRlTW90aW9uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjLmN1clN0YXRlLm1vdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6I635Y+W5oyH5a6a54q25oCBICovXHJcbiAgICBwdWJsaWMgZ2V0U3RhdGUobmFtZTogc3RyaW5nKTogQW5pbWF0b3JTdGF0ZSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjLnN0YXRlcy5nZXQobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmiYvliqjliJ3lp4vljJbnirbmgIHmnLrvvIzlj6/kvKDlhaUwLTPkuKrlj4LmlbDvvIznsbvlnovlpoLkuItcclxuICAgICAqIC0gb25TdGF0ZUNoYW5nZUNhbGwg54q25oCB5YiH5o2i5pe255qE5Zue6LCDXHJcbiAgICAgKiAtIHN0YXRlTG9naWNNYXAg5ZCE5Liq54q25oCB6YC76L6R5o6n5Yi2XHJcbiAgICAgKiAtIGFuaW1hdGlvblBsYXllciDoh6rlrprkuYnliqjnlLvmjqfliLZcclxuICAgICAqIEB2aXJ0dWFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvbkluaXQoLi4uYXJnczogQXJyYXk8TWFwPHN0cmluZywgQW5pbWF0b3JTdGF0ZUxvZ2ljPiB8ICgoZnJvbVN0YXRlOiBzdHJpbmcsIHRvU3RhdGU6IHN0cmluZykgPT4gdm9pZCkgfCBBbmltYXRpb25QbGF5ZXI+KSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlpITnkIbliJ3lp4vljJblj4LmlbBcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGluaXRBcmdzKC4uLmFyZ3M6IEFycmF5PE1hcDxzdHJpbmcsIEFuaW1hdG9yU3RhdGVMb2dpYz4gfCAoKGZyb21TdGF0ZTogc3RyaW5nLCB0b1N0YXRlOiBzdHJpbmcpID0+IHZvaWQpIHwgQW5pbWF0aW9uUGxheWVyPikge1xyXG4gICAgICAgIGFyZ3MuZm9yRWFjaCgoYXJnKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghYXJnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uU3RhdGVDaGFuZ2VDYWxsID0gYXJnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJnIGluc3RhbmNlb2YgTWFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVMb2dpY01hcCA9IGFyZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvblBsYXllciA9IGFyZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlQW5pbWF0b3IoKSB7XHJcbiAgICAgICAgLy8g5re35ZCI5b2T5YmN5Yqo55S75pKt5pS+6YCf5bqmXHJcbiAgICAgICAgbGV0IHBsYXlTcGVlZCA9IHRoaXMuX2FjLmN1clN0YXRlLnNwZWVkO1xyXG4gICAgICAgIGlmICh0aGlzLl9hYy5jdXJTdGF0ZS5tdWx0aSkge1xyXG4gICAgICAgICAgICBwbGF5U3BlZWQgKj0gdGhpcy5fYWMucGFyYW1zLmdldE51bWJlcih0aGlzLl9hYy5jdXJTdGF0ZS5tdWx0aSkgPz8gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zY2FsZVRpbWUocGxheVNwZWVkKTtcclxuXHJcbiAgICAgICAgLy8g5pu05paw5Yqo55S754q25oCB6YC76L6RXHJcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlTG9naWNNYXApIHtcclxuICAgICAgICAgICAgbGV0IGN1ckxvZ2ljID0gdGhpcy5fc3RhdGVMb2dpY01hcC5nZXQodGhpcy5fYWMuY3VyU3RhdGUubmFtZSk7XHJcbiAgICAgICAgICAgIGN1ckxvZ2ljICYmIGN1ckxvZ2ljLm9uVXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmm7TmlrDnirbmgIHmnLrpgLvovpFcclxuICAgICAgICB0aGlzLl9hYy51cGRhdGVBbmltYXRvcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCB1cGRhdGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hhc0luaXQgJiYgdGhpcy5BdXRvVXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQW5pbWF0b3IoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmiYvliqjosIPnlKjmm7TmlrBcclxuICAgICAqL1xyXG4gICAgcHVibGljIG1hbnVhbFVwZGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5faGFzSW5pdCAmJiAhdGhpcy5BdXRvVXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQW5pbWF0b3IoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop6PmnpDnirbmgIHmnLpqc29u5paH5Lu2XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBpbml0SnNvbihqc29uOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9hYyA9IG5ldyBBbmltYXRvckNvbnRyb2xsZXIodGhpcywganNvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliqjnlLvnu5PmnZ/nmoTlm57osINcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG9uQW5pbUZpbmlzaGVkKCkge1xyXG4gICAgICAgIHRoaXMuX2FjLm9uQW5pbWF0aW9uQ29tcGxldGUoKTtcclxuICAgICAgICB0aGlzLl9hbmltYXRpb25QbGF5ZXI/Lm9uRmluaXNoZWRDYWxsYmFjayh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaSreaUvuWKqOeUu1xyXG4gICAgICogQHZpcnR1YWxcclxuICAgICAqIEBwYXJhbSBhbmltTmFtZSDliqjnlLvlkI1cclxuICAgICAqIEBwYXJhbSBsb29wIOaYr+WQpuW+queOr+aSreaUvlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcGxheUFuaW1hdGlvbihhbmltTmFtZTogc3RyaW5nLCBsb29wOiBib29sZWFuKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnvKnmlL7liqjnlLvmkq3mlL7pgJ/njodcclxuICAgICAqIEB2aXJ0dWFsXHJcbiAgICAgKiBAcGFyYW0gc2NhbGUg57yp5pS+5YCN546HXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBzY2FsZVRpbWUoc2NhbGU6IG51bWJlcikge1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBcclxuICAgICAqIOeKtuaAgeWIh+aNouaXtueahOmAu+i+ke+8iOeKtuaAgeacuuWGhemDqOaWueazle+8jOS4jeiDveeUseWklumDqOebtOaOpeiwg+eUqO+8iVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25TdGF0ZUNoYW5nZShmcm9tU3RhdGU6IEFuaW1hdG9yU3RhdGUsIHRvU3RhdGU6IEFuaW1hdG9yU3RhdGUpIHtcclxuICAgICAgICB0aGlzLnBsYXlBbmltYXRpb24odG9TdGF0ZS5tb3Rpb24sIHRvU3RhdGUubG9vcCk7XHJcblxyXG4gICAgICAgIGxldCBmcm9tU3RhdGVOYW1lID0gZnJvbVN0YXRlID8gZnJvbVN0YXRlLm5hbWUgOiAnJztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlTG9naWNNYXApIHtcclxuICAgICAgICAgICAgbGV0IGZyb21Mb2dpYyA9IHRoaXMuX3N0YXRlTG9naWNNYXAuZ2V0KGZyb21TdGF0ZU5hbWUpO1xyXG4gICAgICAgICAgICBmcm9tTG9naWMgJiYgZnJvbUxvZ2ljLm9uRXhpdCgpO1xyXG4gICAgICAgICAgICBsZXQgdG9Mb2dpYyA9IHRoaXMuX3N0YXRlTG9naWNNYXAuZ2V0KHRvU3RhdGUubmFtZSk7XHJcbiAgICAgICAgICAgIHRvTG9naWMgJiYgdG9Mb2dpYy5vbkVudHJ5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9vblN0YXRlQ2hhbmdlQ2FsbCAmJiB0aGlzLl9vblN0YXRlQ2hhbmdlQ2FsbChmcm9tU3RhdGVOYW1lLCB0b1N0YXRlLm5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572uYm9vbGVhbuexu+Wei+WPguaVsOeahOWAvFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Qm9vbChrZXk6IHN0cmluZywgdmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9hYy5wYXJhbXMuc2V0Qm9vbChrZXksIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlmJvb2xlYW7nsbvlnovlj4LmlbDnmoTlgLxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEJvb2woa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWMucGFyYW1zLmdldEJvb2woa2V5KSAhPT0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9rm51bWJlcuexu+Wei+WPguaVsOeahOWAvFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0TnVtYmVyKGtleTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fYWMucGFyYW1zLnNldE51bWJlcihrZXksIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlm51bWJlcuexu+Wei+WPguaVsOeahOWAvFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TnVtYmVyKGtleTogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWMucGFyYW1zLmdldE51bWJlcihrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572udHJpZ2dlcuexu+Wei+WPguaVsOeahOWAvFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0VHJpZ2dlcihrZXk6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2FjLnBhcmFtcy5zZXRUcmlnZ2VyKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDph43nva50cmlnZ2Vy57G75Z6L5Y+C5pWw55qE5YC8XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZXNldFRyaWdnZXIoa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9hYy5wYXJhbXMucmVzZXRUcmlnZ2VyKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva5hdXRvVHJpZ2dlcuexu+Wei+WPguaVsOeahOWAvO+8iGF1dG9UcmlnZ2Vy57G75Z6L5Y+C5pWw5LiN6ZyA6KaB5Li75YqocmVzZXTvvIzmr4/mrKHnirbmgIHmnLrmm7TmlrDnu5PmnZ/lkI7kvJroh6rliqhyZXNldO+8iVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYXV0b1RyaWdnZXIoa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9hYy5wYXJhbXMuYXV0b1RyaWdnZXIoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaXoOinhuadoeS7tuebtOaOpei3s+i9rOeKtuaAgVxyXG4gICAgICogQHBhcmFtIOeKtuaAgeWQjVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGxheShzdGF0ZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghdGhpcy5faGFzSW5pdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2FjLnBsYXkoc3RhdGVOYW1lKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBlcnJvciB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgQW5pbWF0b3JDb250cm9sbGVyIGZyb20gXCIuL0FuaW1hdG9yQ29udHJvbGxlclwiO1xyXG5cclxuLyoqIOWPguaVsOexu+WeiyAqL1xyXG5leHBvcnQgZW51bSBQYXJhbVR5cGUge1xyXG4gICAgQ09NUExFVEUgPSAwLFxyXG4gICAgQk9PTEVBTiA9IDEsXHJcbiAgICBOVU1CRVIgPSAyLFxyXG4gICAgVFJJR0dFUiA9IDMsXHJcbiAgICBBVVRPX1RSSUdHRVIgPSA0XHJcbn1cclxuXHJcbi8qKiDpgLvovpHnsbvlnosgKi9cclxuZXhwb3J0IGVudW0gTG9naWNUeXBlIHtcclxuICAgIEVRVUFMID0gMCxcclxuICAgIE5PVEVRVUFMID0gMSxcclxuICAgIEdSRUFURVIgPSAyLFxyXG4gICAgTEVTUyA9IDMsXHJcbiAgICBHUkVBVEVSX0VRVUFMID0gNCxcclxuICAgIExFU1NfRVFVQUwgPSA1XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDljZXpobnmnaHku7ZcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdG9yQ29uZGl0aW9uIHtcclxuICAgIHByaXZhdGUgX2FjOiBBbmltYXRvckNvbnRyb2xsZXI7XHJcbiAgICAvKiog5q2k5p2h5Lu25a+55bqU55qE5Y+C5pWw5ZCNICovXHJcbiAgICBwcml2YXRlIF9wYXJhbTogc3RyaW5nID0gXCJcIjtcclxuICAgIC8qKiDmraTmnaHku7blr7nlupTnmoTlgLwgKi9cclxuICAgIHByaXZhdGUgX3ZhbHVlOiBudW1iZXIgPSAwO1xyXG4gICAgLyoqIOatpOadoeS7tuS4juWAvOavlOi+g+eahOmAu+i+kSAqL1xyXG4gICAgcHJpdmF0ZSBfbG9naWM6IExvZ2ljVHlwZSA9IExvZ2ljVHlwZS5FUVVBTDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBhbnksIGFjOiBBbmltYXRvckNvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLl9hYyA9IGFjO1xyXG4gICAgICAgIHRoaXMuX3BhcmFtID0gZGF0YS5wYXJhbTtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbG9naWMgPSBkYXRhLmxvZ2ljO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQYXJhbU5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQYXJhbVR5cGUoKTogUGFyYW1UeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWMucGFyYW1zLmdldFBhcmFtVHlwZSh0aGlzLl9wYXJhbSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWIpOaWreatpOadoeS7tuaYr+WQpua7oei2syAqL1xyXG4gICAgcHVibGljIGNoZWNrKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCB0eXBlOiBQYXJhbVR5cGUgPSB0aGlzLmdldFBhcmFtVHlwZSgpO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBQYXJhbVR5cGUuQk9PTEVBTikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWMucGFyYW1zLmdldEJvb2wodGhpcy5fcGFyYW0pID09PSB0aGlzLl92YWx1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFBhcmFtVHlwZS5OVU1CRVIpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlOiBudW1iZXIgPSB0aGlzLl9hYy5wYXJhbXMuZ2V0TnVtYmVyKHRoaXMuX3BhcmFtKTtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9sb2dpYykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBMb2dpY1R5cGUuRVFVQUw6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0aGlzLl92YWx1ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgTG9naWNUeXBlLk5PVEVRVUFMOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIExvZ2ljVHlwZS5HUkVBVEVSOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA+IHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBMb2dpY1R5cGUuTEVTUzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPCB0aGlzLl92YWx1ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgTG9naWNUeXBlLkdSRUFURVJfRVFVQUw6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID49IHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBMb2dpY1R5cGUuTEVTU19FUVVBTDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPD0gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gUGFyYW1UeXBlLkFVVE9fVFJJR0dFUikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWMucGFyYW1zLmdldEF1dG9UcmlnZ2VyKHRoaXMuX3BhcmFtKSAhPT0gMDtcclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFBhcmFtVHlwZS5UUklHR0VSKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hYy5wYXJhbXMuZ2V0VHJpZ2dlcih0aGlzLl9wYXJhbSkgIT09IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZXJyb3IoYFtBbmltYXRvckNvbmRpdGlvbi5jaGVja10g6ZSZ6K+v55qEdHlwZTogJHt0eXBlfWApO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGVycm9yIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCBBbmltYXRvckJhc2UgZnJvbSBcIi4vQW5pbWF0b3JCYXNlXCI7XHJcbmltcG9ydCBBbmltYXRvclBhcmFtcyBmcm9tIFwiLi9BbmltYXRvclBhcmFtc1wiO1xyXG5pbXBvcnQgQW5pbWF0b3JTdGF0ZSBmcm9tIFwiLi9BbmltYXRvclN0YXRlXCI7XHJcblxyXG4vKipcclxuICog54q25oCB5py65o6n5Yi257G7XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRvckNvbnRyb2xsZXIge1xyXG4gICAgcHJpdmF0ZSBfanNvbkRhdGE6IGFueSA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9hbmltYXRvcjogQW5pbWF0b3JCYXNlID0gbnVsbCE7XHJcblxyXG4gICAgcHJpdmF0ZSBfcGFyYW1zOiBBbmltYXRvclBhcmFtcyA9IG51bGwhO1xyXG4gICAgcHJpdmF0ZSBfc3RhdGVzOiBNYXA8c3RyaW5nLCBBbmltYXRvclN0YXRlPiA9IG51bGwhO1xyXG4gICAgcHJpdmF0ZSBfYW55U3RhdGU6IEFuaW1hdG9yU3RhdGUgPSBudWxsITtcclxuICAgIHByaXZhdGUgX2N1clN0YXRlOiBBbmltYXRvclN0YXRlID0gbnVsbCE7XHJcblxyXG4gICAgLyoqIOeKtuaAgeWIh+aNouasoeaVsCAqL1xyXG4gICAgcHJpdmF0ZSBfY2hhbmdlQ291bnQ6IG51bWJlciA9IDA7XHJcbiAgICAvKiog5a+55bqUYW5pbUNvbXBsZXRl55qE54q25oCBICovXHJcbiAgICBwdWJsaWMgYW5pbUNvbXBsZXRlU3RhdGU6IEFuaW1hdG9yU3RhdGUgPSBudWxsITtcclxuICAgIC8qKiDliqjnlLvmkq3mlL7lrozmr5XnmoTmoIforrAgKi9cclxuICAgIHB1YmxpYyBhbmltQ29tcGxldGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8qKiDlvZPliY3ov5DooYznmoTnirbmgIEgKi9cclxuICAgIHB1YmxpYyBnZXQgY3VyU3RhdGUoKTogQW5pbWF0b3JTdGF0ZSB7IHJldHVybiB0aGlzLl9jdXJTdGF0ZTsgfVxyXG4gICAgcHVibGljIGdldCBwYXJhbXMoKTogQW5pbWF0b3JQYXJhbXMgeyByZXR1cm4gdGhpcy5fcGFyYW1zOyB9XHJcbiAgICBwdWJsaWMgZ2V0IHN0YXRlcygpOiBNYXA8c3RyaW5nLCBBbmltYXRvclN0YXRlPiB7IHJldHVybiB0aGlzLl9zdGF0ZXMgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHBsYXllcjogQW5pbWF0b3JCYXNlLCBqc29uOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9hbmltYXRvciA9IHBsYXllcjtcclxuICAgICAgICB0aGlzLl9qc29uRGF0YSA9IGpzb247XHJcbiAgICAgICAgdGhpcy5fc3RhdGVzID0gbmV3IE1hcDxzdHJpbmcsIEFuaW1hdG9yU3RhdGU+KCk7XHJcbiAgICAgICAgdGhpcy5fcGFyYW1zID0gbmV3IEFuaW1hdG9yUGFyYW1zKGpzb24ucGFyYW1ldGVycyk7XHJcbiAgICAgICAgdGhpcy5pbml0KGpzb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yid5aeL5YyW54q25oCB5py65omA5pyJ5Yqo55S754q25oCBXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaW5pdChqc29uOiBhbnkpIHtcclxuICAgICAgICBpZiAoanNvbi5zdGF0ZXMubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgZXJyb3IoYFtBbmltYXRvckNvbnRyb2xsZXIuaW5pdF0g54q25oCB5py6anNvbumUmeivr2ApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZGVmYXVsdFN0YXRlOiBzdHJpbmcgPSBqc29uLmRlZmF1bHRTdGF0ZTtcclxuICAgICAgICB0aGlzLl9hbnlTdGF0ZSA9IG5ldyBBbmltYXRvclN0YXRlKGpzb24uYW55U3RhdGUsIHRoaXMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwganNvbi5zdGF0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHN0YXRlOiBBbmltYXRvclN0YXRlID0gbmV3IEFuaW1hdG9yU3RhdGUoanNvbi5zdGF0ZXNbaV0sIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZXMuc2V0KHN0YXRlLm5hbWUsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShkZWZhdWx0U3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlU3RhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5fY3VyU3RhdGUuY2hlY2tBbmRUcmFucygpO1xyXG4gICAgICAgIGlmICh0aGlzLl9jdXJTdGF0ZSAhPT0gdGhpcy5fYW55U3RhdGUgJiYgdGhpcy5fYW55U3RhdGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fYW55U3RhdGUuY2hlY2tBbmRUcmFucygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOabtOaWsOeKtuaAgeacuumAu+i+kVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBkYXRlQW5pbWF0b3IoKSB7XHJcbiAgICAgICAgLy8g6YeN572u6K6h5pWwXHJcbiAgICAgICAgdGhpcy5fY2hhbmdlQ291bnQgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XHJcblxyXG4gICAgICAgIC8vIOmHjee9ruWKqOeUu+WujOaIkOagh+iusFxyXG4gICAgICAgIGlmICh0aGlzLmFuaW1Db21wbGV0ZSAmJiB0aGlzLmFuaW1Db21wbGV0ZVN0YXRlLmxvb3ApIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltQ29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6YeN572uYXV0b1RyaWdnZXJcclxuICAgICAgICB0aGlzLnBhcmFtcy5yZXNldEFsbEF1dG9UcmlnZ2VyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uQW5pbWF0aW9uQ29tcGxldGUoKSB7XHJcbiAgICAgICAgdGhpcy5hbmltQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYW5pbUNvbXBsZXRlU3RhdGUgPSB0aGlzLl9jdXJTdGF0ZTtcclxuICAgICAgICAvLyBjYy5sb2coYGFuaW1hdGlvbiBjb21wbGV0ZTogJHt0aGlzLl9jdXJTdGF0ZS5uYW1lfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5peg6KeG5p2h5Lu255u05o6l6Lez6L2s54q25oCBXHJcbiAgICAgKiBAcGFyYW0g54q25oCB5ZCNXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwbGF5KHN0YXRlTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9zdGF0ZXMuaGFzKHN0YXRlTmFtZSkgfHwgdGhpcy5fY3VyU3RhdGUubmFtZSA9PT0gc3RhdGVOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmHjee9ruWKqOeUu+WujOaIkOagh+iusFxyXG4gICAgICAgIHRoaXMuYW5pbUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShzdGF0ZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YiH5o2i5Yqo55S754q25oCBXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjaGFuZ2VTdGF0ZShzdGF0ZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2NoYW5nZUNvdW50Kys7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NoYW5nZUNvdW50ID4gMTAwMCkge1xyXG4gICAgICAgICAgICBlcnJvcignW0FuaW1hdG9yQ29udHJvbGxlci5jaGFuZ2VTdGF0ZV0gZXJyb3I6IOeKtuaAgeWIh+aNoumAkuW9kuiwg+eUqOi2hei/hzEwMDDmrKHvvIx0cmFuc2l0aW9u6K6+572u5Y+v6IO95Ye66ZSZIScpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fc3RhdGVzLmhhcyhzdGF0ZU5hbWUpICYmICh0aGlzLl9jdXJTdGF0ZSA9PT0gbnVsbCB8fCB0aGlzLl9jdXJTdGF0ZS5uYW1lICE9PSBzdGF0ZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIGxldCBvbGRTdGF0ZSA9IHRoaXMuX2N1clN0YXRlO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJTdGF0ZSA9IHRoaXMuX3N0YXRlcy5nZXQoc3RhdGVOYW1lKSE7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRvci5vblN0YXRlQ2hhbmdlKG9sZFN0YXRlLCB0aGlzLl9jdXJTdGF0ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlcnJvcihgW0FuaW1hdG9yQ29udHJvbGxlci5jaGFuZ2VTdGF0ZV0gZXJyb3Igc3RhdGU6ICR7c3RhdGVOYW1lfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCBBbmltYXRvckJhc2UsIHsgQW5pbWF0aW9uUGxheWVyIH0gZnJvbSBcIi4vY29yZS9BbmltYXRvckJhc2VcIjtcclxuaW1wb3J0IHsgQW5pbWF0b3JTdGF0ZUxvZ2ljIH0gZnJvbSBcIi4vY29yZS9BbmltYXRvclN0YXRlTG9naWNcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHksIGRpc2FsbG93TXVsdGlwbGUsIG1lbnUsIGhlbHAgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiogXHJcbiAqIOiHquWumuS5ieWKqOeUu+aOp+WItueahOeKtuaAgeacuue7hOS7tlxyXG4gKi9cclxuQGNjY2xhc3NcclxuQGRpc2FsbG93TXVsdGlwbGVcclxuQG1lbnUoJ09vcHNGcmFtZXdvcmsvQW5pbWF0b3IvQW5pbWF0b3JDdXN0b21pemF0aW9uIO+8iOiHquWumuS5ieeKtuaAgeacuu+8iScpXHJcbkBoZWxwKCdodHRwczovL2dpdGVlLmNvbS9kZ2ZsYXNoL29vcHMtZnJhbWV3b3JrL3dpa2lzL3BhZ2VzP3NvcnRfaWQ9MTIwMzYyNzkmZG9jX2lkPTI4NzM1NjUnKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRvckN1c3RvbWl6YXRpb24gZXh0ZW5kcyBBbmltYXRvckJhc2Uge1xyXG4gICAgLyoqIOatpOe7hOS7tuW/hemhu+S4u+WKqOiwg+eUqG9uSW5pdOWIneWni+WMliAqL1xyXG4gICAgQHByb3BlcnR5KHsgb3ZlcnJpZGU6IHRydWUsIHZpc2libGU6IGZhbHNlIH0pXHJcbiAgICBQbGF5T25TdGFydDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omL5Yqo5Yid5aeL5YyW54q25oCB5py677yM5Y+v5Lyg5YWlMC0z5Liq5Y+C5pWw77yM57G75Z6L5aaC5LiLXHJcbiAgICAgKiAtIG9uU3RhdGVDaGFuZ2VDYWxsIOeKtuaAgeWIh+aNouaXtueahOWbnuiwg1xyXG4gICAgICogLSBzdGF0ZUxvZ2ljTWFwIOWQhOS4queKtuaAgemAu+i+keaOp+WItlxyXG4gICAgICogLSBhbmltYXRpb25QbGF5ZXIg6Ieq5a6a5LmJ5Yqo55S75o6n5Yi2XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uSW5pdCguLi5hcmdzOiBBcnJheTxNYXA8c3RyaW5nLCBBbmltYXRvclN0YXRlTG9naWM+IHwgKChmcm9tU3RhdGU6IHN0cmluZywgdG9TdGF0ZTogc3RyaW5nKSA9PiB2b2lkKSB8IEFuaW1hdGlvblBsYXllcj4pIHtcclxuICAgICAgICBpZiAodGhpcy5faGFzSW5pdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2hhc0luaXQgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRBcmdzKC4uLmFyZ3MpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5Bc3NldFJhd1VybCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRKc29uKHRoaXMuQXNzZXRSYXdVcmwuanNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pKt5pS+5Yqo55S7XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqIEBwYXJhbSBhbmltTmFtZSDliqjnlLvlkI1cclxuICAgICAqIEBwYXJhbSBsb29wIOaYr+WQpuW+queOr+aSreaUvlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcGxheUFuaW1hdGlvbihhbmltTmFtZTogc3RyaW5nLCBsb29wOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvblBsYXllciAmJiBhbmltTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25QbGF5ZXIucGxheUFuaW1hdGlvbihhbmltTmFtZSwgbG9vcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57yp5pS+5Yqo55S75pKt5pS+6YCf546HXHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqIEBwYXJhbSBzY2FsZSDnvKnmlL7lgI3njodcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHNjYWxlVGltZShzY2FsZTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvblBsYXllcikge1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25QbGF5ZXIuc2NhbGVUaW1lKHNjYWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgZHJhZ29uQm9uZXMgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IEFuaW1hdG9yQmFzZSwgeyBBbmltYXRpb25QbGF5ZXIgfSBmcm9tIFwiLi9jb3JlL0FuaW1hdG9yQmFzZVwiO1xyXG5pbXBvcnQgeyBBbmltYXRvclN0YXRlTG9naWMgfSBmcm9tIFwiLi9jb3JlL0FuaW1hdG9yU3RhdGVMb2dpY1wiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgcmVxdWlyZUNvbXBvbmVudCwgZGlzYWxsb3dNdWx0aXBsZSwgbWVudSwgaGVscCB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiBcclxuICogRHJhZ29uQm9uZXPnirbmgIHmnLrnu4Tku7ZcclxuICovXHJcbkBjY2NsYXNzXHJcbkBkaXNhbGxvd011bHRpcGxlXHJcbkByZXF1aXJlQ29tcG9uZW50KGRyYWdvbkJvbmVzLkFybWF0dXJlRGlzcGxheSlcclxuQG1lbnUoJ09vcHNGcmFtZXdvcmsvQW5pbWF0b3IvQW5pbWF0b3JEcmFnb25Cb25lcyDvvIjpvpnpqqjnirbmgIHmnLrvvIknKVxyXG5AaGVscCgnaHR0cHM6Ly9naXRlZS5jb20vZGdmbGFzaC9vb3BzLWZyYW1ld29yay93aWtpcy9wYWdlcz9zb3J0X2lkPTEyMDM2Mjc5JmRvY19pZD0yODczNTY1JylcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0b3JEcmFnb25Cb25lcyBleHRlbmRzIEFuaW1hdG9yQmFzZSB7XHJcbiAgICAvKiogRHJhZ29uQm9uZXPnu4Tku7YgKi9cclxuICAgIHByaXZhdGUgX2RyYWdvbkJvbmVzOiBkcmFnb25Cb25lcy5Bcm1hdHVyZURpc3BsYXkgPSBudWxsITtcclxuXHJcbiAgICBwcm90ZWN0ZWQgc3RhcnQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLlBsYXlPblN0YXJ0IHx8IHRoaXMuX2hhc0luaXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9oYXNJbml0ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXMgPSB0aGlzLmdldENvbXBvbmVudChkcmFnb25Cb25lcy5Bcm1hdHVyZURpc3BsYXkpITtcclxuICAgICAgICB0aGlzLl9kcmFnb25Cb25lcy5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIHRoaXMub25BbmltRmluaXNoZWQsIHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5Bc3NldFJhd1VybCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRKc29uKHRoaXMuQXNzZXRSYXdVcmwuanNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omL5Yqo5Yid5aeL5YyW54q25oCB5py677yM5Y+v5Lyg5YWlMC0z5Liq5Y+C5pWw77yM57G75Z6L5aaC5LiLXHJcbiAgICAgKiAtIG9uU3RhdGVDaGFuZ2VDYWxsIOeKtuaAgeWIh+aNouaXtueahOWbnuiwg1xyXG4gICAgICogLSBzdGF0ZUxvZ2ljTWFwIOWQhOS4queKtuaAgemAu+i+keaOp+WItlxyXG4gICAgICogLSBhbmltYXRpb25QbGF5ZXIg6Ieq5a6a5LmJ5Yqo55S75o6n5Yi2XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uSW5pdCguLi5hcmdzOiBBcnJheTxNYXA8c3RyaW5nLCBBbmltYXRvclN0YXRlTG9naWM+IHwgKChmcm9tU3RhdGU6IHN0cmluZywgdG9TdGF0ZTogc3RyaW5nKSA9PiB2b2lkKSB8IEFuaW1hdGlvblBsYXllcj4pIHtcclxuICAgICAgICBpZiAodGhpcy5QbGF5T25TdGFydCB8fCB0aGlzLl9oYXNJbml0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGFzSW5pdCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdEFyZ3MoLi4uYXJncyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzID0gdGhpcy5nZXRDb21wb25lbnQoZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5KSE7XHJcbiAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXMuYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCB0aGlzLm9uQW5pbUZpbmlzaGVkLCB0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuQXNzZXRSYXdVcmwgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0SnNvbih0aGlzLkFzc2V0UmF3VXJsLmpzb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaSreaUvuWKqOeUu1xyXG4gICAgICogQG92ZXJyaWRlXHJcbiAgICAgKiBAcGFyYW0gYW5pbU5hbWUg5Yqo55S75ZCNXHJcbiAgICAgKiBAcGFyYW0gbG9vcCDmmK/lkKblvqrnjq/mkq3mlL5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHBsYXlBbmltYXRpb24oYW5pbU5hbWU6IHN0cmluZywgbG9vcDogYm9vbGVhbikge1xyXG4gICAgICAgIGlmIChhbmltTmFtZSlcclxuICAgICAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXMucGxheUFuaW1hdGlvbihhbmltTmFtZSwgbG9vcCA/IDAgOiAtMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnvKnmlL7liqjnlLvmkq3mlL7pgJ/njodcclxuICAgICAqIEBvdmVycmlkZVxyXG4gICAgICogQHBhcmFtIHNjYWxlIOe8qeaUvuWAjeeOh1xyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgc2NhbGVUaW1lKHNjYWxlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoc2NhbGUgPiAwKVxyXG4gICAgICAgICAgICB0aGlzLl9kcmFnb25Cb25lcy50aW1lU2NhbGUgPSBzY2FsZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBQYXJhbVR5cGUgfSBmcm9tIFwiLi9BbmltYXRvckNvbmRpdGlvblwiO1xyXG5cclxuLyoqXHJcbiAqIOWPguaVsOe7k+aehFxyXG4gKi9cclxuaW50ZXJmYWNlIFBhcmFtIHtcclxuICAgIHR5cGU6IFBhcmFtVHlwZTtcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDnirbmgIHmnLrlj4LmlbBcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdG9yUGFyYW1zIHtcclxuICAgIHByaXZhdGUgX3BhcmFtTWFwOiBNYXA8c3RyaW5nLCBQYXJhbT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YUFycjogYW55W10pIHtcclxuICAgICAgICBkYXRhQXJyLmZvckVhY2goKGRhdGE6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW06IFBhcmFtID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogZGF0YS50eXBlLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEuaW5pdFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJhbU1hcC5zZXQoZGF0YS5wYXJhbSwgcGFyYW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQYXJhbVR5cGUoa2V5OiBzdHJpbmcpOiBQYXJhbVR5cGUge1xyXG4gICAgICAgIGxldCBwYXJhbTogUGFyYW0gPSB0aGlzLl9wYXJhbU1hcC5nZXQoa2V5KSE7XHJcbiAgICAgICAgaWYgKHBhcmFtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJhbS50eXBlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsITtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldE51bWJlcihrZXk6IHN0cmluZywgdmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBwYXJhbTogUGFyYW0gPSB0aGlzLl9wYXJhbU1hcC5nZXQoa2V5KSE7XHJcbiAgICAgICAgaWYgKHBhcmFtICYmIHBhcmFtLnR5cGUgPT09IFBhcmFtVHlwZS5OVU1CRVIpIHtcclxuICAgICAgICAgICAgcGFyYW0udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEJvb2woa2V5OiBzdHJpbmcsIHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IHBhcmFtOiBQYXJhbSA9IHRoaXMuX3BhcmFtTWFwLmdldChrZXkpITtcclxuICAgICAgICBpZiAocGFyYW0gJiYgcGFyYW0udHlwZSA9PT0gUGFyYW1UeXBlLkJPT0xFQU4pIHtcclxuICAgICAgICAgICAgcGFyYW0udmFsdWUgPSB2YWx1ZSA/IDEgOiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VHJpZ2dlcihrZXk6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBwYXJhbTogUGFyYW0gPSB0aGlzLl9wYXJhbU1hcC5nZXQoa2V5KSE7XHJcbiAgICAgICAgaWYgKHBhcmFtICYmIHBhcmFtLnR5cGUgPT09IFBhcmFtVHlwZS5UUklHR0VSKSB7XHJcbiAgICAgICAgICAgIHBhcmFtLnZhbHVlID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlc2V0VHJpZ2dlcihrZXk6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBwYXJhbTogUGFyYW0gPSB0aGlzLl9wYXJhbU1hcC5nZXQoa2V5KSE7XHJcbiAgICAgICAgaWYgKHBhcmFtICYmIHBhcmFtLnR5cGUgPT09IFBhcmFtVHlwZS5UUklHR0VSKSB7XHJcbiAgICAgICAgICAgIHBhcmFtLnZhbHVlID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGF1dG9UcmlnZ2VyKGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHBhcmFtOiBQYXJhbSA9IHRoaXMuX3BhcmFtTWFwLmdldChrZXkpITtcclxuICAgICAgICBpZiAocGFyYW0gJiYgcGFyYW0udHlwZSA9PT0gUGFyYW1UeXBlLkFVVE9fVFJJR0dFUikge1xyXG4gICAgICAgICAgICBwYXJhbS52YWx1ZSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXNldEF1dG9UcmlnZ2VyKGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHBhcmFtOiBQYXJhbSA9IHRoaXMuX3BhcmFtTWFwLmdldChrZXkpITtcclxuICAgICAgICBpZiAocGFyYW0gJiYgcGFyYW0udHlwZSA9PT0gUGFyYW1UeXBlLkFVVE9fVFJJR0dFUikge1xyXG4gICAgICAgICAgICBwYXJhbS52YWx1ZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXNldEFsbEF1dG9UcmlnZ2VyKCkge1xyXG4gICAgICAgIHRoaXMuX3BhcmFtTWFwLmZvckVhY2goKHBhcmFtOiBQYXJhbSwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgaWYgKHBhcmFtLnR5cGUgPT09IFBhcmFtVHlwZS5BVVRPX1RSSUdHRVIpIHtcclxuICAgICAgICAgICAgICAgIHBhcmFtLnZhbHVlID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROdW1iZXIoa2V5OiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBwYXJhbTogUGFyYW0gPSB0aGlzLl9wYXJhbU1hcC5nZXQoa2V5KSE7XHJcbiAgICAgICAgaWYgKHBhcmFtICYmIHBhcmFtLnR5cGUgPT09IFBhcmFtVHlwZS5OVU1CRVIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtLnZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Qm9vbChrZXk6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHBhcmFtOiBQYXJhbSA9IHRoaXMuX3BhcmFtTWFwLmdldChrZXkpITtcclxuICAgICAgICBpZiAocGFyYW0gJiYgcGFyYW0udHlwZSA9PT0gUGFyYW1UeXBlLkJPT0xFQU4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtLnZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0VHJpZ2dlcihrZXk6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHBhcmFtOiBQYXJhbSA9IHRoaXMuX3BhcmFtTWFwLmdldChrZXkpITtcclxuICAgICAgICBpZiAocGFyYW0gJiYgcGFyYW0udHlwZSA9PT0gUGFyYW1UeXBlLlRSSUdHRVIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtLnZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QXV0b1RyaWdnZXIoa2V5OiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBwYXJhbTogUGFyYW0gPSB0aGlzLl9wYXJhbU1hcC5nZXQoa2V5KSE7XHJcbiAgICAgICAgaWYgKHBhcmFtICYmIHBhcmFtLnR5cGUgPT09IFBhcmFtVHlwZS5BVVRPX1RSSUdHRVIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtLnZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTA2LTMwIDEzOjU2OjI2XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIxLTExLTA0IDEwOjQ2OjAwXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ0NGbG9hdCwgZ2FtZSwgU2tlbGV0YWxBbmltYXRpb24sIF9kZWNvcmF0b3IgfSBmcm9tICdjYyc7XHJcbmltcG9ydCBBbmltYXRvckFuaW1hdGlvbiBmcm9tICcuL0FuaW1hdG9yQW5pbWF0aW9uJztcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHksIHJlcXVpcmVDb21wb25lbnQsIGRpc2FsbG93TXVsdGlwbGUsIG1lbnUsIGhlbHAgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzc1xyXG5AZGlzYWxsb3dNdWx0aXBsZVxyXG5AcmVxdWlyZUNvbXBvbmVudChTa2VsZXRhbEFuaW1hdGlvbilcclxuQG1lbnUoJ09vcHNGcmFtZXdvcmsvQW5pbWF0b3IvQW5pbWF0b3JTa2VsZXRhbCDvvIjpqqjpqrzliqjnlLvnirbmgIHmnLrvvIknKVxyXG5AaGVscCgnaHR0cHM6Ly9naXRlZS5jb20vZGdmbGFzaC9vb3BzLWZyYW1ld29yay93aWtpcy9wYWdlcz9zb3J0X2lkPTEyMDM2Mjc5JmRvY19pZD0yODczNTY1JylcclxuZXhwb3J0IGNsYXNzIEFuaW1hdG9yU2tlbGV0YWwgZXh0ZW5kcyBBbmltYXRvckFuaW1hdGlvbiB7XHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IENDRmxvYXQsXHJcbiAgICAgICAgdG9vbHRpcDogXCLliqjnlLvliIfmjaLov4fluqbml7bpl7RcIlxyXG4gICAgfSlcclxuICAgIHByaXZhdGUgZHVyYXRpb246IG51bWJlciA9IDAuMztcclxuXHJcbiAgICBwcml2YXRlIGNyb3NzX2R1cmF0aW9uOiBudW1iZXIgPSAwOyAgICAgICAgIC8vIOmYsuatouWIh+aNouWKqOeUu+aXtumXtOWwkeS6jumXtOmalOaXtumXtOWvvOiHtOWKqOeUu+eKtuaAgemUmeS5seeahOmXrumimFxyXG4gICAgcHJpdmF0ZSBjdXJyZW50X3RpbWU6IG51bWJlciA9IDA7ICAgICAgICAgICAvLyDkuIrkuIDmrKHliIfmjaLnirbmgIHml7bpl7RcclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5jcm9zc19kdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24gKiAxMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICAqIOaSreaUvuWKqOeUu1xyXG4gICAgICAqIEBvdmVycmlkZVxyXG4gICAgICAqIEBwYXJhbSBhbmltTmFtZSDliqjnlLvlkI1cclxuICAgICAgKiBAcGFyYW0gbG9vcCDmmK/lkKblvqrnjq/mkq3mlL5cclxuICAgICAgKi9cclxuICAgIHByb3RlY3RlZCBwbGF5QW5pbWF0aW9uKGFuaW1OYW1lOiBzdHJpbmcsIGxvb3A6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAoIWFuaW1OYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChnYW1lLnRvdGFsVGltZSAtIHRoaXMuY3VycmVudF90aW1lID4gdGhpcy5jcm9zc19kdXJhdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb24uY3Jvc3NGYWRlKGFuaW1OYW1lLCB0aGlzLmR1cmF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbi5wbGF5KGFuaW1OYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50X3RpbWUgPSBnYW1lLnRvdGFsVGltZTtcclxuXHJcbiAgICAgICAgdGhpcy5fYW5pbVN0YXRlID0gdGhpcy5fYW5pbWF0aW9uLmdldFN0YXRlKGFuaW1OYW1lKTtcclxuICAgICAgICBpZiAoIXRoaXMuX2FuaW1TdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5fd3JhcE1vZGVNYXAuaGFzKHRoaXMuX2FuaW1TdGF0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5fd3JhcE1vZGVNYXAuc2V0KHRoaXMuX2FuaW1TdGF0ZSwgdGhpcy5fYW5pbVN0YXRlLndyYXBNb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhpcy5fYW5pbVN0YXRlLndyYXBNb2RlID0gbG9vcCA/IDIgOiB0aGlzLl93cmFwTW9kZU1hcC5nZXQodGhpcy5fYW5pbVN0YXRlKSE7XHJcbiAgICAgICAgdGhpcy5fYW5pbVN0YXRlLndyYXBNb2RlID0gbG9vcCA/IDIgOiAxOyAgIC8vIDLkuLrlvqrnjq/mkq3mlL7vvIwx5Li65Y2V5qyh5pKt5pS+XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgc3AgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IEFuaW1hdG9yU3BpbmVTZWNvbmRhcnkgZnJvbSBcIi4vQW5pbWF0b3JTcGluZVNlY29uZGFyeVwiO1xyXG5pbXBvcnQgQW5pbWF0b3JCYXNlLCB7IEFuaW1hdGlvblBsYXllciB9IGZyb20gXCIuL2NvcmUvQW5pbWF0b3JCYXNlXCI7XHJcbmltcG9ydCB7IEFuaW1hdG9yU3RhdGVMb2dpYyB9IGZyb20gXCIuL2NvcmUvQW5pbWF0b3JTdGF0ZUxvZ2ljXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5LCByZXF1aXJlQ29tcG9uZW50LCBkaXNhbGxvd011bHRpcGxlLCBtZW51LCBoZWxwIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIFxyXG4gKiBTcGluZeeKtuaAgeacuue7hOS7tu+8iOS4u+eKtuaAgeacuu+8ie+8jHRyYWNrSW5kZXjkuLowXHJcbiAqL1xyXG5AY2NjbGFzc1xyXG5AZGlzYWxsb3dNdWx0aXBsZVxyXG5AcmVxdWlyZUNvbXBvbmVudChzcC5Ta2VsZXRvbilcclxuQG1lbnUoJ09vcHNGcmFtZXdvcmsvQW5pbWF0b3IvQW5pbWF0b3JTcGluZe+8iFNwaW5lIOeKtuaAgeacuu+8iScpXHJcbkBoZWxwKCdodHRwczovL2dpdGVlLmNvbS9kZ2ZsYXNoL29vcHMtZnJhbWV3b3JrL3dpa2lzL3BhZ2VzP3NvcnRfaWQ9MTIwMzYyNzkmZG9jX2lkPTI4NzM1NjUnKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRvclNwaW5lIGV4dGVuZHMgQW5pbWF0b3JCYXNlIHtcclxuICAgIC8qKiBzcGluZee7hOS7tiAqL1xyXG4gICAgcHJvdGVjdGVkIF9zcGluZTogc3AuU2tlbGV0b24gPSBudWxsITtcclxuICAgIC8qKiDliqjnlLvlrozmiJDnmoTlm57osIMgKi9cclxuICAgIHByb3RlY3RlZCBfY29tcGxldGVMaXN0ZW5lck1hcDogTWFwPChlbnRyeT86IGFueSkgPT4gdm9pZCwgYW55PiA9IG5ldyBNYXAoKTtcclxuICAgIC8qKiDmrKHnirbmgIHmnLrms6jlhoznmoTlm57osIMgKi9cclxuICAgIHByb3RlY3RlZCBfc2Vjb25kYXJ5TGlzdGVuZXJNYXA6IE1hcDwoZW50cnk/OiBhbnkpID0+IHZvaWQsIEFuaW1hdG9yU3BpbmVTZWNvbmRhcnk+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuUGxheU9uU3RhcnQgfHwgdGhpcy5faGFzSW5pdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2hhc0luaXQgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLl9zcGluZSA9IHRoaXMuZ2V0Q29tcG9uZW50KHNwLlNrZWxldG9uKSE7XHJcbiAgICAgICAgdGhpcy5fc3BpbmUuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLm9uU3BpbmVFdmVudC5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLl9zcGluZS5zZXRDb21wbGV0ZUxpc3RlbmVyKHRoaXMub25TcGluZUNvbXBsZXRlLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5Bc3NldFJhd1VybCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRKc29uKHRoaXMuQXNzZXRSYXdVcmwuanNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omL5Yqo5Yid5aeL5YyW54q25oCB5py677yM5Y+v5Lyg5YWlMC0z5Liq5Y+C5pWw77yM57G75Z6L5aaC5LiLXHJcbiAgICAgKiAtIG9uU3RhdGVDaGFuZ2VDYWxsIOeKtuaAgeWIh+aNouaXtueahOWbnuiwg1xyXG4gICAgICogLSBzdGF0ZUxvZ2ljTWFwIOWQhOS4queKtuaAgemAu+i+keaOp+WItlxyXG4gICAgICogLSBhbmltYXRpb25QbGF5ZXIg6Ieq5a6a5LmJ5Yqo55S75o6n5Yi2XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uSW5pdCguLi5hcmdzOiBBcnJheTxNYXA8c3RyaW5nLCBBbmltYXRvclN0YXRlTG9naWM+IHwgKChmcm9tU3RhdGU6IHN0cmluZywgdG9TdGF0ZTogc3RyaW5nKSA9PiB2b2lkKSB8IEFuaW1hdGlvblBsYXllcj4pIHtcclxuICAgICAgICBpZiAodGhpcy5QbGF5T25TdGFydCB8fCB0aGlzLl9oYXNJbml0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGFzSW5pdCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdEFyZ3MoLi4uYXJncyk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NwaW5lID0gdGhpcy5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pITtcclxuICAgICAgICB0aGlzLl9zcGluZS5zZXRFdmVudExpc3RlbmVyKHRoaXMub25TcGluZUV2ZW50LmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuX3NwaW5lLnNldENvbXBsZXRlTGlzdGVuZXIodGhpcy5vblNwaW5lQ29tcGxldGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLkFzc2V0UmF3VXJsICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEpzb24odGhpcy5Bc3NldFJhd1VybC5qc29uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIC0tLS0tLS0tLS0g5ZCO57ut5omp5bGV5Luj56CBIOW8gOWniyAtLS0tLS0tLS0tICovXHJcblxyXG4gICAgcHVibGljIGdldEJvbmUobmFtZTogc3RyaW5nKTogYW55IHtcclxuICAgICAgICBjb25zdCBib25lID0gdGhpcy5fc3BpbmUuZmluZEJvbmUobmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIGJvbmVcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uU3BpbmVFdmVudCh0cmFja0VudHJ5OiBhbnksIGV2ZW50OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBhbmltYXRpb25OYW1lID0gdHJhY2tFbnRyeS5hbmltYXRpb24gPyBldmVudC5kYXRhLm5hbWUgOiBcIlwiO1xyXG4gICAgICAgIHRoaXMuX2FuaW1hdGlvblBsYXllcj8ub25GcmFtZUV2ZW50Q2FsbGJhY2soYW5pbWF0aW9uTmFtZSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIC0tLS0tLS0tLS0g5ZCO57ut5omp5bGV5Luj56CBIOe7k+adnyAtLS0tLS0tLS0tICovXHJcblxyXG4gICAgcHJpdmF0ZSBvblNwaW5lQ29tcGxldGUoZW50cnk6IGFueSkge1xyXG4gICAgICAgIGVudHJ5LnRyYWNrSW5kZXggPT09IDAgJiYgdGhpcy5vbkFuaW1GaW5pc2hlZCgpO1xyXG4gICAgICAgIHRoaXMuX2NvbXBsZXRlTGlzdGVuZXJNYXAuZm9yRWFjaCgodGFyZ2V0LCBjYikgPT4geyB0YXJnZXQgPyBjYi5jYWxsKHRhcmdldCwgZW50cnkpIDogY2IoZW50cnkpOyB9KTtcclxuICAgICAgICB0aGlzLl9zZWNvbmRhcnlMaXN0ZW5lck1hcC5mb3JFYWNoKCh0YXJnZXQsIGNiKSA9PiB7IGVudHJ5LnRyYWNrSW5kZXggPT09IHRhcmdldC5UcmFja0luZGV4ICYmIGNiLmNhbGwodGFyZ2V0LCBlbnRyeSk7IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pKt5pS+5Yqo55S7XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqIEBwYXJhbSBhbmltTmFtZSDliqjnlLvlkI1cclxuICAgICAqIEBwYXJhbSBsb29wIOaYr+WQpuW+queOr+aSreaUvlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgcGxheUFuaW1hdGlvbihhbmltTmFtZTogc3RyaW5nLCBsb29wOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKGFuaW1OYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NwaW5lLnNldEFuaW1hdGlvbigwLCBhbmltTmFtZSwgbG9vcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zcGluZS5jbGVhclRyYWNrKDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe8qeaUvuWKqOeUu+aSreaUvumAn+eOh1xyXG4gICAgICogQG92ZXJyaWRlXHJcbiAgICAgKiBAcGFyYW0gc2NhbGUg57yp5pS+5YCN546HXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBzY2FsZVRpbWUoc2NhbGU6IG51bWJlcikge1xyXG4gICAgICAgIGlmIChzY2FsZSA+IDApXHJcbiAgICAgICAgICAgIHRoaXMuX3NwaW5lLnRpbWVTY2FsZSA9IHNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5qyh54q25oCB5py65Yqo55S757uT5p2f55qE5Zue6LCD77yI54q25oCB5py65YaF6YOo5pa55rOV77yM5LiN6IO955Sx5aSW6YOo55u05o6l6LCD55So77yJXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGRTZWNvbmRhcnlMaXN0ZW5lcihjYjogKGVudHJ5PzogYW55KSA9PiB2b2lkLCB0YXJnZXQ6IEFuaW1hdG9yU3BpbmVTZWNvbmRhcnkpIHtcclxuICAgICAgICB0aGlzLl9zZWNvbmRhcnlMaXN0ZW5lck1hcC5zZXQoY2IsIHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhozliqjnlLvlrozmiJDml7bnmoTnm5HlkKxcclxuICAgICAqIEBwYXJhbSBjYiDlm57osINcclxuICAgICAqIEBwYXJhbSB0YXJnZXQg6LCD55So5Zue6LCD55qEdGhpc+WvueixoVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWRkQ29tcGxldGVMaXN0ZW5lcihjYjogKGVudHJ5PzogYW55KSA9PiB2b2lkLCB0YXJnZXQ6IGFueSA9IG51bGwpIHtcclxuICAgICAgICBpZiAodGhpcy5fY29tcGxldGVMaXN0ZW5lck1hcC5oYXMoY2IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY29tcGxldGVMaXN0ZW5lck1hcC5zZXQoY2IsIHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jplIDliqjnlLvlrozmiJDnmoTnm5HlkKxcclxuICAgICAqIEBwYXJhbSBjYiDlm57osINcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZUNvbXBsZXRlTGlzdGVuZXIoY2I6IChlbnRyeT86IGFueSkgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuX2NvbXBsZXRlTGlzdGVuZXJNYXAuZGVsZXRlKGNiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4heepuuWKqOeUu+WujOaIkOeahOebkeWQrFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xlYXJDb21wbGV0ZUxpc3RlbmVyKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbXBsZXRlTGlzdGVuZXJNYXAuY2xlYXI7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgX2RlY29yYXRvciwgc3AgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IEFuaW1hdG9yU3BpbmUgZnJvbSBcIi4vQW5pbWF0b3JTcGluZVwiO1xyXG5pbXBvcnQgQW5pbWF0b3JCYXNlLCB7IEFuaW1hdGlvblBsYXllciB9IGZyb20gXCIuL2NvcmUvQW5pbWF0b3JCYXNlXCI7XHJcbmltcG9ydCB7IEFuaW1hdG9yU3RhdGVMb2dpYyB9IGZyb20gXCIuL2NvcmUvQW5pbWF0b3JTdGF0ZUxvZ2ljXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5LCByZXF1aXJlQ29tcG9uZW50LCBtZW51LCBoZWxwIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIFxyXG4gKiBTcGluZeeKtuaAgeacuue7hOS7tu+8iOasoeeKtuaAgeacuu+8ie+8jOWQjOS4gOiKgueCueWPr+a3u+WKoOWkmuS4qu+8jOeUqOS6juWcqOS4jeWQjHRyYWNr5Lit5pKt5pS+5Yqo55S777yMdHJhY2tJbmRleOW/hemhu+Wkp+S6jjBcclxuICovXHJcbkBjY2NsYXNzXHJcbkByZXF1aXJlQ29tcG9uZW50KHNwLlNrZWxldG9uKVxyXG5AbWVudSgnT29wc0ZyYW1ld29yay9BbmltYXRvci9BbmltYXRvclNwaW5lIO+8iFNwaW5lIOasoeeKtuaAgeacuu+8iScpXHJcbkBoZWxwKCdodHRwczovL2dpdGVlLmNvbS9kZ2ZsYXNoL29vcHMtZnJhbWV3b3JrL3dpa2lzL3BhZ2VzP3NvcnRfaWQ9MTIwMzYyNzkmZG9jX2lkPTI4NzM1NjUnKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmltYXRvclNwaW5lU2Vjb25kYXJ5IGV4dGVuZHMgQW5pbWF0b3JCYXNlIHtcclxuICAgIEBwcm9wZXJ0eSh7IHRvb2x0aXA6ICfliqjnlLvmkq3mlL7nmoR0cmFja0luZGV477yM5b+F6aG75aSn5LqOMCcgfSkgVHJhY2tJbmRleDogbnVtYmVyID0gMTtcclxuXHJcbiAgICAvKiog5Li754q25oCB5py6ICovXHJcbiAgICBwcml2YXRlIF9tYWluOiBBbmltYXRvclNwaW5lID0gbnVsbCE7XHJcbiAgICAvKiogc3BpbmXnu4Tku7YgKi9cclxuICAgIHByaXZhdGUgX3NwaW5lOiBzcC5Ta2VsZXRvbiA9IG51bGwhO1xyXG5cclxuICAgIHByb3RlY3RlZCBzdGFydCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuUGxheU9uU3RhcnQgfHwgdGhpcy5faGFzSW5pdCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2hhc0luaXQgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLl9zcGluZSA9IHRoaXMuZ2V0Q29tcG9uZW50KHNwLlNrZWxldG9uKSE7XHJcbiAgICAgICAgdGhpcy5fbWFpbiA9IHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdG9yU3BpbmUpITtcclxuICAgICAgICB0aGlzLl9tYWluLmFkZFNlY29uZGFyeUxpc3RlbmVyKHRoaXMub25BbmltRmluaXNoZWQsIHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5Bc3NldFJhd1VybCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRKc29uKHRoaXMuQXNzZXRSYXdVcmwuanNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omL5Yqo5Yid5aeL5YyW54q25oCB5py677yM5Y+v5Lyg5YWlMC0z5Liq5Y+C5pWw77yM57G75Z6L5aaC5LiLXHJcbiAgICAgKiAtIG9uU3RhdGVDaGFuZ2VDYWxsIOeKtuaAgeWIh+aNouaXtueahOWbnuiwg1xyXG4gICAgICogLSBzdGF0ZUxvZ2ljTWFwIOWQhOS4queKtuaAgemAu+i+keaOp+WItlxyXG4gICAgICogLSBhbmltYXRpb25QbGF5ZXIg6Ieq5a6a5LmJ5Yqo55S75o6n5Yi2XHJcbiAgICAgKiBAb3ZlcnJpZGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uSW5pdCguLi5hcmdzOiBBcnJheTxNYXA8c3RyaW5nLCBBbmltYXRvclN0YXRlTG9naWM+IHwgKChmcm9tU3RhdGU6IHN0cmluZywgdG9TdGF0ZTogc3RyaW5nKSA9PiB2b2lkKSB8IEFuaW1hdGlvblBsYXllcj4pIHtcclxuICAgICAgICBpZiAodGhpcy5QbGF5T25TdGFydCB8fCB0aGlzLl9oYXNJbml0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5faGFzSW5pdCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdEFyZ3MoLi4uYXJncyk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NwaW5lID0gdGhpcy5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pITtcclxuICAgICAgICB0aGlzLl9tYWluID0gdGhpcy5nZXRDb21wb25lbnQoQW5pbWF0b3JTcGluZSkhO1xyXG4gICAgICAgIHRoaXMuX21haW4uYWRkU2Vjb25kYXJ5TGlzdGVuZXIodGhpcy5vbkFuaW1GaW5pc2hlZCwgdGhpcyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLkFzc2V0UmF3VXJsICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEpzb24odGhpcy5Bc3NldFJhd1VybC5qc29uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmkq3mlL7liqjnlLtcclxuICAgICAqIEBvdmVycmlkZVxyXG4gICAgICogQHBhcmFtIGFuaW1OYW1lIOWKqOeUu+WQjVxyXG4gICAgICogQHBhcmFtIGxvb3Ag5piv5ZCm5b6q546v5pKt5pS+XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBwbGF5QW5pbWF0aW9uKGFuaW1OYW1lOiBzdHJpbmcsIGxvb3A6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAoYW5pbU5hbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3BpbmUuc2V0QW5pbWF0aW9uKHRoaXMuVHJhY2tJbmRleCwgYW5pbU5hbWUsIGxvb3ApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc3BpbmUuY2xlYXJUcmFjayh0aGlzLlRyYWNrSW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgQW5pbWF0b3JDb250cm9sbGVyIGZyb20gXCIuL0FuaW1hdG9yQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgQW5pbWF0b3JUcmFuc2l0aW9uIGZyb20gXCIuL0FuaW1hdG9yVHJhbnNpdGlvblwiO1xyXG5cclxuLyoqXHJcbiAqIOeKtuaAgeeuoeeQhuexu1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pbWF0b3JTdGF0ZSB7XHJcbiAgICBwcml2YXRlIF9uYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBfbW90aW9uOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBfbG9vcDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfc3BlZWQ6IG51bWJlciA9IDE7XHJcbiAgICBwcml2YXRlIF9tdWx0aTogc3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICBwcml2YXRlIF90cmFuc2l0aW9uczogQW5pbWF0b3JUcmFuc2l0aW9uW10gPSBbXTtcclxuICAgIHByaXZhdGUgX2FjOiBBbmltYXRvckNvbnRyb2xsZXIgPSBudWxsITtcclxuXHJcbiAgICAvKiog54q25oCB5ZCNICovXHJcbiAgICBwdWJsaWMgZ2V0IG5hbWUoKSB7IHJldHVybiB0aGlzLl9uYW1lOyB9XHJcbiAgICAvKiog5Yqo55S75ZCNICovXHJcbiAgICBwdWJsaWMgZ2V0IG1vdGlvbigpIHsgcmV0dXJuIHRoaXMuX21vdGlvbjsgfVxyXG4gICAgLyoqIOWKqOeUu+aYr+WQpuW+queOr+aSreaUviAqL1xyXG4gICAgcHVibGljIGdldCBsb29wKCkgeyByZXR1cm4gdGhpcy5fbG9vcDsgfVxyXG4gICAgLyoqIOWKqOeUu+aSreaUvumAn+W6pueahOa3t+WQiOWPguaVsCAqL1xyXG4gICAgcHVibGljIGdldCBtdWx0aSgpIHsgcmV0dXJuIHRoaXMuX211bHRpOyB9XHJcbiAgICAvKiog5Yqo55S75pKt5pS+6YCf5bqmICovXHJcbiAgICBwdWJsaWMgZ2V0IHNwZWVkKCkgeyByZXR1cm4gdGhpcy5fc3BlZWQ7IH1cclxuICAgIHB1YmxpYyBzZXQgc3BlZWQodmFsdWU6IG51bWJlcikgeyB0aGlzLl9zcGVlZCA9IHZhbHVlOyB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YTogYW55LCBhYzogQW5pbWF0b3JDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdGhpcy5fbmFtZSA9IGRhdGEuc3RhdGU7XHJcbiAgICAgICAgdGhpcy5fbW90aW9uID0gZGF0YS5tb3Rpb24gfHwgJyc7XHJcbiAgICAgICAgdGhpcy5fbG9vcCA9IGRhdGEubG9vcCB8fCBmYWxzZTtcclxuICAgICAgICB0aGlzLl9zcGVlZCA9IGRhdGEuc3BlZWQgfHwgMTtcclxuICAgICAgICB0aGlzLl9tdWx0aSA9IGRhdGEubXVsdGlwbGllciB8fCAnJztcclxuXHJcbiAgICAgICAgdGhpcy5fYWMgPSBhYztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLnRyYW5zaXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0cmFuc2l0aW9uOiBBbmltYXRvclRyYW5zaXRpb24gPSBuZXcgQW5pbWF0b3JUcmFuc2l0aW9uKGRhdGEudHJhbnNpdGlvbnNbaV0sIGFjKTtcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi5pc1ZhbGlkKCkgJiYgdGhpcy5fdHJhbnNpdGlvbnMucHVzaCh0cmFuc2l0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3lkITkuKrliIbmlK/mmK/lkKbmu6HotrPmnaHku7bvvIzmu6HotrPliJnovazmjaLnirbmgIFcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNoZWNrQW5kVHJhbnMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl90cmFuc2l0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdHJhbnNpdGlvbjogQW5pbWF0b3JUcmFuc2l0aW9uID0gdGhpcy5fdHJhbnNpdGlvbnNbaV07XHJcbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uICYmIHRyYW5zaXRpb24uY2hlY2soKSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5kb1RyYW5zKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIOeKtuaAgemAu+i+keWfuuexu1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEFuaW1hdG9yU3RhdGVMb2dpYyB7XHJcbiAgICAvKipcclxuICAgICAqIOi/m+WFpeeKtuaAgeaXtuiwg+eUqFxyXG4gICAgICogQHZpcnR1YWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uRW50cnkoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmr4/mrKHnirbmgIHmnLrpgLvovpHmm7TmlrDml7bosIPnlKhcclxuICAgICAqIEB2aXJ0dWFsXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvblVwZGF0ZSgpIHtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOemu+W8gOeKtuaAgeaXtuiwg+eUqFxyXG4gICAgICogQHZpcnR1YWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9uRXhpdCgpIHtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgQW5pbWF0b3JDb25kaXRpb24sIHsgUGFyYW1UeXBlIH0gZnJvbSBcIi4vQW5pbWF0b3JDb25kaXRpb25cIjtcclxuaW1wb3J0IEFuaW1hdG9yQ29udHJvbGxlciBmcm9tIFwiLi9BbmltYXRvckNvbnRyb2xsZXJcIjtcclxuXHJcbi8qKlxyXG4gKiDnirbmgIHov4fmuKHnsbtcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFuaW1hdG9yVHJhbnNpdGlvbiB7XHJcbiAgICBwcml2YXRlIF90b1N0YXRlTmFtZTogc3RyaW5nID0gJyc7XHJcbiAgICBwcml2YXRlIF9oYXNFeGl0VGltZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBfY29uZGl0aW9uczogQW5pbWF0b3JDb25kaXRpb25bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBfYWM6IEFuaW1hdG9yQ29udHJvbGxlciA9IG51bGwhO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSwgYWM6IEFuaW1hdG9yQ29udHJvbGxlcikge1xyXG4gICAgICAgIHRoaXMuX3RvU3RhdGVOYW1lID0gZGF0YS50b1N0YXRlO1xyXG4gICAgICAgIHRoaXMuX2hhc0V4aXRUaW1lID0gZGF0YS5oYXNFeGl0VGltZTtcclxuICAgICAgICB0aGlzLl9hYyA9IGFjO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5jb25kaXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBjb25kaXRpb246IEFuaW1hdG9yQ29uZGl0aW9uID0gbmV3IEFuaW1hdG9yQ29uZGl0aW9uKGRhdGEuY29uZGl0aW9uc1tpXSwgYWMpO1xyXG4gICAgICAgICAgICB0aGlzLl9jb25kaXRpb25zLnB1c2goY29uZGl0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDov5Tlm57or6V0cmFuc2l0aW9u5piv5ZCm5pyJ5pWI77yM5b2T5pyq5Yu+6YCJaGFzRXhpdFRpbWXku6Xlj4rmsqHmnInmt7vliqDku7vkvZVjb25kaXRpb27ml7bmraR0cmFuc2l0aW9u5peg5pWI5bm25b+955WlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc1ZhbGlkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNFeGl0VGltZSB8fCB0aGlzLl9jb25kaXRpb25zLmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3mmK/lkKbmu6HotrPmiYDmnInovazmjaLmnaHku7ZcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNoZWNrKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLl90b1N0YXRlTmFtZSA9PT0gdGhpcy5fYWMuY3VyU3RhdGUubmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faGFzRXhpdFRpbWUgJiYgKHRoaXMuX2FjLmN1clN0YXRlICE9PSB0aGlzLl9hYy5hbmltQ29tcGxldGVTdGF0ZSB8fCAhdGhpcy5fYWMuYW5pbUNvbXBsZXRlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NvbmRpdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jb25kaXRpb25zW2ldLmNoZWNrKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOi9rOaNoueKtuaAgVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZG9UcmFucygpIHtcclxuICAgICAgICAvLyDmu6HotrPmnaHku7bml7bph43nva7liqjnlLvmkq3lrozmoIforrBcclxuICAgICAgICBpZiAodGhpcy5faGFzRXhpdFRpbWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWMuYW5pbUNvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOa7oei2s+eKtuaAgei9rOaNouadoeS7tuaXtumHjee9rnRyaWdnZXLlkoxhdXRvVHJpZ2dlclxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY29uZGl0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdHlwZSA9IHRoaXMuX2NvbmRpdGlvbnNbaV0uZ2V0UGFyYW1UeXBlKCk7XHJcbiAgICAgICAgICAgIGxldCBuYW1lID0gdGhpcy5fY29uZGl0aW9uc1tpXS5nZXRQYXJhbU5hbWUoKTtcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFBhcmFtVHlwZS5UUklHR0VSKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hYy5wYXJhbXMucmVzZXRUcmlnZ2VyKG5hbWUpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFBhcmFtVHlwZS5BVVRPX1RSSUdHRVIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjLnBhcmFtcy5yZXNldEF1dG9UcmlnZ2VyKG5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9hYy5jaGFuZ2VTdGF0ZSh0aGlzLl90b1N0YXRlTmFtZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBBcnJheTxUPiB7XHJcbiAgICAgICAgLyoqIOWIoOmZpOaMh+WumuadoeS7tueahOaVsOaNriAqL1xyXG4gICAgICAgIHJlbW92ZShmaWx0ZXI6ICh2OiBULCBpOiBudW1iZXIsIGFycjogQXJyYXk8VD4pID0+IGJvb2xlYW4pOiBBcnJheTxUPjtcclxuICAgICAgICByZW1vdmUoZmlsdGVyOiBUKTogQXJyYXk8VD47XHJcblxyXG4gICAgICAgIC8qKiDmib7liLDnrKzkuIDkuKrmu6HotrPlm57osIPmnaHku7bnmoTlhYPntKDlubblsIblhbbnp7vpmaQgKi9cclxuICAgICAgICByZW1vdmVPbmUoZmlsdGVyOiAodjogVCwgaTogbnVtYmVyLCBhcnI6IEFycmF5PFQ+KSA9PiBib29sZWFuKTogQXJyYXk8VD47XHJcbiAgICAgICAgcmVtb3ZlT25lKGZpbHRlcjogVCk6IEFycmF5PFQ+O1xyXG5cclxuICAgICAgICByYW5kb20oKTogVDtcclxuXHJcbiAgICAgICAgLyoqIOiOt+WPluaVsOe7hOS4reesrOS4gOadoeaVsOaNriAqL1xyXG4gICAgICAgIGZpcnN0KCk6IFQ7XHJcbiAgICAgICAgLyoqIOiOt+WPluaVsOe7hOS4reacgOWQjuadoeaVsOaNriAqL1xyXG4gICAgICAgIGxhc3QoKTogVDtcclxuXHJcbiAgICAgICAgLyoqIOiOt+WPluaVsOe7hOS4reacgOWkp+aVsOaNriAqL1xyXG4gICAgICAgIG1heCgpOiBUO1xyXG4gICAgICAgIG1heDxQPihtYXBwZXI6ICh2OiBULCBpOiBudW1iZXIsIGFycjogdGhpcykgPT4gUCk6IFAgfCBudWxsO1xyXG5cclxuICAgICAgICAvKiog6I635Y+W5pWw57uE5Lit5pyA5bCP5pWw5o2uICovXHJcbiAgICAgICAgbWluKCk6IFQ7XHJcbiAgICAgICAgbWluPFA+KG1hcHBlcjogKHY6IFQsIGk6IG51bWJlciwgYXJyOiB0aGlzKSA9PiBQKTogUCB8IG51bGw7XHJcblxyXG4gICAgICAgIC8qKiDov5Tlm57msqHmnInph43lpI3mlbDmja7nmoTmlrDmlbDnu4QgKi9cclxuICAgICAgICBkaXN0aW5jdCgpOiBBcnJheTxUPjtcclxuICAgICAgICBmaWx0ZXJJbmRleChmaWx0ZXI6ICh2OiBULCBpOiBudW1iZXIsIGFycjogdGhpcykgPT4gYm9vbGVhbik6IEFycmF5PG51bWJlcj47XHJcblxyXG4gICAgICAgIC8qKiDov4fmu6Tlh7rmnInmlYjorrDlvZXmlbDph48gKi9cclxuICAgICAgICBjb3VudChmaWx0ZXI6ICh2OiBULCBpOiBudW1iZXIsIGFycjogdGhpcykgPT4gYm9vbGVhbik6IG51bWJlcjtcclxuICAgICAgICAvKiog5pWw57uE5rGC5ZKMICovXHJcbiAgICAgICAgc3VtKG1hcHBlcj86ICh2OiBULCBpOiBudW1iZXIsIGFycjogdGhpcykgPT4gbnVtYmVyKTogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDmlbDnu4TlubPlnYflgLwgKi9cclxuICAgICAgICBhdmVyYWdlKG1hcHBlcj86ICh2OiBULCBpOiBudW1iZXIsIGFycjogdGhpcykgPT4gbnVtYmVyKTogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKiog56e76Zmk5oyH5a6a5L2N572u55qE5YWD57SgIOi/lOWbnuenu+mZpOeahOWFg+e0oCAqL1xyXG4gICAgICAgIGZhc3RSZW1vdmVBdChpbmRleDogbnVtYmVyKTogVDtcclxuICAgICAgICAvKiog56e76Zmk5pWw57uE5Lit5oyH5a6a5pWw5o2uICovXHJcbiAgICAgICAgZmFzdFJlbW92ZSh2YWx1ZTogVCk6IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKiDlkIxmaW5k77yM5L2G6L+U5Zue5pW05LiqQXJyYXk8VD7kuK3mnIDlkI7kuIDkuKrljLnphY3lhYPntKAgKi9cclxuICAgICAgICBmaW5kTGFzdChwcmVkaWNhdGU6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlciwgb2JqOiBBcnJheTxUPikgPT4gYm9vbGVhbik6IFQgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqIOWQjGZpbmTvvIzkvYbov5Tlm57mlbTkuKpBcnJheTxUPuS4reacgOWQjuS4gOS4quWMuemFjeWFg+e0oOeahGluZGV4ICovXHJcbiAgICAgICAgZmluZExhc3RJbmRleChwcmVkaWNhdGU6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlciwgb2JqOiBBcnJheTxUPikgPT4gYm9vbGVhbik6IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqIOaOkuW6j+WNh+W6j++8jOi/lOWbnuaWsOeahOaVsOe7hCAqL1xyXG4gICAgICAgIG9yZGVyQnkoLi4ubWFwcGVyczogKCh2OiBUKSA9PiBhbnkpW10pOiBBcnJheTxUPjtcclxuICAgICAgICAvKiog5o6S5bqP6ZmN5bqP77yM6L+U5Zue5paw55qE5pWw57uEICAqL1xyXG4gICAgICAgIG9yZGVyQnlEZXNjKC4uLm1hcHBlcnM6ICgodjogVCkgPT4gYW55KVtdKTogQXJyYXk8VD47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOS6jOWIhuafpeaJviDliY3mj5DmmK/mlbDnu4TkuIDlrprmmK/mnInluo/nmoRcclxuICAgICAgICAgKiBAcGFyYW0gdmFsdWUg6KaB5p+l5om+55qE5YC8XHJcbiAgICAgICAgICogQHBhcmFtIGtleU1hcHBlciDopoHmn6Xmib7nmoTlgLznmoRtYXBwZXLmlrnms5XvvIjpu5jorqTkuLrmn6Xmib7mlbDnu4TlhYPntKDmnKzouqvvvIlcclxuICAgICAgICAgKiBAcmV0dXJuIOafpeaJvuWIsOeahGluZGV477yM5p+l5LiN5Yiw6L+U5ZueLTFcclxuICAgICAgICAgKi9cclxuICAgICAgICBiaW5hcnlTZWFyY2godmFsdWU6IG51bWJlciB8IHN0cmluZywga2V5TWFwcGVyPzogKHY6IFQpID0+IChudW1iZXIgfCBzdHJpbmcpKTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOS6jOWIhuaPkuWFpSDliY3mj5DmmK/mlbDnu4TkuIDlrprmmK/mnInluo/nmoRcclxuICAgICAgICAgKiBAcGFyYW0gaXRlbSDopoHmj5LlhaXnmoTlgLxcclxuICAgICAgICAgKiBAcGFyYW0ga2V5TWFwcGVyIOS6jOWIhuafpeaJvuaXtuimgeafpeaJvueahOWAvOeahG1hcHBlcuaWueazle+8iOm7mOiupOS4uuafpeaJvuaVsOe7hOWFg+e0oOacrOi6q++8iVxyXG4gICAgICAgICAqIEBwYXJhbSB1bmlxdWUg5piv5ZCm5Y676YeN77yM5aaC5p6c5Li6dHJ1Ze+8jOWImeWmguaenOaVsOe7hOWGheW3sue7j+acieWAvOaXtuS4jeaPkuWFpe+8jOi/lOWbnuW3suacieWAvOeahG51bWJlclxyXG4gICAgICAgICAqIEByZXR1cm4g6L+U5Zue5o+S5YWl55qEaW5kZXjkvY3nva5cclxuICAgICAgICAgKi9cclxuICAgICAgICBiaW5hcnlJbnNlcnQoaXRlbTogVCwgdW5pcXVlPzogYm9vbGVhbik6IG51bWJlcjtcclxuICAgICAgICBiaW5hcnlJbnNlcnQoaXRlbTogVCwga2V5TWFwcGVyOiAodjogVCkgPT4gKG51bWJlciB8IHN0cmluZyksIHVuaXF1ZT86IGJvb2xlYW4pOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5LqM5YiG5Y676YeNIOWJjeaPkOaYr+aVsOe7hOS4gOWumuaYr+acieW6j+eahFxyXG4gICAgICAgICAqIEBwYXJhbSBrZXlNYXBwZXIg5LqM5YiG5p+l5om+5pe26KaB5p+l5om+55qE5YC855qEbWFwcGVy5pa55rOV77yI6buY6K6k5Li65p+l5om+5pWw57uE5YWD57Sg5pys6Lqr77yJXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYmluYXJ5RGlzdGluY3Qoa2V5TWFwcGVyPzogKHY6IFQpID0+IChudW1iZXIgfCBzdHJpbmcpKTogQXJyYXk8VD47XHJcbiAgICAgICAgLyoqIOaMh+WumuWtl+auteWIhue7hCAqL1xyXG4gICAgICAgIGdyb3VwQnkoZ3JvdXBlcjogKHY6IFQpID0+IGFueSk6IChUW10gJiB7IGtleTogYW55IH0pW107XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEB0cy1pZ25vcmVcclxuIUFycmF5LnByb3RvdHlwZS5fX2NjX2V4dGVuZGVkICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5LnByb3RvdHlwZSwge1xyXG4gICAgcmVtb3ZlOiB7XHJcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChmaWx0ZXI6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIChmaWx0ZXIpID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPiAtMTsgLS1pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyKHRoaXNbaV0sIGksIHRoaXMpICYmIHRoaXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+IC0xOyAtLWkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzW2ldID09PSBmaWx0ZXIgJiYgdGhpcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlbW92ZU9uZToge1xyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoZmlsdGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiAoZmlsdGVyKSA9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyKHRoaXNbaV0sIGksIHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gZmlsdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJhbmRvbToge1xyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gdGhpc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmxlbmd0aCldO1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmFzdFJlbW92ZUF0OiB7XHJcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChpbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHJlcyA9IHRoaXNbaW5kZXhdO1xyXG4gICAgICAgICAgICB0aGlzW2luZGV4XSA9IHRoaXNbbGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmFzdFJlbW92ZToge1xyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodmFsdWU6IGFueSkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5kZXhPZih2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzW2luZGV4XSA9IHRoaXNbdGhpcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIC0tdGhpcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGZpcnN0OiB7XHJcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID8gdGhpc1swXSA6IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGxhc3Q6IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggPyB0aGlzW3RoaXMubGVuZ3RoIC0gMV0gOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtYXg6IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKG1hcHBlcjogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIF9tYXgoYTogbnVtYmVyLCBiOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhID4gYiA/IGEgOiBiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKG1hcHBlcikgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1heCA9IG1hcHBlcih0aGlzWzBdLCAwLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbWFwcGVyKHRoaXNbaV0sIGksIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1heCA9IHRlbXAgPiBtYXggPyB0ZW1wIDogbWF4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZHVjZShmdW5jdGlvbiAocHJldjogYW55LCBjdXI6IGFueSkgeyByZXR1cm4gX21heChwcmV2LCBjdXIpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtaW46IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKG1hcHBlcjogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIF9taW4oYTogbnVtYmVyLCBiOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKG1hcHBlcikgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1pbiA9IG1hcHBlcih0aGlzWzBdLCAwLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gbWFwcGVyKHRoaXNbaV0sIGksIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IHRlbXAgPCBtaW4gPyB0ZW1wIDogbWluO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1pbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZHVjZShmdW5jdGlvbiAocHJldjogYW55LCBjdXI6IGFueSkgeyByZXR1cm4gX21pbihwcmV2LCBjdXIpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkaXN0aW5jdDoge1xyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbiAodjogYW55LCBpOiBudW1iZXIsIGFycjogYW55W10pIHsgcmV0dXJuIGFyci5pbmRleE9mKHYpID09PSBpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmlsdGVySW5kZXg6IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGZpbHRlcjogYW55KSB7XHJcbiAgICAgICAgICAgIGxldCBvdXRwdXQgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyKHRoaXNbaV0sIGksIHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY291bnQ6IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGZpbHRlcjogYW55KSB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIodGhpc1tpXSwgaSwgdGhpcykpIHtcclxuICAgICAgICAgICAgICAgICAgICArK3Jlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdW06IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKG1hcHBlcjogYW55KSB7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBtYXBwZXIgPyBtYXBwZXIodGhpc1tpXSwgaSwgdGhpcykgOiB0aGlzW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGF2ZXJhZ2U6IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKG1hcHBlcjogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1bShtYXBwZXIpIC8gdGhpcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9yZGVyQnk6IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgbWFwcGVycyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgbWFwcGVyc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNsaWNlKCkuc29ydChmdW5jdGlvbiAoYTogYW55LCBiOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFwcGVycy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YSA9IG1hcHBlcnNbaV0oYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZiID0gbWFwcGVyc1tpXShiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmEgPiB2Yikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmEgPCB2Yikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBvcmRlckJ5RGVzYzoge1xyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBtYXBwZXJzID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBtYXBwZXJzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChhOiBhbnksIGI6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXBwZXJzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhID0gbWFwcGVyc1tpXShhKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmIgPSBtYXBwZXJzW2ldKGIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YSA+IHZiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmEgPCB2Yikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJpbmFyeVNlYXJjaDoge1xyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodmFsdWU6IGFueSwga2V5TWFwcGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgbGV0IGxvdyA9IDAsIGhpZ2ggPSB0aGlzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHdoaWxlIChsb3cgPD0gaGlnaCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1pZCA9ICgoaGlnaCArIGxvdykgLyAyKSB8IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWlkVmFsdWUgPSBrZXlNYXBwZXIgPyBrZXlNYXBwZXIodGhpc1ttaWRdKSA6IHRoaXNbbWlkXTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbWlkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPiBtaWRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IG1pZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGlnaCA9IG1pZCAtIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBiaW5hcnlJbnNlcnQ6IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGl0ZW06IGFueSwga2V5TWFwcGVyOiBhbnksIHVuaXF1ZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGtleU1hcHBlcikgPT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgICAgICB1bmlxdWUgPSBrZXlNYXBwZXI7XHJcbiAgICAgICAgICAgICAgICBrZXlNYXBwZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGxvdyA9IDAsIGhpZ2ggPSB0aGlzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIGxldCBtaWQgPSBOYU47XHJcbiAgICAgICAgICAgIGxldCBpdGVtVmFsdWUgPSBrZXlNYXBwZXIgPyBrZXlNYXBwZXIoaXRlbSkgOiBpdGVtO1xyXG4gICAgICAgICAgICB3aGlsZSAobG93IDw9IGhpZ2gpIHtcclxuICAgICAgICAgICAgICAgIG1pZCA9ICgoaGlnaCArIGxvdykgLyAyKSB8IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWlkVmFsdWUgPSBrZXlNYXBwZXIgPyBrZXlNYXBwZXIodGhpc1ttaWRdKSA6IHRoaXNbbWlkXTtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtVmFsdWUgPT09IG1pZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuaXF1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbVZhbHVlID4gbWlkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbVZhbHVlIDwgbWlkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBoaWdoID0gbWlkIC0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSBsb3cgPiBtaWQgPyBtaWQgKyAxIDogbWlkO1xyXG4gICAgICAgICAgICB0aGlzLnNwbGljZShpbmRleCwgMCwgaXRlbSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYmluYXJ5RGlzdGluY3Q6IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKGtleU1hcHBlcjogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbiAodjogYW55LCBpOiBudW1iZXIsIGFycjogYW55W10pIHsgcmV0dXJuIGFyci5iaW5hcnlTZWFyY2godiwga2V5TWFwcGVyKSA9PT0gaTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGZpbmRMYXN0OiB7XHJcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChwcmVkaWNhdGU6IGFueSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5sZW5ndGggLSAxOyBpID4gLTE7IC0taSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZWRpY2F0ZSh0aGlzW2ldLCBpLCB0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGZpbmRMYXN0SW5kZXg6IHtcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHByZWRpY2F0ZTogYW55KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPiAtMTsgLS1pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJlZGljYXRlKHRoaXNbaV0sIGksIHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBncm91cEJ5OiB7XHJcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIChncm91cGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgbGV0IGdyb3VwID0gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXY6IGFueSwgbmV4dDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZ3JvdXBLZXkgPSBncm91cGVyKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmV2W2dyb3VwS2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZbZ3JvdXBLZXldID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwcmV2W2dyb3VwS2V5XS5wdXNoKG5leHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XHJcbiAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGdyb3VwKS5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGFyciA9IGdyb3VwW2tleV07XHJcbiAgICAgICAgICAgICAgICBhcnIua2V5ID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9fY2NfZXh0ZW5kZWQ6IHtcclxuICAgICAgICB2YWx1ZTogdHJ1ZVxyXG4gICAgfVxyXG59KTtcclxuXHJcbmV4cG9ydCB7IH07XHJcblxyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTA4LTExIDE2OjQxOjEyXHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA5LTAyIDE0OjUwOjU3XHJcbiAqL1xyXG5cclxuLyoqIOaVsOe7hOW3peWFtyAqL1xyXG5leHBvcnQgY2xhc3MgQXJyYXlVdGlsIHtcclxuICAgIC8qKlxyXG4gICAgICog5pWw57uE5Y676YeN77yM5bm25Yib5bu65LiA5Liq5paw5pWw57uE6L+U5ZueXHJcbiAgICAgKiBAcGFyYW0gYXJyICDmupDmlbDnu4RcclxuICAgICAqL1xyXG4gICAgc3RhdGljIG5vUmVwZWF0ZWQoYXJyOiBhbnlbXSkge1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IFthcnJbMF1dO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCByZXBlYXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByZXMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJbaV0gPT0gcmVzW2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFyZXBlYXQpIHtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGFycltpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWkjeWItuS6jOe7tOaVsOe7hFxyXG4gICAgICogQHBhcmFtIGFycmF5IOebruagh+aVsOe7hCBcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNvcHkyREFycmF5KGFycmF5OiBhbnlbXVtdKTogYW55W11bXSB7XHJcbiAgICAgICAgbGV0IG5ld0FycmF5OiBhbnlbXVtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBuZXdBcnJheS5wdXNoKGFycmF5W2ldLmNvbmNhdCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld0FycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmlzaGVyLVlhdGVzIFNodWZmbGUg6ZqP5py6572u5Lmx566X5rOVXHJcbiAgICAgKiBAcGFyYW0gYXJyYXkg55uu5qCH5pWw57uEXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmaXNoZXJZYXRlc1NodWZmbGUoYXJyYXk6IGFueVtdKTogYW55W10ge1xyXG4gICAgICAgIGxldCBjb3VudCA9IGFycmF5Lmxlbmd0aDtcclxuICAgICAgICB3aGlsZSAoY291bnQpIHtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY291bnQtLSk7XHJcbiAgICAgICAgICAgIGxldCB0ZW1wID0gYXJyYXlbY291bnRdO1xyXG4gICAgICAgICAgICBhcnJheVtjb3VudF0gPSBhcnJheVtpbmRleF07XHJcbiAgICAgICAgICAgIGFycmF5W2luZGV4XSA9IHRlbXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa3t+a3huaVsOe7hFxyXG4gICAgICogQHBhcmFtIGFycmF5IOebruagh+aVsOe7hFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY29uZm91bmQoYXJyYXk6IFtdKTogYW55W10ge1xyXG4gICAgICAgIHJldHVybiBhcnJheS5zbGljZSgpLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIC41KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaVsOe7hOaJgeW5s+WMllxyXG4gICAgICogQHBhcmFtIGFycmF5IOebruagh+aVsOe7hFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZmxhdHRlbmluZyhhcnJheTogYW55W10pIHtcclxuICAgICAgICBmb3IgKDsgYXJyYXkuc29tZSh2ID0+IEFycmF5LmlzQXJyYXkodikpOykgeyAgICAvLyDliKTmlq0gYXJyYXkg5Lit5piv5ZCm5pyJ5pWw57uEXHJcbiAgICAgICAgICAgIGFycmF5ID0gW10uY29uY2F0LmFwcGx5KFtdLCBhcnJheSk7IC8vIOWOi+aJgeaVsOe7hFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWIoOmZpOaVsOe7hOS4reaMh+WumumhuSAqL1xyXG4gICAgc3RhdGljIHJlbW92ZUl0ZW0oYXJyYXk6IGFueVtdLCBpdGVtOiBhbnkpIHtcclxuICAgICAgICBjb25zdCB0ZW1wID0gYXJyYXkuY29uY2F0KCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZW1wLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGVtcFtpXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5ZCI5bm25pWw57uEXHJcbiAgICAgKiBAcGFyYW0gYXJyYXkxIOebruagh+aVsOe7hDFcclxuICAgICAqIEBwYXJhbSBhcnJheTIg55uu5qCH5pWw57uEMlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY29tYmluZUFycmF5cyhhcnJheTE6IGFueVtdLCBhcnJheTI6IGFueVtdKTogYW55W10ge1xyXG4gICAgICAgIHJldHVybiBbLi4uYXJyYXkxLCAuLi5hcnJheTJdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W6ZqP5py65pWw57uE5oiQ5ZGYXHJcbiAgICAgKiBAcGFyYW0gYXJyYXkg55uu5qCH5pWw57uEXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRSYW5kb21WYWx1ZUluQXJyYXkoYXJyYXk6IGFueVtdKTogYW55IHtcclxuICAgICAgICByZXR1cm4gYXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKV07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9nLCB3YXJuIH0gZnJvbSBcImNjXCI7XHJcblxyXG5leHBvcnQgdHlwZSBOZXh0RnVuY3Rpb24gPSAobmV4dEFyZ3M/OiBhbnkpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgdHlwZSBBc3luY0NhbGxiYWNrID0gKG5leHQ6IE5leHRGdW5jdGlvbiwgcGFyYW1zOiBhbnksIGFyZ3M6IGFueSkgPT4gdm9pZDtcclxuXHJcbmludGVyZmFjZSBBc3luY1Rhc2sge1xyXG4gICAgLyoqXHJcbiAgICAgKiDku7vliqF1dWlkXHJcbiAgICAgKi9cclxuICAgIHV1aWQ6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICAqIOS7u+WKoeW8gOWni+aJp+ihjOeahOWbnuiwg1xyXG4gICAgICAqIHBhcmFtczogcHVzaOaXtuS8oOWFpeeahOWPguaVsFxyXG4gICAgICAqIGFyZ3M6IOS4iuS4quS7u+WKoeS8oOadpeeahOWPguaVsFxyXG4gICAgICAqL1xyXG4gICAgY2FsbGJhY2tzOiBBcnJheTxBc3luY0NhbGxiYWNrPjtcclxuICAgIC8qKlxyXG4gICAgICAqIOS7u+WKoeWPguaVsFxyXG4gICAgICAqL1xyXG4gICAgcGFyYW1zOiBhbnlcclxufVxyXG5cclxuLyoqXHJcbiAqIOW8guatpemYn+WIl+WkhOeQhlxyXG4gKiBAZXhhbXBsZVxyXG52YXIgcXVldWU6IEFzeW5jUXVldWUgPSBuZXcgQXN5bmNRdWV1ZSgpO1xyXG5xdWV1ZS5wdXNoKChuZXh0OiBOZXh0RnVuY3Rpb24sIHBhcmFtczogYW55LCBhcmdzOiBhbnkpID0+IHtcclxuICAgIG9vcHMucmVzLmxvYWQoXCJsYW5ndWFnZS9mb250L1wiICsgb29wcy5sYW5ndWFnZS5jdXJyZW50LCBuZXh0KTtcclxufSk7XHJcbnF1ZXVlLnB1c2goKG5leHQ6IE5leHRGdW5jdGlvbiwgcGFyYW1zOiBhbnksIGFyZ3M6IGFueSkgPT4ge1xyXG4gICAgb29wcy5yZXMubG9hZERpcihcImNvbW1vblwiLCBuZXh0KTtcclxufSk7XHJcbnF1ZXVlLmNvbXBsZXRlID0gICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwi5aSE55CG5a6M5oiQXCIpO1xyXG59O1xyXG5xdWV1ZS5wbGF5KCk7XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQXN5bmNRdWV1ZSB7XHJcbiAgICAvLyDku7vliqF0YXNr55qE5ZSv5LiA5qCH6K+GXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfJHV1aWRfY291bnQ6IG51bWJlciA9IDE7XHJcblxyXG4gICAgLy8g5q2j5Zyo6L+Q6KGM55qE5Lu75YqhXHJcbiAgICBwcml2YXRlIF9ydW5uaW5nQXN5bmNUYXNrOiBBc3luY1Rhc2sgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIF9xdWV1ZXM6IEFycmF5PEFzeW5jVGFzaz4gPSBbXTtcclxuXHJcbiAgICAvKiog5Lu75Yqh6Zif5YiXICovXHJcbiAgICBnZXQgcXVldWVzKCk6IEFycmF5PEFzeW5jVGFzaz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9xdWV1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5q2j5Zyo5omn6KGM55qE5byC5q2l5Lu75Yqh5qCH6K+GXHJcbiAgICBwcml2YXRlIF9pc1Byb2Nlc3NpbmdUYXNrVVVJRDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgX2VuYWJsZTogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgLyoqIOaYr+WQpuW8gOWQr+WPr+eUqCAqL1xyXG4gICAgZ2V0IGVuYWJsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlO1xyXG4gICAgfVxyXG4gICAgLyoqIOaYr+WQpuW8gOWQr+WPr+eUqCAqL1xyXG4gICAgc2V0IGVuYWJsZSh2YWw6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fZW5hYmxlID09PSB2YWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9lbmFibGUgPSB2YWw7XHJcbiAgICAgICAgaWYgKHZhbCAmJiB0aGlzLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS7u+WKoemYn+WIl+WujOaIkOWbnuiwg1xyXG4gICAgICovXHJcbiAgICBjb21wbGV0ZTogRnVuY3Rpb24gfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOa3u+WKoOS4gOS4quW8guatpeS7u+WKoeWIsOmYn+WIl+S4rVxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrICDlm57osINcclxuICAgICAqIEBwYXJhbSBwYXJhbXMgICAg5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIHB1c2goY2FsbGJhY2s6IEFzeW5jQ2FsbGJhY2ssIHBhcmFtczogYW55ID0gbnVsbCk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHV1aWQgPSBBc3luY1F1ZXVlLl8kdXVpZF9jb3VudCsrO1xyXG4gICAgICAgIHRoaXMuX3F1ZXVlcy5wdXNoKHtcclxuICAgICAgICAgICAgdXVpZDogdXVpZCxcclxuICAgICAgICAgICAgY2FsbGJhY2tzOiBbY2FsbGJhY2tdLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHV1aWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDlpJrkuKrku7vliqHvvIzlpJrkuKrku7vliqHlh73mlbDkvJrlkIzml7bmiafooYxcclxuICAgICAqIEBwYXJhbSBwYXJhbXMgICAgIOWPguaVsOaNrlxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrcyAg5Zue6LCDXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHVzaE11bHRpKHBhcmFtczogYW55LCAuLi5jYWxsYmFja3M6IEFzeW5jQ2FsbGJhY2tbXSk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHV1aWQgPSBBc3luY1F1ZXVlLl8kdXVpZF9jb3VudCsrO1xyXG4gICAgICAgIHRoaXMuX3F1ZXVlcy5wdXNoKHtcclxuICAgICAgICAgICAgdXVpZDogdXVpZCxcclxuICAgICAgICAgICAgY2FsbGJhY2tzOiBjYWxsYmFja3MsXHJcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gdXVpZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOenu+mZpOS4gOS4qui/mOacquaJp+ihjOeahOW8guatpeS7u+WKoVxyXG4gICAgICogQHBhcmFtIHV1aWQgIOS7u+WKoeWUr+S4gOe8luWPt1xyXG4gICAgICovXHJcbiAgICByZW1vdmUodXVpZDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3J1bm5pbmdBc3luY1Rhc2s/LnV1aWQgPT09IHV1aWQpIHtcclxuICAgICAgICAgICAgd2FybihcIuato+WcqOaJp+ihjOeahOS7u+WKoeS4jeWPr+S7peenu+mZpFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3F1ZXVlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcXVldWVzW2ldLnV1aWQgPT09IHV1aWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXVlcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6Zif5YiX6ZW/5bqmICovXHJcbiAgICBnZXQgc2l6ZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9xdWV1ZXMubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmmK/lkKbmnInmraPlnKjlpITnkIbnmoTku7vliqEgKi9cclxuICAgIGdldCBpc1Byb2Nlc3NpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUHJvY2Vzc2luZ1Rhc2tVVUlEID4gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6Zif5YiX5piv5ZCm5bey5YGc5q2iICovXHJcbiAgICBnZXQgaXNTdG9wKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9xdWV1ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzUHJvY2Vzc2luZykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmraPlnKjmiafooYznmoTku7vliqHlj4LmlbAgKi9cclxuICAgIGdldCBydW5uaW5nUGFyYW1zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9ydW5uaW5nQXN5bmNUYXNrKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ydW5uaW5nQXN5bmNUYXNrLnBhcmFtcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOa4heepuumYn+WIlyAqL1xyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5fcXVldWVzID0gW107XHJcbiAgICAgICAgdGhpcy5faXNQcm9jZXNzaW5nVGFza1VVSUQgPSAwO1xyXG4gICAgICAgIHRoaXMuX3J1bm5pbmdBc3luY1Rhc2sgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDot7Pov4flvZPliY3mraPlnKjmiafooYznmoTku7vliqEgKi9cclxuICAgIHN0ZXAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNQcm9jZXNzaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dCh0aGlzLl9pc1Byb2Nlc3NpbmdUYXNrVVVJRCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5byA5aeL6L+Q6KGM6Zif5YiXXHJcbiAgICAgKiBAcGFyYW0gYXJncyAg5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIHBsYXkoYXJnczogYW55ID0gbnVsbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUHJvY2Vzc2luZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX2VuYWJsZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYWN0aW9uRGF0YTogQXN5bmNUYXNrID0gdGhpcy5fcXVldWVzLnNoaWZ0KCkhO1xyXG4gICAgICAgIGlmIChhY3Rpb25EYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3J1bm5pbmdBc3luY1Rhc2sgPSBhY3Rpb25EYXRhO1xyXG4gICAgICAgICAgICBsZXQgdGFza1VVSUQ6IG51bWJlciA9IGFjdGlvbkRhdGEudXVpZDtcclxuICAgICAgICAgICAgdGhpcy5faXNQcm9jZXNzaW5nVGFza1VVSUQgPSB0YXNrVVVJRDtcclxuICAgICAgICAgICAgbGV0IGNhbGxiYWNrczogQXJyYXk8QXN5bmNDYWxsYmFjaz4gPSBhY3Rpb25EYXRhLmNhbGxiYWNrcztcclxuXHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFja3MubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgIGxldCBuZXh0RnVuYzogTmV4dEZ1bmN0aW9uID0gKG5leHRBcmdzOiBhbnkgPSBudWxsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0KHRhc2tVVUlELCBuZXh0QXJncyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja3NbMF0obmV4dEZ1bmMsIGFjdGlvbkRhdGEucGFyYW1zLCBhcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOWkmuS4quS7u+WKoeWHveaVsOWQjOaXtuaJp+ihjFxyXG4gICAgICAgICAgICAgICAgbGV0IGZudW06IG51bWJlciA9IGNhbGxiYWNrcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV4dEFyZ3NBcnI6IGFueVtdID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV4dEZ1bmM6IE5leHRGdW5jdGlvbiA9IChuZXh0QXJnczogYW55ID0gbnVsbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC0tZm51bTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0QXJnc0Fyci5wdXNoKG5leHRBcmdzIHx8IG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbnVtID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dCh0YXNrVVVJRCwgbmV4dEFyZ3NBcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBrbnVtID0gZm51bTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga251bTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW2ldKG5leHRGdW5jLCBhY3Rpb25EYXRhLnBhcmFtcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzUHJvY2Vzc2luZ1Rhc2tVVUlEID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fcnVubmluZ0FzeW5jVGFzayA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlKGFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5b6A6Zif5YiX5LitcHVzaOS4gOS4quW7tuaXtuS7u+WKoVxyXG4gICAgICogQHBhcmFtIHRpbWUg5q+r56eS5pe26Ze0XHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sg77yI5Y+v6YCJ5Y+C5pWw77yJ5pe26Ze05Yiw5LqG5LmL5ZCO5Zue6LCDXHJcbiAgICAgKi9cclxuICAgIHlpZWxkVGltZSh0aW1lOiBudW1iZXIsIGNhbGxiYWNrOiBGdW5jdGlvbiB8IG51bGwgPSBudWxsKSB7XHJcbiAgICAgICAgbGV0IHRhc2sgPSBmdW5jdGlvbiAobmV4dDogRnVuY3Rpb24sIHBhcmFtczogYW55LCBhcmdzOiBhbnkpIHtcclxuICAgICAgICAgICAgbGV0IF90ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5leHQoYXJncyk7XHJcbiAgICAgICAgICAgIH0sIHRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnB1c2godGFzaywgeyBkZXM6IFwiQXN5bmNRdWV1ZS55aWVsZFRpbWVcIiB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbmV4dCh0YXNrVVVJRDogbnVtYmVyLCBhcmdzOiBhbnkgPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUHJvY2Vzc2luZ1Rhc2tVVUlEID09PSB0YXNrVVVJRCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pc1Byb2Nlc3NpbmdUYXNrVVVJRCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3J1bm5pbmdBc3luY1Rhc2sgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXkoYXJncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcnVubmluZ0FzeW5jVGFzaykge1xyXG4gICAgICAgICAgICAgICAgbG9nKHRoaXMuX3J1bm5pbmdBc3luY1Rhc2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6L+U5Zue5LiA5Liq5omn6KGM5Ye95pWw77yM5omn6KGM5Ye95pWw6LCD55SoY291bnTmrKHlkI7vvIxuZXh05bCG6Kem5Y+RXHJcbiAgICAgKiBAcGFyYW0gY291bnQgXHJcbiAgICAgKiBAcGFyYW0gbmV4dCBcclxuICAgICAqIEByZXR1cm4g6L+U5Zue5LiA5Liq5Yy/5ZCN5Ye95pWwXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBleGN1dGVUaW1lcyhjb3VudDogbnVtYmVyLCBuZXh0OiBGdW5jdGlvbiB8IG51bGwgPSBudWxsKTogRnVuY3Rpb24ge1xyXG4gICAgICAgIGxldCBmbnVtOiBudW1iZXIgPSBjb3VudDtcclxuICAgICAgICBsZXQgY2FsbCA9ICgpID0+IHtcclxuICAgICAgICAgICAgLS1mbnVtO1xyXG4gICAgICAgICAgICBpZiAoZm51bSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgbmV4dCAmJiBuZXh0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhbGw7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA5LTAxIDE4OjAwOjI4XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA5LTAyIDEwOjIyOjM2XHJcbiAqL1xyXG5pbXBvcnQgeyBBdWRpb1NvdXJjZSwgX2RlY29yYXRvciB9IGZyb20gJ2NjJztcclxuY29uc3QgeyBjY2NsYXNzIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIOa4uOaIj+mfs+aViCAqL1xyXG5AY2NjbGFzcygnQXVkaW9FZmZlY3QnKVxyXG5leHBvcnQgY2xhc3MgQXVkaW9FZmZlY3QgZXh0ZW5kcyBBdWRpb1NvdXJjZSB7XHJcbiAgICAvKiog6IOM5pmv6Z+z5LmQ5pKt5pS+5a6M5oiQ5Zue6LCDICovXHJcbiAgICBvbkNvbXBsZXRlOiBGdW5jdGlvbiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihBdWRpb1NvdXJjZS5FdmVudFR5cGUuRU5ERUQsIHRoaXMub25BdWRpb0VuZGVkLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQXVkaW9FbmRlZCgpIHtcclxuICAgICAgICB0aGlzLm9uQ29tcGxldGUgJiYgdGhpcy5vbkNvbXBsZXRlKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBdWRpb0NsaXAsIE5vZGUsIE5vZGVQb29sIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IG9vcHMgfSBmcm9tIFwiLi4vLi4vT29wc1wiO1xyXG5pbXBvcnQgeyByZXNMb2FkZXIgfSBmcm9tIFwiLi4vbG9hZGVyL1Jlc0xvYWRlclwiO1xyXG5pbXBvcnQgeyBBdWRpb0VmZmVjdCB9IGZyb20gXCIuL0F1ZGlvRWZmZWN0XCI7XHJcblxyXG5jb25zdCBBRV9JRF9NQVggPSAzMDAwMDtcclxuXHJcbi8qKiDpn7PmlYjmsaAgKi9cclxuZXhwb3J0IGNsYXNzIEF1ZGlvRWZmZWN0UG9vbCB7XHJcbiAgICBwcml2YXRlIF9zd2l0Y2g6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgLyoqIOmfs+aViOW8gOWFsyAqL1xyXG4gICAgcHVibGljIGdldCBzd2l0Y2goKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N3aXRjaDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgc3dpdGNoKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fc3dpdGNoID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB0aGlzLnN0b3AoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF92b2x1bWU6IG51bWJlciA9IDE7XHJcbiAgICAvKiog5omA5pyJ6Z+z5pWI6Z+z6YePICovXHJcbiAgICBnZXQgdm9sdW1lKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbHVtZTtcclxuICAgIH1cclxuICAgIHNldCB2b2x1bWUodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3ZvbHVtZSA9IHZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLmVmZmVjdHMuZm9yRWFjaChhZSA9PiB7XHJcbiAgICAgICAgICAgIGFlLnZvbHVtZSA9IHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDpn7PmlYjmkq3mlL7lmajlr7nosaHmsaAgKi9cclxuICAgIHByaXZhdGUgcG9vbDogTm9kZVBvb2wgPSBuZXcgTm9kZVBvb2woKTtcclxuICAgIC8qKiDlr7nosaHmsaDpm4blkIggKi9cclxuICAgIHByaXZhdGUgZWZmZWN0czogTWFwPHN0cmluZywgQXVkaW9FZmZlY3Q+ID0gbmV3IE1hcCgpO1xyXG4gICAgLyoqIOeUqOi/h+eahOmfs+aViOi1hOa6kOiusOW9lSAqL1xyXG4gICAgcHJpdmF0ZSByZXM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfYWVJZDogbnVtYmVyID0gMDtcclxuICAgIC8qKiDojrflj5bor7fmsYLllK/kuIDnvJblj7cgKi9cclxuICAgIHByaXZhdGUgZ2V0QWVJZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fYWVJZCA9PSBBRV9JRF9NQVgpIHRoaXMuX2FlSWQgPSAxO1xyXG4gICAgICAgIHRoaXMuX2FlSWQrKztcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWVJZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWKoOi9veS4juaSreaUvumfs+aViFxyXG4gICAgICogQHBhcmFtIHVybCAgICAgICAgICAgICAgICAgIOmfs+aViOi1hOa6kOWcsOWdgOS4jumfs+aViOi1hOa6kFxyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUgICAgICAgICAgIOi1hOa6kOWMheWQjVxyXG4gICAgICogQHBhcmFtIG9uUGxheUNvbXBsZXRlICAgICAgIOaSreaUvuWujOaIkOWbnuiwg1xyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGxvYWQodXJsOiBzdHJpbmcgfCBBdWRpb0NsaXAsIGJ1bmRsZU5hbWU6IHN0cmluZyA9IHJlc0xvYWRlci5kZWZhdWx0QnVuZGxlTmFtZSwgb25QbGF5Q29tcGxldGU/OiBGdW5jdGlvbik6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnN3aXRjaCkgcmV0dXJuIHJlc29sdmUoLTEpO1xyXG5cclxuICAgICAgICAgICAgLy8g5Yib5bu66Z+z5pWI6LWE5rqQXHJcbiAgICAgICAgICAgIGxldCBjbGlwOiBBdWRpb0NsaXA7XHJcbiAgICAgICAgICAgIGlmICh1cmwgaW5zdGFuY2VvZiBBdWRpb0NsaXApIHtcclxuICAgICAgICAgICAgICAgIGNsaXAgPSB1cmw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGlwID0gcmVzTG9hZGVyLmdldCh1cmwsIEF1ZGlvQ2xpcCwgYnVuZGxlTmFtZSkhO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXMuc2V0KGJ1bmRsZU5hbWUsIHVybCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xpcCA9IGF3YWl0IHJlc0xvYWRlci5sb2FkQXN5bmMoYnVuZGxlTmFtZSwgdXJsLCBBdWRpb0NsaXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDotYTmupDlt7Looqvph4rmlL5cclxuICAgICAgICAgICAgaWYgKCFjbGlwLmlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoLTEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgYWVpZCA9IHRoaXMuZ2V0QWVJZCgpO1xyXG4gICAgICAgICAgICBsZXQga2V5OiBzdHJpbmc7XHJcbiAgICAgICAgICAgIGlmICh1cmwgaW5zdGFuY2VvZiBBdWRpb0NsaXApIHtcclxuICAgICAgICAgICAgICAgIGtleSA9IHVybC51dWlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAga2V5ID0gYCR7YnVuZGxlTmFtZX1fJHt1cmx9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBrZXkgKz0gXCJfXCIgKyBhZWlkO1xyXG5cclxuICAgICAgICAgICAgLy8g6I635Y+W6Z+z5pWI5p6c5pKt5pS+5Zmo5pKt5pS+6Z+z5LmQXHJcbiAgICAgICAgICAgIGxldCBhZTogQXVkaW9FZmZlY3Q7XHJcbiAgICAgICAgICAgIGxldCBub2RlOiBOb2RlID0gbnVsbCE7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBvb2wuc2l6ZSgpID09IDApIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBuZXcgTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgbm9kZS5uYW1lID0gXCJBdWRpb0VmZmVjdFwiO1xyXG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnQgPSBvb3BzLmF1ZGlvLm5vZGU7XHJcbiAgICAgICAgICAgICAgICBhZSA9IG5vZGUuYWRkQ29tcG9uZW50KEF1ZGlvRWZmZWN0KSE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBub2RlID0gdGhpcy5wb29sLmdldCgpITtcclxuICAgICAgICAgICAgICAgIGFlID0gbm9kZS5nZXRDb21wb25lbnQoQXVkaW9FZmZlY3QpITtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhZS5vbkNvbXBsZXRlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wdXQoYWVpZCwgdXJsLCBidW5kbGVOYW1lKTsgICAgICAgLy8g5pKt5pS+5a6M5Zue5pS25a+56LGhXHJcbiAgICAgICAgICAgICAgICBvblBsYXlDb21wbGV0ZSAmJiBvblBsYXlDb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYOOAkOmfs+aViOOAkeWbnuaUtu+8jOaxoOS4reWJqeS9memfs+aViOaSreaUvuWZqOOAkCR7dGhpcy5wb29sLnNpemUoKX3jgJFgKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIOiusOW9leato+WcqOaSreaUvueahOmfs+aViOaSreaUvuWZqFxyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdHMuc2V0KGtleSwgYWUpO1xyXG5cclxuICAgICAgICAgICAgYWUudm9sdW1lID0gdGhpcy52b2x1bWU7XHJcbiAgICAgICAgICAgIGFlLmNsaXAgPSBjbGlwO1xyXG4gICAgICAgICAgICBhZS5wbGF5KCk7XHJcblxyXG4gICAgICAgICAgICByZXNvbHZlKGFlaWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zue5pS26Z+z5pWI5pKt5pS+5ZmoXHJcbiAgICAgKiBAcGFyYW0gYWVpZCAgICAgICAgICDmkq3mlL7lmajnvJblj7dcclxuICAgICAqIEBwYXJhbSB1cmwgICAgICAgICAgIOmfs+aViOi3r+W+hFxyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUgICAg6LWE5rqQ5YyF5ZCNXHJcbiAgICAgKi9cclxuICAgIHB1dChhZWlkOiBudW1iZXIsIHVybDogc3RyaW5nIHwgQXVkaW9DbGlwLCBidW5kbGVOYW1lOiBzdHJpbmcgPSByZXNMb2FkZXIuZGVmYXVsdEJ1bmRsZU5hbWUpIHtcclxuICAgICAgICBsZXQga2V5OiBzdHJpbmc7XHJcbiAgICAgICAgaWYgKHVybCBpbnN0YW5jZW9mIEF1ZGlvQ2xpcCkge1xyXG4gICAgICAgICAgICBrZXkgPSB1cmwudXVpZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGtleSA9IGAke2J1bmRsZU5hbWV9XyR7dXJsfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGtleSArPSBcIl9cIiArIGFlaWQ7XHJcblxyXG4gICAgICAgIGxldCBhZSA9IHRoaXMuZWZmZWN0cy5nZXQoa2V5KTtcclxuICAgICAgICBpZiAoYWUgJiYgYWUuY2xpcCkge1xyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdHMuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgIGFlLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5wb29sLnB1dChhZS5ub2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOmHiuaUvuaJgOaciemfs+aViOi1hOa6kOS4juWvueixoeaxoOS4reaSreaUvuWZqCAqL1xyXG4gICAgcmVsZWFzZSgpIHtcclxuICAgICAgICAvLyDph4rmlL7mraPlnKjmkq3mlL7nmoTpn7PmlYhcclxuICAgICAgICB0aGlzLmVmZmVjdHMuZm9yRWFjaChhZSA9PiB7XHJcbiAgICAgICAgICAgIGFlLm5vZGUuZGVzdHJveSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZWZmZWN0cy5jbGVhcigpO1xyXG5cclxuICAgICAgICAvLyDph4rmlL7pn7PmlYjotYTmupBcclxuICAgICAgICB0aGlzLnJlcy5mb3JFYWNoKCh1cmw6IHN0cmluZywgYnVuZGxlTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc0xvYWRlci5yZWxlYXNlKGJ1bmRsZU5hbWUsIHVybCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIOmHiuaUvuaxoOS4reaSreaUvuWZqFxyXG4gICAgICAgIHRoaXMucG9vbC5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlgZzmraLmkq3mlL7miYDmnInpn7PmlYggKi9cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgdGhpcy5lZmZlY3RzLmZvckVhY2goYWUgPT4ge1xyXG4gICAgICAgICAgICBhZS5zdG9wKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaBouWkjeaJgOaciemfs+aViCAqL1xyXG4gICAgcGxheSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc3dpdGNoKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuZWZmZWN0cy5mb3JFYWNoKGFlID0+IHtcclxuICAgICAgICAgICAgYWUucGxheSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmmoLlgZzmiYDmnInpn7PmlYggKi9cclxuICAgIHBhdXNlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zd2l0Y2gpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5lZmZlY3RzLmZvckVhY2goYWUgPT4ge1xyXG4gICAgICAgICAgICBhZS5wYXVzZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQXVkaW9DbGlwLCBDb21wb25lbnQgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgb29wcyB9IGZyb20gXCIuLi8uLi9Pb3BzXCI7XHJcbmltcG9ydCB7IEF1ZGlvRWZmZWN0UG9vbCB9IGZyb20gXCIuL0F1ZGlvRWZmZWN0UG9vbFwiO1xyXG5pbXBvcnQgeyBBdWRpb011c2ljIH0gZnJvbSBcIi4vQXVkaW9NdXNpY1wiO1xyXG5cclxuY29uc3QgTE9DQUxfU1RPUkVfS0VZID0gXCJnYW1lX2F1ZGlvXCI7XHJcblxyXG4vKipcclxuICog6Z+z6aKR566h55CGXHJcbiAqIEBoZWxwICAgIGh0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzg5MyZkb2NfaWQ9Mjg3MzU2NVxyXG4gKiBAZXhhbXBsZVxyXG4gLy8g5qih5Z2X5Yqf6IO96YCa6L+HIG9vcHMuYXVkaW8g6LCD55SoXHJcbiBvb3BzLmF1ZGlvLnBsYXlNdXNpYyhcImF1ZGlvcy9ub2N0dXJuZVwiKTtcclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdWRpb01hbmFnZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgLyoqIOiDjOaZr+mfs+S5kOeuoeeQhuWvueixoSAqL1xyXG4gICAgbXVzaWM6IEF1ZGlvTXVzaWMgPSBudWxsITtcclxuICAgIC8qKiDpn7PmlYjnrqHnkIblr7nosaEgKi9cclxuICAgIGVmZmVjdDogQXVkaW9FZmZlY3RQb29sID0gbmV3IEF1ZGlvRWZmZWN0UG9vbCgpO1xyXG5cclxuICAgIC8qKiDpn7PkuZDnrqHnkIbnirbmgIHmlbDmja4gKi9cclxuICAgIHByaXZhdGUgbG9jYWxfZGF0YTogYW55ID0ge307XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7og4zmma/pn7PkuZDmkq3mlL7lrozmiJDlm57osINcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayDog4zmma/pn7PkuZDmkq3mlL7lrozmiJDlm57osINcclxuICAgICAqL1xyXG4gICAgc2V0TXVzaWNDb21wbGV0ZShjYWxsYmFjazogRnVuY3Rpb24gfCBudWxsID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMubXVzaWMub25Db21wbGV0ZSA9IGNhbGxiYWNrO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pKt5pS+6IOM5pmv6Z+z5LmQXHJcbiAgICAgKiBAcGFyYW0gdXJsICAgICAgICDotYTmupDlnLDlnYBcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAgIOmfs+S5kOaSreaUvuWujOaIkOS6i+S7tlxyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUg6LWE5rqQ5YyF5ZCNXHJcbiAgICAgKi9cclxuICAgIHBsYXlNdXNpYyh1cmw6IHN0cmluZywgY2FsbGJhY2s/OiBGdW5jdGlvbiwgYnVuZGxlTmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLm11c2ljLnN3aXRjaCkge1xyXG4gICAgICAgICAgICB0aGlzLm11c2ljLmxvb3AgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5tdXNpYy5sb2FkKHVybCwgY2FsbGJhY2ssIGJ1bmRsZU5hbWUpLnRoZW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOW+queOr+aSreaUvuiDjOaZr+mfs+S5kCAqL1xyXG4gICAgcGxheU11c2ljTG9vcCh1cmw6IHN0cmluZywgYnVuZGxlTmFtZT86IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLm11c2ljLnN3aXRjaCkge1xyXG4gICAgICAgICAgICB0aGlzLm11c2ljLmxvb3AgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm11c2ljLmxvYWQodXJsLCBudWxsISwgYnVuZGxlTmFtZSkudGhlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5YGc5q2i6IOM5pmv6Z+z5LmQ5pKt5pS+ICovXHJcbiAgICBzdG9wTXVzaWMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubXVzaWMuc3dpdGNoICYmIHRoaXMubXVzaWMucGxheWluZykge1xyXG4gICAgICAgICAgICB0aGlzLm11c2ljLnN0b3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bog4zmma/pn7PkuZDmkq3mlL7ov5vluqZcclxuICAgICAqL1xyXG4gICAgZ2V0IHByb2dyZXNzTXVzaWMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tdXNpYy5wcm9ncmVzcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruiDjOaZr+S5kOaSreaUvui/m+W6plxyXG4gICAgICogQHBhcmFtIHZhbHVlICAgICDmkq3mlL7ov5vluqblgLxcclxuICAgICAqL1xyXG4gICAgc2V0IHByb2dyZXNzTXVzaWModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubXVzaWMucHJvZ3Jlc3MgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluiDjOaZr+mfs+S5kOmfs+mHj1xyXG4gICAgICovXHJcbiAgICBnZXQgdm9sdW1lTXVzaWMoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tdXNpYy52b2x1bWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7og4zmma/pn7PkuZDpn7Pph49cclxuICAgICAqIEBwYXJhbSB2YWx1ZSAgICAg6Z+z5LmQ6Z+z6YeP5YC8XHJcbiAgICAgKi9cclxuICAgIHNldCB2b2x1bWVNdXNpYyh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5tdXNpYy52b2x1bWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnNhdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluiDjOaZr+mfs+S5kOW8gOWFs+WAvFxyXG4gICAgICovXHJcbiAgICBnZXQgc3dpdGNoTXVzaWMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXVzaWMuc3dpdGNoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u6IOM5pmv6Z+z5LmQ5byA5YWz5YC8XHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgICAgIOW8gOWFs+WAvFxyXG4gICAgICovXHJcbiAgICBzZXQgc3dpdGNoTXVzaWModmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLm11c2ljLnN3aXRjaCA9IHZhbHVlO1xyXG4gICAgICAgIGlmICghdmFsdWUpIHRoaXMubXVzaWMuc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuc2F2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pKt5pS+6Z+z5pWIXHJcbiAgICAgKiBAcGFyYW0gdXJsICAgICAgICDotYTmupDlnLDlnYBcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAgIOWKoOi9veWujOaIkOWbnuiwg1xyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUg6LWE5rqQ5YyF5ZCNXHJcbiAgICAgKi9cclxuICAgIHBsYXlFZmZlY3QodXJsOiBzdHJpbmcgfCBBdWRpb0NsaXAsIGJ1bmRsZU5hbWU/OiBzdHJpbmcsIG9uUGxheUNvbXBsZXRlPzogRnVuY3Rpb24pOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVmZmVjdC5sb2FkKHVybCwgYnVuZGxlTmFtZSwgb25QbGF5Q29tcGxldGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlm57mlLbpn7PmlYjmkq3mlL7lmaggKi9cclxuICAgIHB1dEVmZmVjdChhZWlkOiBudW1iZXIsIHVybDogc3RyaW5nIHwgQXVkaW9DbGlwLCBidW5kbGVOYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5lZmZlY3QucHV0KGFlaWQsIHVybCwgYnVuZGxlTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiOt+WPlumfs+aViOmfs+mHjyAqL1xyXG4gICAgZ2V0IHZvbHVtZUVmZmVjdCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVmZmVjdC52b2x1bWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7ojrflj5bpn7PmlYjpn7Pph49cclxuICAgICAqIEBwYXJhbSB2YWx1ZSAgICAg6Z+z5pWI6Z+z6YeP5YC8XHJcbiAgICAgKi9cclxuICAgIHNldCB2b2x1bWVFZmZlY3QodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuZWZmZWN0LnZvbHVtZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuc2F2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5bpn7PmlYjlvIDlhbPlgLwgKi9cclxuICAgIGdldCBzd2l0Y2hFZmZlY3QoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWZmZWN0LnN3aXRjaDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9rumfs+aViOW8gOWFs+WAvFxyXG4gICAgICogQHBhcmFtIHZhbHVlICAgICDpn7PmlYjlvIDlhbPlgLxcclxuICAgICAqL1xyXG4gICAgc2V0IHN3aXRjaEVmZmVjdCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZWZmZWN0LnN3aXRjaCA9IHZhbHVlO1xyXG4gICAgICAgIGlmICghdmFsdWUpIHRoaXMuZWZmZWN0LnN0b3AoKTtcclxuICAgICAgICB0aGlzLnNhdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5oGi5aSN5b2T5YmN5pqC5YGc55qE6Z+z5LmQ5LiO6Z+z5pWI5pKt5pS+ICovXHJcbiAgICByZXN1bWVBbGwoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm11c2ljLnBsYXlpbmcgJiYgdGhpcy5tdXNpYy5wcm9ncmVzcyA+IDApIHRoaXMubXVzaWMucGxheSgpO1xyXG4gICAgICAgIHRoaXMuZWZmZWN0LnBsYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pqC5YGc5b2T5YmN6Z+z5LmQ5LiO6Z+z5pWI55qE5pKt5pS+ICovXHJcbiAgICBwYXVzZUFsbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5tdXNpYy5wbGF5aW5nKSB0aGlzLm11c2ljLnBhdXNlKCk7XHJcbiAgICAgICAgdGhpcy5lZmZlY3QucGF1c2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5YGc5q2i5b2T5YmN6Z+z5LmQ5LiO6Z+z5pWI55qE5pKt5pS+ICovXHJcbiAgICBzdG9wQWxsKCkge1xyXG4gICAgICAgIHRoaXMubXVzaWMuc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuZWZmZWN0LnN0b3AoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5L+d5a2Y6Z+z5LmQ6Z+z5pWI55qE6Z+z6YeP44CB5byA5YWz6YWN572u5pWw5o2u5Yiw5pys5ZywICovXHJcbiAgICBzYXZlKCkge1xyXG4gICAgICAgIHRoaXMubG9jYWxfZGF0YS52b2x1bWVfbXVzaWMgPSB0aGlzLm11c2ljLnZvbHVtZTtcclxuICAgICAgICB0aGlzLmxvY2FsX2RhdGEudm9sdW1lX2VmZmVjdCA9IHRoaXMuZWZmZWN0LnZvbHVtZTtcclxuICAgICAgICB0aGlzLmxvY2FsX2RhdGEuc3dpdGNoX211c2ljID0gdGhpcy5tdXNpYy5zd2l0Y2g7XHJcbiAgICAgICAgdGhpcy5sb2NhbF9kYXRhLnN3aXRjaF9lZmZlY3QgPSB0aGlzLmVmZmVjdC5zd2l0Y2g7XHJcblxyXG4gICAgICAgIG9vcHMuc3RvcmFnZS5zZXQoTE9DQUxfU1RPUkVfS0VZLCB0aGlzLmxvY2FsX2RhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmnKzlnLDliqDovb3pn7PkuZDpn7PmlYjnmoTpn7Pph4/jgIHlvIDlhbPphY3nva7mlbDmja7lubborr7nva7liLDmuLjmiI/kuK0gKi9cclxuICAgIGxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5tdXNpYyA9IHRoaXMuZ2V0Q29tcG9uZW50KEF1ZGlvTXVzaWMpIHx8IHRoaXMuYWRkQ29tcG9uZW50KEF1ZGlvTXVzaWMpITtcclxuXHJcbiAgICAgICAgdGhpcy5sb2NhbF9kYXRhID0gb29wcy5zdG9yYWdlLmdldEpzb24oTE9DQUxfU1RPUkVfS0VZKTtcclxuICAgICAgICBpZiAodGhpcy5sb2NhbF9kYXRhKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2gge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZURlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZURlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRTdGF0ZSgpIHtcclxuICAgICAgICB0aGlzLm11c2ljLnZvbHVtZSA9IHRoaXMubG9jYWxfZGF0YS52b2x1bWVfbXVzaWM7XHJcbiAgICAgICAgdGhpcy5lZmZlY3Qudm9sdW1lID0gdGhpcy5sb2NhbF9kYXRhLnZvbHVtZV9lZmZlY3Q7XHJcbiAgICAgICAgdGhpcy5tdXNpYy5zd2l0Y2ggPSB0aGlzLmxvY2FsX2RhdGEuc3dpdGNoX211c2ljO1xyXG4gICAgICAgIHRoaXMuZWZmZWN0LnN3aXRjaCA9IHRoaXMubG9jYWxfZGF0YS5zd2l0Y2hfZWZmZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0U3RhdGVEZWZhdWx0KCkge1xyXG4gICAgICAgIHRoaXMubG9jYWxfZGF0YSA9IHt9O1xyXG4gICAgICAgIHRoaXMubXVzaWMudm9sdW1lID0gMTtcclxuICAgICAgICB0aGlzLmVmZmVjdC52b2x1bWUgPSAxO1xyXG4gICAgICAgIHRoaXMubXVzaWMuc3dpdGNoID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVmZmVjdC5zd2l0Y2ggPSB0cnVlO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wNi0yMSAxMjowNToxM1xyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wNS0xNiAwOToxMTozMFxyXG4gKi9cclxuaW1wb3J0IHsgQXVkaW9DbGlwLCBBdWRpb1NvdXJjZSwgX2RlY29yYXRvciB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgcmVzTG9hZGVyIH0gZnJvbSAnLi4vbG9hZGVyL1Jlc0xvYWRlcic7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIG1lbnUgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiogXHJcbiAqIOiDjOaZr+mfs+S5kCBcclxuICogMeOAgeaSreaUvuS4gOS4quaWsOiDjOaZr+mfs+S5kOaXtu+8jOWFiOWKoOi9vemfs+S5kOi1hOa6kO+8jOeEtuWQjuWBnOatouato+WcqOaSreaUvueahOiDjOaZr+i1hOa6kOWQjOaXtuaWveaUvuW9k+WJjeiDjOaZr+mfs+S5kOi1hOa6kO+8jOacgOWQjuaSreaUvuaWsOeahOiDjOaZr+mfs+S5kFxyXG4gKi9cclxuQGNjY2xhc3MoJ0F1ZGlvTXVzaWMnKVxyXG5leHBvcnQgY2xhc3MgQXVkaW9NdXNpYyBleHRlbmRzIEF1ZGlvU291cmNlIHtcclxuICAgIC8qKiDog4zmma/pn7PkuZDlvIDlhbMgKi9cclxuICAgIHN3aXRjaDogYm9vbGVhbiA9IHRydWU7XHJcbiAgICAvKiog6IOM5pmv6Z+z5LmQ5pKt5pS+5a6M5oiQ5Zue6LCDICovXHJcbiAgICBvbkNvbXBsZXRlOiBGdW5jdGlvbiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgX3Byb2dyZXNzOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfaXNMb2FkaW5nOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIF9uZXh0QnVuZGxlTmFtZTogc3RyaW5nID0gbnVsbCE7ICAgLy8g5LiL5LiA5Liq6Z+z5LmQ6LWE5rqQ5YyFXHJcbiAgICBwcml2YXRlIF9uZXh0VXJsOiBzdHJpbmcgPSBudWxsITsgICAgICAgICAgLy8g5LiL5LiA5Liq5pKt5pS+6Z+z5LmQXHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgLy8gdGhpcy5ub2RlLm9uKEF1ZGlvU291cmNlLkV2ZW50VHlwZS5TVEFSVEVELCB0aGlzLm9uQXVkaW9TdGFydGVkLCB0aGlzKTtcclxuICAgICAgICB0aGlzLm5vZGUub24oQXVkaW9Tb3VyY2UuRXZlbnRUeXBlLkVOREVELCB0aGlzLm9uQXVkaW9FbmRlZCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBvbkF1ZGlvU3RhcnRlZCgpIHsgfVxyXG5cclxuICAgIHByaXZhdGUgb25BdWRpb0VuZGVkKCkge1xyXG4gICAgICAgIHRoaXMub25Db21wbGV0ZSAmJiB0aGlzLm9uQ29tcGxldGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6I635Y+W6Z+z5LmQ5pKt5pS+6L+b5bqmICovXHJcbiAgICBnZXQgcHJvZ3Jlc3MoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5kdXJhdGlvbiA+IDApXHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2dyZXNzID0gdGhpcy5jdXJyZW50VGltZSAvIHRoaXMuZHVyYXRpb247XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2dyZXNzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7pn7PkuZDlvZPliY3mkq3mlL7ov5vluqZcclxuICAgICAqIEBwYXJhbSB2YWx1ZSAgICAg6L+b5bqm55m+5YiG5q+UMOWIsDHkuYvpl7RcclxuICAgICAqL1xyXG4gICAgc2V0IHByb2dyZXNzKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9wcm9ncmVzcyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSB2YWx1ZSAqIHRoaXMuZHVyYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3pn7PkuZDlubbmkq3mlL5cclxuICAgICAqIEBwYXJhbSB1cmwgICAgICAgICAg6Z+z5LmQ6LWE5rqQ5Zyw5Z2AXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgICAgIOWKoOi9veWujOaIkOWbnuiwg1xyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUgICDotYTmupDljIXlkI1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgbG9hZCh1cmw6IHN0cmluZywgY2FsbGJhY2s/OiBGdW5jdGlvbiwgYnVuZGxlTmFtZTogc3RyaW5nID0gcmVzTG9hZGVyLmRlZmF1bHRCdW5kbGVOYW1lKSB7XHJcbiAgICAgICAgLy8g5LiL5LiA5Liq5Yqg6L2955qE6IOM5pmv6Z+z5LmQ6LWE5rqQXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzTG9hZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLl9uZXh0QnVuZGxlTmFtZSA9IGJ1bmRsZU5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuX25leHRVcmwgPSB1cmw7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzTG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgdmFyIGRhdGE6IEF1ZGlvQ2xpcCA9IGF3YWl0IHJlc0xvYWRlci5sb2FkQXN5bmMoYnVuZGxlTmFtZSwgdXJsLCBBdWRpb0NsaXApO1xyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgLy8g5aSE55CG562J5b6F5Yqg6L2955qE6IOM5pmv6Z+z5LmQXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9uZXh0VXJsICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIC8vIOWKoOi9veetieW+heaSreaUvueahOiDjOaZr+mfs+S5kFxyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkKHRoaXMuX25leHRVcmwsIGNhbGxiYWNrLCB0aGlzLl9uZXh0QnVuZGxlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9uZXh0QnVuZGxlTmFtZSA9IHRoaXMuX25leHRVcmwgPSBudWxsITtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g5q2j5Zyo5pKt5pS+55qE5pe25YCZ5YWI5YWz6ZetXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbGF5aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g5Yig6Zmk5b2T5YmN5q2j5Zyo5pKt5pS+55qE6Z+z5LmQXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbGVhc2UoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDmkq3mlL7og4zmma/pn7PkuZBcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xpcCA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6YeK5pS+5b2T5YmN6IOM5pmv6Z+z5LmQ6LWE5rqQICovXHJcbiAgICByZWxlYXNlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNsaXApIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpcC5kZWNSZWYoKTtcclxuICAgICAgICAgICAgdGhpcy5jbGlwID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBCVHJlZU5vZGUgfSBmcm9tICcuL0JUcmVlTm9kZSc7XHJcbmltcG9ydCB7IElDb250cm9sIH0gZnJvbSAnLi9JQ29udHJvbCc7XHJcblxyXG5sZXQgY291bnRVbm5hbWVkID0gMDtcclxuXHJcbi8qKiDooYzkuLrmoJEgKi9cclxuZXhwb3J0IGNsYXNzIEJlaGF2aW9yVHJlZSBpbXBsZW1lbnRzIElDb250cm9sIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgdGl0bGU6IHN0cmluZztcclxuXHJcbiAgICAvKiog5qC56IqC54K5ICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yb290OiBCVHJlZU5vZGU7XHJcbiAgICAvKiog5b2T5YmN5omn6KGM6IqC54K5ICovXHJcbiAgICBwcml2YXRlIF9jdXJyZW50ITogQlRyZWVOb2RlO1xyXG4gICAgLyoqIOaYr+WQpuW3suW8gOWni+aJp+ihjCAqL1xyXG4gICAgcHJpdmF0ZSBfc3RhcnRlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoqIOWklumDqOWPguaVsOWvueixoSAqL1xyXG4gICAgcHJpdmF0ZSBfYmxhY2tib2FyZDogYW55O1xyXG5cclxuICAgIC8qKiDmmK/lkKblt7LlvIDlp4vmiafooYwgKi9cclxuICAgIHB1YmxpYyBnZXQgc3RhcnRlZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaehOmAoOWHveaVsFxyXG4gICAgICogQHBhcmFtIG5vZGUgICAgICAgICAg5qC56IqC54K5XHJcbiAgICAgKiBAcGFyYW0gYmxhY2tib2FyZCAgICDlpJbpg6jlj4LmlbDlr7nosaFcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKG5vZGU6IEJUcmVlTm9kZSwgYmxhY2tib2FyZD86IGFueSkge1xyXG4gICAgICAgIGNvdW50VW5uYW1lZCArPSAxO1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSBub2RlLmNvbnN0cnVjdG9yLm5hbWUgKyAnKGJ0cmVlXycgKyAoY291bnRVbm5hbWVkKSArICcpJztcclxuICAgICAgICB0aGlzLl9yb290ID0gbm9kZTtcclxuICAgICAgICB0aGlzLl9ibGFja2JvYXJkID0gYmxhY2tib2FyZDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6K6+572u6KGM5Li66YC76L6R5Lit55qE5YWx5Lqr5pWw5o2uICovXHJcbiAgICBwdWJsaWMgc2V0T2JqZWN0KGJsYWNrYm9hcmQ6IGFueSkge1xyXG4gICAgICAgIHRoaXMuX2JsYWNrYm9hcmQgPSBibGFja2JvYXJkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmiafooYzooYzkuLrmoJHpgLvovpEgKi9cclxuICAgIHB1YmxpYyBydW4oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihg6KGM5Li65qCR44CQJHt0aGlzLnRpdGxlfeOAkeacquiwg+eUqOatpemqpO+8jOWcqOacgOWQjuS4gOasoeiwg+eUqOatpemqpOaXtuacieS4gOS4quS7u+WKoeacquWujOaIkGApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IEJlaGF2aW9yVHJlZS5nZXROb2RlKHRoaXMuX3Jvb3QpO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSBub2RlO1xyXG4gICAgICAgIG5vZGUuc2V0Q29udHJvbCh0aGlzKTtcclxuICAgICAgICBub2RlLnN0YXJ0KHRoaXMuX2JsYWNrYm9hcmQpO1xyXG4gICAgICAgIG5vZGUucnVuKHRoaXMuX2JsYWNrYm9hcmQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBydW5uaW5nKG5vZGU6IEJUcmVlTm9kZSkge1xyXG4gICAgICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3VjY2VzcygpIHtcclxuICAgICAgICB0aGlzLl9jdXJyZW50LmVuZCh0aGlzLl9ibGFja2JvYXJkKTtcclxuICAgICAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZhaWwoKSB7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudC5lbmQodGhpcy5fYmxhY2tib2FyZCk7XHJcbiAgICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG4gICAgc3RhdGljIF9yZWdpc3RlcmVkTm9kZXM6IE1hcDxzdHJpbmcsIEJUcmVlTm9kZT4gPSBuZXcgTWFwPHN0cmluZywgQlRyZWVOb2RlPigpO1xyXG5cclxuICAgIHN0YXRpYyByZWdpc3RlcihuYW1lOiBzdHJpbmcsIG5vZGU6IEJUcmVlTm9kZSkge1xyXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyZWROb2Rlcy5zZXQobmFtZSwgbm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldE5vZGUobmFtZTogc3RyaW5nIHwgQlRyZWVOb2RlKTogQlRyZWVOb2RlIHtcclxuICAgICAgICBjb25zdCBub2RlID0gbmFtZSBpbnN0YW5jZW9mIEJUcmVlTm9kZSA/IG5hbWUgOiB0aGlzLl9yZWdpc3RlcmVkTm9kZXMuZ2V0KG5hbWUpO1xyXG4gICAgICAgIGlmICghbm9kZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOaXoOazleaJvuWIsOiKgueCueOAkCR7bmFtZX3jgJHvvIzlj6/og73lroPmsqHmnInms6jlhozov4dgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQnV0dG9uLCBjb2xvciwgQ29sb3IsIENvbXBvbmVudCwgRW51bSwgRXZlbnRIYW5kbGVyLCBTcHJpdGVGcmFtZSwgX2RlY29yYXRvciB9IGZyb20gXCJjY1wiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgbWVudSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbmVudW0gUEFSQU1fVFlQRSB7XHJcbiAgICBDSElMRFJFTl9JTkRFWCxcclxuICAgIENISUxEUkVOX05BTUVcclxufVxyXG5cclxuLyoqXHJcbiAqIOe+pOS9k+S6i+S7tu+8jOmAguWQiOe7keWumuiKgueCuee7hOeahOWbnuiwg+S/oeaBr1xyXG4gKiDlsIbor6Xnu4Tku7bnmoTmiYDlpIToioLngrnnmoTmiYDmnInlrZDoioLngrnvvIznu5Hlrprnm7jlkIznmoTlm57osIPlr7nosaHvvIzlubblsIbnu4Tku7blkI3orr7nva7liLBjdXN0b21FdmVudERhdGHlsZ7mgKfkuK1cclxuICovXHJcbkBjY2NsYXNzXHJcbkBtZW51KFwiT29wc0ZyYW1ld29yay9VSS9CdXR0b24gR3JvdXAg77yI5oyJ6ZKu57uE5o6n5Yi277yJXCIpXHJcbmV4cG9ydCBjbGFzcyBCaHZCdXR0b25Hcm91cCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEVudW0oQnV0dG9uLlRyYW5zaXRpb24pXHJcbiAgICB9KVxyXG4gICAgdHJhbnNpdGlvbjogbnVtYmVyID0gQnV0dG9uLlRyYW5zaXRpb24uTk9ORTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2l0aW9uID09PSBCdXR0b24uVHJhbnNpdGlvbi5DT0xPUlxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBob3ZlckNvbG9yOiBDb2xvciA9IGNvbG9yKDI1NSwgMjU1LCAyNTUpO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb24gPT09IEJ1dHRvbi5UcmFuc2l0aW9uLkNPTE9SXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIG5vcm1hbENvbG9yOiBDb2xvciA9IGNvbG9yKDIxNCwgMjE0LCAyMTQpO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb24gPT09IEJ1dHRvbi5UcmFuc2l0aW9uLkNPTE9SO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwcmVzc2VkQ29sb3I6IENvbG9yID0gY29sb3IoMjExLCAyMTEsIDIxMSk7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbiA9PT0gQnV0dG9uLlRyYW5zaXRpb24uQ09MT1I7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIGRpc2FibGVkQ29sb3I6IENvbG9yID0gY29sb3IoMTI0LCAxMjQsIDEyNCk7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBTcHJpdGVGcmFtZSxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbiA9PT0gQnV0dG9uLlRyYW5zaXRpb24uU1BSSVRFO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBub3JtYWxTcHJpdGU6IFNwcml0ZUZyYW1lIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBTcHJpdGVGcmFtZSxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbiA9PT0gQnV0dG9uLlRyYW5zaXRpb24uU1BSSVRFO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwcmVzc2VkU3ByaXRlOiBTcHJpdGVGcmFtZSB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogU3ByaXRlRnJhbWUsXHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb24gPT09IEJ1dHRvbi5UcmFuc2l0aW9uLlNQUklURTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgaG92ZXJTcHJpdGU6IFNwcml0ZUZyYW1lIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBTcHJpdGVGcmFtZSxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbiA9PT0gQnV0dG9uLlRyYW5zaXRpb24uU1BSSVRFO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBkaXNhYmxlZFNwcml0ZTogU3ByaXRlRnJhbWUgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50cmFuc2l0aW9uID09PSBCdXR0b24uVHJhbnNpdGlvbi5TQ0FMRSB8fCB0aGlzLnRyYW5zaXRpb24gPT09IEJ1dHRvbi5UcmFuc2l0aW9uLkNPTE9SO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBkdXJhdGlvbjogbnVtYmVyID0gMS4wO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zaXRpb24gPT09IEJ1dHRvbi5UcmFuc2l0aW9uLlNDQUxFO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICB6b29tU2NhbGU6IG51bWJlciA9IDEuMTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEVudW0oUEFSQU1fVFlQRSlcclxuICAgIH0pXHJcbiAgICBwYXJhbVR5cGU6IFBBUkFNX1RZUEUgPSBQQVJBTV9UWVBFLkNISUxEUkVOX0lOREVYO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogW0V2ZW50SGFuZGxlcl1cclxuICAgIH0pXHJcbiAgICB0b3VjaEV2ZW50czogRXZlbnRIYW5kbGVyW10gPSBbXTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6ICfop4Tpgb8zLnjlvJXmk45CVUfvvIxFdmVudEhhbmRsZXIuY29tcG9uZW505L2N5Li656m65a+86Ie05om+5LiN5Yiw6Kem5Y+R5LqL5Lu255qE6ISa5pys5ZCN55qE6Zeu6aKYJyxcclxuICAgICAgICByZWFkb25seTogdHJ1ZVxyXG4gICAgfSlcclxuICAgIEV2ZW50SGFuZGxlcl9jb21wb25lbnQ6IHN0cmluZyA9IFwiVk1Nb2RpZnlcIjtcclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLmNoaWxkcmVuLmZvckVhY2goKG5vZGUsIG5vZGVJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgY29tcDogQnV0dG9uID0gbm9kZS5nZXRDb21wb25lbnQoQnV0dG9uKSE7XHJcbiAgICAgICAgICAgIGlmIChjb21wID09IG51bGwpIGNvbXAgPSBub2RlLmFkZENvbXBvbmVudChCdXR0b24pO1xyXG5cclxuICAgICAgICAgICAgLy8g5ZCM5q2l5bGe5oCnXHJcblxyXG4gICAgICAgICAgICAvLyBjb21wLnRhcmdldCA9IG5vZGU7XHJcbiAgICAgICAgICAgIC8vIGNvbXAudHJhbnNpdGlvbiA9IHRoaXMudHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgLy8gY29tcC56b29tU2NhbGUgPSB0aGlzLnpvb21TY2FsZTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbXAuZGlzYWJsZWRTcHJpdGUgPSB0aGlzLmRpc2FibGVkU3ByaXRlO1xyXG4gICAgICAgICAgICAvLyBjb21wLmhvdmVyU3ByaXRlID0gdGhpcy5ob3ZlclNwcml0ZTtcclxuICAgICAgICAgICAgLy8gY29tcC5ub3JtYWxTcHJpdGUgPSB0aGlzLm5vcm1hbFNwcml0ZTtcclxuICAgICAgICAgICAgLy8gY29tcC5wcmVzc2VkU3ByaXRlID0gdGhpcy5wcmVzc2VkU3ByaXRlO1xyXG5cclxuICAgICAgICAgICAgLy8gY29tcC5ob3ZlckNvbG9yID0gdGhpcy5ob3ZlckNvbG9yO1xyXG4gICAgICAgICAgICAvLyBjb21wLm5vcm1hbENvbG9yID0gdGhpcy5ub3JtYWxDb2xvcjtcclxuICAgICAgICAgICAgLy8gY29tcC5wcmVzc2VkQ29sb3IgPSB0aGlzLnByZXNzZWRDb2xvcjtcclxuICAgICAgICAgICAgLy8gY29tcC5kaXNhYmxlZENvbG9yID0gdGhpcy5kaXNhYmxlZENvbG9yO1xyXG5cclxuICAgICAgICAgICAgLy8g57uR5a6a5Zue6LCD5LqL5Lu2XHJcbiAgICAgICAgICAgIHRoaXMudG91Y2hFdmVudHMuZm9yRWFjaCgoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIOWFi+mahuaVsOaNru+8jOavj+S4quiKgueCueiOt+WPlueahOmDveaYr+S4jeWQjOeahOWbnuiwg1xyXG4gICAgICAgICAgICAgICAgbGV0IGhkID0gbmV3IEV2ZW50SGFuZGxlcigpOy8vY29weeWvueixoVxyXG4gICAgICAgICAgICAgICAgaGQuY29tcG9uZW50ID0gZXZlbnQuY29tcG9uZW50ID09IFwiXCIgPyB0aGlzLkV2ZW50SGFuZGxlcl9jb21wb25lbnQgOiBldmVudC5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICBoZC5oYW5kbGVyID0gZXZlbnQuaGFuZGxlcjtcclxuICAgICAgICAgICAgICAgIGhkLnRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtVHlwZSA9PT0gUEFSQU1fVFlQRS5DSElMRFJFTl9JTkRFWCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhkLmN1c3RvbUV2ZW50RGF0YSA9IG5vZGVJbmRleC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGQuY3VzdG9tRXZlbnREYXRhID0gbm9kZS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29tcC5jbGlja0V2ZW50cy5wdXNoKGhkKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDQ0ludGVnZXIsIENvbXBvbmVudCwgZXJyb3IsIFNwcml0ZSwgU3ByaXRlRnJhbWUsIF9kZWNvcmF0b3IgfSBmcm9tIFwiY2NcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHksIGV4ZWN1dGVJbkVkaXRNb2RlLCByZXF1aXJlQ29tcG9uZW50LCBtZW51IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIOWbvueJh+WIh+aNoiAqL1xyXG5AY2NjbGFzc1xyXG5AZXhlY3V0ZUluRWRpdE1vZGVcclxuQHJlcXVpcmVDb21wb25lbnQoU3ByaXRlKVxyXG5AbWVudShcIk9vcHNGcmFtZXdvcmsvVUkvRnJhbWUgSW5kZXgg77yI5Zu+54mH5YiH5o2i77yJXCIpXHJcbmV4cG9ydCBjbGFzcyBCaHZGcmFtZUluZGV4IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogW1Nwcml0ZUZyYW1lXSxcclxuICAgICAgICB0b29sdGlwOiAnc3ByaXRl5bCG5Lya55So5Yiw5bin5Zu+54mHJ1xyXG4gICAgfSlcclxuICAgIHNwcml0ZUZyYW1lczogQXJyYXk8U3ByaXRlRnJhbWUgfCBudWxsPiA9IFtudWxsXTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IENDSW50ZWdlcixcclxuICAgICAgICB0b29sdGlwOiAn5b2T5YmN5pi+56S655qE5bin5Zu+J1xyXG4gICAgfSlcclxuICAgIGdldCBpbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXg7XHJcbiAgICB9XHJcbiAgICBzZXQgaW5kZXgodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IDApIHJldHVybjtcclxuICAgICAgICB0aGlzLl9pbmRleCA9IHZhbHVlICUgdGhpcy5zcHJpdGVGcmFtZXMubGVuZ3RoO1xyXG4gICAgICAgIGxldCBzcHJpdGUgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KFNwcml0ZSkhO1xyXG4gICAgICAgIC8v6K6+572uIFNwcml0ZSDnu4Tku7bnmoRzcHJpdGVGcmFtZeWxnuaAp++8jOWPmOaNouWbvueJhyAgICAgICAgICAgICAgIFxyXG4gICAgICAgIHNwcml0ZS5zcHJpdGVGcmFtZSA9IHRoaXMuc3ByaXRlRnJhbWVzW3RoaXMuX2luZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICBAcHJvcGVydHlcclxuICAgIHByaXZhdGUgX2luZGV4OiBudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKiDpgJrov4forr7nva7luKflkI3lrZfmnaXorr7nva7lr7nosaEgKi9cclxuICAgIHNldE5hbWUobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5zcHJpdGVGcmFtZXMuZmluZEluZGV4KHYgPT4geyByZXR1cm4gdiEubmFtZSA9PSBuYW1lIH0pO1xyXG4gICAgICAgIGlmIChpbmRleCA8IDApIHsgZXJyb3IoJ2ZyYW1lSW5kZXgg6K6+572u5LqG5LiN5a2Y5Zyo55qEbmFtZTonLCBuYW1lKSB9XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4IHx8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOmaj+acuuiMg+WbtOiuvue9ruW4p+WbvueJhyAqL1xyXG4gICAgcmFuZG9tKG1pbj86IG51bWJlciwgbWF4PzogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNwcml0ZUZyYW1lcykgcmV0dXJuO1xyXG4gICAgICAgIGxldCBmcmFtZU1heCA9IHRoaXMuc3ByaXRlRnJhbWVzLmxlbmd0aDtcclxuICAgICAgICBpZiAobWluID09IG51bGwgfHwgbWluIDwgMCkgbWluID0gMDtcclxuICAgICAgICBpZiAobWF4ID09IG51bGwgfHwgbWF4ID4gZnJhbWVNYXgpIG1heCA9IGZyYW1lTWF4O1xyXG5cclxuICAgICAgICB0aGlzLmluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW4pO1xyXG4gICAgfVxyXG5cclxuICAgIG5leHQoKSB7XHJcbiAgICAgICAgdGhpcy5pbmRleCsrO1xyXG4gICAgfVxyXG5cclxuICAgIHByZXZpb3VzKCkge1xyXG4gICAgICAgIHRoaXMuaW5kZXgtLTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIEVudW0sIExhYmVsLCBsZXJwIH0gZnJvbSBcImNjXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5LCBtZW51IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuZW51bSBWQUxVRV9UWVBFIHtcclxuICAgIC8qKiDmlbTmlbDmqKHlvI8s5Y+q5Lya5Lul5pW05pWw5aSE55CGICovXHJcbiAgICBJTlRFR0VSLFxyXG4gICAgLyoqIOS4pOS9jeWwj+aVsOaooeW8jyzmnIDnu4jnu5Pmnpzkv53nlZnkuKTkvY3lsI/mlbAgMC4wMCAqL1xyXG4gICAgRklYRURfMixcclxuICAgIC8qKiDorqHml7blmajmqKHlvI8s5Lul6K6h5pe25Zmo5qC85byP5Y+Y5YqoIDAwOjAwICovXHJcbiAgICBUSU1FUixcclxuICAgIC8qKiDnmb7liIbmr5TmqKHlvI8gKOeZvuWIhuavlOe7k+aenCDln7rkuo7lsI/mlbAs5Zug5q2k5Yid5aeL5YC85b+F6aG75Li65bCP5pWwKSovXHJcbiAgICBQRVJDRU5UQUdFLFxyXG4gICAgLyoqIOe8qeWGmeWNleS9jeaooeW8j0tNQlQgKi9cclxuICAgIEtNQlRfRklYRUQyLFxyXG4gICAgLyoqIOiHquWumuS5ieaooeW8jyAo6YCa6L+H5Lyg5YWl55qE5Ye95pWwLOi/m+ihjOiHquWumuS5iSkgKi9cclxuICAgIENVU1RPTUVSXHJcbn1cclxuXHJcbnR5cGUgQ3VzdG9tQ2FsbGJhY2sgPSAoY3VyVmFsdWU6IG51bWJlciwgdGFyZ2V0VmFsdWU6IG51bWJlcikgPT4gc3RyaW5nO1xyXG5cclxuLyoqXHJcbiAqIOa7muWKqOaVsOWtl1xyXG4gKiDlsIbkvJrkvb/nlKggbGVycCDoh6rliqjmu5rliqjmlbDlrZfliLDnm67moIfmlbDlgLxcclxuICovXHJcbkBjY2NsYXNzXHJcbkBtZW51KFwiT29wc0ZyYW1ld29yay9VSS9Sb2xsIE51bWJlciDvvIjmu5rliqjmlbDlrZfvvIlcIilcclxuZXhwb3J0IGNsYXNzIEJodlJvbGxOdW1iZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBMYWJlbCxcclxuICAgICAgICB0b29sdGlwOiAn6ZyA6KaB5rua5Yqo55qEIExhYmVsIOe7hOS7tizlpoLmnpzkuI3ov5vooYzorr7nva7vvIzlsLHkvJrku47oh6rlt7HnmoToioLngrnoh6rliqjmn6Xmib4nXHJcbiAgICB9KVxyXG4gICAgbGFiZWw6IExhYmVsIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAn5b2T5YmN55qE5rua5Yqo5YC8KOW8gOWni+eahOa7muWKqOWAvCknXHJcbiAgICB9KVxyXG4gICAgdmFsdWU6IG51bWJlciA9IDA7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAn5piv5ZCm5pi+56S65q2j6LSf56ym5Y+3J1xyXG4gICAgfSlcclxuICAgIHNob3dQbHVzU3ltYm9sOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAn5rua5Yqo55qE55uu5qCH5YC8J1xyXG4gICAgfSlcclxuICAgIHB1YmxpYyBnZXQgdGFyZ2V0VmFsdWUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0VmFsdWU7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHRhcmdldFZhbHVlKHY6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3RhcmdldFZhbHVlID0gdjtcclxuICAgICAgICB0aGlzLnNjcm9sbCgpOy8v5pWw5o2u5Y+Y5Yqo5LqG5bCx5byA5aeL5rua5YqoXHJcbiAgICB9XHJcbiAgICBAcHJvcGVydHlcclxuICAgIHByaXZhdGUgX3RhcmdldFZhbHVlOiBudW1iZXIgPSAxMDA7XHJcblxyXG4gICAgLyoqIOa7muWKqOeahOe6v+aAp+W3ruWAvCAwIH4gMSAqL1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAn5rua5Yqo55qE57q/5oCn5beu5YC8JyxcclxuICAgICAgICBzdGVwOiAwLjAxLFxyXG4gICAgICAgIG1heDogMSxcclxuICAgICAgICBtaW46IDBcclxuICAgIH0pXHJcbiAgICBsZXJwID0gMC4xO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+aYr+WQpuWcqOW8gOWni+aXtuWwseaSreaUvidcclxuICAgIH0pXHJcbiAgICBwcml2YXRlIHBsYXlBdFN0YXJ0OiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6ICflnKjmu5rliqjkuYvliY3kvJrnrYnlvoXlh6Dnp5InLFxyXG4gICAgICAgIHN0ZXA6IDAuMSxcclxuICAgICAgICBtYXg6IDEsXHJcbiAgICAgICAgbWluOiAwXHJcbiAgICB9KVxyXG4gICAgcHJpdmF0ZSBydW5XYWl0VGltZXI6IG51bWJlciA9IDA7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBFbnVtKFZBTFVFX1RZUEUpLFxyXG4gICAgICAgIHRvb2x0aXA6ICfmmK/lkKblnKjlvIDlp4vml7blsLHmkq3mlL4nXHJcbiAgICB9KVxyXG4gICAgcHJpdmF0ZSB2YWx1ZVR5cGU6IFZBTFVFX1RZUEUgPSBWQUxVRV9UWVBFLklOVEVHRVI7XHJcblxyXG4gICAgLyoqIOiHquWumuS5iXN0cmluZyDlpITnkIblh73mlbAgKi9cclxuICAgIG9uQ3VzdG9tOiBDdXN0b21DYWxsYmFjayB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIHByaXZhdGUgaXNTY3JvbGxpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGFiZWwgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFiZWwgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KExhYmVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBsYXlBdFN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGFiZWwoKTtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOW8gOWni+a7muWKqOaVsOWtlyAqL1xyXG4gICAgc2Nyb2xsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU2Nyb2xsaW5nKSByZXR1cm47ICAgICAgIC8vICDlt7Lnu4/lnKjmu5rliqjkuoblsLHov5Tlm55cclxuICAgICAgICBpZiAodGhpcy5ydW5XYWl0VGltZXIgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LCB0aGlzLnJ1bldhaXRUaW1lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWBnOatoua7muWKqOaVsOWtlyAqL1xyXG4gICAgc3RvcCgpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy50YXJnZXRWYWx1ZTtcclxuICAgICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMYWJlbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliJ3lp4vljJbmlbDlgLws5LiN5aGr5YaZ5YiZ5YWo6YOo5oyJ6buY6K6k5YC85aSE55CGICovXHJcbiAgICBpbml0KHZhbHVlPzogbnVtYmVyLCB0YXJnZXQ/OiBudW1iZXIsIGxlcnA/OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnRhcmdldFZhbHVlID0gdGFyZ2V0IHx8IDA7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlIHx8IDA7XHJcbiAgICAgICAgdGhpcy5sZXJwID0gbGVycCB8fCAwLjE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOa7muWKqOWIsOaMh+WumuaVsOWtlyAqL1xyXG4gICAgc2Nyb2xsVG8odGFyZ2V0PzogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gbnVsbCB8fCB0YXJnZXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0VmFsdWUgPSB0YXJnZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOabtOaWsOaWh+acrCAqL1xyXG4gICAgdXBkYXRlTGFiZWwoKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICBsZXQgc3RyaW5nID0gJyc7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy52YWx1ZVR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBWQUxVRV9UWVBFLklOVEVHRVI6ICAgICAgICAgICAgICAgICAgICAgICAgLy8g5pyA57uI5pi+56S65pW05pWw57G75Z6LXHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBNYXRoLnJvdW5kKHZhbHVlKSArICcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVkFMVUVfVFlQRS5GSVhFRF8yOiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOacgOe7iOaYvuekuuS4pOS9jeWwj+aVsOexu+Wei1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nID0gdmFsdWUudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFZBTFVFX1RZUEUuVElNRVI6ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmnIDnu4jmmL7npLog6K6h5pe25Zmo57G75Z6LXHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBwYXJzZVRpbWVyKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFZBTFVFX1RZUEUuUEVSQ0VOVEFHRTogICAgICAgICAgICAgICAgICAgICAvLyDmnIDnu4jmmL7npLog55m+5YiG5q+UXHJcbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBNYXRoLnJvdW5kKHZhbHVlICogMTAwKSArICclJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFZBTFVFX1RZUEUuS01CVF9GSVhFRDI6ICAgICAgICAgICAgICAgICAgICAvLyDplb/ljZXkvY3nvKnmlL4s5Y+q6K6h566X5YiwIEtNQlRcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nID0gJ01BWCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA+IDEwMDAwMDAwMDAwMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSAodmFsdWUgLyAxMDAwMDAwMDAwMDAwKS50b0ZpeGVkKDIpICsgJ1QnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPiAxMDAwMDAwMDAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nID0gKHZhbHVlIC8gMTAwMDAwMDAwMCkudG9GaXhlZCgyKSArICdCJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID4gMTAwMDAwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyA9ICh2YWx1ZSAvIDEwMDAwMDApLnRvRml4ZWQoMikgKyAnTSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA+IDEwMDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSAodmFsdWUgLyAxMDAwKS50b0ZpeGVkKDIpICsgXCJLXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBNYXRoLnJvdW5kKHZhbHVlKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVkFMVUVfVFlQRS5DVVNUT01FUjogLy8g6Ieq5a6a5LmJ6K6+572u5qih5byPICjpgJrov4fnu5nlrprnmoToh6rlrprkuYnlh73mlbAuLuWkhOeQhilcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uQ3VzdG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nID0gdGhpcy5vbkN1c3RvbSh0aGlzLnZhbHVlLCB0aGlzLnRhcmdldFZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmmL7npLrmraPotJ/nrKblj7dcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd1BsdXNTeW1ib2wpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nID0gJysnICsgc3RyaW5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgc3RyaW5nID0gJy0nICsgc3RyaW5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5sYWJlbCkge1xyXG4gICAgICAgICAgICBpZiAoc3RyaW5nID09PSB0aGlzLmxhYmVsLnN0cmluZykgcmV0dXJuOyAgIC8vIOS/neivgeaViOeOhyzlpoLmnpzkuIrmrKHotYvlgLzov4cs5bCx5LiN6YeN5aSN6LWL5YC8XHJcbiAgICAgICAgICAgIHRoaXMubGFiZWwuc3RyaW5nID0gc3RyaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU2Nyb2xsaW5nID09IGZhbHNlKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGxlcnAodGhpcy52YWx1ZSwgdGhpcy50YXJnZXRWYWx1ZSwgdGhpcy5sZXJwKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUxhYmVsKCk7XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMudmFsdWUgLSB0aGlzLnRhcmdldFZhbHVlKSA8PSAwLjAwMDEpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudGFyZ2V0VmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy90aGlzLm5vZGUuZW1pdCgncm9sbC1oaXQtdGFyZ2V0Jyk7ICAgICAgICAvLyDmu5rliqjmlbDlrZflh7vkuK3kuobnm67moIdcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIOaXtumXtOagvOW8j+i9rOaNoiAqL1xyXG5mdW5jdGlvbiBwYXJzZVRpbWVyKHRpbWVyOiBudW1iZXIgPSAwLCBpc0Z1bGxUaW1lcjogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgIGxldCB0OiBudW1iZXIgPSBNYXRoLmZsb29yKHRpbWVyKTtcclxuICAgIGxldCBob3VyczogbnVtYmVyID0gTWF0aC5mbG9vcih0IC8gMzYwMCk7XHJcbiAgICBsZXQgbWluczogbnVtYmVyID0gTWF0aC5mbG9vcigodCAlIDM2MDApIC8gNjApO1xyXG4gICAgbGV0IHNlY3M6IG51bWJlciA9IHQgJSA2MDtcclxuICAgIGxldCBtID0gJycgKyBtaW5zO1xyXG4gICAgbGV0IHMgPSAnJyArIHNlY3M7XHJcbiAgICBpZiAoc2VjcyA8IDEwKSBzID0gJzAnICsgc2VjcztcclxuXHJcbiAgICAvLyBmdWxsIHRpbWVyIOaMieWwj+aXtueulyzml6DorrrmnInmsqHmnInlsI/ml7ZcclxuICAgIGlmIChpc0Z1bGxUaW1lcikge1xyXG4gICAgICAgIGlmIChtaW5zIDwgMTApIG0gPSAnMCcgKyBtaW5zO1xyXG4gICAgICAgIHJldHVybiBob3VycyArICc6JyArIG0gKyAnOicgKyBzO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgbSA9ICcnICsgKG1pbnMgKyBob3VycyAqIDYwKTtcclxuICAgICAgICBpZiAobWlucyA8IDEwKSBtID0gJzAnICsgbWlucztcclxuICAgICAgICByZXR1cm4gbSArICc6JyArIHM7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDQ0ludGVnZXIsIENvbXBvbmVudCwgTm9kZSwgX2RlY29yYXRvciB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBWTUVudiB9IGZyb20gXCIuLi9WTUVudlwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgZXhlY3V0ZUluRWRpdE1vZGUsIG1lbnUgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog6aG16Z2i5YiH5o2iICovXHJcbkBjY2NsYXNzXHJcbkBleGVjdXRlSW5FZGl0TW9kZVxyXG5AbWVudShcIk9vcHNGcmFtZXdvcmsvVUkvU3dpdGNoIFBhZ2Ug77yI6aG16Z2i5YiH5o2i77yJXCIpXHJcbmV4cG9ydCBjbGFzcyBCaHZTd2l0Y2hQYWdlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgaXNMb29wUGFnZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgcHJpdmF0ZSBfaW5kZXg6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgZ2V0IGluZGV4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGV4O1xyXG4gICAgfVxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBDQ0ludGVnZXJcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgc2V0IGluZGV4KHY6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ2hhbmdpbmcpIHJldHVybjtcclxuICAgICAgICB2ID0gTWF0aC5yb3VuZCh2KTtcclxuICAgICAgICBsZXQgY291bnQgPSB0aGlzLm5vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gMTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNMb29wUGFnZSkge1xyXG4gICAgICAgICAgICBpZiAodiA+IGNvdW50KSB2ID0gMDtcclxuICAgICAgICAgICAgaWYgKHYgPCAwKSB2ID0gY291bnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodiA+IGNvdW50KSB2ID0gY291bnQ7XHJcbiAgICAgICAgICAgIGlmICh2IDwgMCkgdiA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJlSW5kZXggPSB0aGlzLl9pbmRleDsvL+agh+iusOS5i+WJjeeahOmhtemdolxyXG4gICAgICAgIHRoaXMuX2luZGV4ID0gdjtcclxuXHJcbiAgICAgICAgaWYgKFZNRW52LmVkaXRvcikge1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVFZGl0b3JQYWdlKHYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUGFnZSh2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwcmVJbmRleDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvL+WIpOaWreaYr+WQpuWcqCBjaGFuZ2luZyDpobXpnaLnirbmgIFcclxuXHJcbiAgICBwcml2YXRlIF9pc0NoYW5naW5nOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICAvKirlj6ror7vvvIzmmK/lkKblnKhjaGFuZ2luZyDnmoTnirbmgIEgKi9cclxuICAgIHB1YmxpYyBnZXQgaXNDaGFuZ2luZygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNDaGFuZ2luZztcclxuICAgIH1cclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5wcmVJbmRleCA9IHRoaXMuaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlRWRpdG9yUGFnZShwYWdlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoIVZNRW52LmVkaXRvcikgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLm5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBub2RlID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgIGlmIChpID09IHBhZ2UpIHtcclxuICAgICAgICAgICAgICAgIG5vZGUuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5vZGUuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlUGFnZShwYWdlOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLm5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgbGV0IHByZUluZGV4ID0gdGhpcy5wcmVJbmRleDtcclxuICAgICAgICBsZXQgY3VySW5kZXggPSB0aGlzLmluZGV4O1xyXG4gICAgICAgIGlmIChwcmVJbmRleCA9PT0gY3VySW5kZXgpIHJldHVybjsvL+ayoeacieaUueWPmOWwseS4jei/m+ihjOaTjeS9nFxyXG5cclxuICAgICAgICBsZXQgcHJlTm9kZTogTm9kZSA9IGNoaWxkcmVuW3ByZUluZGV4XTsvL+aXp+iKgueCuVxyXG4gICAgICAgIGxldCBzaG93Tm9kZTogTm9kZSA9IGNoaWxkcmVuW2N1ckluZGV4XTsvL+aWsOiKgueCuVxyXG5cclxuICAgICAgICBwcmVOb2RlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHNob3dOb2RlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5leHQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDaGFuZ2luZykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4Kys7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcHJldmlvdXMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDaGFuZ2luZykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4LS07XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0RXZlbnRJbmRleChlOiBhbnksIGluZGV4OiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5pbmRleCA+PSAwICYmIHRoaXMuaW5kZXggIT0gbnVsbCAmJiB0aGlzLmlzQ2hhbmdpbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDYtMjEgMTI6MDU6MTRcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDctMjAgMTM6NTg6MzJcclxuICovXHJcbmltcG9ydCB7IEJlaGF2aW9yVHJlZSB9IGZyb20gJy4vQmVoYXZpb3JUcmVlJztcclxuaW1wb3J0IHsgQlRyZWVOb2RlIH0gZnJvbSAnLi9CVHJlZU5vZGUnO1xyXG5cclxuLyoqIOWkjeWQiOiKgueCuSAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQnJhbmNoTm9kZSBleHRlbmRzIEJUcmVlTm9kZSB7XHJcbiAgICAvKiog5a2Q6IqC54K55pWw57uEICovXHJcbiAgICBwdWJsaWMgY2hpbGRyZW46IEFycmF5PEJUcmVlTm9kZT47XHJcbiAgICAvKiog5b2T5YmN5Lu75Yqh57Si5byVICovXHJcbiAgICBwcm90ZWN0ZWQgX2FjdHVhbFRhc2shOiBudW1iZXI7XHJcbiAgICAvKiog5q2j5Zyo6L+Q6KGM55qE6IqC54K5ICovXHJcbiAgICBwcm90ZWN0ZWQgX3J1bm5pbmdOb2RlITogQlRyZWVOb2RlO1xyXG4gICAgcHJvdGVjdGVkIF9ub2RlUnVubmluZyE6IEJUcmVlTm9kZSB8IG51bGw7XHJcbiAgICAvKiog5aSW6YOo5Y+C5pWw5a+56LGhICovXHJcbiAgICBwcm90ZWN0ZWQgX2JsYWNrYm9hcmQ6IGFueTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iobm9kZXM6IEFycmF5PEJUcmVlTm9kZT4pIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBub2RlcyB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5fYWN0dWFsVGFzayA9IDA7XHJcbiAgICAgICAgc3VwZXIuc3RhcnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcnVuKGJsYWNrYm9hcmQ/OiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGggPT0gMCkgeyAgICAgICAgICAgICAgICAgICAgICAgIC8vIOayoeacieWtkOS7u+WKoeebtOaOpeinhuS4uuaJp+ihjOWksei0pVxyXG4gICAgICAgICAgICB0aGlzLl9jb250cm9sLmZhaWwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JsYWNrYm9hcmQgPSBibGFja2JvYXJkO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3R1YWxUYXNrIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3J1bigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmVuZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmiafooYzlvZPliY3oioLngrnpgLvovpEgKi9cclxuICAgIHByb3RlY3RlZCBfcnVuKGJsYWNrYm9hcmQ/OiBhbnkpIHtcclxuICAgICAgICB2YXIgbm9kZSA9IEJlaGF2aW9yVHJlZS5nZXROb2RlKHRoaXMuY2hpbGRyZW5bdGhpcy5fYWN0dWFsVGFza10pO1xyXG4gICAgICAgIHRoaXMuX3J1bm5pbmdOb2RlID0gbm9kZTtcclxuICAgICAgICBub2RlLnNldENvbnRyb2wodGhpcyk7XHJcbiAgICAgICAgbm9kZS5zdGFydCh0aGlzLl9ibGFja2JvYXJkKTtcclxuICAgICAgICBub2RlLnJ1bih0aGlzLl9ibGFja2JvYXJkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcnVubmluZyhub2RlOiBCVHJlZU5vZGUpIHtcclxuICAgICAgICB0aGlzLl9ub2RlUnVubmluZyA9IG5vZGU7XHJcbiAgICAgICAgdGhpcy5fY29udHJvbC5ydW5uaW5nKG5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdWNjZXNzKCkge1xyXG4gICAgICAgIHRoaXMuX25vZGVSdW5uaW5nID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9ydW5uaW5nTm9kZS5lbmQodGhpcy5fYmxhY2tib2FyZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZhaWwoKSB7XHJcbiAgICAgICAgdGhpcy5fbm9kZVJ1bm5pbmcgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3J1bm5pbmdOb2RlLmVuZCh0aGlzLl9ibGFja2JvYXJkKTtcclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA2LTIxIDEyOjA1OjE0XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA3LTIwIDE0OjA0OjQ0XHJcbiAqL1xyXG5pbXBvcnQgeyBJQ29udHJvbCB9IGZyb20gJy4vSUNvbnRyb2wnO1xyXG5cclxuLyoqIOihjOS4uuagkeiKgueCuSAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQlRyZWVOb2RlIGltcGxlbWVudHMgSUNvbnRyb2wge1xyXG4gICAgcHJvdGVjdGVkIF9jb250cm9sITogSUNvbnRyb2w7XHJcblxyXG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmc7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXJ0KGJsYWNrYm9hcmQ/OiBhbnkpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVuZChibGFja2JvYXJkPzogYW55KSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBydW4oYmxhY2tib2FyZD86IGFueSk6IHZvaWQ7XHJcblxyXG4gICAgcHVibGljIHNldENvbnRyb2woY29udHJvbDogSUNvbnRyb2wpIHtcclxuICAgICAgICB0aGlzLl9jb250cm9sID0gY29udHJvbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcnVubmluZyhibGFja2JvYXJkPzogYW55KSB7XHJcbiAgICAgICAgdGhpcy5fY29udHJvbC5ydW5uaW5nKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdWNjZXNzKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wuc3VjY2VzcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmYWlsKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRyb2wuZmFpbCgpO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0wNy0wMyAxNjoxMzoxN1xyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOC0wMiAxNDoyNToyN1xyXG4gKi9cclxuaW1wb3J0ICogYXMgYnVpbGRUaW1lQ29uc3RhbnRzIGZyb20gJ2NjL2Vudic7XHJcblxyXG5jb25zdCBrZXlzID0gKE9iamVjdC5rZXlzKGJ1aWxkVGltZUNvbnN0YW50cykgYXMgKGtleW9mIHR5cGVvZiBidWlsZFRpbWVDb25zdGFudHMpW10pLnNvcnQoKTtcclxuXHJcbi8qIOa4uOaIj+i/kOihjOeOr+WigyAqL1xyXG5leHBvcnQgY2xhc3MgQnVpbGRUaW1lQ29uc3RhbnRzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGNvbnN0IGtleU5hbWVNYXhMZW4gPSBrZXlzLnJlZHVjZSgobGVuLCBrZXkpID0+IE1hdGgubWF4KGxlbiwga2V5Lmxlbmd0aCksIDApO1xyXG4gICAgICAgIGNvbnN0IGVudmlyb21lbnQgPSBgJHtrZXlzLm1hcCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYnVpbGRUaW1lQ29uc3RhbnRzW2tleV07XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlUmVwID0gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgPyAodmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnKSA6IHZhbHVlO1xyXG4gICAgICAgICAgICByZXR1cm4gYFxcbiR7a2V5LnBhZFN0YXJ0KGtleU5hbWVNYXhMZW4sICcgJyl9IDogJHt2YWx1ZVJlcH1gO1xyXG4gICAgICAgIH0pfWA7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGVudmlyb21lbnQpO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMy0wMS0zMCAxNDowMDo0MVxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMi0wOSAxMDo1NDoyOFxyXG4gKi9cclxuaW1wb3J0IHsgQW5pbWF0aW9uLCBBbmltYXRpb25DbGlwLCBFdmVudFRvdWNoLCBOb2RlLCBTcHJpdGUsIF9kZWNvcmF0b3IgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgb29wcyB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL09vcHNcIjtcclxuaW1wb3J0IEJ1dHRvblNpbXBsZSBmcm9tIFwiLi9CdXR0b25TaW1wbGVcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHksIG1lbnUgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog5pyJ54m55pWI5oyJ6ZKuICovXHJcbkBjY2NsYXNzKFwiQnV0dG9uRWZmZWN0XCIpXHJcbkBtZW51KCdPb3BzRnJhbWV3b3JrL0J1dHRvbi9CdXR0b25FZmZlY3Qg77yI5pyJ54m55pWI5oyJ6ZKu77yJJylcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnV0dG9uRWZmZWN0IGV4dGVuZHMgQnV0dG9uU2ltcGxlIHtcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLmmK/lkKblvIDlkK9cIlxyXG4gICAgfSlcclxuICAgIGRpc2FibGVkRWZmZWN0OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBhbmltITogQW5pbWF0aW9uO1xyXG5cclxuICAgIC8qKiDmjInpkq7npoHnlKjmlYjmnpwgKi9cclxuICAgIGdldCBncmF5c2NhbGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZS5nZXRDb21wb25lbnQoU3ByaXRlKSEuZ3JheXNjYWxlO1xyXG4gICAgfVxyXG4gICAgc2V0IGdyYXlzY2FsZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KFNwcml0ZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmdldENvbXBvbmVudChTcHJpdGUpIS5ncmF5c2NhbGUgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMuYW5pbSA9IHRoaXMubm9kZS5hZGRDb21wb25lbnQoQW5pbWF0aW9uKTtcclxuXHJcbiAgICAgICAgdmFyIGFjX3N0YXJ0OiBBbmltYXRpb25DbGlwID0gb29wcy5yZXMuZ2V0KFwiY29tbW9uL2FuaW0vYnV0dG9uX3NjYWxlX3N0YXJ0XCIsIEFuaW1hdGlvbkNsaXApITtcclxuICAgICAgICB2YXIgYWNfZW5kOiBBbmltYXRpb25DbGlwID0gb29wcy5yZXMuZ2V0KFwiY29tbW9uL2FuaW0vYnV0dG9uX3NjYWxlX2VuZFwiLCBBbmltYXRpb25DbGlwKSE7XHJcbiAgICAgICAgdGhpcy5hbmltLmRlZmF1bHRDbGlwID0gYWNfc3RhcnQ7XHJcbiAgICAgICAgdGhpcy5hbmltLmNyZWF0ZVN0YXRlKGFjX3N0YXJ0LCBhY19zdGFydD8ubmFtZSk7XHJcbiAgICAgICAgdGhpcy5hbmltLmNyZWF0ZVN0YXRlKGFjX2VuZCwgYWNfZW5kPy5uYW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5ub2RlLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uVG91Y2h0U3RhcnQsIHRoaXMpO1xyXG5cclxuICAgICAgICBzdXBlci5vbkxvYWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Ub3VjaHRTdGFydChldmVudDogRXZlbnRUb3VjaCkge1xyXG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZEVmZmVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW0ucGxheShcImJ1dHRvbl9zY2FsZV9zdGFydFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uVG91Y2hFbmQoZXZlbnQ6IEV2ZW50VG91Y2gpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWRFZmZlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5hbmltLnBsYXkoXCJidXR0b25fc2NhbGVfZW5kXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIub25Ub3VjaEVuZChldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5vZmYoTm9kZS5FdmVudFR5cGUuVE9VQ0hfU1RBUlQsIHRoaXMub25Ub3VjaHRTdGFydCwgdGhpcyk7XHJcbiAgICAgICAgc3VwZXIub25EZXN0cm95KCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBdWRpb0NsaXAsIENvbXBvbmVudCwgRXZlbnRUb3VjaCwgTm9kZSwgX2RlY29yYXRvciwgZ2FtZSB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBvb3BzIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvT29wc1wiO1xyXG5pbXBvcnQgeyByZXNMb2FkZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9jb21tb24vbG9hZGVyL1Jlc0xvYWRlclwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgbWVudSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiDoioLngrnmjInpkq4gKi9cclxuQGNjY2xhc3MoXCJCdXR0b25TaW1wbGVcIilcclxuQG1lbnUoJ09vcHNGcmFtZXdvcmsvQnV0dG9uL0J1dHRvblNpbXBsZSDvvIjoioLngrnmjInpkq7vvIknKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdXR0b25TaW1wbGUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiBcIuaYr+WQpuWPquinpuWPkeS4gOasoVwiXHJcbiAgICB9KVxyXG4gICAgcHJpdmF0ZSBvbmNlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiBcIuavj+asoeinpuWPkemXtOmalFwiXHJcbiAgICB9KVxyXG4gICAgcHJpdmF0ZSBpbnRlcnZhbDogbnVtYmVyID0gNTAwO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLop6bmkbjpn7PmlYhcIixcclxuICAgICAgICB0eXBlOiBBdWRpb0NsaXBcclxuICAgIH0pXHJcbiAgICBwcml2YXRlIGVmZmVjdDogQXVkaW9DbGlwID0gbnVsbCE7XHJcbiAgICAvLyBwcml2YXRlIGVmZmVjdElkczogbnVtYmVyW10gPSBbXTtcclxuICAgIHByaXZhdGUgdG91Y2hDb3VudCA9IDA7XHJcbiAgICBwcml2YXRlIHRvdWNodEVuZFRpbWUgPSAwO1xyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLm5vZGUub24oTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLm9uVG91Y2hFbmQsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwsIHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOinpuaRuOe7k+adnyAqL1xyXG4gICAgcHJvdGVjdGVkIG9uVG91Y2hFbmQoZXZlbnQ6IEV2ZW50VG91Y2gpIHtcclxuICAgICAgICBpZiAodGhpcy5vbmNlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvdWNoQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudG91Y2hDb3VudCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6Ziy6L+e54K5NTAw5q+r56eS5Ye65Y+R5LiA5qyh5LqL5Lu2XHJcbiAgICAgICAgaWYgKHRoaXMudG91Y2h0RW5kVGltZSAmJiBnYW1lLnRvdGFsVGltZSAtIHRoaXMudG91Y2h0RW5kVGltZSA8IHRoaXMuaW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudG91Y2h0RW5kVGltZSA9IGdhbWUudG90YWxUaW1lO1xyXG5cclxuICAgICAgICAgICAgLy8g55+t5oyJ6Kem5pG46Z+z5pWIXHJcbiAgICAgICAgICAgIHRoaXMucGxheUVmZmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog55+t5oyJ6Kem5pG46Z+z5pWIICovXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgcGxheUVmZmVjdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5lZmZlY3QpIHtcclxuICAgICAgICAgICAgb29wcy5hdWRpby5wbGF5RWZmZWN0KHRoaXMuZWZmZWN0KTtcclxuICAgICAgICAgICAgLy8gY29uc3QgZWZmZWN0SWQgPSBhd2FpdCBvb3BzLmF1ZGlvLnBsYXlFZmZlY3QodGhpcy5lZmZlY3QsIHJlc0xvYWRlci5kZWZhdWx0QnVuZGxlTmFtZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5lZmZlY3RJZHMucmVtb3ZlKGVmZmVjdElkKTtcclxuICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgIC8vIGlmIChlZmZlY3RJZCA+IDApIHRoaXMuZWZmZWN0SWRzLnB1c2goZWZmZWN0SWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihOb2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5ub2RlLm9mZihOb2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwsIHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIGlmICh0aGlzLmVmZmVjdCkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmVmZmVjdElkcy5mb3JFYWNoKGVmZmVjdElkID0+IHtcclxuICAgICAgICAvLyAgICAgICAgIG9vcHMuYXVkaW8ucHV0RWZmZWN0KGVmZmVjdElkLCB0aGlzLmVmZmVjdCk7XHJcbiAgICAgICAgLy8gICAgIH0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA0LTE0IDE3OjA4OjAxXHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA0LTE0IDE4OjE1OjQyXHJcbiAqL1xyXG5pbXBvcnQgeyBFdmVudEhhbmRsZXIsIEV2ZW50VG91Y2gsIF9kZWNvcmF0b3IgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IEJ1dHRvbkVmZmVjdCBmcm9tIFwiLi9CdXR0b25FZmZlY3RcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHksIG1lbnUgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog6ZW/5oyJ5oyJ6ZKuICovXHJcbkBjY2NsYXNzKFwiQnV0dG9uVG91Y2hMb25nXCIpXHJcbkBtZW51KCdPb3BzRnJhbWV3b3JrL0J1dHRvbi9CdXR0b25Ub3VjaExvbmcg77yI6ZW/5oyJ5oyJ6ZKu77yJJylcclxuZXhwb3J0IGNsYXNzIEJ1dHRvblRvdWNoTG9uZyBleHRlbmRzIEJ1dHRvbkVmZmVjdCB7XHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6IFwi6ZW/5oyJ5pe26Ze077yI56eS77yJXCJcclxuICAgIH0pXHJcbiAgICB0aW1lOiBudW1iZXIgPSAxO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogW0V2ZW50SGFuZGxlcl0sXHJcbiAgICAgICAgdG9vbHRpcDogXCLplb/mjInml7bpl7TvvIjnp5LvvIlcIlxyXG4gICAgfSlcclxuICAgIGNsaWNrRXZlbnRzOiBFdmVudEhhbmRsZXJbXSA9IFtdO1xyXG5cclxuICAgIHByb3RlY3RlZCBfcGFzc1RpbWUgPSAwO1xyXG4gICAgcHJvdGVjdGVkIF9pc1RvdWNoTG9uZzogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBwcm90ZWN0ZWQgX2V2ZW50OiBFdmVudFRvdWNoIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMuX2lzVG91Y2hMb25nID0gZmFsc2U7XHJcbiAgICAgICAgc3VwZXIub25Mb2FkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOinpuaRuOW8gOWniyAqL1xyXG4gICAgb25Ub3VjaHRTdGFydChldmVudDogRXZlbnRUb3VjaCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgdGhpcy5fcGFzc1RpbWUgPSAwO1xyXG4gICAgICAgIHN1cGVyLm9uVG91Y2h0U3RhcnQoZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDop6bmkbjnu5PmnZ8gKi9cclxuICAgIG9uVG91Y2hFbmQoZXZlbnQ6IEV2ZW50VG91Y2gpIHtcclxuICAgICAgICBpZiAodGhpcy5fcGFzc1RpbWUgPiB0aGlzLnRpbWUpIHtcclxuICAgICAgICAgICAgZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZXZlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3Bhc3NUaW1lID0gMDtcclxuICAgICAgICB0aGlzLl9pc1RvdWNoTG9uZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBzdXBlci5vblRvdWNoRW5kKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVUb3VjaExvbmcoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2lzVG91Y2hMb25nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOW8leaTjuabtOaWsOS6i+S7tiAqL1xyXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fZXZlbnQgJiYgIXRoaXMuX2lzVG91Y2hMb25nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bhc3NUaW1lICs9IGR0O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3Bhc3NUaW1lID49IHRoaXMudGltZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNUb3VjaExvbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGlja0V2ZW50cy5mb3JFYWNoKGV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5lbWl0KFtldmVudC5jdXN0b21FdmVudERhdGFdKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyDplb/mjInop6bmkbjpn7PmlYhcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXlFZmZlY3QoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVUb3VjaExvbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA3LTI2IDE1OjI5OjU3XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA5LTAyIDE0OjUwOjE2XHJcbiAqL1xyXG5pbXBvcnQgeyBDYW1lcmEsIFZlYzMsIHZpZXcgfSBmcm9tIFwiY2NcIjtcclxuXHJcbi8qKiDmkYTlg4/mnLrlt6XlhbcgKi9cclxuZXhwb3J0IGNsYXNzIENhbWVyYVV0aWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPliY3kuJbnlYzlnZDmoIfmmK/lkKblnKjmkYTlg4/mnLrmmL7npLrojIPlm7TlhoVcclxuICAgICAqIEBwYXJhbSBjYW1lcmEgICAg5pGE5YOP5py6XHJcbiAgICAgKiBAcGFyYW0gd29ybGRQb3MgIOWdkOagh1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNJblZpZXcoY2FtZXJhOiBDYW1lcmEsIHdvcmxkUG9zOiBWZWMzKSB7XHJcbiAgICAgICAgY29uc3QgY2FtZXJhUG9zID0gY2FtZXJhLm5vZGUuZ2V0V29ybGRQb3NpdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IHZpZXdQb3MgPSBjYW1lcmEud29ybGRUb1NjcmVlbih3b3JsZFBvcyk7XHJcbiAgICAgICAgY29uc3QgZGlyID0gVmVjMy5ub3JtYWxpemUobmV3IFZlYzMoKSwgd29ybGRQb3Muc3VidHJhY3QoY2FtZXJhUG9zKSk7XHJcbiAgICAgICAgY29uc3QgZm9yd2FyZCA9IGNhbWVyYS5ub2RlLmZvcndhcmQ7XHJcbiAgICAgICAgY29uc3QgZG90ID0gVmVjMy5kb3QoZm9yd2FyZCwgZGlyKTtcclxuXHJcbiAgICAgICAgY29uc3Qgdmlld3BvcnRSZWN0ID0gdmlldy5nZXRWaWV3cG9ydFJlY3QoKTtcclxuXHJcbiAgICAgICAgLy8g5Yik5pat54mp5L2T5piv5ZCm5Zyo55u45py65YmN6Z2iXHJcbiAgICAgICAgcmV0dXJuIGRvdCA+IDBcclxuICAgICAgICAgICAgLy8g5Yik5pat54mp5L2T5piv5ZCm5Zyo6KeG56qX5YaFXHJcbiAgICAgICAgICAgICYmICh2aWV3UG9zLnggPD0gdmlld3BvcnRSZWN0LndpZHRoKSAmJiAodmlld1Bvcy54ID49IDApXHJcbiAgICAgICAgICAgICYmICh2aWV3UG9zLnkgPD0gdmlld3BvcnRSZWN0LmhlaWdodCkgJiYgKHZpZXdQb3MueSA+PSAwKTtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjEtMTEtMTEgMTk6MDU6MzJcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDYgMTc6MjA6NTFcclxuICovXHJcblxyXG5pbXBvcnQgeyBfZGVjb3JhdG9yIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBHYW1lQ29tcG9uZW50IH0gZnJvbSAnLi9HYW1lQ29tcG9uZW50JztcclxuaW1wb3J0IHsgZWNzIH0gZnJvbSAnLi4vLi4vbGlicy9lY3MvRUNTJztcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiogXHJcbiAqIOa4uOaIj+aYvuekuuWvueixoee7hOS7tlxyXG4gKiBcclxuICog5Yqf6IO95LuL57uN77yaXHJcbiAqIDEuIOWvueixoeaLpeaciSBjYy5Db21wb25lbnQg57uE5Lu25Yqf6IO95LiOIGVjcy5Db21wIOe7hOS7tuWKn+iDvVxyXG4gKiAyLiDlr7nosaHoh6rluKblhajlsYDkuovku7bnm5HlkKzjgIHph4rmlL7jgIHlj5HpgIHlhajlsYDmtojmga/lip/og71cclxuICogMy4g5a+56LGh566h55CG55qE5omA5pyJ6IqC54K55pGK5bmz77yM55u05o6l6YCa6L+H6IqC54K55ZCN6I635Y+WY2MuTm9kZeWvueixoVxyXG4gKiBcclxuICog5bqU55So5Zy65pmvXHJcbiAqIDEuIOe9kee7nOa4uOaIj++8jOS8mOWFiOacieaVsOaNruWvueixoe+8jOeEtuWQjuWIm+W7uuinhuWbvuWvueixoe+8jOW9k+mHiuaUvuinhuWbvue7hOS7tuaXtu+8jOmDqOWIhuWcuuaZr+S4jeW4jOacm+mHiuaUvuaVsOaNruWvueixoVxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuQGNjY2xhc3MoJ1JvbGVWaWV3Q29tcCcpXHJcbkBlY3MucmVnaXN0ZXIoJ1JvbGVWaWV3JywgZmFsc2UpXHJcbmV4cG9ydCBjbGFzcyBSb2xlVmlld0NvbXAgZXh0ZW5kcyBDQ0NvbXAge1xyXG4gICAgQHByb3BlcnR5KHsgdHlwZTogc3AuU2tlbGV0b24sIHRvb2x0aXA6ICfop5LoibLliqjnlLsnIH0pXHJcbiAgICBzcGluZTogc3AuU2tlbGV0b24gPSBudWxsITtcclxuXHJcbiAgICBvbkxvYWQoKXtcclxuICAgICAgICBcclxuICAgIH1cclxufVxyXG4gKi9cclxuQGNjY2xhc3MoJ0NDQ29tcCcpXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDQ0NvbXAgZXh0ZW5kcyBHYW1lQ29tcG9uZW50IGltcGxlbWVudHMgZWNzLklDb21wIHtcclxuICAgIHN0YXRpYyB0aWQ6IG51bWJlciA9IC0xO1xyXG4gICAgc3RhdGljIGNvbXBOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgY2FuUmVjeWNsZSE6IGJvb2xlYW47XHJcbiAgICBlbnQhOiBlY3MuRW50aXR5O1xyXG5cclxuICAgIGFic3RyYWN0IHJlc2V0KCk6IHZvaWQ7XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTExLTExIDE5OjA1OjMyXHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA5LTA2IDE3OjIyOjA1XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgX2RlY29yYXRvciB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgZWNzIH0gZnJvbSAnLi4vLi4vbGlicy9lY3MvRUNTJztcclxuaW1wb3J0IFZNUGFyZW50IGZyb20gJy4uLy4uL2xpYnMvbW9kZWwtdmlldy9WTVBhcmVudCc7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIFxyXG4gKiDmlK/mjIEgTVZWTSDlip/og73nmoTmuLjmiI/mmL7npLrlr7nosaHnu4Tku7ZcclxuICogXHJcbiAqIOS9v+eUqOaWueazle+8mlxyXG4gKiAxLiDlr7nosaHmi6XmnIkgY2MuQ29tcG9uZW50IOe7hOS7tuWKn+iDveS4jiBlY3MuQ29tcCDnu4Tku7blip/og71cclxuICogMi4g5a+56LGh6Ieq5bim5YWo5bGA5LqL5Lu255uR5ZCs44CB6YeK5pS+44CB5Y+R6YCB5YWo5bGA5raI5oGv5Yqf6IO9XHJcbiAqIDMuIOWvueixoeeuoeeQhueahOaJgOacieiKgueCueaRiuW5s++8jOebtOaOpemAmui/h+iKgueCueWQjeiOt+WPlmNjLk5vZGXlr7nosaHvvIjoioLngrnlkI3kuI3og73mnInph43lkI3vvIlcclxuICogNC4g5a+56LGh5pSv5oyBIFZNUGFyZW50IOaJgOacieWKn+iDvVxyXG4gKiBcclxuICog5bqU55So5Zy65pmvXHJcbiAqIDEuIOe9kee7nOa4uOaIj++8jOS8mOWFiOacieaVsOaNruWvueixoe+8jOeEtuWQjuWIm+W7uuinhuWbvuWvueixoe+8jOW9k+mHiuaUvuinhuWbvue7hOS7tuaXtu+8jOmDqOWIhuWcuuaZr+S4jeW4jOacm+mHiuaUvuaVsOaNruWvueixoVxyXG4gKiBcclxuICogQGV4YW1wbGVcclxuQGNjY2xhc3MoJ0xvYWRpbmdWaWV3Q29tcCcpXHJcbkBlY3MucmVnaXN0ZXIoJ0xvYWRpbmdWaWV3JywgZmFsc2UpXHJcbmV4cG9ydCBjbGFzcyBMb2FkaW5nVmlld0NvbXAgZXh0ZW5kcyBDQ1ZNUGFyZW50Q29tcCB7XHJcbiAgICAvLyBWTSDnu4Tku7bnu5HlrprmlbDmja5cclxuICAgIGRhdGE6IGFueSA9IHtcclxuICAgICAgICAvLyDliqDovb3otYTmupDlvZPliY3ov5vluqZcclxuICAgICAgICBmaW5pc2hlZDogMCxcclxuICAgICAgICAvLyDliqDovb3otYTmupDmnIDlpKfov5vluqZcclxuICAgICAgICB0b3RhbDogMCxcclxuICAgICAgICAvLyDliqDovb3otYTmupDov5vluqbmr5TkvovlgLxcclxuICAgICAgICBwcm9ncmVzczogXCIwXCIsXHJcbiAgICAgICAgLy8g5Yqg6L295rWB56iL5Lit5o+Q56S65paH5pysXHJcbiAgICAgICAgcHJvbXB0OiBcIlwiXHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgcHJvZ3Jlc3M6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcmVzZXQoKTogdm9pZCB7XHJcbiAgICAgIFxyXG4gICAgfVxyXG59XHJcbiAqL1xyXG5AY2NjbGFzcygnQ0NWTVBhcmVudENvbXAnKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ0NWTVBhcmVudENvbXAgZXh0ZW5kcyBWTVBhcmVudCBpbXBsZW1lbnRzIGVjcy5JQ29tcCB7XHJcbiAgICBzdGF0aWMgdGlkOiBudW1iZXIgPSAtMTtcclxuICAgIHN0YXRpYyBjb21wTmFtZTogc3RyaW5nO1xyXG5cclxuICAgIGNhblJlY3ljbGUhOiBib29sZWFuO1xyXG4gICAgZW50ITogZWNzLkVudGl0eTtcclxuXHJcbiAgICBhYnN0cmFjdCByZXNldCgpOiB2b2lkO1xyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wNy0yMiAxNTo1NDo1MVxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0yMiAxNDo0Nzo1OVxyXG4gKi9cclxuXHJcbi8qKiDmlK/mjIFNYXDkuI5BcnJheeWKn+iDveeahOmbhuWQiOWvueixoSAqL1xyXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbjxLLCBWPiBleHRlbmRzIE1hcDxLLCBWPntcclxuICAgIHByaXZhdGUgX2FycmF5OiBWW10gPSBbXTtcclxuXHJcbiAgICAvKiog6I635Y+W5pWw57uE5a+56LGhICovXHJcbiAgICBnZXQgYXJyYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5YC8XHJcbiAgICAgKiBAcGFyYW0ga2V5ICAgICAgIOWFs+mUruWtl1xyXG4gICAgICogQHBhcmFtIHZhbHVlICAgICDmlbDmja7lgLxcclxuICAgICAqL1xyXG4gICAgc2V0KGtleTogSywgdmFsdWU6IFYpIHtcclxuICAgICAgICBpZiAodGhpcy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICB2YXIgb2xkID0gdGhpcy5nZXQoa2V5KSE7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2FycmF5LmluZGV4T2Yob2xkKTtcclxuICAgICAgICAgICAgdGhpcy5fYXJyYXlbaW5kZXhdID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9hcnJheS5wdXNoKHZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdXBlci5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKDpmaTlgLxcclxuICAgICAqIEBwYXJhbSBrZXkgICAgICAg5YWz6ZSu5a2XXHJcbiAgICAgKi9cclxuICAgIGRlbGV0ZShrZXk6IEspOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZ2V0KGtleSk7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fYXJyYXkuaW5kZXhPZih2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB0aGlzLl9hcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9hcnJheS5zcGxpY2UoMCwgdGhpcy5fYXJyYXkubGVuZ3RoKTtcclxuICAgICAgICBzdXBlci5jbGVhcigpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQ29tcG9uZW50LCBfZGVjb3JhdG9yIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IExhbmd1YWdlTGFiZWwgfSBmcm9tIFwiLi4vLi4vLi4vbGlicy9ndWkvbGFuZ3VhZ2UvTGFuZ3VhZ2VMYWJlbFwiO1xyXG5pbXBvcnQgeyBvb3BzIH0gZnJvbSBcIi4uLy4uL09vcHNcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog5YWs5YWx5o+Q56S656qX5Y+jICovXHJcbkBjY2NsYXNzKFwiQ29tbW9uUHJvbXB0XCIpXHJcbmV4cG9ydCBjbGFzcyBDb21tb25Qcm9tcHQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgLyoqIOeql+WPo+agh+mimOWkmuivreiogOe7hOS7tiAqL1xyXG4gICAgQHByb3BlcnR5KExhbmd1YWdlTGFiZWwpXHJcbiAgICBwcml2YXRlIGxhYl90aXRsZTogTGFuZ3VhZ2VMYWJlbCB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIC8qKiDmj5DnpLrlhoXlrrnlpJror63oqIDnu4Tku7YgKi9cclxuICAgIEBwcm9wZXJ0eShMYW5ndWFnZUxhYmVsKVxyXG4gICAgcHJpdmF0ZSBsYWJfY29udGVudDogTGFuZ3VhZ2VMYWJlbCB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIC8qKiDnoa7orqTmjInpkq7mlofmnKzlpJror63oqIDnu4Tku7YgKi9cclxuICAgIEBwcm9wZXJ0eShMYW5ndWFnZUxhYmVsKVxyXG4gICAgcHJpdmF0ZSBsYWJfb2s6IExhbmd1YWdlTGFiZWwgfCBudWxsID0gbnVsbFxyXG5cclxuICAgIC8qKiDlj5bmtojmjInpkq7mlofmnKzlpJror63oqIDnu4Tku7YgKi9cclxuICAgIEBwcm9wZXJ0eShMYW5ndWFnZUxhYmVsKVxyXG4gICAgcHJpdmF0ZSBsYWJfY2FuY2VsOiBMYW5ndWFnZUxhYmVsIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBjb25maWc6IGFueSA9IHt9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBwYXJhbXMg5Y+C5pWwIFxyXG4gICAgICoge1xyXG4gICAgICogICAgIHRpdGxlOiAgICAgIOagh+mimFxyXG4gICAgICogICAgIGNvbnRlbnQ6ICAgIOWGheWuuVxyXG4gICAgICogICAgIG9rV29yZDogICAgIG9r5oyJ6ZKu5LiK55qE5paH5a2XXHJcbiAgICAgKiAgICAgb2tGdW5jOiAgICAg56Gu6K6k5pe25omn6KGM55qE5pa55rOVXHJcbiAgICAgKiAgICAgY2FuY2VsV29yZDog5Y+W5raI5oyJ6ZKu55qE5paH5a2XXHJcbiAgICAgKiAgICAgY2FuY2VsRnVuYzog5Y+W5raI5pe25omn6KGM55qE5pa55rOVXHJcbiAgICAgKiAgICAgbmVlZENhbmNlbDog5piv5ZCm6ZyA6KaB5Y+W5raI5oyJ6ZKuXHJcbiAgICAgKiB9XHJcbiAgICAgKi9cclxuICAgIG9uQWRkZWQocGFyYW1zOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IHBhcmFtcyB8fCB7fTtcclxuICAgICAgICB0aGlzLnNldFRpdGxlKCk7XHJcbiAgICAgICAgdGhpcy5zZXRDb250ZW50KCk7XHJcbiAgICAgICAgdGhpcy5zZXRCdG5Pa0xhYmVsKCk7XHJcbiAgICAgICAgdGhpcy5zZXRCdG5DYW5jZWxMYWJlbCgpO1xyXG4gICAgICAgIHRoaXMubm9kZS5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0VGl0bGUoKSB7XHJcbiAgICAgICAgdGhpcy5sYWJfdGl0bGUhLmRhdGFJRCA9IHRoaXMuY29uZmlnLnRpdGxlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q29udGVudCgpIHtcclxuICAgICAgICB0aGlzLmxhYl9jb250ZW50IS5kYXRhSUQgPSB0aGlzLmNvbmZpZy5jb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0QnRuT2tMYWJlbCgpIHtcclxuICAgICAgICB0aGlzLmxhYl9vayEuZGF0YUlEID0gdGhpcy5jb25maWcub2tXb3JkO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0QnRuQ2FuY2VsTGFiZWwoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubGFiX2NhbmNlbCkge1xyXG4gICAgICAgICAgICB0aGlzLmxhYl9jYW5jZWwuZGF0YUlEID0gdGhpcy5jb25maWcuY2FuY2VsV29yZDtcclxuICAgICAgICAgICAgdGhpcy5sYWJfY2FuY2VsLm5vZGUucGFyZW50IS5hY3RpdmUgPSB0aGlzLmNvbmZpZy5uZWVkQ2FuY2VsIHx8IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uT2soKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZy5va0Z1bmMgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLm9rRnVuYygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNsb3NlKCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcuY2xvc2VGdW5jID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5jbG9zZUZ1bmMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25DYW5jZWwoKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbmZpZy5jYW5jZWxGdW5jID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5jYW5jZWxGdW5jKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNsb3NlKCkge1xyXG4gICAgICAgIG9vcHMuZ3VpLnJlbW92ZUJ5Tm9kZSh0aGlzLm5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IG51bGw7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTA3LTAzIDE2OjEzOjE3XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTExLTAxIDE1OjQ3OjE2XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgR2FtZUNvbmZpZyB9IGZyb20gXCIuL0dhbWVDb25maWdcIjtcclxuaW1wb3J0IHsgR2FtZVF1ZXJ5Q29uZmlnIH0gZnJvbSBcIi4vR2FtZVF1ZXJ5Q29uZmlnXCI7XHJcblxyXG4vKiog5ri45oiP6YWN572u6Z2Z5oCB6K6/6Zeu57G7ICovXHJcbmV4cG9ydCBjbGFzcyBDb25maWcge1xyXG4gICAgLyoqIOeOr+Wig+W4uOmHjyAqL1xyXG4gICAgLy8gIGJ0YyE6IEJ1aWxkVGltZUNvbnN0YW50cztcclxuXHJcbiAgICAvKiog5ri45oiP6YWN572u5pWw5o2u77yM54mI5pys5Y+344CB5pSv5oyB6K+t56eN562J5pWw5o2uICovXHJcbiAgICBnYW1lITogR2FtZUNvbmZpZztcclxuXHJcbiAgICAvKiog5rWP6KeI5Zmo5p+l6K+i5Y+C5pWwICovXHJcbiAgICBxdWVyeSE6IEdhbWVRdWVyeUNvbmZpZztcclxufSIsIi8qKiDlkLjlsJjlmajmtojmga/mlbDmja7nu5PmnoQgKi9cclxuZXhwb3J0IGludGVyZmFjZSBWYWN1dW1DbGVhbmVyQW5pe1xyXG4gICAgbmFtZTpzdHJpbmcsXHJcbiAgICBpbWc6c3RyaW5nLFxyXG59XHJcbiIsImRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBEYXRlIHtcclxuICAgICAgICBmb3JtYXQoZm9ybWF0OiBzdHJpbmcpOiBzdHJpbmc7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiDmoLzlvI/ljJbml7bpl7TlrZfnrKbkuLIgKi9cclxuRGF0ZS5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHllYXI6IG51bWJlciA9IHRoaXMuZ2V0RnVsbFllYXIoKTtcclxuICAgIGNvbnN0IG1vbnRoOiBudW1iZXIgPSB0aGlzLmdldE1vbnRoKCkgKyAxO1xyXG4gICAgY29uc3QgZGF5OiBudW1iZXIgPSB0aGlzLmdldERhdGUoKTtcclxuICAgIGNvbnN0IGhvdXJzOiBudW1iZXIgPSB0aGlzLmdldEhvdXJzKCk7XHJcbiAgICBjb25zdCBtaW51dGVzOiBudW1iZXIgPSB0aGlzLmdldE1pbnV0ZXMoKTtcclxuICAgIGNvbnN0IHNlY29uZHM6IG51bWJlciA9IHRoaXMuZ2V0U2Vjb25kcygpO1xyXG5cclxuICAgIHJldHVybiBmb3JtYXRcclxuICAgICAgICAucmVwbGFjZSgneXknLCB5ZWFyLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgLnJlcGxhY2UoJ21tJywgKG1vbnRoIDwgMTAgPyAnMCcgOiAnJykgKyBtb250aClcclxuICAgICAgICAucmVwbGFjZSgnZGQnLCAoZGF5IDwgMTAgPyAnMCcgOiAnJykgKyBkYXkpXHJcbiAgICAgICAgLnJlcGxhY2UoJ2hoJywgKGhvdXJzIDwgMTAgPyAnMCcgOiAnJykgKyBob3VycylcclxuICAgICAgICAucmVwbGFjZSgnbW0nLCAobWludXRlcyA8IDEwID8gJzAnIDogJycpICsgbWludXRlcylcclxuICAgICAgICAucmVwbGFjZSgnc3MnLCAoc2Vjb25kcyA8IDEwID8gJzAnIDogJycpICsgc2Vjb25kcyk7XHJcbn07XHJcblxyXG5leHBvcnQgeyB9O1xyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA2LTIxIDEyOjA1OjE0XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA3LTIwIDE0OjA1OjAyXHJcbiAqL1xyXG5pbXBvcnQgeyBCZWhhdmlvclRyZWUgfSBmcm9tICcuL0JlaGF2aW9yVHJlZSc7XHJcbmltcG9ydCB7IEJUcmVlTm9kZSB9IGZyb20gJy4vQlRyZWVOb2RlJztcclxuXHJcbi8qKiBcclxuICog6KOF6aWw5Zmo5piv5p2h5Lu26K+t5Y+l5Y+q6IO96ZmE5Yqg5Zyo5YW25LuW6IqC54K55LiK5bm25LiU5a6a5LmJ5omA6ZmE5Yqg55qE6IqC54K55piv5ZCm5omn6KGMIFxyXG4gKiDlpoLmnpzoo4XppbDlmajmmK90cnVlIOWug+aJgOWcqOeahOWtkOagkeS8muiiq+aJp+ihjO+8jOWmguaenOaYr2ZhbHNlIOaJgOWcqOeahOWtkOagkeS4jeS8muiiq+aJp+ihjFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERlY29yYXRvciBleHRlbmRzIEJUcmVlTm9kZSB7XHJcbiAgICBwdWJsaWMgbm9kZSE6IEJUcmVlTm9kZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihub2RlPzogc3RyaW5nIHwgQlRyZWVOb2RlKSB7XHJcbiAgICAgICAgc3VwZXIoKVxyXG5cclxuICAgICAgICBpZiAobm9kZSlcclxuICAgICAgICAgICAgdGhpcy5ub2RlID0gQmVoYXZpb3JUcmVlLmdldE5vZGUobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHNldE5vZGUobm9kZTogc3RyaW5nIHwgQlRyZWVOb2RlKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlID0gQmVoYXZpb3JUcmVlLmdldE5vZGUobm9kZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5zZXRDb250cm9sKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubm9kZS5zdGFydCgpO1xyXG4gICAgICAgIHN1cGVyLnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVuZCgpIHtcclxuICAgICAgICB0aGlzLm5vZGUuZW5kKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJ1bihibGFja2JvYXJkOiBhbnkpIHtcclxuICAgICAgICB0aGlzLm5vZGUucnVuKGJsYWNrYm9hcmQpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjEtMTEtMTggMTE6MjE6MzJcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjMtMDEtMDkgMTE6NTI6MzhcclxuICovXHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgVUlDb25maWcgfSBmcm9tIFwiLi9MYXllck1hbmFnZXJcIjtcclxuXHJcbi8qKiog55WM6Z2i5Zue6LCD5Y+C5pWw5a+56LGh5a6a5LmJICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVUlDYWxsYmFja3Mge1xyXG4gICAgLyoqXHJcbiAgICAgKiDoioLngrnmt7vliqDliLDlsYLnuqfku6XlkI7nmoTlm57osINcclxuICAgICAqIEBwYXJhbSBub2RlICAg5b2T5YmN55WM6Z2i6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zIOWklumDqOS8oOmAkuWPguaVsFxyXG4gICAgICovXHJcbiAgICBvbkFkZGVkPzogKG5vZGU6IE5vZGUsIHBhcmFtczogYW55KSA9PiB2b2lkLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICog56qX5Y+j6IqC54K5IGRlc3Ryb3kg5LmL5ZCO5Zue6LCDXHJcbiAgICAgKiBAcGFyYW0gbm9kZSAgIOW9k+WJjeeVjOmdouiKgueCuVxyXG4gICAgICogQHBhcmFtIHBhcmFtcyDlpJbpg6jkvKDpgJLlj4LmlbBcclxuICAgICAqL1xyXG4gICAgb25SZW1vdmVkPzogKG5vZGU6IE5vZGUgfCBudWxsLCBwYXJhbXM6IGFueSkgPT4gdm9pZCxcclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiDlpoLmnpzmjIflrppvbkJlZm9yZVJlbW92ZWTvvIzliJluZXh05b+F6aG76LCD55So77yM5ZCm5YiZ6IqC54K55LiN5Lya6KKr5q2j5bi45Yig6Zmk44CCXHJcbiAgICAgKiBcclxuICAgICAqIOavlOWmguW4jOacm+iKgueCueWBmuS4gOS4qkZhZGVPdXTnhLblkI7liKDpmaTvvIzliJnlj6/ku6XlnKhgb25CZWZvcmVSZW1vdmVkYOW9k+S4reaSreaUvmFjdGlvbuWKqOeUu++8jOWKqOeUu+e7k+adn+WQjuiwg+eUqG5leHRcclxuICAgICAqIEBwYXJhbSBub2RlICAg5b2T5YmN55WM6Z2i6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gbmV4dCAgIOWbnuiwg+aWueazlVxyXG4gICAgICovXHJcbiAgICBvbkJlZm9yZVJlbW92ZT86IChub2RlOiBOb2RlLCBuZXh0OiBGdW5jdGlvbikgPT4gdm9pZCxcclxuXHJcbiAgICAvKiog572R57uc5byC5bi45pe277yM56qX5Y+j5Yqg6L295aSx6LSl5Zue6LCDICovXHJcbiAgICBvbkxvYWRGYWlsdXJlPzogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqIOacrOexu+Wei+S7heS+m2d1aeaooeWdl+WGhemDqOS9v+eUqO+8jOivt+WLv+WcqOWKn+iDvemAu+i+keS4reS9v+eUqCAqL1xyXG5leHBvcnQgY2xhc3MgVmlld1BhcmFtcyB7XHJcbiAgICAvKiog55WM6Z2i6YWN572uICovXHJcbiAgICBjb25maWc6IFVJQ29uZmlnID0gbnVsbCE7XHJcbiAgICAvKiog5Lyg6YCS57uZ5omT5byA55WM6Z2i55qE5Y+C5pWwICovXHJcbiAgICBwYXJhbXM6IGFueSA9IG51bGwhO1xyXG4gICAgLyoqIOeql+WPo+S6i+S7tiAqL1xyXG4gICAgY2FsbGJhY2tzOiBVSUNhbGxiYWNrcyA9IG51bGwhO1xyXG4gICAgLyoqIOaYr+WQpuWcqOS9v+eUqOeKtuaAgSAqL1xyXG4gICAgdmFsaWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgLyoqIOeVjOmdouagueiKgueCuSAqL1xyXG4gICAgbm9kZTogTm9kZSA9IG51bGwhO1xyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wOS0wMSAxODowMDoyOFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMS0wOSAxMTo1NTowM1xyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBOb2RlLCBfZGVjb3JhdG9yIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IG9vcHMgfSBmcm9tIFwiLi4vLi4vT29wc1wiO1xyXG5pbXBvcnQgeyBWaWV3UGFyYW1zIH0gZnJvbSBcIi4vRGVmaW5lc1wiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuY29uc3QgRXZlbnRPbkFkZGVkOiBzdHJpbmcgPSBcIm9uQWRkZWRcIjtcclxuY29uc3QgRXZlbnRPbkJlZm9yZVJlbW92ZTogc3RyaW5nID0gXCJvbkJlZm9yZVJlbW92ZVwiO1xyXG5jb25zdCBFdmVudE9uUmVtb3ZlZDogc3RyaW5nID0gXCJvblJlbW92ZWRcIjtcclxuXHJcbi8qKiDnqpflj6Pkuovku7bop6blj5Hnu4Tku7YgKi9cclxuQGNjY2xhc3MoJ0RlbGVnYXRlQ29tcG9uZW50JylcclxuZXhwb3J0IGNsYXNzIERlbGVnYXRlQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIC8qKiDop4blm77lj4LmlbAgKi9cclxuICAgIHZwOiBWaWV3UGFyYW1zID0gbnVsbCE7XHJcbiAgICAvKiog55WM6Z2i5YWz6Zet5Zue6LCDIC0g5YyF5ous5YWz6Zet5Yqo55S75pKt5pS+5a6M77yI6L6F5Yqp5qGG5p625YaF5a2Y5Lia5Yqh5rWB56iL5L2/55So77yJICovXHJcbiAgICBvbkNsb3NlV2luZG93OiBGdW5jdGlvbiA9IG51bGwhO1xyXG5cclxuICAgIC8qKiDnqpflj6Pmt7vliqAgKi9cclxuICAgIGFkZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDop6blj5Hnqpflj6Pnu4Tku7bkuIrmt7vliqDliLDniLboioLngrnlkI7nmoTkuovku7ZcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5vZGUuY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50OiBhbnkgPSB0aGlzLm5vZGUuY29tcG9uZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSBjb21wb25lbnRbRXZlbnRPbkFkZGVkXTtcclxuICAgICAgICAgICAgICAgIGlmIChmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF3YWl0IGZ1bmMuY2FsbChjb21wb25lbnQsIHRoaXMudnAucGFyYW1zKSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g6Kem5Y+R5aSW6YOo56qX5Y+j5pi+56S65YmN55qE5LqL5Lu277yI6L6F5Yqp5a6e546w6Ieq5a6a5LmJ5Yqo55S76YC76L6R77yJXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy52cC5jYWxsYmFja3Mub25BZGRlZCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZwLmNhbGxiYWNrcy5vbkFkZGVkKHRoaXMubm9kZSwgdGhpcy52cC5wYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliKDpmaToioLngrnvvIzor6Xmlrnms5Xlj6rog73osIPnlKjkuIDmrKHvvIzlsIbkvJrop6blj5FvbkJlZm9yZVJlbW92ZWTlm57osIMgKi9cclxuICAgIHJlbW92ZShpc0Rlc3Ryb3k/OiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudnAudmFsaWQpIHtcclxuICAgICAgICAgICAgLy8g6Kem5Y+R56qX5Y+j56e76Zmk6Iie5Y+w5LmL5YmN5LqL5Lu2XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlDb21wb25lbnRzRnVuY3Rpb24odGhpcy5ub2RlLCBFdmVudE9uQmVmb3JlUmVtb3ZlLCB0aGlzLnZwLnBhcmFtcyk7XHJcblxyXG4gICAgICAgICAgICAvLyAg6YCa55+l5aSW6YOo5a+56LGh56qX5Y+j57uE5Lu25LiK56e76Zmk5LmL5YmN55qE5LqL5Lu277yI5YWz6Zet56qX5Y+j5YmN55qE5YWz6Zet5Yqo55S75aSE55CG77yJXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy52cC5jYWxsYmFja3Mub25CZWZvcmVSZW1vdmUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52cC5jYWxsYmFja3Mub25CZWZvcmVSZW1vdmUoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25CZWZvcmVSZW1vdmVOZXh0LmJpbmQodGhpcywgaXNEZXN0cm95KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZWQodGhpcy52cCwgaXNEZXN0cm95KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog56qX5Y+j5YWz6Zet5YmN5Yqo55S75aSE55CG5a6M5ZCO55qE5Zue6LCD5pa55rOV77yM5Li76KaB55So5LqO6YeK5pS+6LWE5rqQICovXHJcbiAgICBwcml2YXRlIG9uQmVmb3JlUmVtb3ZlTmV4dChpc0Rlc3Ryb3k/OiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVkKHRoaXMudnAsIGlzRGVzdHJveSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOeql+WPo+e7hOS7tuS4reinpuWPkeenu+mZpOS6i+S7tuS4jumHiuaUvueql+WPo+WvueixoSAqL1xyXG4gICAgcHJpdmF0ZSByZW1vdmVkKHZwOiBWaWV3UGFyYW1zLCBpc0Rlc3Ryb3k/OiBib29sZWFuKSB7XHJcbiAgICAgICAgdnAudmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgaWYgKHZwLmNhbGxiYWNrcyAmJiB0eXBlb2YgdnAuY2FsbGJhY2tzLm9uUmVtb3ZlZCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHZwLmNhbGxiYWNrcy5vblJlbW92ZWQodGhpcy5ub2RlLCB2cC5wYXJhbXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g55WM6Z2i56e76Zmk6Iie5Y+w5LqL5Lu2XHJcbiAgICAgICAgdGhpcy5vbkNsb3NlV2luZG93ICYmIHRoaXMub25DbG9zZVdpbmRvdyh2cCk7XHJcblxyXG4gICAgICAgIGlmIChpc0Rlc3Ryb3kpIHtcclxuICAgICAgICAgICAgLy8g6YeK5pS+55WM6Z2i5pi+56S65a+56LGhXHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XHJcblxyXG4gICAgICAgICAgICAvLyDph4rmlL7nlYzpnaLnm7jlhbPotYTmupBcclxuICAgICAgICAgICAgb29wcy5yZXMucmVsZWFzZSh2cC5jb25maWcucHJlZmFiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG9vcHMubG9nLmxvZ1ZpZXcoYOOAkOeVjOmdoueuoeeQhuOAkemHiuaUvuOAkCR7dnAuY29uZmlnLnByZWZhYn3jgJHnlYzpnaLotYTmupBgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5yZW1vdmVGcm9tUGFyZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgICAgICAvLyDop6blj5Hnqpflj6Pnu4Tku7bkuIrnqpflj6Pnp7vpmaTkuYvlkI7nmoTkuovku7ZcclxuICAgICAgICB0aGlzLmFwcGx5Q29tcG9uZW50c0Z1bmN0aW9uKHRoaXMubm9kZSwgRXZlbnRPblJlbW92ZWQsIHRoaXMudnAucGFyYW1zKTtcclxuICAgICAgICB0aGlzLnZwID0gbnVsbCE7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFwcGx5Q29tcG9uZW50c0Z1bmN0aW9uKG5vZGU6IE5vZGUsIGZ1bk5hbWU6IHN0cmluZywgcGFyYW1zOiBhbnkpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQ6IGFueSA9IG5vZGUuY29tcG9uZW50c1tpXTtcclxuICAgICAgICAgICAgY29uc3QgZnVuYyA9IGNvbXBvbmVudFtmdW5OYW1lXTtcclxuICAgICAgICAgICAgaWYgKGZ1bmMpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmMuY2FsbChjb21wb25lbnQsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBfZGVjb3JhdG9yIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IGVjcyB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbGlicy9lY3MvRUNTXCI7XHJcbmltcG9ydCB7IENDQ29tcCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbW9kdWxlL2NvbW1vbi9DQ0NvbXBcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog6KeG5Zu+5bGC5a+56LGhICovXHJcbkBjY2NsYXNzKCdEZW1vVmlld0NvbXAnKVxyXG5AZWNzLnJlZ2lzdGVyKCdEZW1vVmlldycsIGZhbHNlKVxyXG5leHBvcnQgY2xhc3MgRGVtb1ZpZXdDb21wIGV4dGVuZHMgQ0NDb21wIHtcclxuICAgIHN0YXJ0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICB0aGlzLm5vZGUuZGVzdHJveSgpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgc3lzIH0gZnJvbSBcImNjXCI7XHJcblxyXG4vKiog6K6+5aSH5bel5YW3ICovXHJcbmV4cG9ydCBjbGFzcyBEZXZpY2VVdGlsIHtcclxuICAgIC8qKiDov5Tlm57miYvmnLrlsY/luZXlronlhajljLrln5/vvIzlpoLmnpzkuI3mmK/lvILlvaLlsY/lsIbpu5jorqTov5Tlm57orr7orqHliIbovqjnjoflsLrlr7jjgILnm67liY3lj6rmlK/mjIHlronljZPjgIFpT1Mg5Y6f55Sf5bmz5Y+w5ZKM5b6u5L+h5bCP5ri45oiP5bmz5Y+wICovXHJcbiAgICBzdGF0aWMgZ2V0U2FmZUFyZWFSZWN0KCkge1xyXG4gICAgICAgIHJldHVybiBzeXMuZ2V0U2FmZUFyZWFSZWN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOW9k+WJjeW5s+WPsCAqL1xyXG4gICAgc3RhdGljIGdldCBwbGF0Zm9ybSgpIHsgcmV0dXJuIHN5cy5wbGF0Zm9ybTsgfVxyXG5cclxuICAgIC8qKiDlvZPliY3mk43kvZzns7vnu58gKi9cclxuICAgIHN0YXRpYyBnZXQgb3MoKSB7IHJldHVybiBzeXMub3M7IH1cclxuXHJcbiAgICAvKiog5piv5ZCm5Li65Y6f55Sf546v5aKDICovXHJcbiAgICBzdGF0aWMgZ2V0IGlzTmF0aXZlKCkgeyByZXR1cm4gc3lzLmlzTmF0aXZlOyB9XHJcblxyXG4gICAgLyoqIOaYr+WQpuS4uua1j+iniOWZqOeOr+WigyAqL1xyXG4gICAgc3RhdGljIGdldCBpc0Jyb3dzZXIoKSB7IHJldHVybiBzeXMuaXNCcm93c2VyOyB9XHJcblxyXG4gICAgLyoqIOaYr+WQpuS4uuaJi+acuiAqL1xyXG4gICAgc3RhdGljIGdldCBpc01vYmlsZSgpIHsgcmV0dXJuIHN5cy5pc01vYmlsZTsgfVxyXG5cclxuICAgIC8qKiDmmK/lkKbkuLrlronljZPmiYvmnLogKi9cclxuICAgIHN0YXRpYyBnZXQgaXNBbmRyb2lkKCkgeyByZXR1cm4gc3lzLnBsYXRmb3JtID09PSBzeXMuUGxhdGZvcm0uQU5EUk9JRDsgfVxyXG5cclxuICAgIC8qKiDmmK/lkKbkuLroi7nmnpzmiYvmnLogKi9cclxuICAgIHN0YXRpYyBnZXQgaXNJUGhvbmUoKSB7IHJldHVybiBzeXMucGxhdGZvcm0gPT09IHN5cy5QbGF0Zm9ybS5JT1M7IH1cclxuXHJcbiAgICAvKiog5piv5ZCm5Li65omL5py65rWP6KeI5ZmoICovXHJcbiAgICBzdGF0aWMgZ2V0IGlzTW9iaWxlQnJvd3NlcigpIHsgcmV0dXJuIHN5cy5wbGF0Zm9ybSA9PT0gc3lzLlBsYXRmb3JtLk1PQklMRV9CUk9XU0VSOyB9XHJcblxyXG4gICAgLyoqIOaYr+WQpuS4uuahjOmdoua1j+iniOWZqCAqL1xyXG4gICAgc3RhdGljIGdldCBpc0Rlc2t0b3BCcm93c2VyKCkgeyByZXR1cm4gc3lzLnBsYXRmb3JtID09PSBzeXMuUGxhdGZvcm0uREVTS1RPUF9CUk9XU0VSOyB9XHJcblxyXG4gICAgLyoqIOaYr+WQpuS4uuW+ruS/oeWwj+a4uOaIjyAqL1xyXG4gICAgc3RhdGljIGdldCBpc1dlQ2hhdCgpIHsgcmV0dXJuIHN5cy5wbGF0Zm9ybSA9PT0gc3lzLlBsYXRmb3JtLldFQ0hBVF9HQU1FOyB9XHJcblxyXG4gICAgLyoqIOaYr+WQpuS4uuWtl+iKguWwj+a4uOaIjyAqL1xyXG4gICAgc3RhdGljIGdldCBpc0J5dGVEYW5jZSgpIHsgcmV0dXJuIHN5cy5wbGF0Zm9ybSA9PT0gc3lzLlBsYXRmb3JtLkJZVEVEQU5DRV9NSU5JX0dBTUU7IH1cclxuXHJcbiAgICAvKiog5piv5ZCm5Li655m+5bqm5bCP5ri45oiPICovXHJcbiAgICBzdGF0aWMgZ2V0IGlzQmFpZHUoKSB7IHJldHVybiBzeXMucGxhdGZvcm0gPT09IHN5cy5QbGF0Zm9ybS5CQUlEVV9NSU5JX0dBTUU7IH1cclxuXHJcbiAgICAvKiog5piv5ZCm5Li6IHZpdm8g5bCP5ri45oiPICovXHJcbiAgICBzdGF0aWMgZ2V0IGlzVml2bygpIHsgcmV0dXJuIHN5cy5wbGF0Zm9ybSA9PT0gc3lzLlBsYXRmb3JtLlZJVk9fTUlOSV9HQU1FOyB9XHJcblxyXG4gICAgLyoqIOaYr+WQpuS4uiBPUFBPIOWwj+a4uOaIjyAqL1xyXG4gICAgc3RhdGljIGdldCBpc09QUE8oKSB7IHJldHVybiBzeXMucGxhdGZvcm0gPT09IHN5cy5QbGF0Zm9ybS5PUFBPX01JTklfR0FNRTsgfVxyXG5cclxuICAgIC8qKiDmmK/lkKbkuLrlsI/nsbPlsI/muLjmiI8gKi9cclxuICAgIHN0YXRpYyBnZXQgaXNYaWFvbWkoKSB7IHJldHVybiBzeXMucGxhdGZvcm0gPT09IHN5cy5QbGF0Zm9ybS5YSUFPTUlfUVVJQ0tfR0FNRTsgfVxyXG5cclxuICAgIC8qKiDmmK/lkKbkuLrljY7kuLrlsI/muLjmiI8gKi9cclxuICAgIHN0YXRpYyBnZXQgaXNIdWF3ZWkoKSB7IHJldHVybiBzeXMucGxhdGZvcm0gPT09IHN5cy5QbGF0Zm9ybS5IVUFXRUlfUVVJQ0tfR0FNRTsgfVxyXG5cclxuICAgIC8qKiDmmK/lkKbkuLrmlK/ku5jlrp3lsI/muLjmiI8gKi9cclxuICAgIHN0YXRpYyBnZXQgaXNBbGlwYXkoKSB7IHJldHVybiBzeXMucGxhdGZvcm0gPT09IHN5cy5QbGF0Zm9ybS5BTElQQVlfTUlOSV9HQU1FOyB9XHJcblxyXG4gICAgLyoqIOaYr+WQpuS4uuW8gOa6kOm4v+iSmeWwj+a4uOaIjyAqL1xyXG4gICAgc3RhdGljIGdldCBpc09wZW5IYXJtb255KCkgeyByZXR1cm4gc3lzLnBsYXRmb3JtID09PSBzeXMuUGxhdGZvcm0uT1BFTkhBUk1PTlk7IH1cclxufVxyXG4iLCJpbXBvcnQgeyBEaXJlY3RvciwgZGlyZWN0b3IsIGpzIH0gZnJvbSBcImNjXCI7XHJcblxyXG4vKiog5YWo5bGA5ri45oiP5pe26Ze057yp5pS+ICovXHJcbi8vQHRzLWlnbm9yZVxyXG5pZiAoIURpcmVjdG9yLnByb3RvdHlwZVtcIl9fJGNjLWRpcmVjdG9yLXNwZWVkLWV4dGVuc2lvbiRfX1wiXSkge1xyXG4gICAgLy9AdHMtaWdub3JlXHJcbiAgICBEaXJlY3Rvci5wcm90b3R5cGVbXCJfXyRjYy1kaXJlY3Rvci1zcGVlZC1leHRlbnNpb24kX19cIl0gPSB0cnVlO1xyXG5cclxuICAgIGxldCBvbGRUaWNrID0gZGlyZWN0b3IudGljay5iaW5kKGRpcmVjdG9yKTtcclxuICAgIGRpcmVjdG9yLnRpY2sgPSBmdW5jdGlvbiAoZHQpIHtcclxuICAgICAgICBkdCAqPSBkaXJlY3Rvci5nbG9iYWxHYW1lVGltZVNjYWxlO1xyXG4gICAgICAgIG9sZFRpY2soZHQpO1xyXG4gICAgfTtcclxuXHJcbiAgICBqcy5taXhpbihEaXJlY3Rvci5wcm90b3R5cGUsIHtcclxuICAgICAgICBnbG9iYWxHYW1lVGltZVNjYWxlOiAxLFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmRlY2xhcmUgbW9kdWxlIFwiY2NcIiB7XHJcbiAgICBpbnRlcmZhY2UgRGlyZWN0b3Ige1xyXG4gICAgICAgIGdsb2JhbEdhbWVUaW1lU2NhbGU6IG51bWJlcjtcclxuICAgIH1cclxufVxyXG5cclxuLy8gZGlyZWN0b3IuZ2xvYmFsR2FtZVRpbWVTY2FsZSA9IDAuNTsiLCJpbXBvcnQgeyBFQ1NDb21wIH0gZnJvbSBcIi4vRUNTQ29tcFwiO1xyXG5pbXBvcnQgeyBFQ1NFbnRpdHkgfSBmcm9tIFwiLi9FQ1NFbnRpdHlcIjtcclxuaW1wb3J0IHsgRUNTTWF0Y2hlciB9IGZyb20gXCIuL0VDU01hdGNoZXJcIjtcclxuaW1wb3J0IHsgQ29tcEN0b3IsIENvbXBUeXBlLCBFQ1NNb2RlbCwgRW50aXR5Q3RvciB9IGZyb20gXCIuL0VDU01vZGVsXCI7XHJcbmltcG9ydCB7IEVDU0NvbWJsb2NrU3lzdGVtLCBFQ1NSb290U3lzdGVtLCBFQ1NTeXN0ZW0gfSBmcm9tIFwiLi9FQ1NTeXN0ZW1cIjtcclxuXHJcbi8qKiBcclxuICogRUNTRW50aXR55a+56LGh5ZyoZGVzdHJveeWQju+8jOS8muWbnuaUtuWIsEVDU01vZGVsLmVudGl0eVBvb2zlrp7kvZPlr7nosaHmsaDkuK1cclxuICogRUNTQ29tcOWvueixoeS7jkVDU0VudGl0eS5yZW1vdmXlkI7vvIzmlbDmja7nu4Tku7bkvJrlm57mlLbliLBFQ1NNb2RlbC5jb21wUG9vbHPnu4Tku7blr7nosaHmsaDkuK1cclxuICovXHJcblxyXG4vKiogXHJcbiAqIEVudGl0eS1Db21wb25lbnQtU3lzdGVt77yI5a6e5L2TLee7hOS7ti3ns7vnu5/vvInmoYbmnrZcclxuICog5paH5qGj77yaaHR0cHM6Ly9naXRlZS5jb20vZGdmbGFzaC9vb3BzLWZyYW1ld29yay93aWtpcy9wYWdlcz9zb3J0X2lkPTEyMDMzMzg4JmRvY19pZD0yODczNTY1XHJcbiAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIGVjcyB7XHJcbiAgICAvKiog5a6e5L2TIC0g5LiA5Liq5qaC5b+15LiK55qE5a6a5LmJ77yM5oyH55qE5piv5ri45oiP5LiW55WM5Lit55qE5LiA5Liq54us54m554mp5L2T77yM5piv5LiA57O75YiX57uE5Lu255qE6ZuG5ZCIICovXHJcbiAgICBleHBvcnQgdHlwZSBFbnRpdHkgPSBFQ1NFbnRpdHk7XHJcbiAgICAvKiog57uE5Lu2IC0g5LiA5aCG5pWw5o2u55qE6ZuG5ZCI77yM5Y2z5LiN5a2Y5Zyo5Lu75L2V55qE6KGM5Li677yM5Y+q55So5p2l5a2Y5YKo54q25oCBICovXHJcbiAgICBleHBvcnQgdHlwZSBDb21wID0gRUNTQ29tcDtcclxuICAgIC8qKiDns7vnu58gLSDlhbPms6jlrp7kvZPkuIrnu4Tku7bmlbDmja7lj5jljJbvvIzlpITnkIbmuLjmiI/pgLvovpEgKi9cclxuICAgIGV4cG9ydCB0eXBlIFN5c3RlbSA9IEVDU1N5c3RlbTtcclxuICAgIC8qKiDmoLnns7vnu58gLSDpqbHliqjmuLjmiI/kuK3miYDmnInns7vnu5/lt6XkvZwgKi9cclxuICAgIGV4cG9ydCB0eXBlIFJvb3RTeXN0ZW0gPSBFQ1NSb290U3lzdGVtO1xyXG4gICAgLyoqIOWkhOeQhua4uOaIj+mAu+i+keezu+e7n+WvueixoSAtIOe7p+aJv+atpOWvueixoeWunueOsOiHquWumuS5ieS4muWKoemAu+i+kSAqL1xyXG4gICAgZXhwb3J0IHR5cGUgQ29tYmxvY2tTeXN0ZW0gPSBFQ1NDb21ibG9ja1N5c3RlbTtcclxuXHJcbiAgICAvKiog5a6e5L2TIC0g5LiA5Liq5qaC5b+15LiK55qE5a6a5LmJ77yM5oyH55qE5piv5ri45oiP5LiW55WM5Lit55qE5LiA5Liq54us54m554mp5L2T77yM5piv5LiA57O75YiX57uE5Lu255qE6ZuG5ZCIICovXHJcbiAgICBleHBvcnQgY29uc3QgRW50aXR5ID0gRUNTRW50aXR5O1xyXG4gICAgLyoqIOe7hOS7tiAtIOS4gOWghuaVsOaNrueahOmbhuWQiO+8jOWNs+S4jeWtmOWcqOS7u+S9leeahOihjOS4uu+8jOWPqueUqOadpeWtmOWCqOeKtuaAgSAqL1xyXG4gICAgZXhwb3J0IGNvbnN0IENvbXAgPSBFQ1NDb21wO1xyXG4gICAgLyoqIOezu+e7nyAtIOWFs+azqOWunuS9k+S4iue7hOS7tuaVsOaNruWPmOWMlu+8jOWkhOeQhua4uOaIj+mAu+i+kSAqL1xyXG4gICAgZXhwb3J0IGNvbnN0IFN5c3RlbSA9IEVDU1N5c3RlbTtcclxuICAgIC8qKiDmoLnns7vnu58gLSDpqbHliqjmuLjmiI/kuK3miYDmnInns7vnu5/lt6XkvZwgKi9cclxuICAgIGV4cG9ydCBjb25zdCBSb290U3lzdGVtID0gRUNTUm9vdFN5c3RlbTtcclxuICAgIC8qKiDlpITnkIbmuLjmiI/pgLvovpHns7vnu5/lr7nosaEgLSDnu6fmib/mraTlr7nosaHlrp7njrDoh6rlrprkuYnkuJrliqHpgLvovpEgKi9cclxuICAgIGV4cG9ydCBjb25zdCBDb21ibG9ja1N5c3RlbSA9IEVDU0NvbWJsb2NrU3lzdGVtO1xyXG5cclxuICAgIC8vI3JlZ2lvbiDmjqXlj6NcclxuXHJcbiAgICAvKiog57uE5Lu25o6l5Y+jICovXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIElDb21wIHtcclxuICAgICAgICBjYW5SZWN5Y2xlOiBib29sZWFuO1xyXG4gICAgICAgIGVudDogRW50aXR5O1xyXG5cclxuICAgICAgICByZXNldCgpOiB2b2lkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlrp7kvZPljLnphY3lmajmjqXlj6MgKi9cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSU1hdGNoZXIge1xyXG4gICAgICAgIG1pZDogbnVtYmVyO1xyXG4gICAgICAgIGluZGljZXM6IG51bWJlcltdO1xyXG4gICAgICAgIGtleTogc3RyaW5nO1xyXG4gICAgICAgIGlzTWF0Y2goZW50aXR5OiBFbnRpdHkpOiBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog55uR5ZCs57uE5Lu26aaW5qyh5re75Yqg5Yiw5a6e5L2T5LiK5pe277yM5ZyoQ29tYmxvY2tTeXN0ZW3kuIrlrp7njrDov5nkuKrmjqXlj6NcclxuICAgICAqIDEuIGVudGl0eUVudGVy5Lya5ZyodXBkYXRl5pa55rOV5LmL5YmN5omn6KGM77yM5a6e5L2T6L+b5YWl5ZCO77yM5LiN5Lya5YaN5qyh6L+b5YWlZW50aXR5RW50ZXLmlrnms5XkuK1cclxuICAgICAqIDIuIOW9k+WunuS9k+S7juW9k+WJjVN5c3Rlbeenu+mZpO+8jOS4i+asoeWGjeasoeespuWQiOadoeS7tui/m+WFpVN5c3RlbeS5n+S8muaJp+ihjOS4iui/sOa1geeoi1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgIGV4cG9ydCBjbGFzcyBSb2xlVXBncmFkZVN5c3RlbSBleHRlbmRzIGVjcy5Db21ibG9ja1N5c3RlbSBpbXBsZW1lbnRzIGVjcy5JRW50aXR5RW50ZXJTeXN0ZW0ge1xyXG4gICAgICAgIGZpbHRlcigpOiBlY3MuSU1hdGNoZXIge1xyXG4gICAgICAgICAgICByZXR1cm4gZWNzLmFsbE9mKFJvbGVVcGdyYWRlQ29tcCwgUm9sZU1vZGVsTGV2ZWxDb21wKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVudGl0eUVudGVyKGU6IFJvbGUpOiB2b2lkIHtcclxuICAgICAgICAgICAgZS5yZW1vdmUoUm9sZVVwZ3JhZGVDb21wKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSUVudGl0eUVudGVyU3lzdGVtPEUgZXh0ZW5kcyBFbnRpdHkgPSBFbnRpdHk+IHtcclxuICAgICAgICBlbnRpdHlFbnRlcihlbnRpdHk6IEUpOiB2b2lkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDnm5HlkKznu4Tku7bku47lrp7kvZPkuIrnp7vpmaTml7bvvIzlnKhDb21ibG9ja1N5c3RlbeS4iuWunueOsOi/meS4quaOpeWPoyAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJRW50aXR5UmVtb3ZlU3lzdGVtPEUgZXh0ZW5kcyBFbnRpdHkgPSBFbnRpdHk+IHtcclxuICAgICAgICBlbnRpdHlSZW1vdmUoZW50aXR5OiBFKTogdm9pZDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog55uR5ZCs57O757uf56ys5LiA5qyh5omn6KGMdXBkYXRl5aSE55CG5a6e5L2T5pe277yM5ZyoQ29tYmxvY2tTeXN0ZW3kuIrlrp7njrDov5nkuKrmjqXlj6MgKi9cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSVN5c3RlbUZpcnN0VXBkYXRlPEUgZXh0ZW5kcyBFbnRpdHkgPSBFbnRpdHk+IHtcclxuICAgICAgICBmaXJzdFVwZGF0ZShlbnRpdHk6IEUpOiB2b2lkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDnm5HlkKzns7vnu5/miafooYx1cGRhdGXlpITnkIblrp7kvZPml7bvvIzlnKhDb21ibG9ja1N5c3RlbeS4iuWunueOsOi/meS4quaOpeWPoyAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBJU3lzdGVtVXBkYXRlPEUgZXh0ZW5kcyBFbnRpdHkgPSBFbnRpdHk+IHtcclxuICAgICAgICB1cGRhdGUoZW50aXR5OiBFKTogdm9pZDtcclxuICAgIH1cclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM57uE5Lu25YiwZWNz57O757uf5LitXHJcbiAgICAgKiBAcGFyYW0gbmFtZSAgIOeUseS6jmpz5omT5YyF5Lya5pS55Y+Y57G75ZCN77yM5omA5Lul6L+Z6YeM5b+F6aG75omL5Yqo5Lyg5YWl57uE5Lu255qE5ZCN56ewXHJcbiAgICAgKiBAcGFyYW0gY2FuTmV3IOagh+ivhuaYr+WQpuWPr+S7pW5ld+WvueixoeOAguaDs+e7p+aJv+iHqkNvY29zIENyZWF0b3LnmoTnu4Tku7blsLHkuI3og73ljrtuZXfvvIzpnIDopoHlhpnmiJBAZWNzLnJlZ2lzdGVyKCduYW1lJywgZmFsc2UpXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgLy8g5rOo5YaM5a6e5L2TXHJcbiAgICBAZWNzLnJlZ2lzdGVyKCdSb2xlJylcclxuICAgIGV4cG9ydCBjbGFzcyBSb2xlIGV4dGVuZHMgZWNzLkVudGl0eSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIOazqOWGjOaVsOaNrue7hOS7tlxyXG4gICAgQGVjcy5yZWdpc3RlcignUm9sZU1vZGVsJylcclxuICAgIGV4cG9ydCBjbGFzcyBSb2xlTW9kZWxDb21wIGV4dGVuZHMgZWNzLkNvbXAge1xyXG4gICAgICAgIGlkOiBudW1iZXIgPSAtMTtcclxuXHJcbiAgICAgICAgcmVzZXQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaWQgPSAgLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOazqOWGjOezu+e7n+e7hOS7tlxyXG4gICAgQGVjcy5yZWdpc3RlcignSW5pdGlhbGl6ZScpXHJcbiAgICBleHBvcnQgY2xhc3MgSW5pdFJlc1N5c3RlbSBleHRlbmRzIGVjcy5Db21ibG9ja1N5c3RlbSBpbXBsZW1lbnRzIGVjcy5JRW50aXR5RW50ZXJTeXN0ZW0ge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvLyDms6jlhozmmL7npLrlr7nosaHnu4Tku7ZcclxuICAgIEBjY2NsYXNzKCdSb2xlVmlld0NvbXAnKVxyXG4gICAgQGVjcy5yZWdpc3RlcignUm9sZVZpZXcnLCBmYWxzZSlcclxuICAgIGV4cG9ydCBjbGFzcyBSb2xlVmlld0NvbXAgZXh0ZW5kcyBDQ0NvbXAge1xyXG4gICAgICAgIG9uTG9hZCgpe1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyPFQ+KG5hbWU6IHN0cmluZywgY2FuTmV3OiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY3RvcjogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIOazqOWGjOezu+e7n1xyXG4gICAgICAgICAgICBpZiAoY3Rvci5zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3lzdGVtID0gRUNTTW9kZWwuc3lzdGVtcy5nZXQobmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3lzdGVtID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzeXN0ZW0gPSBuZXcgZWNzLlN5c3RlbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIEVDU01vZGVsLnN5c3RlbXMuc2V0KG5hbWUsIHN5c3RlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzeXN0ZW0uYWRkKG5ldyBjdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDms6jlhozlrp7kvZNcclxuICAgICAgICAgICAgZWxzZSBpZiAoY3Rvci50aWQgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBFQ1NNb2RlbC5lbnRpdHlDdG9ycy5zZXQoY3RvciBhcyBFbnRpdHlDdG9yPFQ+LCBuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDms6jlhoznu4Tku7ZcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3Rvci50aWQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Rvci50aWQgPSBFQ1NNb2RlbC5jb21wVGlkKys7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Rvci5jb21wTmFtZSA9IG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbk5ldykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBFQ1NNb2RlbC5jb21wQ3RvcnMucHVzaChjdG9yKTsgICAgICAgICAgICAgIC8vIOazqOWGjOS4jeWQjOexu+Wei+eahOe7hOS7tlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBFQ1NNb2RlbC5jb21wUG9vbHMuc2V0KGN0b3IudGlkLCBbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBFQ1NNb2RlbC5jb21wQ3RvcnMucHVzaChudWxsISk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIEVDU01vZGVsLmNvbXBBZGRPclJlbW92ZS5zZXQoY3Rvci50aWQsIFtdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg6YeN5aSN5rOo5YaM57uE5Lu277yaICR7bmFtZX0uYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvlu7rkuIDkuKrmlrDnmoTlrp7kvZPlr7nosaHmiJbku47nvJPlrZjkuK3ojrflj5bkuIDkuKrlrp7kvZPlr7nosaFcclxuICAgICAqIEBwYXJhbSBjdG9yIOWunuS9k+exu1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0RW50aXR5PFQgZXh0ZW5kcyBFbnRpdHk+KGN0b3I6IEVudGl0eUN0b3I8VD4pOiBUIHtcclxuICAgICAgICAvLyDojrflj5blrp7kvZPlr7nosaHlkI1cclxuICAgICAgICB2YXIgZW50aXR5TmFtZSA9IEVDU01vZGVsLmVudGl0eUN0b3JzLmdldChjdG9yKTtcclxuICAgICAgICBpZiAoZW50aXR5TmFtZSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCR7Y3Rvci5uYW1lfSDlrp7kvZPmsqHmnInms6jlhoxgKTtcclxuXHJcbiAgICAgICAgLy8g6I635Y+W5a6e5L2T5a+56LGh5rGgXHJcbiAgICAgICAgdmFyIGVudGl0eXMgPSBFQ1NNb2RlbC5lbnRpdHlQb29sLmdldChlbnRpdHlOYW1lISkgfHwgW107XHJcbiAgICAgICAgdmFyIGVudGl0eTogYW55ID0gZW50aXR5cy5wb3AoKTtcclxuXHJcbiAgICAgICAgLy8g57yT5a2Y5Lit5rKh5pyJ5ZCM57G75a6e5L2T77yM5YiZ5Yib5bu65LiA5Liq5paw55qEXHJcbiAgICAgICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgICAgICAgZW50aXR5ID0gbmV3IGN0b3IoKTtcclxuICAgICAgICAgICAgZW50aXR5LmVpZCA9IEVDU01vZGVsLmVpZCsrOyAgICAgICAgLy8g5a6e5L2T5ZSv5LiA57yW5Y+3XHJcbiAgICAgICAgICAgIGVudGl0eS5uYW1lID0gZW50aXR5TmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOinpuWPkeWunuS9k+WIneWni+WMlumAu+i+kVxyXG4gICAgICAgIGlmIChlbnRpdHkuaW5pdCkge1xyXG4gICAgICAgICAgICBlbnRpdHkuaXNWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGVudGl0eS5pbml0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtjdG9yLm5hbWV9IOWunuS9k+e8uuWwkSBpbml0IOaWueazleWIneWni+WMlum7mOiupOe7hOS7tmApO1xyXG5cclxuICAgICAgICBFQ1NNb2RlbC5laWQyRW50aXR5LnNldChlbnRpdHkuZWlkLCBlbnRpdHkpO1xyXG4gICAgICAgIHJldHVybiBlbnRpdHkgYXMgVDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWKqOaAgeafpeivouWunuS9k1xyXG4gICAgICogQHBhcmFtIG1hdGNoZXIg5Yy56YWN5ZmoXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogZWNzLnF1ZXJ5KGVjcy5hbGxPZihDb21wMSwgQ29tcDIpKTtcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5PEUgZXh0ZW5kcyBFbnRpdHkgPSBFbnRpdHk+KG1hdGNoZXI6IElNYXRjaGVyKTogRVtdIHtcclxuICAgICAgICBsZXQgZ3JvdXAgPSBFQ1NNb2RlbC5ncm91cHMuZ2V0KG1hdGNoZXIubWlkKTtcclxuICAgICAgICBpZiAoIWdyb3VwKSB7XHJcbiAgICAgICAgICAgIGdyb3VwID0gRUNTTW9kZWwuY3JlYXRlR3JvdXAobWF0Y2hlcik7XHJcbiAgICAgICAgICAgIEVDU01vZGVsLmVpZDJFbnRpdHkuZm9yRWFjaChncm91cC5vbkNvbXBvbmVudEFkZE9yUmVtb3ZlLCBncm91cCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBncm91cC5tYXRjaEVudGl0aWVzIGFzIEVbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5riF55CG5omA5pyJ55qE5a6e5L2TICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICAgICAgRUNTTW9kZWwuZWlkMkVudGl0eS5mb3JFYWNoKChlbnRpdHkpID0+IHtcclxuICAgICAgICAgICAgZW50aXR5LmRlc3Ryb3koKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBFQ1NNb2RlbC5ncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcclxuICAgICAgICAgICAgZ3JvdXAuY2xlYXIoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBFQ1NNb2RlbC5jb21wQWRkT3JSZW1vdmUuZm9yRWFjaChjYWxsYmFja0xzdCA9PiB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrTHN0Lmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgRUNTTW9kZWwuZWlkMkVudGl0eS5jbGVhcigpO1xyXG4gICAgICAgIEVDU01vZGVsLmdyb3Vwcy5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YCa6L+H5a6e5L2T5ZSv5LiA57yW5Y+36I635b6X5a6e5L2T5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gZWlkIOWunuS9k+WUr+S4gOe8luWPt1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0RW50aXR5QnlFaWQ8RSBleHRlbmRzIEVudGl0eSA9IEVudGl0eT4oZWlkOiBudW1iZXIpOiBFIHtcclxuICAgICAgICByZXR1cm4gRUNTTW9kZWwuZWlkMkVudGl0eS5nZXQoZWlkKSBhcyBFO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlvZPliY3mtLvliqjkuK3nmoTlrp7kvZPmlbDph48gKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBhY3RpdmVFbnRpdHlDb3VudCgpIHtcclxuICAgICAgICByZXR1cm4gRUNTTW9kZWwuZWlkMkVudGl0eS5zaXplO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliJvlu7rlrp7kvZMgKi9cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVudGl0eTxFIGV4dGVuZHMgRW50aXR5ID0gRW50aXR5PigpOiBFIHtcclxuICAgICAgICBsZXQgZW50aXR5ID0gbmV3IEVudGl0eSgpO1xyXG4gICAgICAgIGVudGl0eS5laWQgPSBFQ1NNb2RlbC5laWQrKzsgICAgICAgICAgICAgICAgICAgICAvLyDlrp7kvZNpZOS5n+aYr+aciemZkOeahOi1hOa6kFxyXG4gICAgICAgIEVDU01vZGVsLmVpZDJFbnRpdHkuc2V0KGVudGl0eS5laWQsIGVudGl0eSk7XHJcbiAgICAgICAgcmV0dXJuIGVudGl0eSBhcyBFO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5oyH5a6a5LiA5Liq57uE5Lu25Yib5bu65a6e5L2T77yM6L+U5Zue57uE5Lu25a+56LGh44CCXHJcbiAgICAgKiBAcGFyYW0gY3RvciBcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlRW50aXR5V2l0aENvbXA8VCBleHRlbmRzIElDb21wPihjdG9yOiBDb21wQ3RvcjxUPik6IFQge1xyXG4gICAgICAgIGxldCBlbnRpdHkgPSBjcmVhdGVFbnRpdHkoKTtcclxuICAgICAgICByZXR1cm4gZW50aXR5LmFkZChjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyNyZWdpb24g6L+H5ruk5ZmoXHJcbiAgICAvKipcclxuICAgICAqIOihqOekuuWPquWFs+W/g+i/meS6m+e7hOS7tueahOa3u+WKoOWSjOWIoOmZpOWKqOS9nOOAguiZveeEtuWunuS9k+WPr+iDveaciei/meS6m+e7hOS7tuS5i+WklueahOe7hOS7tu+8jOS9huaYr+Wug+S7rOeahOa3u+WKoOWSjOWIoOmZpOayoeacieiiq+WFs+azqO+8jOaJgOS7peS4jeS8muWtmOWcqOWvueWFs+azqOS5i+WklueahOe7hOS7tlxyXG4gICAgICog6L+b6KGM5re75Yqg5pON5L2c5byV5Y+RR3JvdXDph43lpI3mt7vliqDlrp7kvZPjgIJcclxuICAgICAqIEBwYXJhbSBhcmdzIFxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGVjcy5hbGxPZihBQ29tcG9uZW50LCBCQ29tcG9uZW50LCBDQ29tcG9uZW50KTtcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGFsbE9mKC4uLmFyZ3M6IENvbXBUeXBlPElDb21wPltdKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFQ1NNYXRjaGVyKCkuYWxsT2YoLi4uYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnu4Tku7bpl7TmmK/miJbnmoTlhbPns7vvvIzooajnpLrlhbPms6jmi6XmnInku7vmhI/kuIDkuKrov5nkupvnu4Tku7bnmoTlrp7kvZNcclxuICAgICAqIEBwYXJhbSBhcmdzICDnu4Tku7bnsbtcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBlY3MuYW55T2YoQUNvbXBvbmVudCwgQkNvbXBvbmVudCk7XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBhbnlPZiguLi5hcmdzOiBDb21wVHlwZTxJQ29tcD5bXSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRUNTTWF0Y2hlcigpLmFueU9mKC4uLmFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6KGo56S65YWz5rOo5Y+q5oul5pyJ6L+Z5Lqb57uE5Lu255qE5a6e5L2TXHJcbiAgICAgKiDms6jvvJrkuI3mmK/nibnmrormg4XlhrXkuI3lu7rorq7kvb/nlKhvbmx5T2bjgILlm6DkuLpvbmx5T2bkvJrnm5HlkKzmiYDmnInnu4Tku7bnmoTmt7vliqDlkozliKDpmaTkuovku7ZcclxuICAgICAqIEBwYXJhbSBhcmdzICDnu4Tku7bnsbtcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgLy8g5LiN5YyF5ZCrQ0NvbXBvbmVudOaIluiAhURDb21wb25lbnRcclxuICAgICBlY3MuYWxsT2YoQUNvbXBvbmVudCwgQkNvbXBvbmVudCkuZXhjbHVkZU9mKENDb21wb25lbnQsIERDb21wb25lbnQpO1xyXG5cclxuICAgICAvLyDkuI3lkIzml7bljIXlkKtDQ29tcG9uZW505ZKMRENvbXBvbmVudFxyXG4gICAgIGVjcy5hbGxPZihBQ29tcG9uZW50LCBCQ29tcG9uZW50KS5leGNsdWRlT2YoQ0NvbXBvbmVudCkuZXhjbHVkZU9mKERDb21wb25lbnQpO1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gb25seU9mKC4uLmFyZ3M6IENvbXBUeXBlPElDb21wPltdKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFQ1NNYXRjaGVyKCkub25seU9mKC4uLmFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiN5YyF5ZCr5oyH5a6a55qE5Lu75oSP5LiA5Liq57uE5Lu2XHJcbiAgICAgKiBAcGFyYW0gYXJncyAg57uE5Lu257G7XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgIC8vIOihqOekuuS4jeWMheWQq+e7hOS7tkHmiJbogIXnu4Tku7ZCXHJcbiAgICAgZWNzLmV4Y2x1ZGVPZihBLCBCKTsgXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBleGNsdWRlT2YoLi4uYXJnczogQ29tcFR5cGU8SUNvbXA+W10pIHtcclxuICAgICAgICByZXR1cm4gbmV3IEVDU01hdGNoZXIoKS5leGNsdWRlT2YoLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAvLyNyZWdpb24g5Y2V5L6L57uE5Lu2XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluWNleS+i+e7hOS7tlxyXG4gICAgICogQHBhcmFtIGN0b3Ig57uE5Lu257G7XHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBnZXRTaW5nbGV0b248VCBleHRlbmRzIElDb21wPihjdG9yOiBDb21wQ3RvcjxUPikge1xyXG4gICAgICAgIGlmICghRUNTTW9kZWwudGlkMmNvbXAuaGFzKGN0b3IudGlkKSkge1xyXG4gICAgICAgICAgICBsZXQgY29tcCA9IGNyZWF0ZUVudGl0eVdpdGhDb21wKGN0b3IpIGFzIFQ7XHJcbiAgICAgICAgICAgIEVDU01vZGVsLnRpZDJjb21wLnNldChjdG9yLnRpZCwgY29tcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBFQ1NNb2RlbC50aWQyY29tcC5nZXQoY3Rvci50aWQpIGFzIFQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhozljZXkvovnu4Tku7YgLSDkuLvopoHnlKjkuo7pgqPkupvkuI3og73miYvliqjliJvlu7rlr7nosaHnmoTnu4Tku7ZcclxuICAgICAqIEBwYXJhbSBvYmogXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBhZGRTaW5nbGV0b24ob2JqOiBJQ29tcCkge1xyXG4gICAgICAgIGxldCB0aWQgPSAob2JqLmNvbnN0cnVjdG9yIGFzIENvbXBDdG9yPElDb21wPikudGlkO1xyXG4gICAgICAgIGlmICghRUNTTW9kZWwudGlkMmNvbXAuaGFzKHRpZCkpIHtcclxuICAgICAgICAgICAgRUNTTW9kZWwudGlkMmNvbXAuc2V0KHRpZCwgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8jZW5kcmVnaW9uXHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA5LTAxIDE4OjAwOjI4XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA5LTA1IDE0OjAzOjU0XHJcbiAqL1xyXG5pbXBvcnQgeyBlY3MgfSBmcm9tIFwiLi9FQ1NcIjtcclxuaW1wb3J0IHsgRUNTRW50aXR5IH0gZnJvbSBcIi4vRUNTRW50aXR5XCI7XHJcblxyXG4vKiogXHJcbiAqIOe7hOS7tuaKveixoeexu1xyXG4gKiDms6jvvJrlu7rorq7nu4Tku7bph4zpnaLlj6rmlL7mlbDmja7lj6/og73lnKjlrp7pmYXlhpnku6PnoIHkvJrnorDliLDkuIDkupvmr5TovoPpurvng6bnmoTpl67popjvvIzlpoLmnpzmmK/ljZXnuq/lr7nnu4Tku7blhoXnmoTmlbDmja7mk43kvZzlj6/ku6XlnKjnu4Tku7bph4zpnaLlhpnmlrnms5VcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFQ1NDb21wIGltcGxlbWVudHMgZWNzLklDb21wIHtcclxuICAgIC8qKiDnu4Tku7bnmoTnsbvlnovnvJblj7fvvIwtMeihqOekuuacque7meivpee7hOS7tuWIhumFjee8luWPtyAqL1xyXG4gICAgc3RhdGljIHRpZDogbnVtYmVyID0gLTE7XHJcblxyXG4gICAgLyoqIOe7hOS7tuWQjSAqL1xyXG4gICAgc3RhdGljIGNvbXBOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqIOaLpeacieivpee7hOS7tueahOWunuS9kyAqL1xyXG4gICAgZW50ITogRUNTRW50aXR5O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5Y+v5Zue5pS257uE5Lu25a+56LGh77yM6buY6K6k5oOF5Ya15LiL6YO95piv5Y+v5Zue5pS255qEXHJcbiAgICAgKiDms6jvvJrlpoLmnpzor6Xnu4Tku7blr7nosaHmmK/nlLFlY3Pns7vnu5/lpJbpg6jliJvlu7rnmoTvvIzliJnkuI3lj6/lm57mlLbvvIzpnIDopoHnlKjmiLfoh6rlt7HmiYvliqjov5vooYzlm57mlLZcclxuICAgICAqL1xyXG4gICAgY2FuUmVjeWNsZTogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnu4Tku7booqvlm57mlLbml7bkvJrosIPnlKjov5nkuKrmjqXlj6PjgILlj6/ku6XlnKjov5nph4zph43nva7mlbDmja7vvIzmiJbogIXop6PpmaTlvJXnlKhcclxuICAgICAqIOazqO+8muS4jeimgeWBt+aHku+8jOmZpOmdnuS9oOiDveehruWumuW5tuS/neivgee7hOS7tuWcqOWkjeeUqOaXtu+8jOmHjOmdoueahOaVsOaNruaYr+WFiOi1i+WAvOeEtuWQjuWGjeS9v+eUqFxyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCByZXNldCgpOiB2b2lkO1xyXG59IiwiaW1wb3J0IHsgZWNzIH0gZnJvbSBcIi4vRUNTXCI7XHJcbmltcG9ydCB7IEVDU01hc2sgfSBmcm9tIFwiLi9FQ1NNYXNrXCI7XHJcbmltcG9ydCB7IENvbXBDdG9yLCBDb21wVHlwZSwgRUNTTW9kZWwgfSBmcm9tIFwiLi9FQ1NNb2RlbFwiO1xyXG5cclxuLy8jcmVnaW9uIOi+heWKqeaWueazlVxyXG5cclxuLyoqXHJcbiAqIOWunuS9k+i6q+S4iue7hOS7tuacieWinuWIoOaTjeS9nO+8jOW5v+aSremAmuefpeWvueW6lOeahOinguWvn+iAhVxyXG4gKiBAcGFyYW0gZW50aXR5IOWunuS9k+WvueixoVxyXG4gKiBAcGFyYW0gY29tcG9uZW50VHlwZUlkIOe7hOS7tuexu+Wei2lkXHJcbiAqL1xyXG5mdW5jdGlvbiBicm9hZGNhc3RDb21wQWRkT3JSZW1vdmUoZW50aXR5OiBFQ1NFbnRpdHksIGNvbXBvbmVudFR5cGVJZDogbnVtYmVyKSB7XHJcbiAgICBsZXQgZXZlbnRzID0gRUNTTW9kZWwuY29tcEFkZE9yUmVtb3ZlLmdldChjb21wb25lbnRUeXBlSWQpO1xyXG4gICAgZm9yIChsZXQgaSA9IGV2ZW50cyEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBldmVudHMhW2ldKGVudGl0eSk7XHJcbiAgICB9XHJcbiAgICAvLyDliKTmlq3mmK/kuI3mmK/liKDkuobljZXkvovnu4Tku7ZcclxuICAgIGlmIChFQ1NNb2RlbC50aWQyY29tcC5oYXMoY29tcG9uZW50VHlwZUlkKSkge1xyXG4gICAgICAgIEVDU01vZGVsLnRpZDJjb21wLmRlbGV0ZShjb21wb25lbnRUeXBlSWQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICog5Yib5bu657uE5Lu25a+56LGhXHJcbiAqIEBwYXJhbSBjdG9yXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVDb21wPFQgZXh0ZW5kcyBlY3MuSUNvbXA+KGN0b3I6IENvbXBDdG9yPFQ+KTogVCB7XHJcbiAgICBjb25zdCBjY3QgPSBFQ1NNb2RlbC5jb21wQ3RvcnNbY3Rvci50aWRdO1xyXG4gICAgaWYgKCFjY3QpIHtcclxuICAgICAgICB0aHJvdyBFcnJvcihg5rKh5pyJ5om+5Yiw6K+l57uE5Lu255qE5p6E6YCg5Ye95pWw77yM5qOA5p+lJHtjdG9yLmNvbXBOYW1lfeaYr+WQpuS4uuS4jeWPr+aehOmAoOeahOe7hOS7tmApO1xyXG4gICAgfVxyXG4gICAgbGV0IGNvbXBzID0gRUNTTW9kZWwuY29tcFBvb2xzLmdldChjdG9yLnRpZCkhO1xyXG4gICAgbGV0IGNvbXBvbmVudCA9IGNvbXBzLnBvcCgpIHx8IG5ldyAoY2N0IGFzIENvbXBDdG9yPFQ+KTtcclxuICAgIHJldHVybiBjb21wb25lbnQgYXMgVDtcclxufVxyXG5cclxuLyoqXHJcbiAqIOmUgOavgeWunuS9k1xyXG4gKiBcclxuICog57yT5a2Y6ZSA5q+B55qE5a6e5L2T77yM5LiL5qyh5paw5bu65a6e5L2T5pe25Lya5LyY5YWI5LuO57yT5a2Y5Lit5ou/XHJcbiAqIEBwYXJhbSBlbnRpdHkgXHJcbiAqL1xyXG5mdW5jdGlvbiBkZXN0cm95RW50aXR5KGVudGl0eTogRUNTRW50aXR5KSB7XHJcbiAgICBpZiAoRUNTTW9kZWwuZWlkMkVudGl0eS5oYXMoZW50aXR5LmVpZCkpIHtcclxuICAgICAgICBsZXQgZW50aXR5cyA9IEVDU01vZGVsLmVudGl0eVBvb2wuZ2V0KGVudGl0eS5uYW1lKTtcclxuICAgICAgICBpZiAoZW50aXR5cyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVudGl0eXMgPSBbXTtcclxuICAgICAgICAgICAgRUNTTW9kZWwuZW50aXR5UG9vbC5zZXQoZW50aXR5Lm5hbWUsIGVudGl0eXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbnRpdHlzLnB1c2goZW50aXR5KTtcclxuICAgICAgICBFQ1NNb2RlbC5laWQyRW50aXR5LmRlbGV0ZShlbnRpdHkuZWlkKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2Fybign6K+V5Zu+6ZSA5q+B5LiN5a2Y5Zyo55qE5a6e5L2TJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vI2VuZHJlZ2lvblxyXG5cclxuLyoqIEVDU+WunuS9k+WvueixoSAqL1xyXG5leHBvcnQgY2xhc3MgRUNTRW50aXR5IHtcclxuICAgIC8qKiDlrp7kvZPllK/kuIDmoIfor4bvvIzkuI3opoHmiYvliqjkv67mlLkgKi9cclxuICAgIGVpZDogbnVtYmVyID0gLTE7XHJcbiAgICAvKiog5a6e5L2T5a+56LGh5ZCNICovXHJcbiAgICBuYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgLyoqIOWunuS9k+aYr+WQpuacieaViCAqL1xyXG4gICAgaXNWYWxpZDogYm9vbGVhbiA9IHRydWU7XHJcbiAgICAvKiog57uE5Lu26L+H5ruk5pWw5o2uICovXHJcbiAgICBwcml2YXRlIG1hc2sgPSBuZXcgRUNTTWFzaygpO1xyXG4gICAgLyoqIOW9k+WJjeWunuS9k+i6q+S4iumZhOWKoOeahOe7hOS7tuaehOmAoOWHveaVsCAqL1xyXG4gICAgcHJpdmF0ZSBjb21wVGlkMkN0b3I6IE1hcDxudW1iZXIsIENvbXBUeXBlPGVjcy5JQ29tcD4+ID0gbmV3IE1hcCgpO1xyXG4gICAgLyoqIOmFjeWQiCBlbnRpdHkucmVtb3ZlKENvbXAsIGZhbHNlKe+8jCDorrDlvZXnu4Tku7blrp7kvovkuIrnmoTnvJPlrZjmlbDmja7vvIzlnKjmt7vliqDml7bmgaLlpI3ljp/mlbDmja4gKi9cclxuICAgIHByaXZhdGUgY29tcFRpZDJPYmo6IE1hcDxudW1iZXIsIGVjcy5JQ29tcD4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBfcGFyZW50OiBFQ1NFbnRpdHkgfCBudWxsID0gbnVsbDtcclxuICAgIC8qKiDniLblrp7kvZMgKi9cclxuICAgIGdldCBwYXJlbnQoKTogRUNTRW50aXR5IHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcclxuICAgIH1cclxuICAgIHNldCBwYXJlbnQodmFsdWU6IEVDU0VudGl0eSB8IG51bGwpIHtcclxuICAgICAgICB0aGlzLl9wYXJlbnQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jaGlsZHJlbjogTWFwPG51bWJlciwgRUNTRW50aXR5PiB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIOWtkOWunuS9k+mbhuWQiCAqL1xyXG4gICAgZ2V0IGNoaWxkcmVuKCk6IE1hcDxudW1iZXIsIEVDU0VudGl0eT4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9jaGlsZHJlbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuID0gbmV3IE1hcDxudW1iZXIsIEVDU0VudGl0eT4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5re75Yqg5a2Q5a6e5L2TXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5IOiiq+a3u+WKoOeahOWunuS9k+WvueixoVxyXG4gICAgICovXHJcbiAgICBhZGRDaGlsZChlbnRpdHk6IEVDU0VudGl0eSkge1xyXG4gICAgICAgIGVudGl0eS5fcGFyZW50ID0gdGhpcztcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnNldChlbnRpdHkuZWlkLCBlbnRpdHkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk5a2Q5a6e5L2TXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5ICAgIOiiq+enu+mZpOeahOWunuS9k+WvueixoVxyXG4gICAgICogQHBhcmFtIGlzRGVzdHJveSDooqvnp7vpmaTnmoTlrp7kvZPmmK/lkKbph4rmlL7vvIzpu5jorqTkuLrph4rmlL5cclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICByZW1vdmVDaGlsZChlbnRpdHk6IEVDU0VudGl0eSwgaXNEZXN0cm95ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNoaWxkcmVuID09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgZW50aXR5LnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5kZWxldGUoZW50aXR5LmVpZCk7XHJcbiAgICAgICAgaWYgKGlzRGVzdHJveSkgZW50aXR5LmRlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNrue7hOS7tuexu+WKqOaAgeWIm+W7uue7hOS7tu+8jOW5tumAmuefpeWFs+W/g+eahOezu+e7n+OAguWmguaenOWunuS9k+WtmOWcqOS6hui/meS4que7hOS7tu+8jOmCo+S5iOS8muWFiOWIoOmZpOS5i+WJjeeahOe7hOS7tueEtuWQjua3u+WKoOaWsOeahFxyXG4gICAgICogXHJcbiAgICAgKiDms6jmhI/vvJrkuI3opoHnm7TmjqVuZXcgQ29tcG9uZW5077yMbmV35p2l55qEQ29tcG9uZW505LiN5Lya5LuOQ29tcG9uZW5055qE57yT5a2Y5rGg5ou/57yT5a2Y55qE5pWw5o2uXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50VHlwZUlkICAg57uE5Lu257G7XHJcbiAgICAgKiBAcGFyYW0gaXNSZUFkZCAgICAgICAgICAgdHJ1ZS3ooajnpLrnlKjmiLfmjIflrprov5nkuKrlrp7kvZPlj6/og73lt7Lnu4/lrZjlnKjkuobor6Xnu4Tku7bvvIzpgqPkuYjlho3mrKFhZGTnu4Tku7bnmoTml7blgJnkvJrlhYjnp7vpmaTor6Xnu4Tku7bnhLblkI7lho3mt7vliqDkuIDpgY3jgIJmYWxzZS3ooajnpLrkuI3ph43lpI3mt7vliqDnu4Tku7ZcclxuICAgICAqL1xyXG4gICAgYWRkPFQgZXh0ZW5kcyBlY3MuSUNvbXA+KG9iajogVCk6IEVDU0VudGl0eTtcclxuICAgIGFkZDxUIGV4dGVuZHMgZWNzLklDb21wPihjdG9yOiBDb21wVHlwZTxUPiwgaXNSZUFkZD86IGJvb2xlYW4pOiBUO1xyXG4gICAgYWRkPFQgZXh0ZW5kcyBlY3MuSUNvbXA+KGN0b3I6IENvbXBUeXBlPFQ+IHwgVCwgaXNSZUFkZDogYm9vbGVhbiA9IGZhbHNlKTogVCB8IEVDU0VudGl0eSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjdG9yID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGxldCBjb21wVGlkID0gY3Rvci50aWQ7XHJcbiAgICAgICAgICAgIGlmIChjdG9yLnRpZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGDjgJAke3RoaXMubmFtZX3jgJHlrp7kvZPjgJAke2N0b3IuY29tcE5hbWV944CR57uE5Lu25pyq5rOo5YaMYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcFRpZDJDdG9yLmhhcyhjb21wVGlkKSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDliKTmlq3mmK/lkKbmnInor6Xnu4Tku7bvvIzlpoLmnpzmnInliJnlhYjnp7vpmaRcclxuICAgICAgICAgICAgICAgIGlmIChpc1JlQWRkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoY3Rvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhg44CQJHt0aGlzLm5hbWV944CR5a6e5L2T44CQJHtjdG9yLmNvbXBOYW1lfeOAkee7hOS7tuW3suWtmOWcqGApO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjdG9yLmNvbXBOYW1lXSBhcyBUO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubWFzay5zZXQoY29tcFRpZCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgY29tcDogVDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcFRpZDJPYmouaGFzKGNvbXBUaWQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wID0gdGhpcy5jb21wVGlkMk9iai5nZXQoY29tcFRpZCkgYXMgVDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tcFRpZDJPYmouZGVsZXRlKGNvbXBUaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8g5Yib5bu657uE5Lu25a+56LGhXHJcbiAgICAgICAgICAgICAgICBjb21wID0gY3JlYXRlQ29tcChjdG9yKSBhcyBUO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDlsIbnu4Tku7blr7nosaHnm7TmjqXpmYTliqDliLDlrp7kvZPlr7nosaHouqvkuIrvvIzmlrnkvr/nm7TmjqXojrflj5ZcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICB0aGlzW2N0b3IuY29tcE5hbWVdID0gY29tcDtcclxuICAgICAgICAgICAgdGhpcy5jb21wVGlkMkN0b3Iuc2V0KGNvbXBUaWQsIGN0b3IpO1xyXG4gICAgICAgICAgICBjb21wLmVudCA9IHRoaXM7XHJcbiAgICAgICAgICAgIC8vIOW5v+aSreWunuS9k+a3u+WKoOe7hOS7tueahOa2iOaBr1xyXG4gICAgICAgICAgICBicm9hZGNhc3RDb21wQWRkT3JSZW1vdmUodGhpcywgY29tcFRpZCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29tcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB0bXBDdG9yID0gKGN0b3IuY29uc3RydWN0b3IgYXMgQ29tcEN0b3I8VD4pO1xyXG4gICAgICAgICAgICBsZXQgY29tcFRpZCA9IHRtcEN0b3IudGlkO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmFzc2VydChjb21wVGlkICE9PSAtMSB8fCAhY29tcFRpZCwgJ+e7hOS7tuacquazqOWGjO+8gScpO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmFzc2VydCh0aGlzLmNvbXBUaWQyQ3Rvci5oYXMoY29tcFRpZCksICflt7LlrZjlnKjor6Xnu4Tku7bvvIEnKTtcclxuICAgICAgICAgICAgaWYgKGNvbXBUaWQgPT09IC0xIHx8IGNvbXBUaWQgPT0gbnVsbCkgdGhyb3cgRXJyb3IoYOOAkCR7dGhpcy5uYW1lfeOAkeWunuS9k+OAkCR7dG1wQ3Rvci5uYW1lfeOAkee7hOS7tuacquazqOWGjGApO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb21wVGlkMkN0b3IuaGFzKGNvbXBUaWQpKSB0aHJvdyBFcnJvcihg44CQJHt0aGlzLm5hbWV944CR5a6e5L2T44CQJHt0bXBDdG9yLm5hbWV944CR57uE5Lu25bey57uP5a2Y5ZyoYCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm1hc2suc2V0KGNvbXBUaWQpO1xyXG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICAgICAgdGhpc1t0bXBDdG9yLmNvbXBOYW1lXSA9IGN0b3I7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcFRpZDJDdG9yLnNldChjb21wVGlkLCB0bXBDdG9yKTtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGN0b3IuZW50ID0gdGhpcztcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGN0b3IuY2FuUmVjeWNsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicm9hZGNhc3RDb21wQWRkT3JSZW1vdmUodGhpcywgY29tcFRpZCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmibnph4/mt7vliqDnu4Tku7ZcclxuICAgICAqIEBwYXJhbSBjdG9ycyDnu4Tku7bnsbtcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBhZGRDb21wb25lbnRzPFQgZXh0ZW5kcyBlY3MuSUNvbXA+KC4uLmN0b3JzOiBDb21wVHlwZTxUPltdKSB7XHJcbiAgICAgICAgZm9yIChsZXQgY3RvciBvZiBjdG9ycykge1xyXG4gICAgICAgICAgICB0aGlzLmFkZChjdG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuIDkuKrnu4Tku7blrp7kvotcclxuICAgICAqIEBwYXJhbSBjdG9yIOe7hOS7tuexu1xyXG4gICAgICovXHJcbiAgICBnZXQoY3RvcjogbnVtYmVyKTogbnVtYmVyO1xyXG4gICAgZ2V0PFQgZXh0ZW5kcyBlY3MuSUNvbXA+KGN0b3I6IENvbXBDdG9yPFQ+KTogVDtcclxuICAgIGdldDxUIGV4dGVuZHMgZWNzLklDb21wPihjdG9yOiBDb21wQ3RvcjxUPiB8IG51bWJlcik6IFQge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXR1cm4gdGhpc1tjdG9yLmNvbXBOYW1lXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe7hOS7tuaYr+WQpuWcqOWunuS9k+WtmOWcqOWGhVxyXG4gICAgICogQHBhcmFtIGN0b3Ig57uE5Lu257G7XHJcbiAgICAgKi9cclxuICAgIGhhcyhjdG9yOiBDb21wVHlwZTxlY3MuSUNvbXA+KTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjdG9yID09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFzay5oYXMoY3Rvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wVGlkMkN0b3IuaGFzKGN0b3IudGlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDku47lrp7kvZPkuIrliKDpmaTmjIflrprnu4Tku7ZcclxuICAgICAqIEBwYXJhbSBjdG9yICAgICAg57uE5Lu25p6E6YCg5Ye95pWw5oiW6ICF57uE5Lu2VGFnXHJcbiAgICAgKiBAcGFyYW0gaXNSZWN5Y2xlIOaYr+WQpuWbnuaUtuivpee7hOS7tuWvueixoeOAguWvueS6juacieS6m+e7hOS7tuS4iuacieWkp+mHj+aVsOaNru+8jOW9k+imgeaPj+i/sOenu+mZpOe7hOS7tuS9huaYr+S4jeaDs+a4hemZpOe7hOS7tuS4iueahOaVsOaNruaYr+WPr+S7pVxyXG4gICAgICog6K6+572u6K+l5Y+C5pWw5Li6ZmFsc2XvvIzov5nmoLfor6Xnu4Tku7blr7nosaHkvJrnvJPlrZjlnKjlrp7kvZPouqvkuIrvvIzkuIvmrKHph43mlrDmt7vliqDnu4Tku7bml7bkvJrlsIbor6Xnu4Tku7blr7nosaHmt7vliqDlm57mnaXvvIzkuI3kvJrph43mlrDku47nu4Tku7bnvJPlrZhcclxuICAgICAqIOaxoOS4reaLv+S4gOS4que7hOS7tuadpeeUqOOAglxyXG4gICAgICovXHJcbiAgICByZW1vdmUoY3RvcjogQ29tcFR5cGU8ZWNzLklDb21wPiwgaXNSZWN5Y2xlOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIGxldCBoYXNDb21wID0gZmFsc2U7XHJcbiAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgbGV0IGNvbXBvbmVudFR5cGVJZCA9IGN0b3IudGlkO1xyXG4gICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgIGxldCBjb21wTmFtZSA9IGN0b3IuY29tcE5hbWU7XHJcbiAgICAgICAgaWYgKHRoaXMubWFzay5oYXMoY29tcG9uZW50VHlwZUlkKSkge1xyXG4gICAgICAgICAgICBoYXNDb21wID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGxldCBjb21wID0gdGhpc1tjdG9yLmNvbXBOYW1lXTtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbXAuZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKGlzUmVjeWNsZSkge1xyXG4gICAgICAgICAgICAgICAgY29tcC5yZXNldCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOWbnuaUtue7hOS7tuWIsOaMh+Wumue8k+WtmOaxoOS4rVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbXAuY2FuUmVjeWNsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBQb29sc1R5cGUgPSBFQ1NNb2RlbC5jb21wUG9vbHMuZ2V0KGNvbXBvbmVudFR5cGVJZCkhO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBQb29sc1R5cGUucHVzaChjb21wKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tcFRpZDJPYmouc2V0KGNvbXBvbmVudFR5cGVJZCwgY29tcCk7ICAgICAgICAvLyDnlKjkuo7nvJPlrZjmmL7npLrlr7nosaHnu4Tku7ZcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5Yig6Zmk5a6e5L2T5LiK55qE57uE5Lu26YC76L6RXHJcbiAgICAgICAgaWYgKGhhc0NvbXApIHtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHRoaXNbY29tcE5hbWVdID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5tYXNrLmRlbGV0ZShjb21wb25lbnRUeXBlSWQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBUaWQyQ3Rvci5kZWxldGUoY29tcG9uZW50VHlwZUlkKTtcclxuICAgICAgICAgICAgYnJvYWRjYXN0Q29tcEFkZE9yUmVtb3ZlKHRoaXMsIGNvbXBvbmVudFR5cGVJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDplIDmr4Hlrp7kvZPvvIzlrp7kvZPkvJrooqvlm57mlLbliLDlrp7kvZPnvJPlrZjmsaDkuK0gKi9cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5pc1ZhbGlkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIOWmguaenOacieeItuaooeWdl++8jOWImeenu+mZpOeItuaooeWdl+S4iuiusOW9leeahOWtkOaooeWdl1xyXG4gICAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5fcGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOenu+mZpOaooeWdl+S4iuaJgOacieWtkOaooeWdl1xyXG4gICAgICAgIGlmICh0aGlzLl9jaGlsZHJlbikge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZHJlbi5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZChlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOenu+mZpOWunuS9k+S4iuaJgOaciee7hOS7tlxyXG4gICAgICAgIHRoaXMuY29tcFRpZDJDdG9yLmZvckVhY2godGhpcy5fcmVtb3ZlLCB0aGlzKTtcclxuICAgICAgICBkZXN0cm95RW50aXR5KHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY29tcFRpZDJPYmouY2xlYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9yZW1vdmUoY29tcDogQ29tcFR5cGU8ZWNzLklDb21wPikge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlKGNvbXAsIHRydWUpO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wOS0wMSAxODowMDoyOFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wNSAxNDoyMTo1NFxyXG4gKi9cclxuaW1wb3J0IHsgZWNzIH0gZnJvbSBcIi4vRUNTXCI7XHJcbmltcG9ydCB7IEVDU0VudGl0eSB9IGZyb20gXCIuL0VDU0VudGl0eVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVDU0dyb3VwPEUgZXh0ZW5kcyBFQ1NFbnRpdHkgPSBFQ1NFbnRpdHk+IHtcclxuICAgIC8qKiDlrp7kvZPnrZvpgInop4TliJkgKi9cclxuICAgIHByaXZhdGUgbWF0Y2hlcjogZWNzLklNYXRjaGVyO1xyXG5cclxuICAgIHByaXZhdGUgX21hdGNoRW50aXRpZXM6IE1hcDxudW1iZXIsIEU+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIHByaXZhdGUgX2VudGl0aWVzQ2FjaGU6IEVbXSB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog56ym5ZCI6KeE5YiZ55qE5a6e5L2TXHJcbiAgICAgKi9cclxuICAgIGdldCBtYXRjaEVudGl0aWVzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9lbnRpdGllc0NhY2hlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VudGl0aWVzQ2FjaGUgPSBBcnJheS5mcm9tKHRoaXMuX21hdGNoRW50aXRpZXMudmFsdWVzKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZW50aXRpZXNDYWNoZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+WJjWdyb3Vw5Lit5a6e5L2T55qE5pWw6YePXHJcbiAgICAgKiBcclxuICAgICAqIOazqO+8muS4jeimgeaJi+WKqOS/ruaUuei/meS4quWxnuaAp+WAvOOAglxyXG4gICAgICog5rOo77ya5YW25a6e5Y+v5Lul6YCa6L+HdGhpcy5fbWF0Y2hFbnRpdGllcy5zaXpl6I635b6X5a6e5L2T5pWw6YeP77yM5L2G5piv6ZyA6KaB5bCB6KOFZ2V05pa55rOV44CC5Li65LqG5YeP5bCR5LiA5qyh5pa55rOV55qE6LCD55So5omA5Lul5omN55u05o6l5Yib5bu65LiA5LiqY291bnTlsZ7mgKdcclxuICAgICAqL1xyXG4gICAgY291bnQgPSAwO1xyXG5cclxuICAgIC8qKiDojrflj5ZtYXRjaEVudGl0aWVz5Lit56ys5LiA5Liq5a6e5L2TICovXHJcbiAgICBnZXQgZW50aXR5KCk6IEUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoRW50aXRpZXNbMF07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZW50ZXJlZEVudGl0aWVzOiBNYXA8bnVtYmVyLCBFPiB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfcmVtb3ZlZEVudGl0aWVzOiBNYXA8bnVtYmVyLCBFPiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1hdGNoZXI6IGVjcy5JTWF0Y2hlcikge1xyXG4gICAgICAgIHRoaXMubWF0Y2hlciA9IG1hdGNoZXI7XHJcbiAgICB9XHJcblxyXG4gICAgb25Db21wb25lbnRBZGRPclJlbW92ZShlbnRpdHk6IEUpIHtcclxuICAgICAgICBpZiAodGhpcy5tYXRjaGVyLmlzTWF0Y2goZW50aXR5KSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHcm91cOWPquWFs+W/g+aMh+Wumue7hOS7tuWcqOWunuS9k+i6q+S4iueahOa3u+WKoOWSjOWIoOmZpOWKqOS9nOOAglxyXG4gICAgICAgICAgICB0aGlzLl9tYXRjaEVudGl0aWVzLnNldChlbnRpdHkuZWlkLCBlbnRpdHkpO1xyXG4gICAgICAgICAgICB0aGlzLl9lbnRpdGllc0NhY2hlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5jb3VudCsrO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2VudGVyZWRFbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW50ZXJlZEVudGl0aWVzLnNldChlbnRpdHkuZWlkLCBlbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlZEVudGl0aWVzIS5kZWxldGUoZW50aXR5LmVpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fbWF0Y2hFbnRpdGllcy5oYXMoZW50aXR5LmVpZCkpIHsgICAgICAgICAgICAgLy8g5aaC5p6cR3JvdXDkuK3mnInov5nkuKrlrp7kvZPvvIzkvYbmmK/ov5nkuKrlrp7kvZPlt7Lnu4/kuI3mu6HotrPljLnphY3op4TliJnvvIzliJnku45Hcm91cOS4reenu+mZpOivpeWunuS9k1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRjaEVudGl0aWVzLmRlbGV0ZShlbnRpdHkuZWlkKTtcclxuICAgICAgICAgICAgdGhpcy5fZW50aXRpZXNDYWNoZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuY291bnQtLTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbnRlcmVkRW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VudGVyZWRFbnRpdGllcy5kZWxldGUoZW50aXR5LmVpZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVkRW50aXRpZXMhLnNldChlbnRpdHkuZWlkLCBlbnRpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHdhdGNoRW50aXR5RW50ZXJBbmRSZW1vdmUoZW50ZXJlZEVudGl0aWVzOiBNYXA8bnVtYmVyLCBFPiwgcmVtb3ZlZEVudGl0aWVzOiBNYXA8bnVtYmVyLCBFPikge1xyXG4gICAgICAgIHRoaXMuX2VudGVyZWRFbnRpdGllcyA9IGVudGVyZWRFbnRpdGllcztcclxuICAgICAgICB0aGlzLl9yZW1vdmVkRW50aXRpZXMgPSByZW1vdmVkRW50aXRpZXM7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5fbWF0Y2hFbnRpdGllcy5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuX2VudGl0aWVzQ2FjaGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuX2VudGVyZWRFbnRpdGllcz8uY2xlYXIoKTtcclxuICAgICAgICB0aGlzLl9yZW1vdmVkRW50aXRpZXM/LmNsZWFyKCk7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA1LTEyIDE0OjE4OjQ0XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA1LTI0IDExOjA5OjQ5XHJcbiAqL1xyXG5pbXBvcnQgeyBFQ1NNb2RlbCB9IGZyb20gXCIuL0VDU01vZGVsXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRUNTTWFzayB7XHJcbiAgICBwcml2YXRlIG1hc2s6IFVpbnQzMkFycmF5O1xyXG4gICAgcHJpdmF0ZSBzaXplOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGxldCBsZW5ndGggPSBNYXRoLmNlaWwoRUNTTW9kZWwuY29tcFRpZCAvIDMxKTtcclxuICAgICAgICB0aGlzLm1hc2sgPSBuZXcgVWludDMyQXJyYXkobGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnNpemUgPSBsZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0KG51bTogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzQ4OTY5MDkvaXMtaXQtY29ycmVjdC10by1zZXQtYml0LTMxLWluLWphdmFzY3JpcHRcclxuICAgICAgICAvLyB0aGlzLm1hc2tbKChudW0gLyAzMikgPj4+IDApXSB8PSAoKDEgPDwgKG51bSAlIDMyKSkgPj4+IDApO1xyXG4gICAgICAgIHRoaXMubWFza1soKG51bSAvIDMxKSA+Pj4gMCldIHw9ICgxIDw8IChudW0gJSAzMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZShudW06IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubWFza1soKG51bSAvIDMxKSA+Pj4gMCldICY9IH4oMSA8PCAobnVtICUgMzEpKTtcclxuICAgIH1cclxuXHJcbiAgICBoYXMobnVtOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gISEodGhpcy5tYXNrWygobnVtIC8gMzEpID4+PiAwKV0gJiAoMSA8PCAobnVtICUgMzEpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgb3Iob3RoZXI6IEVDU01hc2spIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vICbmk43kvZznrKbmnIDlpKfkuZ/lj6rog73lr7kyXjMw6L+b6KGM5pON5L2c77yM5aaC5p6c5a+5Ml4zMSYyXjMx5Lya5b6X5Yiw6LSf5pWw44CC5b2T54S25Y+v5LulKDJeMzEmMl4zMSkgPj4+IDDvvIzov5nmoLflpJrkuobkuIDmraXlj7Pnp7vmk43kvZzjgIJcclxuICAgICAgICAgICAgaWYgKHRoaXMubWFza1tpXSAmIG90aGVyLm1hc2tbaV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBhbmQob3RoZXI6IEVDU01hc2spIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICgodGhpcy5tYXNrW2ldICYgb3RoZXIubWFza1tpXSkgIT0gdGhpcy5tYXNrW2ldKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLm1hc2tbaV0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IGVjcyB9IGZyb20gXCIuL0VDU1wiO1xyXG5pbXBvcnQgeyBFQ1NFbnRpdHkgfSBmcm9tIFwiLi9FQ1NFbnRpdHlcIjtcclxuaW1wb3J0IHsgRUNTTWFzayB9IGZyb20gXCIuL0VDU01hc2tcIjtcclxuaW1wb3J0IHsgQ29tcEN0b3IsIENvbXBUeXBlLCBFQ1NNb2RlbCB9IGZyb20gXCIuL0VDU01vZGVsXCI7XHJcblxyXG5sZXQgbWFjaGVySWQ6IG51bWJlciA9IDE7XHJcblxyXG4vKipcclxuICog562b6YCJ6KeE5YiZ6Ze05piv4oCc5LiO4oCd55qE5YWz57O7XHJcbiAqIOavlOWmgu+8mmVjcy5NYWNoZXIuYWxsT2YoLi4uKS5leGNsdWRlT2YoLi4uKeihqOi+vueahOaYr2FsbE9mICYmIGV4Y2x1ZGVPZu+8jOWNs+WunuS9k+acieKAnOi/meS6m+e7hOS7tuKAnSDlubbkuJQg4oCc5rKh5pyJ6L+Z5Lqb57uE5Lu24oCdXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRUNTTWF0Y2hlciBpbXBsZW1lbnRzIGVjcy5JTWF0Y2hlciB7XHJcbiAgICBwcm90ZWN0ZWQgcnVsZXM6IEJhc2VPZltdID0gW107XHJcbiAgICBwcm90ZWN0ZWQgX2luZGljZXM6IG51bWJlcltdIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwdWJsaWMgaXNNYXRjaCE6IChlbnRpdHk6IEVDU0VudGl0eSkgPT4gYm9vbGVhbjtcclxuICAgIHB1YmxpYyBtaWQ6IG51bWJlciA9IC0xO1xyXG5cclxuICAgIHByaXZhdGUgX2tleTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwdWJsaWMgZ2V0IGtleSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICghdGhpcy5fa2V5KSB7XHJcbiAgICAgICAgICAgIGxldCBzID0gJyc7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ydWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcyArPSB0aGlzLnJ1bGVzW2ldLmdldEtleSgpXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IHRoaXMucnVsZXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHMgKz0gJyAmJiAnXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fa2V5ID0gcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2tleTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLm1pZCA9IG1hY2hlcklkKys7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDljLnphY3lmajlhbPms6jnmoTnu4Tku7bntKLlvJXjgILlnKjliJvlu7pHcm91cOaXtu+8jENvbnRleHTmoLnmja7nu4Tku7ZpZOWOu+e7mUdyb3Vw5YWz6IGU57uE5Lu255qE5re75Yqg5ZKM56e76Zmk5LqL5Lu244CCXHJcbiAgICAgKi9cclxuICAgIGdldCBpbmRpY2VzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pbmRpY2VzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luZGljZXMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5ydWxlcy5mb3JFYWNoKChydWxlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLl9pbmRpY2VzLCBydWxlLmluZGljZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGljZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnu4Tku7bpl7TmmK/miJbnmoTlhbPns7vvvIzooajnpLrlhbPms6jmi6XmnInku7vmhI/kuIDkuKrov5nkupvnu4Tku7bnmoTlrp7kvZPjgIJcclxuICAgICAqIEBwYXJhbSBhcmdzIOe7hOS7tue0ouW8lVxyXG4gICAgICovXHJcbiAgICBhbnlPZiguLi5hcmdzOiBDb21wVHlwZTxlY3MuSUNvbXA+W10pOiBFQ1NNYXRjaGVyIHtcclxuICAgICAgICB0aGlzLnJ1bGVzLnB1c2gobmV3IEFueU9mKC4uLmFyZ3MpKTtcclxuICAgICAgICB0aGlzLmJpbmRNYXRjaE1ldGhvZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57uE5Lu26Ze05piv5LiO55qE5YWz57O777yM6KGo56S65YWz5rOo5oul5pyJ5omA5pyJ6L+Z5Lqb57uE5Lu255qE5a6e5L2T44CCXHJcbiAgICAgKiBAcGFyYW0gYXJncyDnu4Tku7bntKLlvJVcclxuICAgICAqL1xyXG4gICAgYWxsT2YoLi4uYXJnczogQ29tcFR5cGU8ZWNzLklDb21wPltdKTogRUNTTWF0Y2hlciB7XHJcbiAgICAgICAgdGhpcy5ydWxlcy5wdXNoKG5ldyBBbGxPZiguLi5hcmdzKSk7XHJcbiAgICAgICAgdGhpcy5iaW5kTWF0Y2hNZXRob2QoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOihqOekuuWFs+azqOWPquaLpeaciei/meS6m+e7hOS7tueahOWunuS9k1xyXG4gICAgICogXHJcbiAgICAgKiDms6jmhI/vvJpcclxuICAgICAqICDkuI3mmK/nibnmrormg4XlhrXkuI3lu7rorq7kvb/nlKhvbmx5T2bjgILlm6DkuLpvbmx5T2bkvJrnm5HlkKzmiYDmnInnu4Tku7bnmoTmt7vliqDlkozliKDpmaTkuovku7bjgIJcclxuICAgICAqIEBwYXJhbSBhcmdzIOe7hOS7tue0ouW8lVxyXG4gICAgICovXHJcbiAgICBvbmx5T2YoLi4uYXJnczogQ29tcFR5cGU8ZWNzLklDb21wPltdKTogRUNTTWF0Y2hlciB7XHJcbiAgICAgICAgdGhpcy5ydWxlcy5wdXNoKG5ldyBBbGxPZiguLi5hcmdzKSk7XHJcbiAgICAgICAgbGV0IG90aGVyVGlkczogQ29tcFR5cGU8ZWNzLklDb21wPltdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgY3RvciBvZiBFQ1NNb2RlbC5jb21wQ3RvcnMpIHtcclxuICAgICAgICAgICAgaWYgKGFyZ3MuaW5kZXhPZihjdG9yKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIG90aGVyVGlkcy5wdXNoKGN0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucnVsZXMucHVzaChuZXcgRXhjbHVkZU9mKC4uLm90aGVyVGlkcykpO1xyXG4gICAgICAgIHRoaXMuYmluZE1hdGNoTWV0aG9kKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuI3ljIXlkKvmjIflrprnmoTku7vmhI/kuIDkuKrnu4Tku7ZcclxuICAgICAqIEBwYXJhbSBhcmdzIFxyXG4gICAgICovXHJcbiAgICBleGNsdWRlT2YoLi4uYXJnczogQ29tcFR5cGU8ZWNzLklDb21wPltdKSB7XHJcbiAgICAgICAgdGhpcy5ydWxlcy5wdXNoKG5ldyBFeGNsdWRlT2YoLi4uYXJncykpO1xyXG4gICAgICAgIHRoaXMuYmluZE1hdGNoTWV0aG9kKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBiaW5kTWF0Y2hNZXRob2QoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucnVsZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNNYXRjaCA9IHRoaXMuaXNNYXRjaDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMucnVsZXMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNNYXRjaCA9IHRoaXMuaXNNYXRjaDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlzTWF0Y2ggPSB0aGlzLmlzTWF0Y2hNb3JlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzTWF0Y2gxKGVudGl0eTogRUNTRW50aXR5KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnVsZXNbMF0uaXNNYXRjaChlbnRpdHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNNYXRjaDIoZW50aXR5OiBFQ1NFbnRpdHkpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ydWxlc1swXS5pc01hdGNoKGVudGl0eSkgJiYgdGhpcy5ydWxlc1sxXS5pc01hdGNoKGVudGl0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc01hdGNoTW9yZShlbnRpdHk6IEVDU0VudGl0eSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGZvciAobGV0IHJ1bGUgb2YgdGhpcy5ydWxlcykge1xyXG4gICAgICAgICAgICBpZiAoIXJ1bGUuaXNNYXRjaChlbnRpdHkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogRUNTTWF0Y2hlciB7XHJcbiAgICAgICAgbGV0IG5ld01hdGNoZXIgPSBuZXcgRUNTTWF0Y2hlcigpO1xyXG4gICAgICAgIG5ld01hdGNoZXIubWlkID0gbWFjaGVySWQrKztcclxuICAgICAgICB0aGlzLnJ1bGVzLmZvckVhY2gocnVsZSA9PiBuZXdNYXRjaGVyLnJ1bGVzLnB1c2gocnVsZSkpO1xyXG4gICAgICAgIHJldHVybiBuZXdNYXRjaGVyO1xyXG4gICAgfVxyXG59XHJcblxyXG5hYnN0cmFjdCBjbGFzcyBCYXNlT2Yge1xyXG4gICAgaW5kaWNlczogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgbWFzayA9IG5ldyBFQ1NNYXNrKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoLi4uYXJnczogQ29tcFR5cGU8ZWNzLklDb21wPltdKSB7XHJcbiAgICAgICAgbGV0IGNvbXBvbmVudFR5cGVJZCA9IC0xO1xyXG4gICAgICAgIGxldCBsZW4gPSBhcmdzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGFyZ3NbaV0pID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRUeXBlSWQgPSBhcmdzW2ldIGFzIG51bWJlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFR5cGVJZCA9IChhcmdzW2ldIGFzIENvbXBDdG9yPGVjcy5JQ29tcD4pLnRpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50VHlwZUlkID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcign5a2Y5Zyo5rKh5pyJ5rOo5YaM55qE57uE5Lu277yBJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tYXNrLnNldChjb21wb25lbnRUeXBlSWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5kaWNlcy5pbmRleE9mKGNvbXBvbmVudFR5cGVJZCkgPCAwKSB7IC8vIOWOu+mHjVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmRpY2VzLnB1c2goY29tcG9uZW50VHlwZUlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmluZGljZXMuc29ydCgoYSwgYikgPT4geyByZXR1cm4gYSAtIGI7IH0pOyAvLyDlr7nnu4Tku7bnsbvlnotpZOi/m+ihjOaOkuW6j++8jOi/meagt+WFs+azqOebuOWQjOe7hOS7tueahOezu+e7n+WwseiDveWFseeUqOWQjOS4gOS4qmdyb3VwXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kaWNlcy5qb2luKCctJyk7IC8vIOeUn+aIkGdyb3Vw55qEa2V5XHJcbiAgICB9XHJcblxyXG4gICAgYWJzdHJhY3QgZ2V0S2V5KCk6IHN0cmluZztcclxuXHJcbiAgICBhYnN0cmFjdCBpc01hdGNoKGVudGl0eTogRUNTRW50aXR5KTogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIOeUqOS6juaPj+i/sOWMheWQq+S7u+aEj+S4gOS4qui/meS6m+e7hOS7tueahOWunuS9k1xyXG4gKi9cclxuY2xhc3MgQW55T2YgZXh0ZW5kcyBCYXNlT2Yge1xyXG4gICAgcHVibGljIGlzTWF0Y2goZW50aXR5OiBFQ1NFbnRpdHkpOiBib29sZWFuIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFzay5vcihlbnRpdHkubWFzayk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0S2V5KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdhbnlPZjonICsgdGhpcy50b1N0cmluZygpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICog55So5LqO5o+P6L+w5YyF5ZCr5LqG4oCc6L+Z5Lqb4oCd57uE5Lu255qE5a6e5L2T77yM6L+Z5Liq5a6e5L2T6Zmk5LqG5YyF5ZCr6L+Z5Lqb57uE5Lu26L+Y5Y+v5Lul5YyF5ZCr5YW25LuW57uE5Lu2XHJcbiAqL1xyXG5jbGFzcyBBbGxPZiBleHRlbmRzIEJhc2VPZiB7XHJcbiAgICBwdWJsaWMgaXNNYXRjaChlbnRpdHk6IEVDU0VudGl0eSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXNrLmFuZChlbnRpdHkubWFzayk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0S2V5KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICdhbGxPZjonICsgdGhpcy50b1N0cmluZygpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICog5LiN5YyF5ZCr5oyH5a6a55qE5Lu75oSP5LiA5Liq57uE5Lu2XHJcbiAqL1xyXG5jbGFzcyBFeGNsdWRlT2YgZXh0ZW5kcyBCYXNlT2Yge1xyXG4gICAgcHVibGljIGdldEtleSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiAnZXhjbHVkZU9mOicgKyB0aGlzLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzTWF0Y2goZW50aXR5OiBFQ1NFbnRpdHkpOiBib29sZWFuIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmV0dXJuICF0aGlzLm1hc2sub3IoZW50aXR5Lm1hc2spO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wNS0xMiAxNDoxODo0NFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wNSAxNjozNzoxMFxyXG4gKi9cclxuaW1wb3J0IHsgZWNzIH0gZnJvbSBcIi4vRUNTXCI7XHJcbmltcG9ydCB7IEVDU0VudGl0eSB9IGZyb20gXCIuL0VDU0VudGl0eVwiO1xyXG5pbXBvcnQgeyBFQ1NHcm91cCB9IGZyb20gXCIuL0VDU0dyb3VwXCI7XHJcblxyXG50eXBlIENvbXBBZGRPclJlbW92ZSA9IChlbnRpdHk6IGVjcy5FbnRpdHkpID0+IHZvaWQ7XHJcblxyXG4vKiog57uE5Lu257G75Z6LICovXHJcbmV4cG9ydCB0eXBlIENvbXBUeXBlPFQ+ID0gQ29tcEN0b3I8VD4gfCBudW1iZXI7XHJcblxyXG4vKiog5a6e5L2T5p6E6YCg5Zmo5o6l5Y+jICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5Q3RvcjxUPiB7XHJcbiAgICBuZXcoKTogVDtcclxufVxyXG5cclxuLyoqIOe7hOS7tuaehOmAoOWZqOaOpeWPoyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBDdG9yPFQ+IHtcclxuICAgIG5ldygpOiBUO1xyXG4gICAgLyoqIOe7hOS7tue8luWPtyAqL1xyXG4gICAgdGlkOiBudW1iZXI7XHJcbiAgICAvKiog57uE5Lu25ZCNICovXHJcbiAgICBjb21wTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG4vKiogRUNT5qGG5p625YaF6YOo5pWw5o2uICovXHJcbmV4cG9ydCBjbGFzcyBFQ1NNb2RlbCB7XHJcbiAgICAvKiog5a6e5L2T6Ieq5aKeaWQgKi9cclxuICAgIHN0YXRpYyBlaWQgPSAxO1xyXG4gICAgLyoqIOWunuS9k+mAoOWHveaVsCAqL1xyXG4gICAgc3RhdGljIGVudGl0eUN0b3JzOiBNYXA8RW50aXR5Q3Rvcjxhbnk+LCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xyXG4gICAgLyoqIOWunuS9k+Wvueixoee8k+WtmOaxoCAqL1xyXG4gICAgc3RhdGljIGVudGl0eVBvb2w6IE1hcDxzdHJpbmcsIEVDU0VudGl0eVtdPiA9IG5ldyBNYXAoKTtcclxuICAgIC8qKiDpgJrov4flrp7kvZNpZOafpeaJvuWunuS9k+WvueixoSAqL1xyXG4gICAgc3RhdGljIGVpZDJFbnRpdHk6IE1hcDxudW1iZXIsIEVDU0VudGl0eT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgLyoqIOe7hOS7tuexu+Wei2lkICovXHJcbiAgICBzdGF0aWMgY29tcFRpZCA9IDA7XHJcbiAgICAvKiog57uE5Lu257yT5a2Y5rGgICovXHJcbiAgICBzdGF0aWMgY29tcFBvb2xzOiBNYXA8bnVtYmVyLCBlY3MuSUNvbXBbXT4gPSBuZXcgTWFwKCk7XHJcbiAgICAvKiog57uE5Lu25p6E6YCg5Ye95pWw77yM55So5LqOZWNzLnJlZ2lzdGVy5rOo5YaM5pe277yM6K6w5b2V5LiN5ZCM57G75Z6L55qE57uE5Lu2ICovXHJcbiAgICBzdGF0aWMgY29tcEN0b3JzOiAoQ29tcEN0b3I8YW55PiB8IG51bWJlcilbXSA9IFtdO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmr4/kuKrnu4Tku7bnmoTmt7vliqDlkozliKDpmaTnmoTliqjkvZzpg73opoHmtL7pgIHliLDigJzlhbPlv4PigJ3lroPku6znmoRncm91cOS4iuOAgmdvdXDlr7nlvZPliY3mi6XmnInmiJbogIXkuYvliY3vvIjliKDpmaTliY3vvInmi6XmnInor6Xnu4Tku7bnmoTlrp7kvZPov5vooYznu4Tku7bop4TliJnliKTmlq3jgILliKTmlq3or6Xlrp7kvZPmmK/lkKbmu6HotrNncm91cFxyXG4gICAgICog5omA5pyf5pyb55qE57uE5Lu257uE5ZCI44CCXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjb21wQWRkT3JSZW1vdmU6IE1hcDxudW1iZXIsIENvbXBBZGRPclJlbW92ZVtdPiA9IG5ldyBNYXAoKTtcclxuXHJcbiAgICAvKiog57yW5Y+36I635Y+W57uE5Lu2ICovXHJcbiAgICBzdGF0aWMgdGlkMmNvbXA6IE1hcDxudW1iZXIsIGVjcy5JQ29tcD4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnvJPlrZjnmoRncm91cFxyXG4gICAgICogXHJcbiAgICAgKiBrZXnmmK/nu4Tku7bnmoTnrZvpgInop4TliJnvvIzkuIDkuKrnrZvpgInop4TliJnlr7nlupTkuIDkuKpncm91cFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ3JvdXBzOiBNYXA8bnVtYmVyLCBFQ1NHcm91cD4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvlu7pncm91cO+8jOavj+S4qmdyb3Vw5Y+q5YWz5b+D5a+55bqU57uE5Lu255qE5re75Yqg5ZKM5Yig6ZmkXHJcbiAgICAgKiBAcGFyYW0gbWF0Y2hlciDlrp7kvZPnrZvpgInlmahcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZUdyb3VwPEUgZXh0ZW5kcyBFQ1NFbnRpdHkgPSBFQ1NFbnRpdHk+KG1hdGNoZXI6IGVjcy5JTWF0Y2hlcik6IEVDU0dyb3VwPEU+IHtcclxuICAgICAgICBsZXQgZ3JvdXAgPSBFQ1NNb2RlbC5ncm91cHMuZ2V0KG1hdGNoZXIubWlkKTtcclxuICAgICAgICBpZiAoIWdyb3VwKSB7XHJcbiAgICAgICAgICAgIGdyb3VwID0gbmV3IEVDU0dyb3VwKG1hdGNoZXIpO1xyXG4gICAgICAgICAgICBFQ1NNb2RlbC5ncm91cHMuc2V0KG1hdGNoZXIubWlkLCBncm91cCk7XHJcbiAgICAgICAgICAgIGxldCBjYXJlQ29tcG9uZW50VHlwZUlkcyA9IG1hdGNoZXIuaW5kaWNlcztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYXJlQ29tcG9uZW50VHlwZUlkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgRUNTTW9kZWwuY29tcEFkZE9yUmVtb3ZlLmdldChjYXJlQ29tcG9uZW50VHlwZUlkc1tpXSkhLnB1c2goZ3JvdXAub25Db21wb25lbnRBZGRPclJlbW92ZS5iaW5kKGdyb3VwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGdyb3VwIGFzIHVua25vd24gYXMgRUNTR3JvdXA8RT47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOezu+e7n+e7hOS7tiAqL1xyXG4gICAgc3RhdGljIHN5c3RlbXM6IE1hcDxzdHJpbmcsIGVjcy5TeXN0ZW0+ID0gbmV3IE1hcDxzdHJpbmcsIGVjcy5TeXN0ZW0+KCk7XHJcbn0iLCJpbXBvcnQgeyBlY3MgfSBmcm9tIFwiLi9FQ1NcIjtcclxuaW1wb3J0IHsgRUNTRW50aXR5IH0gZnJvbSBcIi4vRUNTRW50aXR5XCI7XHJcbmltcG9ydCB7IEVDU0dyb3VwIH0gZnJvbSBcIi4vRUNTR3JvdXBcIjtcclxuaW1wb3J0IHsgRUNTTW9kZWwgfSBmcm9tIFwiLi9FQ1NNb2RlbFwiO1xyXG5cclxuLyoqIOe7p+aJv+atpOexu+WunueOsOWFt+S9k+S4muWKoemAu+i+keeahOezu+e7nyAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRUNTQ29tYmxvY2tTeXN0ZW08RSBleHRlbmRzIEVDU0VudGl0eSA9IEVDU0VudGl0eT4ge1xyXG4gICAgc3RhdGljIHM6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIHByb3RlY3RlZCBncm91cDogRUNTR3JvdXA8RT47XHJcbiAgICBwcm90ZWN0ZWQgZHQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBlbnRlcmVkRW50aXRpZXM6IE1hcDxudW1iZXIsIEU+ID0gbnVsbCE7XHJcbiAgICBwcml2YXRlIHJlbW92ZWRFbnRpdGllczogTWFwPG51bWJlciwgRT4gPSBudWxsITtcclxuXHJcbiAgICBwcml2YXRlIGhhc0VudGl0eUVudGVyOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGhhc0VudGl0eVJlbW92ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBoYXNVcGRhdGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIHRtcEV4ZWN1dGU6ICgoZHQ6IG51bWJlcikgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcclxuICAgIHByaXZhdGUgZXhlY3V0ZSE6IChkdDogbnVtYmVyKSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKiDmnoTpgKDlh73mlbAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGxldCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcclxuICAgICAgICBsZXQgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO1xyXG4gICAgICAgIGxldCBoYXNFbnRpdHlFbnRlciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG90eXBlLCAnZW50aXR5RW50ZXInKTtcclxuICAgICAgICBsZXQgaGFzRW50aXR5UmVtb3ZlID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90b3R5cGUsICdlbnRpdHlSZW1vdmUnKTtcclxuICAgICAgICBsZXQgaGFzRmlyc3RVcGRhdGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvdHlwZSwgJ2ZpcnN0VXBkYXRlJyk7XHJcbiAgICAgICAgbGV0IGhhc1VwZGF0ZSA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG90eXBlLCAndXBkYXRlJyk7XHJcblxyXG4gICAgICAgIHRoaXMuaGFzRW50aXR5RW50ZXIgPSBoYXNFbnRpdHlFbnRlcjtcclxuICAgICAgICB0aGlzLmhhc0VudGl0eVJlbW92ZSA9IGhhc0VudGl0eVJlbW92ZTtcclxuICAgICAgICB0aGlzLmhhc1VwZGF0ZSA9IGhhc1VwZGF0ZTtcclxuXHJcbiAgICAgICAgaWYgKGhhc0VudGl0eUVudGVyIHx8IGhhc0VudGl0eVJlbW92ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVudGVyZWRFbnRpdGllcyA9IG5ldyBNYXA8bnVtYmVyLCBFPigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZWRFbnRpdGllcyA9IG5ldyBNYXA8bnVtYmVyLCBFPigpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5leGVjdXRlID0gdGhpcy5leGVjdXRlMTtcclxuICAgICAgICAgICAgdGhpcy5ncm91cCA9IEVDU01vZGVsLmNyZWF0ZUdyb3VwKHRoaXMuZmlsdGVyKCkpO1xyXG4gICAgICAgICAgICB0aGlzLmdyb3VwLndhdGNoRW50aXR5RW50ZXJBbmRSZW1vdmUodGhpcy5lbnRlcmVkRW50aXRpZXMsIHRoaXMucmVtb3ZlZEVudGl0aWVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZSA9IHRoaXMuZXhlY3V0ZTA7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JvdXAgPSBFQ1NNb2RlbC5jcmVhdGVHcm91cCh0aGlzLmZpbHRlcigpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChoYXNGaXJzdFVwZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnRtcEV4ZWN1dGUgPSB0aGlzLmV4ZWN1dGU7XHJcbiAgICAgICAgICAgIHRoaXMuZXhlY3V0ZSA9IHRoaXMudXBkYXRlT25jZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOezu+e7n+WunuWni+WMliAqL1xyXG4gICAgaW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOezu+e7n+mHiuaUvuS6i+S7tiAqL1xyXG4gICAgb25EZXN0cm95KCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKiog5piv5ZCm5a2Y5Zyo5a6e5L2TICovXHJcbiAgICBoYXNFbnRpdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXAuY291bnQgPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YWI5omn6KGMZW50aXR5RW50ZXLvvIzmnIDlkI7miafooYxmaXJzdFVwZGF0ZVxyXG4gICAgICogQHBhcmFtIGR0IFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlT25jZShkdDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXAuY291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kdCA9IGR0O1xyXG5cclxuICAgICAgICAvLyDlpITnkIbliJrov5vmnaXnmoTlrp7kvZNcclxuICAgICAgICBpZiAodGhpcy5lbnRlcmVkRW50aXRpZXMuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgdmFyIGVudGl0aWVzID0gdGhpcy5lbnRlcmVkRW50aXRpZXMudmFsdWVzKCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGVudGl0eSBvZiBlbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgKHRoaXMgYXMgdW5rbm93biBhcyBlY3MuSUVudGl0eUVudGVyU3lzdGVtKS5lbnRpdHlFbnRlcihlbnRpdHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZW50ZXJlZEVudGl0aWVzLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDlj6rmiafooYxmaXJzdFVwZGF0ZVxyXG4gICAgICAgIGZvciAobGV0IGVudGl0eSBvZiB0aGlzLmdyb3VwLm1hdGNoRW50aXRpZXMpIHtcclxuICAgICAgICAgICAgKHRoaXMgYXMgdW5rbm93biBhcyBlY3MuSVN5c3RlbUZpcnN0VXBkYXRlKS5maXJzdFVwZGF0ZShlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5leGVjdXRlID0gdGhpcy50bXBFeGVjdXRlITtcclxuICAgICAgICB0aGlzLmV4ZWN1dGUoZHQpO1xyXG4gICAgICAgIHRoaXMudG1wRXhlY3V0ZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlj6rmiafooYx1cGRhdGVcclxuICAgICAqIEBwYXJhbSBkdCBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGV4ZWN1dGUwKGR0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5ncm91cC5jb3VudCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLmR0ID0gZHQ7XHJcblxyXG4gICAgICAgIC8vIOaJp+ihjHVwZGF0ZVxyXG4gICAgICAgIGlmICh0aGlzLmhhc1VwZGF0ZSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlbnRpdHkgb2YgdGhpcy5ncm91cC5tYXRjaEVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAodGhpcyBhcyB1bmtub3duIGFzIGVjcy5JU3lzdGVtVXBkYXRlKS51cGRhdGUoZW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWFiOaJp+ihjGVudGl0eVJlbW92Ze+8jOWGjeaJp+ihjGVudGl0eUVudGVy77yM5pyA5ZCO5omn6KGMdXBkYXRlXHJcbiAgICAgKiBAcGFyYW0gZHQgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBleGVjdXRlMShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGVudGl0aWVzO1xyXG4gICAgICAgIGlmICh0aGlzLnJlbW92ZWRFbnRpdGllcy5zaXplID4gMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNFbnRpdHlSZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgIGVudGl0aWVzID0gdGhpcy5yZW1vdmVkRW50aXRpZXMudmFsdWVzKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBlbnRpdHkgb2YgZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAodGhpcyBhcyB1bmtub3duIGFzIGVjcy5JRW50aXR5UmVtb3ZlU3lzdGVtKS5lbnRpdHlSZW1vdmUoZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZWRFbnRpdGllcy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXAuY291bnQgPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5kdCA9IGR0O1xyXG5cclxuICAgICAgICAvLyDlpITnkIbliJrov5vmnaXnmoTlrp7kvZNcclxuICAgICAgICBpZiAodGhpcy5lbnRlcmVkRW50aXRpZXMhLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0VudGl0eUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICBlbnRpdGllcyA9IHRoaXMuZW50ZXJlZEVudGl0aWVzIS52YWx1ZXMoKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGVudGl0eSBvZiBlbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzIGFzIHVua25vd24gYXMgZWNzLklFbnRpdHlFbnRlclN5c3RlbSkuZW50aXR5RW50ZXIoZW50aXR5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmVudGVyZWRFbnRpdGllcyEuY2xlYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOaJp+ihjHVwZGF0ZVxyXG4gICAgICAgIGlmICh0aGlzLmhhc1VwZGF0ZSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlbnRpdHkgb2YgdGhpcy5ncm91cC5tYXRjaEVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAodGhpcyBhcyB1bmtub3duIGFzIGVjcy5JU3lzdGVtVXBkYXRlKS51cGRhdGUoZW50aXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWunuS9k+i/h+a7pOinhOWImVxyXG4gICAgICogXHJcbiAgICAgKiDmoLnmja7mj5DkvpvnmoTnu4Tku7bov4fmu6Tlrp7kvZPjgIJcclxuICAgICAqL1xyXG4gICAgYWJzdHJhY3QgZmlsdGVyKCk6IGVjcy5JTWF0Y2hlcjtcclxufVxyXG5cclxuLyoqIOaguVN5c3Rlbe+8jOWvuea4uOaIj+S4reeahFN5c3RlbemBjeWOhuS7jui/memHjOW8gOWni++8jOS4gOS4qlN5c3Rlbee7hOWQiOS4reWPquiDveacieS4gOS4qlJvb3RTeXN0ZW3vvIzlj6/ku6XmnInlpJrkuKrlubbooYznmoRSb290U3lzdGVtICovXHJcbmV4cG9ydCBjbGFzcyBFQ1NSb290U3lzdGVtIHtcclxuICAgIHByaXZhdGUgZXhlY3V0ZVN5c3RlbUZsb3dzOiBFQ1NDb21ibG9ja1N5c3RlbVtdID0gW107XHJcbiAgICBwcml2YXRlIHN5c3RlbUNudDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBhZGQoc3lzdGVtOiBFQ1NTeXN0ZW0gfCBFQ1NDb21ibG9ja1N5c3RlbSkge1xyXG4gICAgICAgIGlmIChzeXN0ZW0gaW5zdGFuY2VvZiBFQ1NTeXN0ZW0pIHtcclxuICAgICAgICAgICAgLy8g5bCG5bWM5aWX55qEU3lzdGVt6YO94oCc5pGK5bmz4oCd77yM5pS+5Zyo5qC5U3lzdGVt5Lit6L+b6KGM6YGN5Y6G77yM5YeP5bCRZXhlY3V0ZeeahOmikee5gei/m+WFpemAgOWHuuOAglxyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmV4ZWN1dGVTeXN0ZW1GbG93cywgc3lzdGVtLmNvbWJsb2NrU3lzdGVtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmV4ZWN1dGVTeXN0ZW1GbG93cy5wdXNoKHN5c3RlbSBhcyBFQ1NDb21ibG9ja1N5c3RlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3lzdGVtQ250ID0gdGhpcy5leGVjdXRlU3lzdGVtRmxvd3MubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgLy8g6Ieq5Yqo5rOo5YaM57O757uf57uE5Lu2XHJcbiAgICAgICAgRUNTTW9kZWwuc3lzdGVtcy5mb3JFYWNoKHN5cyA9PiB0aGlzLmFkZChzeXMpKTtcclxuXHJcbiAgICAgICAgLy8g5Yid5aeL5YyW57uE5Lu2XHJcbiAgICAgICAgdGhpcy5leGVjdXRlU3lzdGVtRmxvd3MuZm9yRWFjaChzeXMgPT4gc3lzLmluaXQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhlY3V0ZShkdDogbnVtYmVyKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN5c3RlbUNudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgdGhpcy5leGVjdXRlU3lzdGVtRmxvd3NbaV0uZXhlY3V0ZShkdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZVN5c3RlbUZsb3dzLmZvckVhY2goc3lzID0+IHN5cy5vbkRlc3Ryb3koKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiDns7vnu5/nu4TlkIjlmajvvIznlKjkuo7lsIblpJrkuKrnm7jlkIzlip/og73mqKHlnZfnmoTns7vnu5/pgLvovpHkuIrmlL7lnKjkuIDotbfvvIzns7vnu5/kuZ/lj6/ku6XltYzlpZfns7vnu58gKi9cclxuZXhwb3J0IGNsYXNzIEVDU1N5c3RlbSB7XHJcbiAgICBwcml2YXRlIF9jb21ibG9ja1N5c3RlbXM6IEVDU0NvbWJsb2NrU3lzdGVtW10gPSBbXTtcclxuICAgIGdldCBjb21ibG9ja1N5c3RlbXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbWJsb2NrU3lzdGVtcztcclxuICAgIH1cclxuXHJcbiAgICBhZGQoc3lzdGVtOiBFQ1NTeXN0ZW0gfCBFQ1NDb21ibG9ja1N5c3RlbSkge1xyXG4gICAgICAgIGlmIChzeXN0ZW0gaW5zdGFuY2VvZiBFQ1NTeXN0ZW0pIHtcclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5fY29tYmxvY2tTeXN0ZW1zLCBzeXN0ZW0uX2NvbWJsb2NrU3lzdGVtcyk7XHJcbiAgICAgICAgICAgIHN5c3RlbS5fY29tYmxvY2tTeXN0ZW1zLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jb21ibG9ja1N5c3RlbXMucHVzaChzeXN0ZW0gYXMgRUNTQ29tYmxvY2tTeXN0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDMtMzEgMTg6MDM6NTBcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMjIgMTQ6NTM6NDdcclxuICovXHJcblxyXG5pbXBvcnQge19kZWNvcmF0b3IsIENhbWVyYSwgQ29tcG9uZW50LCBOb2RlLCBWZWMzfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHtvb3BzfSBmcm9tIFwiLi4vLi4vY29yZS9Pb3BzXCI7XHJcbmltcG9ydCB7TWF0aFV0aWx9IGZyb20gXCIuLi8uLi9jb3JlL3V0aWxzL01hdGhVdGlsXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIDJE6IqC54K56Lef6ZqPM0ToioLngrkgKi9cclxuQGNjY2xhc3MoXCJFZmZlY3QyREZvbGxvdzNEXCIpXHJcbmV4cG9ydCBjbGFzcyBFZmZlY3QyREZvbGxvdzNEIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIC8qKiAzROS4lueVjOiKgueCuSAqL1xyXG4gICAgQHByb3BlcnR5KHsgdHlwZTogTm9kZSB9KVxyXG4gICAgbm9kZTNkOiBOb2RlID0gbnVsbCE7XHJcblxyXG4gICAgLyoqIDJE55WM6Z2i55WM6Z2iICovXHJcbiAgICBAcHJvcGVydHkoeyB0eXBlOiBOb2RlIH0pXHJcbiAgICBub2RlVWk6IE5vZGUgPSBudWxsITtcclxuXHJcbiAgICAvKiog6Led56a7ICovXHJcbiAgICBAcHJvcGVydHlcclxuICAgIGRpc3RhbmNlOiBudW1iZXIgPSAxMDtcclxuXHJcbiAgICAvKiogM0TmkYTlg4/mnLogKi9cclxuICAgIGNhbWVyYTogQ2FtZXJhID0gbnVsbCE7XHJcblxyXG4gICAgcHJpdmF0ZSBwb3MgPSBuZXcgVmVjMygpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+M0TlrprkvY3lj4LogIPngrnvvIzlubbmm7TmlrDkvY3nva5cclxuICAgICAqIEBwYXJhbSBub2RlIDNE5LiW55WM6IqC54K5XHJcbiAgICAgKi9cclxuICAgIHNldFRhcmdldChub2RlOiBOb2RlKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlM2QgPSBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy56b29tKCk7XHJcbiAgICAgICAgdGhpcy5ub2RlLnNldFNjYWxlKHNjYWxlLCBzY2FsZSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGxhdGVVcGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBzY2FsZSA9IHRoaXMuem9vbSgpO1xyXG4gICAgICAgIHNjYWxlID0gTWF0aFV0aWwubGVycCh0aGlzLm5vZGUuc2NhbGUueCwgc2NhbGUsIDAuMSk7XHJcbiAgICAgICAgdGhpcy5ub2RlLnNldFNjYWxlKHNjYWxlLCBzY2FsZSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB6b29tKCk6IG51bWJlciB7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEuY29udmVydFRvVUlOb2RlKHRoaXMubm9kZTNkLndvcmxkUG9zaXRpb24sIG9vcHMuZ3VpLmdhbWUsIHRoaXMucG9zKTtcclxuICAgICAgICB0aGlzLm5vZGVVaS5zZXRQb3NpdGlvbih0aGlzLnBvcyk7XHJcblxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBWZWMzLnRyYW5zZm9ybU1hdDQodGhpcy5wb3MsIHRoaXMubm9kZTNkLndvcmxkUG9zaXRpb24sIHRoaXMuY2FtZXJhLl9jYW1lcmEhLm1hdFZpZXcpO1xyXG4gICAgICAgIGNvbnN0IHJhdGlvID0gdGhpcy5kaXN0YW5jZSAvIE1hdGguYWJzKHRoaXMucG9zLnopO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHJhdGlvICogMTAwKSAvIDEwMDtcclxuICAgIH1cclxufVxyXG5cclxuIiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0wOC0xMSAxNjo0MToxMlxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0yMiAxNDo1NDoxN1xyXG4gKi9cclxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgX2RlY29yYXRvciB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgRWZmZWN0U2luZ2xlQ2FzZSB9IGZyb20gJy4vRWZmZWN0U2luZ2xlQ2FzZSc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog5bu25pe26YeK5pS+54m55pWIICovXHJcbkBjY2NsYXNzKCdFZmZlY3REZWxheVJlbGVhc2UnKVxyXG5leHBvcnQgY2xhc3MgRWZmZWN0RGVsYXlSZWxlYXNlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIC8qKiDlu7bml7bph4rmlL7ml7bpl7Qo5Y2V5L2N56eSKSAqL1xyXG4gICAgQHByb3BlcnR5XHJcbiAgICBwdWJsaWMgZGVsYXk6IG51bWJlciA9IDE7XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uRW5hYmxlKCkge1xyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKHRoaXMub25EZWxheSwgdGhpcy5kZWxheSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkRlbGF5KCkge1xyXG4gICAgICAgIEVmZmVjdFNpbmdsZUNhc2UuaW5zdGFuY2UucHV0KHRoaXMubm9kZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqIOeJueaViOeuoeeQhuaooeWdl+S6i+S7tiAqL1xyXG5leHBvcnQgZW51bSBFZmZlY3RFdmVudCB7XHJcbiAgICAvKiog5Zue5pS26IqC54K5ICovXHJcbiAgICBQdXQgPSBcIkVmZmVjdEV2ZW50X1B1dFwiXHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA4LTE5IDE1OjM2OjA4XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTAzLTAxIDE4OjI4OjU1XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQW5pbWF0aW9uLCBDb21wb25lbnQsIFBhcnRpY2xlU3lzdGVtLCBfZGVjb3JhdG9yLCBzcCB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgRWZmZWN0RXZlbnQgfSBmcm9tICcuL0VmZmVjdEV2ZW50JztcclxuaW1wb3J0IHsgbWVzc2FnZSB9IGZyb20gJy4uLy4uL2NvcmUvY29tbW9uL2V2ZW50L01lc3NhZ2VNYW5hZ2VyJztcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog5Yqo55S75pKt5pS+5a6M6YeK5pS+54m55pWIIC0gQW5pbWF0aW9u44CBUGFydGljbGVTeXN0ZW0gKi9cclxuQGNjY2xhc3MoJ0VmZmVjdEZpbmlzaGVkUmVsZWFzZScpXHJcbmV4cG9ydCBjbGFzcyBFZmZlY3RGaW5pc2hlZFJlbGVhc2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgLyoqIOWKqOeUu+acgOWkp+aSreaUvuaXtumXtCAqL1xyXG4gICAgcHJpdmF0ZSBtYXhEdXJhdGlvbjogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgb25FbmFibGUoKSB7XHJcbiAgICAgICAgLy8gU1BJTkXliqjnlLtcclxuICAgICAgICBsZXQgc3BpbmUgPSB0aGlzLmdldENvbXBvbmVudChzcC5Ta2VsZXRvbik7XHJcbiAgICAgICAgaWYgKHNwaW5lKSB7XHJcbiAgICAgICAgICAgIC8vIOaSreaUvuesrOS4gOS4quWKqOeUu1xyXG4gICAgICAgICAgICBsZXQganNvbiA9IChzcGluZS5za2VsZXRvbkRhdGEhLnNrZWxldG9uSnNvbiEgYXMgYW55KS5hbmltYXRpb25zO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBuYW1lIGluIGpzb24pIHtcclxuICAgICAgICAgICAgICAgIHNwaW5lLnNldENvbXBsZXRlTGlzdGVuZXIodGhpcy5vblJlY292ZXJ5LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgc3BpbmUuc2V0QW5pbWF0aW9uKDAsIG5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBDT0NPU+WKqOeUu1xyXG4gICAgICAgICAgICBsZXQgYW5pbXM6IEFuaW1hdGlvbltdID0gdGhpcy5ub2RlLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKEFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGlmIChhbmltcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBhbmltcy5mb3JFYWNoKGFuaW1hdG9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYW5pTmFtZSA9IGFuaW1hdG9yLmRlZmF1bHRDbGlwPy5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmlOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbmlTdGF0ZSA9IGFuaW1hdG9yLmdldFN0YXRlKGFuaU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkdXJhdGlvbiA9IGFuaVN0YXRlLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhEdXJhdGlvbiA9IGR1cmF0aW9uID4gdGhpcy5tYXhEdXJhdGlvbiA/IGR1cmF0aW9uIDogdGhpcy5tYXhEdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhbmltYXRvci5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKHRoaXMub25SZWNvdmVyeS5iaW5kKHRoaXMpLCB0aGlzLm1heER1cmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDnspLlrZDliqjnlLtcclxuICAgICAgICAgICAgZWxzZSBpZiAoUGFydGljbGVTeXN0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJ0aWNsZXM6IFBhcnRpY2xlU3lzdGVtW10gPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oUGFydGljbGVTeXN0ZW0pO1xyXG4gICAgICAgICAgICAgICAgcGFydGljbGVzLmZvckVhY2gocGFydGljbGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydGljbGUuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpY2xlLnBsYXkoKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZHVyYXRpb246IG51bWJlciA9IHBhcnRpY2xlLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF4RHVyYXRpb24gPSBkdXJhdGlvbiA+IHRoaXMubWF4RHVyYXRpb24gPyBkdXJhdGlvbiA6IHRoaXMubWF4RHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKHRoaXMub25SZWNvdmVyeS5iaW5kKHRoaXMpLCB0aGlzLm1heER1cmF0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uUmVjb3ZlcnkoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubm9kZS5wYXJlbnQpIG1lc3NhZ2UuZGlzcGF0Y2hFdmVudChFZmZlY3RFdmVudC5QdXQsIHRoaXMubm9kZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0xMC0xMiAxNDowMDo0M1xyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMy0wNiAxNDo0MDozNFxyXG4gKi9cclxuaW1wb3J0IHsgQW5pbWF0aW9uLCBOb2RlLCBOb2RlUG9vbCwgUGFydGljbGVTeXN0ZW0sIFByZWZhYiwgc3AsIFZlYzMgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IG1lc3NhZ2UgfSBmcm9tICcuLi8uLi9jb3JlL2NvbW1vbi9ldmVudC9NZXNzYWdlTWFuYWdlcic7XHJcbmltcG9ydCB7IHJlc0xvYWRlciB9IGZyb20gJy4uLy4uL2NvcmUvY29tbW9uL2xvYWRlci9SZXNMb2FkZXInO1xyXG5pbXBvcnQgeyBWaWV3VXRpbCB9IGZyb20gJy4uLy4uL2NvcmUvdXRpbHMvVmlld1V0aWwnO1xyXG5pbXBvcnQgeyBFZmZlY3RFdmVudCB9IGZyb20gJy4vRWZmZWN0RXZlbnQnO1xyXG5pbXBvcnQgeyBFZmZlY3RGaW5pc2hlZFJlbGVhc2UgfSBmcm9tICcuL0VmZmVjdEZpbmlzaGVkUmVsZWFzZSc7XHJcblxyXG4vKiog54m55pWI5Y+C5pWwICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUVmZmVjdFBhcmFtcyB7XHJcbiAgICAvKiog5Yid5aeL56m66Ze05Z2Q5qCHICovXHJcbiAgICBwb3M/OiBWZWMzLFxyXG4gICAgLyoqIOWIneWni+S4lueVjOWdkOaghyAqL1xyXG4gICAgd29ybGRQb3M/OiBWZWMzLFxyXG4gICAgLyoqIOaYr+WQpuaSreaUvuWujOaIkOWQjuWIoOmZpCAqL1xyXG4gICAgaXNQbGF5RmluaXNoZWRSZWxlYXNlPzogYm9vbGVhbixcclxuICAgIC8qKiDotYTmupDljIXlkI0gKi9cclxuICAgIGJ1bmRsZU5hbWU/OiBzdHJpbmdcclxufVxyXG5cclxuLyoqXHJcbiAqIOWKqOeUu+eJueaViOWvueixoeaxoOeuoeeQhuWZqO+8jOWKoOi9veWKqOeUu+WQjuiHquWKqOaSreaUvu+8jOaSreaUvuWujOWQjuiHquWKqOWbnuaUtuWIsOaxoOS4rVxyXG4gKiAx44CB5pSv5oyBU3BpbmXliqjnlLtcclxuICogMuOAgeaUr+aMgUNvY29zIEFuaW1hdGlvbuWKqOeUu1xyXG4gKiAz44CB5pSv5oyBQ29jb3MgUGFydGljbGVTeXN0ZW3nspLlrZDliqjnlLtcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFZmZlY3RTaW5nbGVDYXNlIHtcclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogRWZmZWN0U2luZ2xlQ2FzZTtcclxuICAgIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogRWZmZWN0U2luZ2xlQ2FzZSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgRWZmZWN0U2luZ2xlQ2FzZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfc3BlZWQ6IG51bWJlciA9IDE7XHJcbiAgICAvKiog5YWo5bGA5Yqo55S75pKt5pS+6YCf5bqmICovXHJcbiAgICBnZXQgc3BlZWQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3BlZWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgc3BlZWQodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3NwZWVkID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5lZmZlY3RzX3VzZS5mb3JFYWNoKCh2YWx1ZTogQm9vbGVhbiwga2V5OiBOb2RlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3BlZWQoa2V5KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5a+56LGh5rGg6ZuG5ZCIICovXHJcbiAgICBwcml2YXRlIGVmZmVjdHM6IE1hcDxzdHJpbmcsIE5vZGVQb29sPiA9IG5ldyBNYXAoKTtcclxuICAgIC8qKiDmraPlnKjkvb/nlKjkuK3nmoTmmL7npLrlr7nosaHpm4blkIggKi9cclxuICAgIHByaXZhdGUgZWZmZWN0c191c2U6IE1hcDxOb2RlLCBib29sZWFuPiA9IG5ldyBNYXAoKTtcclxuICAgIC8qKiDlr7nosaHmsaDkuK3nlKjliLDnmoTotYTmupAgLSDov5nph4zlj6rnrqHnkIbmnKzlr7nosaHliqDovb3nmoTotYTmupDvvIzpooTliqDovb3otYTmupDnlLHlhbblroPlr7nosaHoh6rlt7Hmlr3mlL4gKi9cclxuICAgIHByaXZhdGUgcmVzOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIG1lc3NhZ2Uub24oRWZmZWN0RXZlbnQuUHV0LCB0aGlzLm9uUHV0LCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uUHV0KGV2ZW50OiBzdHJpbmcsIG5vZGU6IE5vZGUpIHtcclxuICAgICAgICB0aGlzLnB1dChub2RlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluaMh+Wumui1hOa6kOaxoOS4reWvueixoeaVsOmHj1xyXG4gICAgICogQHBhcmFtIHBhdGggIOmihOWItui1hOa6kOi3r+W+hFxyXG4gICAgICovXHJcbiAgICBnZXRDb3VudChwYXRoOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgICAgIHZhciBucCA9IHRoaXMuZWZmZWN0cy5nZXQocGF0aCk7XHJcbiAgICAgICAgaWYgKG5wKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBucC5zaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmsaDkuK3pooTliqDovb3mmL7npLrlr7nosaEgKi9cclxuICAgIHByZWxvYWQoY291bnQ6IG51bWJlciwgcGF0aDogc3RyaW5nLCBidW5kbGVOYW1lOiBzdHJpbmcgPSByZXNMb2FkZXIuZGVmYXVsdEJ1bmRsZU5hbWUpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgbnAgPSB0aGlzLmVmZmVjdHMuZ2V0KHBhdGgpO1xyXG4gICAgICAgICAgICBpZiAobnAgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgbnAgPSBuZXcgTm9kZVBvb2woKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWZmZWN0cy5zZXQocGF0aCwgbnApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlcy5zZXQocGF0aCwgYnVuZGxlTmFtZSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHJlc0xvYWRlci5sb2FkQXN5bmMoYnVuZGxlTmFtZSwgcGF0aCwgUHJlZmFiKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5vZGUgPSBWaWV3VXRpbC5jcmVhdGVQcmVmYWJOb2RlKHBhdGgsIGJ1bmRsZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBub2RlLnJlc19wYXRoID0gcGF0aDtcclxuICAgICAgICAgICAgICAgIG5wLnB1dChub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3otYTmupDlubbnlJ/miJDoioLngrnlr7nosaFcclxuICAgICAqIEBwYXJhbSBwYXRoICAgIOmihOWItui1hOa6kOi3r+W+hFxyXG4gICAgICogQHBhcmFtIHBhcmVudCAg54i26IqC54K5XHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zICDmmL7npLrlj4LmlbBcclxuICAgICAqL1xyXG4gICAgbG9hZEFuZFNob3cocGF0aDogc3RyaW5nLCBwYXJlbnQ/OiBOb2RlLCBwYXJhbXM/OiBJRWZmZWN0UGFyYW1zKTogUHJvbWlzZTxOb2RlPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdmFyIG5wID0gdGhpcy5lZmZlY3RzLmdldChwYXRoKTtcclxuICAgICAgICAgICAgaWYgKG5wID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuYnVuZGxlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzLnNldChwYXRoLCBwYXJhbXMuYnVuZGxlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcmVzTG9hZGVyLmxvYWRBc3luYyhwYXJhbXMuYnVuZGxlTmFtZSwgcGF0aCwgUHJlZmFiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzLnNldChwYXRoLCByZXNMb2FkZXIuZGVmYXVsdEJ1bmRsZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHJlc0xvYWRlci5sb2FkQXN5bmMocGF0aCwgUHJlZmFiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zaG93KHBhdGgsIHBhcmVudCwgcGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5zaG93KHBhdGgsIHBhcmVudCwgcGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaYvuekuumihOWItuWvueixoVxyXG4gICAgICogQHBhcmFtIHBhdGggICAg6aKE5Yi26LWE5rqQ6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50ICDniLboioLngrlcclxuICAgICAqIEBwYXJhbSBwYXJhbXMgIOaYvuekuuWPguaVsFxyXG4gICAgICovXHJcbiAgICBzaG93KHBhdGg6IHN0cmluZywgcGFyZW50PzogTm9kZSwgcGFyYW1zPzogSUVmZmVjdFBhcmFtcyk6IE5vZGUge1xyXG4gICAgICAgIHZhciBucCA9IHRoaXMuZWZmZWN0cy5nZXQocGF0aCk7XHJcbiAgICAgICAgaWYgKG5wID09IG51bGwpIHtcclxuICAgICAgICAgICAgbnAgPSBuZXcgTm9kZVBvb2woKTtcclxuICAgICAgICAgICAgdGhpcy5lZmZlY3RzLnNldChwYXRoLCBucCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbm9kZTogTm9kZTtcclxuICAgICAgICAvLyDliJvlu7rmsaDkuK3mlrDmmL7npLrlr7nosaFcclxuICAgICAgICBpZiAobnAuc2l6ZSgpID09IDApIHtcclxuICAgICAgICAgICAgdmFyIGJ1bmRsZU5hbWUgPSByZXNMb2FkZXIuZGVmYXVsdEJ1bmRsZU5hbWU7XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmJ1bmRsZU5hbWUpIGJ1bmRsZU5hbWUgPSBwYXJhbXMuYnVuZGxlTmFtZTtcclxuICAgICAgICAgICAgbm9kZSA9IFZpZXdVdGlsLmNyZWF0ZVByZWZhYk5vZGUocGF0aCwgYnVuZGxlTmFtZSk7XHJcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBub2RlLnJlc19wYXRoID0gcGF0aDtcclxuICAgICAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuaXNQbGF5RmluaXNoZWRSZWxlYXNlKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmFkZENvbXBvbmVudChFZmZlY3RGaW5pc2hlZFJlbGVhc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOaxoOS4reiOt+WPluayoeS9v+eUqOeahOaYvuekuuWvueixoVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBub2RlID0gbnAuZ2V0KCkhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6K6+572u5Yqo55S75pKt5pS+6YCf5bqmXHJcbiAgICAgICAgdGhpcy5zZXRTcGVlZChub2RlKTtcclxuXHJcbiAgICAgICAgLy8g6K6+572u5pi+56S65a+56LGh5L2N572uXHJcbiAgICAgICAgaWYgKHBhcmFtcykge1xyXG4gICAgICAgICAgICBpZiAocGFyYW1zLnBvcykgbm9kZS5wb3NpdGlvbiA9IHBhcmFtcy5wb3M7XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMud29ybGRQb3MpIG5vZGUud29ybGRQb3NpdGlvbiA9IHBhcmFtcy53b3JsZFBvcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOaYvuekuuWIsOWxj+W5leS4ilxyXG4gICAgICAgIGlmIChwYXJlbnQpIG5vZGUucGFyZW50ID0gcGFyZW50O1xyXG5cclxuICAgICAgICAvLyDorrDlvZXnvJPlhrLmsaDkuK3mlL7lh7rnmoToioLngrlcclxuICAgICAgICB0aGlzLmVmZmVjdHNfdXNlLnNldChub2RlLCB0cnVlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlm57mlLblr7nosaFcclxuICAgICAqIEBwYXJhbSBuYW1lICDpooTliLblr7nosaHlkI3np7BcclxuICAgICAqIEBwYXJhbSBub2RlICDoioLngrlcclxuICAgICAqL1xyXG4gICAgcHV0KG5vZGU6IE5vZGUpIHtcclxuICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICBsZXQgbmFtZSA9IG5vZGUucmVzX3BhdGg7XHJcbiAgICAgICAgaWYgKG5hbWUpIHtcclxuICAgICAgICAgICAgbGV0IG5wID0gdGhpcy5lZmZlY3RzLmdldChuYW1lKTtcclxuICAgICAgICAgICAgaWYgKG5wKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDlm57mlLbkvb/nlKjnmoToioLngrlcclxuICAgICAgICAgICAgICAgIHRoaXMuZWZmZWN0c191c2UuZGVsZXRlKG5vZGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOWbnuWIsOWIsOaxoOS4rVxyXG4gICAgICAgICAgICAgICAgbnAucHV0KG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5riF6Zmk5a+56LGh5rGg5pWw5o2uXHJcbiAgICAgKiBAcGFyYW0gcGF0aCAg5Y+C5pWw5Li656m65pe277yM5riF6Zmk5omA5pyJ5a+56LGh5rGg5pWw5o2uO+aMh+WumuWQjeaXtu+8jOa4healmuaMh+WumuaVsOaNrlxyXG4gICAgICovXHJcbiAgICBjbGVhcihwYXRoPzogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHBhdGgpIHtcclxuICAgICAgICAgICAgdmFyIG5wID0gdGhpcy5lZmZlY3RzLmdldChwYXRoKSE7XHJcbiAgICAgICAgICAgIG5wLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVmZmVjdHMuZm9yRWFjaChucCA9PiB7XHJcbiAgICAgICAgICAgICAgICBucC5jbGVhcigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5lZmZlY3RzLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YeK5pS+5a+56LGh5rGg5Lit5pi+56S65a+56LGh55qE6LWE5rqQ5YaF5a2YXHJcbiAgICAgKiBAcGFyYW0gcGF0aCDotYTmupDot6/lvoRcclxuICAgICAqL1xyXG4gICAgcmVsZWFzZShwYXRoPzogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHBhdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhcihwYXRoKTtcclxuICAgICAgICAgICAgY29uc3QgYnVuZGxlTmFtZSA9IHRoaXMucmVzLmdldChwYXRoKTtcclxuICAgICAgICAgICAgcmVzTG9hZGVyLnJlbGVhc2UocGF0aCwgYnVuZGxlTmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzLmRlbGV0ZShwYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOaWveaUvuaxoOS4reWvueixoeWGheWtmFxyXG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XHJcblxyXG4gICAgICAgICAgICAvLyDmlr3mlL7lr7nosaHotYTmupDlhoXlrZhcclxuICAgICAgICAgICAgdGhpcy5yZXMuZm9yRWFjaCgoYnVuZGxlTmFtZTogc3RyaW5nLCBwYXRoOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc0xvYWRlci5yZWxlYXNlKHBhdGgsIGJ1bmRsZU5hbWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5yZXMuY2xlYXIoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6K6+572u5Yqo55S76YCf5bqmICovXHJcbiAgICBwcml2YXRlIHNldFNwZWVkKG5vZGU6IE5vZGUpIHtcclxuICAgICAgICAvLyBTUElOReWKqOeUu1xyXG4gICAgICAgIGxldCBzcGluZSA9IG5vZGUuZ2V0Q29tcG9uZW50KHNwLlNrZWxldG9uKTtcclxuICAgICAgICBpZiAoc3BpbmUpIHtcclxuICAgICAgICAgICAgc3BpbmUudGltZVNjYWxlID0gdGhpcy5zcGVlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIENPQ09T5Yqo55S7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuaW1zOiBBbmltYXRpb25bXSA9IG5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oQW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgaWYgKGFuaW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGFuaW1zLmZvckVhY2goYW5pbWF0b3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhbmlOYW1lID0gYW5pbWF0b3IuZGVmYXVsdENsaXA/Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFuaVN0YXRlID0gYW5pbWF0b3IuZ2V0U3RhdGUoYW5pTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmlTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pU3RhdGUuc3BlZWQgPSB0aGlzLnNwZWVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g57KS5a2Q5Yqo55S7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKFBhcnRpY2xlU3lzdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJ0aWNsZXM6IFBhcnRpY2xlU3lzdGVtW10gPSBub2RlLmdldENvbXBvbmVudHNJbkNoaWxkcmVuKFBhcnRpY2xlU3lzdGVtKTtcclxuICAgICAgICAgICAgICAgIHBhcnRpY2xlcy5mb3JFYWNoKHBhcnRpY2xlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZS5zaW11bGF0aW9uU3BlZWQgPSB0aGlzLnNwZWVkO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvLyAvKlxyXG4vLyAgKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbi8vICAqIEBEYXRlOiAyMDIyLTA5LTAyIDA5OjI4OjAwXHJcbi8vICAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4vLyAgKiBATGFzdEVkaXRUaW1lOiAyMDIyLTEwLTIxIDA5OjQ2OjM5XHJcbi8vICAqL1xyXG5cclxuLy8gaW1wb3J0IENyeXB0b0VTIGZyb20gXCJjcnlwdG8tZXNcIjtcclxuXHJcbi8vIC8qKlxyXG4vLyAgKiBDcnlwdG9FUyDliqDlr4blupPlsIHoo4VcclxuLy8gICogaHR0cHM6Ly9naXRodWIuY29tL2VudHJvbmFkL2NyeXB0by1lc1xyXG4vLyAgKlxyXG4vLyAgKiDlronoo4XnrKzkuInmlrnlupPnlJ/mlYhcclxuLy8gICogbnBtIGluc3RhbGwgLWcgeWFyblxyXG4vLyAgKiB5YXJuIGFkZCBjcnlwdG8tZXNcclxuLy8gICovXHJcbi8vIGV4cG9ydCBjbGFzcyBFbmNyeXB0VXRpbCB7XHJcbi8vICAgICBwcml2YXRlIHN0YXRpYyBrZXk6IHN0cmluZyA9IG51bGwhO1xyXG4vLyAgICAgcHJpdmF0ZSBzdGF0aWMgaXY6IENyeXB0b0VTLmxpYi5Xb3JkQXJyYXkgPSBudWxsITtcclxuXHJcbi8vICAgICAvKipcclxuLy8gICAgICAqIE1ENeWKoOWvhlxyXG4vLyAgICAgICogQHBhcmFtIG1zZyDliqDlr4bkv6Hmga9cclxuLy8gICAgICAqL1xyXG4vLyAgICAgc3RhdGljIG1kNShtc2c6IHN0cmluZyk6IHN0cmluZyB7XHJcbi8vICAgICAgICAgcmV0dXJuIENyeXB0b0VTLk1ENShtc2cpLnRvU3RyaW5nKCk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgLyoqIOWIneWni+WMluWKoOWvhuW6kyAqL1xyXG4vLyAgICAgc3RhdGljIGluaXRDcnlwdG8oa2V5OiBzdHJpbmcsIGl2OiBzdHJpbmcpIHtcclxuLy8gICAgICAgICB0aGlzLmtleSA9IGtleTtcclxuLy8gICAgICAgICB0aGlzLml2ID0gQ3J5cHRvRVMuZW5jLkhleC5wYXJzZShpdik7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgLyoqXHJcbi8vICAgICAgKiBBRVMg5Yqg5a+GXHJcbi8vICAgICAgKiBAcGFyYW0gbXNnIOWKoOWvhuS/oeaBr1xyXG4vLyAgICAgICogQHBhcmFtIGtleSBhZXPliqDlr4bnmoRrZXlcclxuLy8gICAgICAqIEBwYXJhbSBpdiAgYWVz5Yqg5a+G55qEaXZcclxuLy8gICAgICAqL1xyXG4vLyAgICAgc3RhdGljIGFlc0VuY3J5cHQobXNnOiBzdHJpbmcsIGtleTogc3RyaW5nLCBpdjogc3RyaW5nKTogc3RyaW5nIHtcclxuLy8gICAgICAgICByZXR1cm4gQ3J5cHRvRVMuQUVTLmVuY3J5cHQoXHJcbi8vICAgICAgICAgICAgIG1zZyxcclxuLy8gICAgICAgICAgICAgdGhpcy5rZXksXHJcbi8vICAgICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgICAgIGl2OiB0aGlzLml2LFxyXG4vLyAgICAgICAgICAgICAgICAgZm9ybWF0OiB0aGlzLkpzb25Gb3JtYXR0ZXJcclxuLy8gICAgICAgICAgICAgfSxcclxuLy8gICAgICAgICApLnRvU3RyaW5nKCk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgLyoqXHJcbi8vICAgICAgKiBBRVMg6Kej5a+GXHJcbi8vICAgICAgKiBAcGFyYW0gc3RyIOino+WvhuWtl+espuS4slxyXG4vLyAgICAgICogQHBhcmFtIGtleSBhZXPliqDlr4bnmoRrZXlcclxuLy8gICAgICAqIEBwYXJhbSBpdiAgYWVz5Yqg5a+G55qEaXZcclxuLy8gICAgICAqL1xyXG4vLyAgICAgc3RhdGljIGFlc0RlY3J5cHQoc3RyOiBzdHJpbmcsIGtleTogc3RyaW5nLCBpdjogc3RyaW5nKTogc3RyaW5nIHtcclxuLy8gICAgICAgICBjb25zdCBkZWNyeXB0ZWQgPSBDcnlwdG9FUy5BRVMuZGVjcnlwdChcclxuLy8gICAgICAgICAgICAgc3RyLFxyXG4vLyAgICAgICAgICAgICB0aGlzLmtleSxcclxuLy8gICAgICAgICAgICAge1xyXG4vLyAgICAgICAgICAgICAgICAgaXY6IHRoaXMuaXYsXHJcbi8vICAgICAgICAgICAgICAgICBmb3JtYXQ6IHRoaXMuSnNvbkZvcm1hdHRlclxyXG4vLyAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICk7XHJcbi8vICAgICAgICAgcmV0dXJuIGRlY3J5cHRlZC50b1N0cmluZyhDcnlwdG9FUy5lbmMuVXRmOCk7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgcHJpdmF0ZSBzdGF0aWMgSnNvbkZvcm1hdHRlciA9IHtcclxuLy8gICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIChjaXBoZXJQYXJhbXM6IGFueSkge1xyXG4vLyAgICAgICAgICAgICBjb25zdCBqc29uT2JqOiBhbnkgPSB7IGN0OiBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dC50b1N0cmluZyhDcnlwdG9FUy5lbmMuQmFzZTY0KSB9O1xyXG4vLyAgICAgICAgICAgICBpZiAoY2lwaGVyUGFyYW1zLml2KSB7XHJcbi8vICAgICAgICAgICAgICAgICBqc29uT2JqLml2ID0gY2lwaGVyUGFyYW1zLml2LnRvU3RyaW5nKCk7XHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgaWYgKGNpcGhlclBhcmFtcy5zYWx0KSB7XHJcbi8vICAgICAgICAgICAgICAgICBqc29uT2JqLnMgPSBjaXBoZXJQYXJhbXMuc2FsdC50b1N0cmluZygpO1xyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShqc29uT2JqKTtcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoanNvblN0cjogYW55KSB7XHJcbi8vICAgICAgICAgICAgIGNvbnN0IGpzb25PYmogPSBKU09OLnBhcnNlKGpzb25TdHIpO1xyXG4vLyAgICAgICAgICAgICBjb25zdCBjaXBoZXJQYXJhbXMgPSBDcnlwdG9FUy5saWIuQ2lwaGVyUGFyYW1zLmNyZWF0ZShcclxuLy8gICAgICAgICAgICAgICAgIHsgY2lwaGVydGV4dDogQ3J5cHRvRVMuZW5jLkJhc2U2NC5wYXJzZShqc29uT2JqLmN0KSB9LFxyXG4vLyAgICAgICAgICAgICApO1xyXG4vLyAgICAgICAgICAgICBpZiAoanNvbk9iai5pdikge1xyXG4vLyAgICAgICAgICAgICAgICAgY2lwaGVyUGFyYW1zLml2ID0gQ3J5cHRvRVMuZW5jLkhleC5wYXJzZShqc29uT2JqLml2KVxyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIGlmIChqc29uT2JqLnMpIHtcclxuLy8gICAgICAgICAgICAgICAgIGNpcGhlclBhcmFtcy5zYWx0ID0gQ3J5cHRvRVMuZW5jLkhleC5wYXJzZShqc29uT2JqLnMpXHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgcmV0dXJuIGNpcGhlclBhcmFtcztcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgfTtcclxuLy8gfSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDktMDEgMTg6MDA6MjhcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDIgMTA6NTc6MDFcclxuICovXHJcbmltcG9ydCB7IExpc3RlbmVyRnVuYyB9IGZyb20gXCIuL0V2ZW50TWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBNZXNzYWdlRXZlbnREYXRhIH0gZnJvbSBcIi4vTWVzc2FnZU1hbmFnZXJcIjtcclxuXHJcbi8qIOS6i+S7tuWvueixoeWfuuexu++8jOe7p+aJv+ivpeexu+WwhuaLpeacieWPkemAgeWSjOaOpemAgeS6i+S7tueahOiDveWKmyAqL1xyXG5leHBvcnQgY2xhc3MgRXZlbnREaXNwYXRjaGVyIHtcclxuICAgIHByb3RlY3RlZCBfbXNnOiBNZXNzYWdlRXZlbnREYXRhIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDms6jlhozlhajlsYDkuovku7ZcclxuICAgICAqIEBwYXJhbSBldmVudCAgICAg5LqL5Lu25ZCNXHJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgIOWkhOeQhuS6i+S7tueahOS+puWQrOWZqOWHveaVsFxyXG4gICAgICogQHBhcmFtIG9iamVjdCAgICDkvqblkKzlh73mlbDnu5HlrprnmoTkvZznlKjln5/lr7nosaFcclxuICAgICAqL1xyXG4gICAgb24oZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IExpc3RlbmVyRnVuYywgb2JqZWN0OiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5fbXNnID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fbXNnID0gbmV3IE1lc3NhZ2VFdmVudERhdGEoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbXNnLm9uKGV2ZW50LCBsaXN0ZW5lciwgb2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOenu+mZpOWFqOWxgOS6i+S7tlxyXG4gICAgICogQHBhcmFtIGV2ZW50ICAgICAg5LqL5Lu25ZCNXHJcbiAgICAgKi9cclxuICAgIG9mZihldmVudDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21zZykge1xyXG4gICAgICAgICAgICB0aGlzLl9tc2cub2ZmKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICog6Kem5Y+R5YWo5bGA5LqL5Lu2IFxyXG4gICAgICogQHBhcmFtIGV2ZW50ICAgICAg5LqL5Lu25ZCNXHJcbiAgICAgKiBAcGFyYW0gYXJncyAgICAgICDkuovku7blj4LmlbBcclxuICAgICAqL1xyXG4gICAgZGlzcGF0Y2hFdmVudChldmVudDogc3RyaW5nLCAuLi5hcmdzOiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5fbXNnID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5fbXNnID0gbmV3IE1lc3NhZ2VFdmVudERhdGEoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbXNnLmRpc3BhdGNoRXZlbnQoZXZlbnQsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6ZSA5q+B5LqL5Lu25a+56LGhXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21zZykge1xyXG4gICAgICAgICAgICB0aGlzLl9tc2cuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbXNnID0gbnVsbDtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjEtMDctMDMgMTY6MTM6MTdcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDIgMTE6MDM6MDhcclxuICovXHJcblxyXG4vKipcclxuICog5YWo5bGA5LqL5Lu255uR5ZCs5pa55rOVXHJcbiAqIEBwYXJhbSBldmVudCAgICAgIOS6i+S7tuWQjVxyXG4gKiBAcGFyYW0gYXJncyAgICAgICDkuovku7blj4LmlbBcclxuICovXHJcbmV4cG9ydCB0eXBlIExpc3RlbmVyRnVuYyA9IChldmVudDogc3RyaW5nLCAuLi5hcmdzOiBhbnkpID0+IHZvaWRcclxuXHJcbi8qKiDmoYbmnrblhoXpg6jlhajlsYDkuovku7YgICovXHJcbmV4cG9ydCBlbnVtIEV2ZW50TWVzc2FnZSB7XHJcbiAgICAvKiog5ri45oiP5LuO5ZCO5Y+w6L+b5YWl5LqL5Lu2ICovXHJcbiAgICBHQU1FX1NIT1cgPSBcIkdBTUVfRU5URVJcIixcclxuICAgIC8qKiDmuLjmiI/liIfliLDlkI7lj7Dkuovku7YgKi9cclxuICAgIEdBTUVfSElERSA9IFwiR0FNRV9FWElUXCIsXHJcbiAgICAvKiog5ri45oiP55S756yU5bC65a+45Y+Y5YyW5LqL5Lu2ICovXHJcbiAgICBHQU1FX1JFU0laRSA9IFwiR0FNRV9SRVNJWkVcIixcclxuICAgIC8qKiDmuLjmiI/lhajlsY/kuovku7YgKi9cclxuICAgIEdBTUVfRlVMTF9TQ1JFRU4gPSBcIkdBTUVfRlVMTF9TQ1JFRU5cIixcclxuICAgIC8qKiDmuLjmiI/ml4vovazlsY/luZXkuovku7YgKi9cclxuICAgIEdBTUVfT1JJRU5UQVRJT04gPSBcIkdBTUVfT1JJRU5UQVRJT05cIlxyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudCwgTWF0ZXJpYWwsIHNwLCBfZGVjb3JhdG9yIH0gZnJvbSAnY2MnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ0ZsYXNoU3BpbmUnKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbGFzaFNwaW5lIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIGR1cmF0aW9uOiBudW1iZXIgPSAwLjU7XHJcbiAgICBfbWVkaWFuOiBudW1iZXIgPSAwO1xyXG4gICAgX3RpbWU6IG51bWJlciA9IDA7XHJcblxyXG4gICAgX21hdGVyaWFsOiBNYXRlcmlhbCA9IG51bGwhO1xyXG4gICAgX3NrZWxldG9uOiBzcC5Ta2VsZXRvbiA9IG51bGwhO1xyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLl9tZWRpYW4gPSB0aGlzLmR1cmF0aW9uIC8gMjtcclxuICAgICAgICAvLyDojrflj5bmnZDotKhcclxuICAgICAgICB0aGlzLl9za2VsZXRvbiA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pITtcclxuICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IHRoaXMuX3NrZWxldG9uLmN1c3RvbU1hdGVyaWFsITtcclxuICAgICAgICAvLyDorr7nva7mnZDotKjlr7nlupTnmoTlsZ7mgKdcclxuICAgICAgICB0aGlzLl9tYXRlcmlhbC5zZXRQcm9wZXJ0eShcInVfcmF0ZVwiLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl90aW1lID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lIC09IGR0O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdGltZSA9IHRoaXMuX3RpbWUgPCAwID8gMCA6IHRoaXMuX3RpbWU7XHJcbiAgICAgICAgICAgIGxldCByYXRlID0gTWF0aC5hYnModGhpcy5fdGltZSAtIHRoaXMuX21lZGlhbikgKiAyIC8gdGhpcy5kdXJhdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGxldCBtYXQgPSBuZXcgTWF0ZXJpYWwoKTtcclxuICAgICAgICAgICAgbWF0LmNvcHkodGhpcy5fbWF0ZXJpYWwpO1xyXG4gICAgICAgICAgICB0aGlzLl9za2VsZXRvbi5jdXN0b21NYXRlcmlhbCA9IG1hdDtcclxuICAgICAgICAgICAgbWF0LnNldFByb3BlcnR5KFwidV9yYXRlXCIsIHJhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgY2xpY2tGbGFzaCgpIHtcclxuICAgICAgICB0aGlzLl90aW1lID0gdGhpcy5kdXJhdGlvbjtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE1hdGVyaWFsLCBTcHJpdGUsIF9kZWNvcmF0b3IgfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnRmxhc2hTcHJpdGUnKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGbGFzaFNwcml0ZSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBkdXJhdGlvbjogbnVtYmVyID0gMC41O1xyXG4gICAgX21lZGlhbjogbnVtYmVyID0gMDtcclxuICAgIF90aW1lOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIF9tYXRlcmlhbDogTWF0ZXJpYWwgPSBudWxsITtcclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5fbWVkaWFuID0gdGhpcy5kdXJhdGlvbiAvIDI7XHJcbiAgICAgICAgLy8g6I635Y+W5p2Q6LSoXHJcbiAgICAgICAgdGhpcy5fbWF0ZXJpYWwgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KFNwcml0ZSkhLmdldE1hdGVyaWFsKDApITtcclxuICAgICAgICAvLyDorr7nva7mnZDotKjlr7nlupTnmoTlsZ7mgKdcclxuICAgICAgICB0aGlzLl9tYXRlcmlhbC5zZXRQcm9wZXJ0eShcInVfcmF0ZVwiLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLl90aW1lID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lIC09IGR0O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdGltZSA9IHRoaXMuX3RpbWUgPCAwID8gMCA6IHRoaXMuX3RpbWU7XHJcbiAgICAgICAgICAgIGxldCByYXRlID0gTWF0aC5hYnModGhpcy5fdGltZSAtIHRoaXMuX21lZGlhbikgKiAyIC8gdGhpcy5kdXJhdGlvbjtcclxuICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwuc2V0UHJvcGVydHkoXCJ1X3JhdGVcIiwgcmF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsaWNrRmxhc2goKSB7XHJcbiAgICAgICAgdGhpcy5fdGltZSA9IHRoaXMuZHVyYXRpb247XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIOiHqueUsemjnuihjOaRhOWDj+aculxyXG4gKiDkvb/nlKjmlrnlvI/vvJpcclxuICogMeOAgee7hOS7tue7keWumuWIsOS7u+aEj+S4gOiuvuaDs+acuuS4ilxyXG4gKiAy44CB6YCa6L+HVyjkuIrvvInjgIFTKOS4iynjgIFBKOW3pu+8ieOAgUQo5Y+z77yJ44CBUShZ6L205ZCR5LiL77yJ44CBRShZ6L205ZCR5LiK77yJ5p2l5pON5L2c5pGE5YOP5py656e75YqoXHJcbiAqIDPjgIHmjInkvY9TSElGVOmUruS8muWKoOmAn+mjnuihjFxyXG4gKiA044CB6byg5qCH5bem5oiW5Y+z6ZSu5oyJ5LiL5ruR5Yqo5o6n5Yi25pGE5YOP5py66KeG6KeS5Y6f5Zyw5peL6L2sXHJcbiAqIDXjgIHpvKDmoIfmu5rova7plK7mu5HliqjmkYTlg4/mnLrmi4nov5HmiJbmi4nov5xcclxuICogNuOAgeWPquaUr+aMgVBD5LiK5L2/55SoXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ0NGbG9hdCwgQ29tcG9uZW50LCBFdmVudEtleWJvYXJkLCBFdmVudE1vdXNlLCBFdmVudFRvdWNoLCBnYW1lLCBJbnB1dCwgaW5wdXQsIEtleUNvZGUsIG1hdGgsIF9kZWNvcmF0b3IgfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHksIG1lbnUgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5jb25zdCB7IFZlYzIsIFZlYzMsIFF1YXQgfSA9IG1hdGg7XHJcbmNvbnN0IHYyXzEgPSBuZXcgVmVjMigpO1xyXG5jb25zdCB2Ml8yID0gbmV3IFZlYzIoKTtcclxuY29uc3QgdjNfMSA9IG5ldyBWZWMzKCk7XHJcbmNvbnN0IHF0XzEgPSBuZXcgUXVhdCgpO1xyXG5cclxuY29uc3QgS0VZQ09ERSA9IHtcclxuICAgIFc6ICdXJy5jaGFyQ29kZUF0KDApLFxyXG4gICAgUzogJ1MnLmNoYXJDb2RlQXQoMCksXHJcbiAgICBBOiAnQScuY2hhckNvZGVBdCgwKSxcclxuICAgIEQ6ICdEJy5jaGFyQ29kZUF0KDApLFxyXG4gICAgUTogJ1EnLmNoYXJDb2RlQXQoMCksXHJcbiAgICBFOiAnRScuY2hhckNvZGVBdCgwKSxcclxuICAgIFNISUZUOiBLZXlDb2RlLlNISUZUX0xFRlRcclxufTtcclxuXHJcbkBjY2NsYXNzKFwiRnJlZUZsaWdodENhbWVyYVwiKVxyXG5AbWVudSgnT29wc0ZyYW1ld29yay9DYW1lcmEvRnJlZUZsaWdodENhbWVyYSDvvIjoh6rnlLHpo57ooYzmkYTlg4/mnLrvvIknKVxyXG5leHBvcnQgY2xhc3MgRnJlZUZsaWdodENhbWVyYSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IENDRmxvYXQsXHJcbiAgICAgICAgdG9vbHRpcDogXCLnp7vliqjpgJ/luqZcIlxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBtb3ZlU3BlZWQ6IG51bWJlciA9IDE7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBDQ0Zsb2F0LFxyXG4gICAgICAgIHRvb2x0aXA6IFwi5oyJU2hpZnTplK7lkI7nmoTpgJ/luqZcIlxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBtb3ZlU3BlZWRTaGlmdFNjYWxlOiBudW1iZXIgPSA1O1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogQ0NGbG9hdCxcclxuICAgICAgICBzbGlkZTogdHJ1ZSxcclxuICAgICAgICByYW5nZTogWzAuMDUsIDAuNSwgMC4wMV0sXHJcbiAgICAgICAgdG9vbHRpcDogXCLnp7vliqjlkI7mg6/mgKfmlYjmnpxcIlxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBkYW1wOiBudW1iZXIgPSAwLjI7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBDQ0Zsb2F0LFxyXG4gICAgICAgIHRvb2x0aXA6IFwi5peL6L2s6YCf5bqmXCJcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgcm90YXRlU3BlZWQ6IG51bWJlciA9IDE7XHJcblxyXG4gICAgcHVibGljIF9ldWxlciA9IG5ldyBWZWMzKCk7XHJcbiAgICBwdWJsaWMgX3ZlbG9jaXR5ID0gbmV3IFZlYzMoKTtcclxuICAgIHB1YmxpYyBfcG9zaXRpb24gPSBuZXcgVmVjMygpO1xyXG4gICAgcHVibGljIF9zcGVlZFNjYWxlID0gMTtcclxuXHJcbiAgICBwdWJsaWMgb25Mb2FkKCkge1xyXG4gICAgICAgIGlucHV0Lm9uKElucHV0LkV2ZW50VHlwZS5NT1VTRV9XSEVFTCwgdGhpcy5vbk1vdXNlV2hlZWwsIHRoaXMpO1xyXG4gICAgICAgIGlucHV0Lm9uKElucHV0LkV2ZW50VHlwZS5LRVlfRE9XTiwgdGhpcy5vbktleURvd24sIHRoaXMpO1xyXG4gICAgICAgIGlucHV0Lm9uKElucHV0LkV2ZW50VHlwZS5LRVlfVVAsIHRoaXMub25LZXlVcCwgdGhpcyk7XHJcbiAgICAgICAgaW5wdXQub24oSW5wdXQuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uVG91Y2hTdGFydCwgdGhpcyk7XHJcbiAgICAgICAgaW5wdXQub24oSW5wdXQuRXZlbnRUeXBlLlRPVUNIX01PVkUsIHRoaXMub25Ub3VjaE1vdmUsIHRoaXMpO1xyXG4gICAgICAgIGlucHV0Lm9uKElucHV0LkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XHJcblxyXG4gICAgICAgIFZlYzMuY29weSh0aGlzLl9ldWxlciwgdGhpcy5ub2RlLmV1bGVyQW5nbGVzKTtcclxuICAgICAgICBWZWMzLmNvcHkodGhpcy5fcG9zaXRpb24sIHRoaXMubm9kZS5wb3NpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uRGVzdHJveSgpIHtcclxuICAgICAgICBpbnB1dC5vZmYoSW5wdXQuRXZlbnRUeXBlLk1PVVNFX1dIRUVMLCB0aGlzLm9uTW91c2VXaGVlbCwgdGhpcyk7XHJcbiAgICAgICAgaW5wdXQub2ZmKElucHV0LkV2ZW50VHlwZS5LRVlfRE9XTiwgdGhpcy5vbktleURvd24sIHRoaXMpO1xyXG4gICAgICAgIGlucHV0Lm9mZihJbnB1dC5FdmVudFR5cGUuS0VZX1VQLCB0aGlzLm9uS2V5VXAsIHRoaXMpO1xyXG4gICAgICAgIGlucHV0Lm9mZihJbnB1dC5FdmVudFR5cGUuVE9VQ0hfU1RBUlQsIHRoaXMub25Ub3VjaFN0YXJ0LCB0aGlzKTtcclxuICAgICAgICBpbnB1dC5vZmYoSW5wdXQuRXZlbnRUeXBlLlRPVUNIX01PVkUsIHRoaXMub25Ub3VjaE1vdmUsIHRoaXMpO1xyXG4gICAgICAgIGlucHV0Lm9mZihJbnB1dC5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLm9uVG91Y2hFbmQsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIC8vIHBvc2l0aW9uXHJcbiAgICAgICAgVmVjMy50cmFuc2Zvcm1RdWF0KHYzXzEsIHRoaXMuX3ZlbG9jaXR5LCB0aGlzLm5vZGUucm90YXRpb24pO1xyXG4gICAgICAgIFZlYzMuc2NhbGVBbmRBZGQodGhpcy5fcG9zaXRpb24sIHRoaXMuX3Bvc2l0aW9uLCB2M18xLCB0aGlzLm1vdmVTcGVlZCAqIHRoaXMuX3NwZWVkU2NhbGUpO1xyXG4gICAgICAgIFZlYzMubGVycCh2M18xLCB0aGlzLm5vZGUucG9zaXRpb24sIHRoaXMuX3Bvc2l0aW9uLCBkdCAvIHRoaXMuZGFtcCk7ICAgICAgICAvLyDlkJHph4/nur/mgKfmj5LlgLzkuqfnlJ/kvY3np7vmg6/mgKfmlYjmnpxcclxuICAgICAgICB0aGlzLm5vZGUuc2V0UG9zaXRpb24odjNfMSk7XHJcblxyXG4gICAgICAgIC8vIHJvdGF0aW9uXHJcbiAgICAgICAgUXVhdC5mcm9tRXVsZXIocXRfMSwgdGhpcy5fZXVsZXIueCwgdGhpcy5fZXVsZXIueSwgdGhpcy5fZXVsZXIueik7XHJcbiAgICAgICAgUXVhdC5zbGVycChxdF8xLCB0aGlzLm5vZGUucm90YXRpb24sIHF0XzEsIGR0IC8gdGhpcy5kYW1wKTsgICAgICAgICAgICAgICAgIC8vIOWbm+WFg+e0oOe6v+aAp+aPkuWAvOS6p+eUn+aXi+i9rOaDr+aAp+aViOaenFxyXG4gICAgICAgIHRoaXMubm9kZS5zZXRSb3RhdGlvbihxdF8xKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25Nb3VzZVdoZWVsKGV2ZW50OiBFdmVudE1vdXNlKSB7XHJcbiAgICAgICAgY29uc3QgZGVsdGEgPSAtZXZlbnQuZ2V0U2Nyb2xsWSgpICogdGhpcy5tb3ZlU3BlZWQgKiAwLjE7ICAgICAgICAgICAgICAgICAgICAgICAvLyDlkJHkuIvmu5rliqjml7blop7ph4/kuLrmraNcclxuICAgICAgICBWZWMzLnRyYW5zZm9ybVF1YXQodjNfMSwgVmVjMy5VTklUX1osIHRoaXMubm9kZS5yb3RhdGlvbik7XHJcbiAgICAgICAgVmVjMy5zY2FsZUFuZEFkZCh0aGlzLl9wb3NpdGlvbiwgdGhpcy5ub2RlLnBvc2l0aW9uLCB2M18xLCBkZWx0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uS2V5RG93bihldmVudDogRXZlbnRLZXlib2FyZCkge1xyXG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLl92ZWxvY2l0eTtcclxuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZQ09ERS5TSElGVCkgeyB0aGlzLl9zcGVlZFNjYWxlID0gdGhpcy5tb3ZlU3BlZWRTaGlmdFNjYWxlOyB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZQ09ERS5XKSB7IGlmICh2LnogPT09IDApIHsgdi56ID0gLTE7IH0gfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtFWUNPREUuUykgeyBpZiAodi56ID09PSAwKSB7IHYueiA9IDE7IH0gfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtFWUNPREUuQSkgeyBpZiAodi54ID09PSAwKSB7IHYueCA9IC0xOyB9IH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlDT0RFLkQpIHsgaWYgKHYueCA9PT0gMCkgeyB2LnggPSAxOyB9IH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlDT0RFLlEpIHsgaWYgKHYueSA9PT0gMCkgeyB2LnkgPSAtMTsgfSB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZQ09ERS5FKSB7IGlmICh2LnkgPT09IDApIHsgdi55ID0gMTsgfSB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uS2V5VXAoZXZlbnQ6IEV2ZW50S2V5Ym9hcmQpIHtcclxuICAgICAgICBjb25zdCB2ID0gdGhpcy5fdmVsb2NpdHk7XHJcbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtFWUNPREUuU0hJRlQpIHsgdGhpcy5fc3BlZWRTY2FsZSA9IDE7IH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlDT0RFLlcpIHsgaWYgKHYueiA8IDApIHsgdi56ID0gMDsgfSB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZQ09ERS5TKSB7IGlmICh2LnogPiAwKSB7IHYueiA9IDA7IH0gfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtFWUNPREUuQSkgeyBpZiAodi54IDwgMCkgeyB2LnggPSAwOyB9IH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSBLRVlDT0RFLkQpIHsgaWYgKHYueCA+IDApIHsgdi54ID0gMDsgfSB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS0VZQ09ERS5RKSB7IGlmICh2LnkgPCAwKSB7IHYueSA9IDA7IH0gfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtFWUNPREUuRSkgeyBpZiAodi55ID4gMCkgeyB2LnkgPSAwOyB9IH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uVG91Y2hTdGFydChlOiBFdmVudFRvdWNoKSB7XHJcbiAgICAgICAgZ2FtZS5jYW52YXMhLnJlcXVlc3RQb2ludGVyTG9jaygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Ub3VjaE1vdmUoZTogRXZlbnRUb3VjaCkge1xyXG4gICAgICAgIGUuZ2V0U3RhcnRMb2NhdGlvbih2Ml8xKTtcclxuICAgICAgICBpZiAodjJfMS54ID4gZ2FtZS5jYW52YXMhLndpZHRoICogMC40KSB7ICAgICAgICAgICAgICAgICAgICAgLy8gcm90YXRpb25cclxuICAgICAgICAgICAgZS5nZXREZWx0YSh2Ml8yKTtcclxuICAgICAgICAgICAgdGhpcy5fZXVsZXIueSAtPSB2Ml8yLnggKiB0aGlzLnJvdGF0ZVNwZWVkICogMC4xOyAgICAgICAvLyDkuIrkuIvml4vovaxcclxuICAgICAgICAgICAgdGhpcy5fZXVsZXIueCArPSB2Ml8yLnkgKiB0aGlzLnJvdGF0ZVNwZWVkICogMC4xOyAgICAgICAvLyDlt6blj7Pml4vovaxcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9zaXRpb25cclxuICAgICAgICAgICAgZS5nZXRMb2NhdGlvbih2Ml8yKTtcclxuICAgICAgICAgICAgVmVjMi5zdWJ0cmFjdCh2Ml8yLCB2Ml8yLCB2Ml8xKTtcclxuICAgICAgICAgICAgdGhpcy5fdmVsb2NpdHkueCA9IHYyXzIueCAqIDAuMDE7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZlbG9jaXR5LnogPSAtdjJfMi55ICogMC4wMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvblRvdWNoRW5kKGU6IEV2ZW50VG91Y2gpIHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZS5nZXRTdGFydExvY2F0aW9uKHYyXzEpO1xyXG4gICAgICAgIGlmICh2Ml8xLnggPCBnYW1lLmNhbnZhcyEud2lkdGggKiAwLjQpIHsgICAgICAgICAgICAgICAgICAgICAgLy8gcG9zaXRpb25cclxuICAgICAgICAgICAgdGhpcy5fdmVsb2NpdHkueCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZlbG9jaXR5LnogPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDMtMjkgMTc6MDg6MDhcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDIgMDk6NDU6NDFcclxuICovXHJcbmltcG9ydCB7IF9kZWNvcmF0b3IsIGNjZW51bSwgQ29sbGlkZXIsIENvbXBvbmVudCwgSUNvbGxpc2lvbkV2ZW50LCBJVHJpZ2dlckV2ZW50IH0gZnJvbSBcImNjXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIOeisOaSnueJqeS9k+exu+WeiyAqL1xyXG5leHBvcnQgZW51bSBDb2xsaXNpb25UeXBlIHtcclxuICAgIC8qKiDop5LoibLnsbsgKi9cclxuICAgIFJvbGUsXHJcbiAgICAvKiog6aOe5by557G75L2TKi9cclxuICAgIEJhbGxpc3RpYyxcclxuICAgIC8qKiDlopnkvZPnsbsgKi9cclxuICAgIFdhbGxcclxufVxyXG5jY2VudW0oQ29sbGlzaW9uVHlwZSk7XHJcblxyXG5jb25zdCBFdmVudF9UcmlnZ2VyRW50ZXIgPSBcIm9uVHJpZ2dlckVudGVyXCI7XHJcbmNvbnN0IEV2ZW50X1RyaWdnZXJTdGF5ID0gXCJvblRyaWdnZXJTdGF5XCI7XHJcbmNvbnN0IEV2ZW50X1RyaWdnZXJFeGl0ID0gXCJvblRyaWdnZXJFeGl0XCI7XHJcbmNvbnN0IEV2ZW50X0NvbGxpc2lvbkVudGVyID0gXCJvbkNvbGxpc2lvbkVudGVyXCI7XHJcbmNvbnN0IEV2ZW50X0NvbGxpc2lvblN0YXkgPSBcIm9uQ29sbGlzaW9uU3RheVwiO1xyXG5jb25zdCBFdmVudF9Db2xsaXNpb25FeGl0ID0gXCJvbkNvbGxpc2lvbkV4aXRcIjtcclxuXHJcbi8qKiDnorDmkp7lmajkuI7op6blj5HlmaggKi9cclxuQGNjY2xhc3MoJ0dhbWVDb2xsaXNpb24nKVxyXG5leHBvcnQgY2xhc3MgR2FtZUNvbGxpc2lvbiBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBwcm90ZWN0ZWQgY29sbGlkZXI6IENvbGxpZGVyID0gbnVsbCE7XHJcblxyXG4gICAgQHByb3BlcnR5KHsgdHlwZTogQ29sbGlzaW9uVHlwZSwgdG9vbHRpcDogJ+eisOaSnueJqeS9k+exu+WeiycgfSlcclxuICAgIHR5cGU6IENvbGxpc2lvblR5cGUgPSBDb2xsaXNpb25UeXBlLkJhbGxpc3RpYztcclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5jb2xsaWRlciA9IHRoaXMuZ2V0Q29tcG9uZW50KENvbGxpZGVyKSE7XHJcbiAgICAgICAgaWYgKHRoaXMuY29sbGlkZXIuaXNUcmlnZ2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXIub24oRXZlbnRfVHJpZ2dlckVudGVyLCB0aGlzLm9uVHJpZ2dlciwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXIub24oRXZlbnRfVHJpZ2dlclN0YXksIHRoaXMub25UcmlnZ2VyLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5jb2xsaWRlci5vbihFdmVudF9UcmlnZ2VyRXhpdCwgdGhpcy5vblRyaWdnZXIsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb2xsaWRlci5vbihFdmVudF9Db2xsaXNpb25FbnRlciwgdGhpcy5vbkNvbGxpc2lvbiwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXIub24oRXZlbnRfQ29sbGlzaW9uU3RheSwgdGhpcy5vbkNvbGxpc2lvbiwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sbGlkZXIub24oRXZlbnRfQ29sbGlzaW9uRXhpdCwgdGhpcy5vbkNvbGxpc2lvbiwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25UcmlnZ2VyKGV2ZW50OiBJVHJpZ2dlckV2ZW50KSB7XHJcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgRXZlbnRfVHJpZ2dlckVudGVyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vblRyaWdnZXJFbnRlcihldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBFdmVudF9UcmlnZ2VyU3RheTpcclxuICAgICAgICAgICAgICAgIHRoaXMub25UcmlnZ2VyU3RheShldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBFdmVudF9UcmlnZ2VyRXhpdDpcclxuICAgICAgICAgICAgICAgIHRoaXMub25UcmlnZ2VyRXhpdChldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uVHJpZ2dlckVudGVyKGV2ZW50OiBJVHJpZ2dlckV2ZW50KSB7IH1cclxuICAgIHByb3RlY3RlZCBvblRyaWdnZXJTdGF5KGV2ZW50OiBJVHJpZ2dlckV2ZW50KSB7IH1cclxuICAgIHByb3RlY3RlZCBvblRyaWdnZXJFeGl0KGV2ZW50OiBJVHJpZ2dlckV2ZW50KSB7IH1cclxuXHJcbiAgICBwcml2YXRlIG9uQ29sbGlzaW9uKGV2ZW50OiBJQ29sbGlzaW9uRXZlbnQpIHtcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBFdmVudF9Db2xsaXNpb25FbnRlcjpcclxuICAgICAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25FbnRlcihldmVudCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBFdmVudF9Db2xsaXNpb25TdGF5OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbGxpc2lvblN0YXkoZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRXZlbnRfQ29sbGlzaW9uRXhpdDpcclxuICAgICAgICAgICAgICAgIHRoaXMub25Db2xsaXNpb25FeGl0KGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Db2xsaXNpb25FbnRlcihldmVudDogSUNvbGxpc2lvbkV2ZW50KSB7IH1cclxuICAgIHByb3RlY3RlZCBvbkNvbGxpc2lvblN0YXkoZXZlbnQ6IElDb2xsaXNpb25FdmVudCkgeyB9XHJcbiAgICBwcm90ZWN0ZWQgb25Db2xsaXNpb25FeGl0KGV2ZW50OiBJQ29sbGlzaW9uRXZlbnQpIHsgfVxyXG59XHJcbiIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDQtMTQgMTc6MDg6MDFcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMTItMTMgMTE6MzY6MDBcclxuICovXHJcbmltcG9ydCB7IEFzc2V0LCBCdXR0b24sIENvbXBvbmVudCwgRXZlbnRIYW5kbGVyLCBFdmVudEtleWJvYXJkLCBFdmVudFRvdWNoLCBJbnB1dCwgTm9kZSwgU3ByaXRlLCBTcHJpdGVGcmFtZSwgX19wcml2YXRlLCBfZGVjb3JhdG9yLCBpbnB1dCwgaXNWYWxpZCB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBvb3BzIH0gZnJvbSBcIi4uLy4uL2NvcmUvT29wc1wiO1xyXG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwiLi4vLi4vY29yZS9jb21tb24vZXZlbnQvRXZlbnREaXNwYXRjaGVyXCI7XHJcbmltcG9ydCB7IEV2ZW50TWVzc2FnZSwgTGlzdGVuZXJGdW5jIH0gZnJvbSBcIi4uLy4uL2NvcmUvY29tbW9uL2V2ZW50L0V2ZW50TWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBBc3NldFR5cGUsIENvbXBsZXRlQ2FsbGJhY2ssIFBhdGhzLCBQcm9ncmVzc0NhbGxiYWNrLCByZXNMb2FkZXIgfSBmcm9tIFwiLi4vLi4vY29yZS9jb21tb24vbG9hZGVyL1Jlc0xvYWRlclwiO1xyXG5pbXBvcnQgeyBWaWV3VXRpbCB9IGZyb20gXCIuLi8uLi9jb3JlL3V0aWxzL1ZpZXdVdGlsXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog5Yqg6L296LWE5rqQ57G75Z6LICovXHJcbmVudW0gUmVzVHlwZSB7XHJcbiAgICBMb2FkLFxyXG4gICAgTG9hZERpcixcclxuICAgIEF1ZGlvXHJcbn1cclxuXHJcbi8qKiDotYTmupDliqDovb3orrDlvZUgKi9cclxuaW50ZXJmYWNlIFJlc1JlY29yZCB7XHJcbiAgICAvKiog6LWE5rqQ5YyF5ZCNICovXHJcbiAgICBidW5kbGU6IHN0cmluZyxcclxuICAgIC8qKiDotYTmupDot6/lvoQgKi9cclxuICAgIHBhdGg6IHN0cmluZyxcclxuICAgIC8qKiDotYTmupDnvJblj7cgKi9cclxuICAgIHJlc0lkPzogbnVtYmVyXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmuLjmiI/mmL7npLrlr7nosaHnu4Tku7bmqKHmnb9cclxuICogMeOAgeW9k+WJjeWvueixoeWKoOi9veeahOi1hOa6kO+8jOS8muWcqOWvueixoemHiuaUvuaXtu+8jOiHquWKqOmHiuaUvuW8leeUqOeahOi1hOa6kFxyXG4gKiAy44CB5b2T5YmN5a+56LGh5pSv5oyB5ZCv5Yqo5ri45oiP5byV5pOO5o+Q5L6b55qE5ZCE56eN5bi455So6YC76L6R5LqL5Lu2XHJcbiAqL1xyXG5AY2NjbGFzcyhcIkdhbWVDb21wb25lbnRcIilcclxuZXhwb3J0IGNsYXNzIEdhbWVDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgLy8jcmVnaW9uIOWFqOWxgOS6i+S7tueuoeeQhlxyXG4gICAgcHJpdmF0ZSBfZXZlbnQ6IEV2ZW50RGlzcGF0Y2hlciB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIOWFqOWxgOS6i+S7tueuoeeQhuWZqCAqL1xyXG4gICAgcHJpdmF0ZSBnZXQgZXZlbnQoKTogRXZlbnREaXNwYXRjaGVyIHtcclxuICAgICAgICBpZiAodGhpcy5fZXZlbnQgPT0gbnVsbCkgdGhpcy5fZXZlbnQgPSBuZXcgRXZlbnREaXNwYXRjaGVyKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5YWo5bGA5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgICAgICAg5LqL5Lu25ZCNXHJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgICAg5aSE55CG5LqL5Lu255qE5L6m5ZCs5Zmo5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gb2JqZWN0ICAgICAg5L6m5ZCs5Ye95pWw57uR5a6a55qEdGhpc+WvueixoVxyXG4gICAgICovXHJcbiAgICBvbihldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXJGdW5jLCBvYmplY3Q6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZXZlbnQub24oZXZlbnQsIGxpc3RlbmVyLCBvYmplY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk5YWo5bGA5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgICAgICDkuovku7blkI1cclxuICAgICAqL1xyXG4gICAgb2ZmKGV2ZW50OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmV2ZW50Lm9mZihldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop6blj5HlhajlsYDkuovku7ZcclxuICAgICAqIEBwYXJhbSBldmVudCAgICAgIOS6i+S7tuWQjVxyXG4gICAgICogQHBhcmFtIGFyZ3MgICAgICAg5LqL5Lu25Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIGRpc3BhdGNoRXZlbnQoZXZlbnQ6IHN0cmluZywgLi4uYXJnczogYW55KSB7XHJcbiAgICAgICAgdGhpcy5ldmVudC5kaXNwYXRjaEV2ZW50KGV2ZW50LCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIC8vI3JlZ2lvbiDpooTliLboioLngrnnrqHnkIZcclxuXHJcbiAgICAvKiog5pGK5bmz55qE6IqC54K56ZuG5ZCI77yI5omA5pyJ6IqC54K55LiN6IO96YeN5ZCN77yJICovXHJcbiAgICBwcm90ZWN0ZWQgbm9kZXM6IE1hcDxzdHJpbmcsIE5vZGU+ID0gbnVsbCE7XHJcblxyXG4gICAgLyoqIOmAmui/h+iKgueCueWQjeiOt+WPlumihOWItuS4iueahOiKgueCue+8jOaVtOS4qumihOWItuS4jeiDveaciemHjeWQjeiKgueCuSAqL1xyXG4gICAgZ2V0Tm9kZShuYW1lOiBzdHJpbmcpOiBOb2RlIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAodGhpcy5ub2Rlcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub2Rlcy5nZXQobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOW5s+aRiuaJgOacieiKgueCueWtmOWIsE1hcDxzdHJpbmcsIE5vZGU+5Lit6YCa6L+HZ2V0KG5hbWU6IHN0cmluZynmlrnms5Xojrflj5YgKi9cclxuICAgIG5vZGVUcmVlSW5mb0xpdGUoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBWaWV3VXRpbC5ub2RlVHJlZUluZm9MaXRlKHRoaXMubm9kZSwgdGhpcy5ub2Rlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDku47otYTmupDnvJPlrZjkuK3mib7liLDpooTliLbotYTmupDlkI3lubbliJvlu7rkuIDkuKrmmL7npLrlr7nosaFcclxuICAgICAqIEBwYXJhbSBwYXRoIOi1hOa6kOi3r+W+hFxyXG4gICAgICovXHJcbiAgICBjcmVhdGVQcmVmYWJOb2RlKHBhdGg6IHN0cmluZywgYnVuZGxlTmFtZTogc3RyaW5nID0gb29wcy5yZXMuZGVmYXVsdEJ1bmRsZU5hbWUpOiBOb2RlIHtcclxuICAgICAgICByZXR1cm4gVmlld1V0aWwuY3JlYXRlUHJlZmFiTm9kZShwYXRoLCBidW5kbGVOYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWKoOi9vemihOWItuW5tuWIm+W7uumihOWItuiKgueCuVxyXG4gICAgICogQHBhcmFtIHBhdGggICAgICAg6LWE5rqQ6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0gYnVuZGxlTmFtZSDotYTmupDljIXlkI1cclxuICAgICAqL1xyXG4gICAgY3JlYXRlUHJlZmFiTm9kZUFzeW5jKHBhdGg6IHN0cmluZywgYnVuZGxlTmFtZTogc3RyaW5nID0gb29wcy5yZXMuZGVmYXVsdEJ1bmRsZU5hbWUpOiBQcm9taXNlPE5vZGU+IHtcclxuICAgICAgICByZXR1cm4gVmlld1V0aWwuY3JlYXRlUHJlZmFiTm9kZUFzeW5jKHBhdGgsIGJ1bmRsZU5hbWUpO1xyXG4gICAgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgLy8jcmVnaW9uIOi1hOa6kOWKoOi9veeuoeeQhlxyXG4gICAgLyoqIOi1hOa6kOi3r+W+hCAqL1xyXG4gICAgcHJpdmF0ZSByZXNQYXRoczogTWFwPFJlc1R5cGUsIE1hcDxzdHJpbmcsIFJlc1JlY29yZD4+ID0gbnVsbCE7ICAgICAgICAgICAgIC8vIOi1hOa6kOS9v+eUqOiusOW9lVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W6LWE5rqQXHJcbiAgICAgKiBAcGFyYW0gcGF0aCAgICAgICAgICDotYTmupDot6/lvoRcclxuICAgICAqIEBwYXJhbSB0eXBlICAgICAgICAgIOi1hOa6kOexu+Wei1xyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUgICAg6L+c56iL6LWE5rqQ5YyF5ZCNXHJcbiAgICAgKi9cclxuICAgIGdldFJlczxUIGV4dGVuZHMgQXNzZXQ+KHBhdGg6IHN0cmluZywgdHlwZT86IF9fcHJpdmF0ZS5fX3R5cGVzX2dsb2JhbHNfX0NvbnN0cnVjdG9yPFQ+IHwgbnVsbCwgYnVuZGxlTmFtZT86IHN0cmluZyk6IFQgfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gb29wcy5yZXMuZ2V0KHBhdGgsIHR5cGUsIGJ1bmRsZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5re75Yqg6LWE5rqQ5L2/55So6K6w5b2VXHJcbiAgICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICDotYTmupDnsbvlnotcclxuICAgICAqIEBwYXJhbSBidW5kbGVOYW1lICAgIOi1hOa6kOWMheWQjVxyXG4gICAgICogQHBhcmFtIHBhdGhzICAgICAgICAg6LWE5rqQ6Lev5b6EXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYWRkUGF0aFRvUmVjb3JkPFQ+KHR5cGU6IFJlc1R5cGUsIGJ1bmRsZU5hbWU6IHN0cmluZywgcGF0aHM/OiBzdHJpbmcgfCBzdHJpbmdbXSB8IEFzc2V0VHlwZTxUPiB8IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrIHwgbnVsbCwgcmVzSWQ/OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5yZXNQYXRocyA9PSBudWxsKSB0aGlzLnJlc1BhdGhzID0gbmV3IE1hcCgpO1xyXG5cclxuICAgICAgICB2YXIgcnBzID0gdGhpcy5yZXNQYXRocy5nZXQodHlwZSk7XHJcbiAgICAgICAgaWYgKHJwcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJwcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNQYXRocy5zZXQodHlwZSwgcnBzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXRocyBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIGxldCByZWFsQnVuZGxlID0gYnVuZGxlTmFtZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHBhdGhzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlYWxQYXRoID0gcGF0aHNbaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGtleSA9IHRoaXMuZ2V0UmVzS2V5KHJlYWxCdW5kbGUsIHJlYWxQYXRoLCByZXNJZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJwcy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJwcy5zZXQoa2V5LCB7IHBhdGg6IHJlYWxQYXRoLCBidW5kbGU6IHJlYWxCdW5kbGUsIHJlc0lkOiByZXNJZCB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGF0aHMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbGV0IHJlYWxCdW5kbGUgPSBidW5kbGVOYW1lO1xyXG4gICAgICAgICAgICBsZXQgcmVhbFBhdGggPSBwYXRocztcclxuICAgICAgICAgICAgbGV0IGtleSA9IHRoaXMuZ2V0UmVzS2V5KHJlYWxCdW5kbGUsIHJlYWxQYXRoLCByZXNJZCk7XHJcbiAgICAgICAgICAgIGlmICghcnBzLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBycHMuc2V0KGtleSwgeyBwYXRoOiByZWFsUGF0aCwgYnVuZGxlOiByZWFsQnVuZGxlLCByZXNJZDogcmVzSWQgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCByZWFsQnVuZGxlID0gb29wcy5yZXMuZGVmYXVsdEJ1bmRsZU5hbWU7XHJcbiAgICAgICAgICAgIGxldCByZWFsUGF0aCA9IGJ1bmRsZU5hbWU7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSB0aGlzLmdldFJlc0tleShyZWFsQnVuZGxlLCByZWFsUGF0aCwgcmVzSWQpO1xyXG4gICAgICAgICAgICBpZiAoIXJwcy5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgcnBzLnNldChrZXksIHsgcGF0aDogcmVhbFBhdGgsIGJ1bmRsZTogcmVhbEJ1bmRsZSwgcmVzSWQ6IHJlc0lkIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0UmVzS2V5KHJlYWxCdW5kbGU6IHN0cmluZywgcmVhbFBhdGg6IHN0cmluZywgcmVzSWQ/OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBrZXkgPSBgJHtyZWFsQnVuZGxlfToke3JlYWxQYXRofWA7XHJcbiAgICAgICAgaWYgKHJlc0lkICE9IG51bGwpIGtleSArPSBcIjpcIiArIHJlc0lkO1xyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3kuIDkuKrotYTmupBcclxuICAgICAqIEBwYXJhbSBidW5kbGVOYW1lICAgIOi/nOeoi+WMheWQjVxyXG4gICAgICogQHBhcmFtIHBhdGhzICAgICAgICAg6LWE5rqQ6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICDotYTmupDnsbvlnotcclxuICAgICAqIEBwYXJhbSBvblByb2dyZXNzICAgIOWKoOi9vei/m+W6puWbnuiwg1xyXG4gICAgICogQHBhcmFtIG9uQ29tcGxldGUgICAg5Yqg6L295a6M5oiQ5Zue6LCDXHJcbiAgICAgKi9cclxuICAgIGxvYWQ8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIHBhdGhzOiBQYXRocywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvblByb2dyZXNzOiBQcm9ncmVzc0NhbGxiYWNrLCBvbkNvbXBsZXRlOiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIGxvYWQ8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIHBhdGhzOiBQYXRocywgb25Qcm9ncmVzczogUHJvZ3Jlc3NDYWxsYmFjaywgb25Db21wbGV0ZTogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBwYXRoczogUGF0aHMsIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIGxvYWQ8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIHBhdGhzOiBQYXRocywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkPFQgZXh0ZW5kcyBBc3NldD4ocGF0aHM6IFBhdGhzLCB0eXBlOiBBc3NldFR5cGU8VD4sIG9uUHJvZ3Jlc3M6IFByb2dyZXNzQ2FsbGJhY2ssIG9uQ29tcGxldGU6IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZDxUIGV4dGVuZHMgQXNzZXQ+KHBhdGhzOiBQYXRocywgb25Qcm9ncmVzczogUHJvZ3Jlc3NDYWxsYmFjaywgb25Db21wbGV0ZTogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkPFQgZXh0ZW5kcyBBc3NldD4ocGF0aHM6IFBhdGhzLCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkPFQgZXh0ZW5kcyBBc3NldD4ocGF0aHM6IFBhdGhzLCB0eXBlOiBBc3NldFR5cGU8VD4sIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIGxvYWQ8VCBleHRlbmRzIEFzc2V0PihcclxuICAgICAgICBidW5kbGVOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgcGF0aHM/OiBQYXRocyB8IEFzc2V0VHlwZTxUPiB8IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgICAgIHR5cGU/OiBBc3NldFR5cGU8VD4gfCBQcm9ncmVzc0NhbGxiYWNrIHwgQ29tcGxldGVDYWxsYmFjayxcclxuICAgICAgICBvblByb2dyZXNzPzogUHJvZ3Jlc3NDYWxsYmFjayB8IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICAgICAgb25Db21wbGV0ZT86IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmFkZFBhdGhUb1JlY29yZChSZXNUeXBlLkxvYWQsIGJ1bmRsZU5hbWUsIHBhdGhzKTtcclxuICAgICAgICBvb3BzLnJlcy5sb2FkKGJ1bmRsZU5hbWUsIHBhdGhzLCB0eXBlLCBvblByb2dyZXNzLCBvbkNvbXBsZXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW8guatpeWKoOi9veS4gOS4qui1hOa6kFxyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUgICAg6L+c56iL5YyF5ZCNXHJcbiAgICAgKiBAcGFyYW0gcGF0aHMgICAgICAgICDotYTmupDot6/lvoRcclxuICAgICAqIEBwYXJhbSB0eXBlICAgICAgICAgIOi1hOa6kOexu+Wei1xyXG4gICAgICovXHJcbiAgICBsb2FkQXN5bmM8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIHBhdGhzOiBQYXRocywgdHlwZTogQXNzZXRUeXBlPFQ+KTogUHJvbWlzZTxUPjtcclxuICAgIGxvYWRBc3luYzxUIGV4dGVuZHMgQXNzZXQ+KGJ1bmRsZU5hbWU6IHN0cmluZywgcGF0aHM6IFBhdGhzKTogUHJvbWlzZTxUPjtcclxuICAgIGxvYWRBc3luYzxUIGV4dGVuZHMgQXNzZXQ+KHBhdGhzOiBQYXRocywgdHlwZTogQXNzZXRUeXBlPFQ+KTogUHJvbWlzZTxUPjtcclxuICAgIGxvYWRBc3luYzxUIGV4dGVuZHMgQXNzZXQ+KHBhdGhzOiBQYXRocyk6IFByb21pc2U8VD47XHJcbiAgICBsb2FkQXN5bmM8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgcGF0aHM/OiBQYXRocyB8IEFzc2V0VHlwZTxUPiB8IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgICAgIHR5cGU/OiBBc3NldFR5cGU8VD4gfCBQcm9ncmVzc0NhbGxiYWNrIHwgQ29tcGxldGVDYWxsYmFjayk6IFByb21pc2U8VD4ge1xyXG4gICAgICAgIHRoaXMuYWRkUGF0aFRvUmVjb3JkKFJlc1R5cGUuTG9hZCwgYnVuZGxlTmFtZSwgcGF0aHMpO1xyXG4gICAgICAgIHJldHVybiBvb3BzLnJlcy5sb2FkQXN5bmMoYnVuZGxlTmFtZSwgcGF0aHMsIHR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqg6L295paH5Lu25aS55Lit55qE6LWE5rqQXHJcbiAgICAgKiBAcGFyYW0gYnVuZGxlTmFtZSAgICDov5znqIvljIXlkI1cclxuICAgICAqIEBwYXJhbSBkaXIgICAgICAgICAgIOaWh+S7tuWkueWQjVxyXG4gICAgICogQHBhcmFtIHR5cGUgICAgICAgICAg6LWE5rqQ57G75Z6LXHJcbiAgICAgKiBAcGFyYW0gb25Qcm9ncmVzcyAgICDliqDovb3ov5vluqblm57osINcclxuICAgICAqIEBwYXJhbSBvbkNvbXBsZXRlICAgIOWKoOi9veWujOaIkOWbnuiwg1xyXG4gICAgICovXHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBkaXI6IHN0cmluZywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvblByb2dyZXNzOiBQcm9ncmVzc0NhbGxiYWNrLCBvbkNvbXBsZXRlOiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIGxvYWREaXI8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIGRpcjogc3RyaW5nLCBvblByb2dyZXNzOiBQcm9ncmVzc0NhbGxiYWNrLCBvbkNvbXBsZXRlOiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIGxvYWREaXI8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIGRpcjogc3RyaW5nLCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBkaXI6IHN0cmluZywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oZGlyOiBzdHJpbmcsIHR5cGU6IEFzc2V0VHlwZTxUPiwgb25Qcm9ncmVzczogUHJvZ3Jlc3NDYWxsYmFjaywgb25Db21wbGV0ZTogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oZGlyOiBzdHJpbmcsIG9uUHJvZ3Jlc3M6IFByb2dyZXNzQ2FsbGJhY2ssIG9uQ29tcGxldGU6IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZERpcjxUIGV4dGVuZHMgQXNzZXQ+KGRpcjogc3RyaW5nLCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oZGlyOiBzdHJpbmcsIHR5cGU6IEFzc2V0VHlwZTxUPiwgb25Db21wbGV0ZT86IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZERpcjxUIGV4dGVuZHMgQXNzZXQ+KFxyXG4gICAgICAgIGJ1bmRsZU5hbWU6IHN0cmluZyxcclxuICAgICAgICBkaXI/OiBzdHJpbmcgfCBBc3NldFR5cGU8VD4gfCBQcm9ncmVzc0NhbGxiYWNrIHwgQ29tcGxldGVDYWxsYmFjayxcclxuICAgICAgICB0eXBlPzogQXNzZXRUeXBlPFQ+IHwgUHJvZ3Jlc3NDYWxsYmFjayB8IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICAgICAgb25Qcm9ncmVzcz86IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgICAgIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgKSB7XHJcbiAgICAgICAgbGV0IHJlYWxEaXI6IHN0cmluZztcclxuICAgICAgICBsZXQgcmVhbEJ1bmRsZTogc3RyaW5nO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGlyID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHJlYWxEaXIgPSBkaXI7XHJcbiAgICAgICAgICAgIHJlYWxCdW5kbGUgPSBidW5kbGVOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVhbERpciA9IGJ1bmRsZU5hbWU7XHJcbiAgICAgICAgICAgIHJlYWxCdW5kbGUgPSBvb3BzLnJlcy5kZWZhdWx0QnVuZGxlTmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYWRkUGF0aFRvUmVjb3JkKFJlc1R5cGUuTG9hZERpciwgcmVhbEJ1bmRsZSwgcmVhbERpcik7XHJcbiAgICAgICAgb29wcy5yZXMubG9hZERpcihidW5kbGVOYW1lLCBkaXIsIHR5cGUsIG9uUHJvZ3Jlc3MsIG9uQ29tcGxldGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDph4rmlL7otYTmupAgKi9cclxuICAgIHJlbGVhc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzUGF0aHMpIHtcclxuICAgICAgICAgICAgY29uc3QgcnBzID0gdGhpcy5yZXNQYXRocy5nZXQoUmVzVHlwZS5Mb2FkKTtcclxuICAgICAgICAgICAgaWYgKHJwcykge1xyXG4gICAgICAgICAgICAgICAgcnBzLmZvckVhY2goKHZhbHVlOiBSZXNSZWNvcmQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBvb3BzLnJlcy5yZWxlYXNlKHZhbHVlLnBhdGgsIHZhbHVlLmJ1bmRsZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJwcy5jbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDph4rmlL7mlofku7blpLnnmoTotYTmupAgKi9cclxuICAgIHJlbGVhc2VEaXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzUGF0aHMpIHtcclxuICAgICAgICAgICAgY29uc3QgcnBzID0gdGhpcy5yZXNQYXRocy5nZXQoUmVzVHlwZS5Mb2FkRGlyKTtcclxuICAgICAgICAgICAgaWYgKHJwcykge1xyXG4gICAgICAgICAgICAgICAgcnBzLmZvckVhY2goKHZhbHVlOiBSZXNSZWNvcmQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBvb3BzLnJlcy5yZWxlYXNlRGlyKHZhbHVlLnBhdGgsIHZhbHVlLmJ1bmRsZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6YeK5pS+6Z+z5pWI6LWE5rqQICovXHJcbiAgICByZWxlYXNlQXVkaW9FZmZlY3QoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzUGF0aHMpIHtcclxuICAgICAgICAgICAgY29uc3QgcnBzID0gdGhpcy5yZXNQYXRocy5nZXQoUmVzVHlwZS5BdWRpbyk7XHJcbiAgICAgICAgICAgIGlmIChycHMpIHtcclxuICAgICAgICAgICAgICAgIHJwcy5mb3JFYWNoKCh2YWx1ZTogUmVzUmVjb3JkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb29wcy5hdWRpby5wdXRFZmZlY3QodmFsdWUucmVzSWQhLCB2YWx1ZS5wYXRoLCB2YWx1ZS5idW5kbGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7lm77niYfotYTmupBcclxuICAgICAqIEBwYXJhbSB0YXJnZXQgIOebruagh+eyvueBteWvueixoVxyXG4gICAgICogQHBhcmFtIHBhdGggICAg5Zu+54mH6LWE5rqQ5Zyw5Z2AXHJcbiAgICAgKiBAcGFyYW0gYnVuZGxlICDotYTmupDljIXlkI1cclxuICAgICAqL1xyXG4gICAgYXN5bmMgc2V0U3ByaXRlKHRhcmdldDogU3ByaXRlLCBwYXRoOiBzdHJpbmcsIGJ1bmRsZTogc3RyaW5nID0gcmVzTG9hZGVyLmRlZmF1bHRCdW5kbGVOYW1lKSB7XHJcbiAgICAgICAgY29uc3Qgc3ByaXRlRnJhbWUgPSBhd2FpdCB0aGlzLmxvYWRBc3luYyhidW5kbGUsIHBhdGgsIFNwcml0ZUZyYW1lKTtcclxuICAgICAgICBpZiAoIXNwcml0ZUZyYW1lIHx8ICFpc1ZhbGlkKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgY29uc3QgcnBzID0gdGhpcy5yZXNQYXRocy5nZXQoUmVzVHlwZS5Mb2FkKTtcclxuICAgICAgICAgICAgaWYgKHJwcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRSZXNLZXkoYnVuZGxlLCBwYXRoKTtcclxuICAgICAgICAgICAgICAgIHJwcy5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgICAgIG9vcHMucmVzLnJlbGVhc2UocGF0aCwgYnVuZGxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldC5zcHJpdGVGcmFtZSA9IHNwcml0ZUZyYW1lO1xyXG4gICAgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgLy8jcmVnaW9uIOmfs+mikeaSreaUvueuoeeQhlxyXG4gICAgLyoqXHJcbiAgICAgKiDmkq3mlL7og4zmma/pn7PkuZDvvIjkuI3lj5foh6rliqjph4rmlL7otYTmupDnrqHnkIbvvIlcclxuICAgICAqIEBwYXJhbSB1cmwgICAgICAgICAgIOi1hOa6kOWcsOWdgFxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrICAgICAg6LWE5rqQ5Yqg6L295a6M5oiQ5Zue6LCDXHJcbiAgICAgKiBAcGFyYW0gYnVuZGxlTmFtZSAgICDotYTmupDljIXlkI1cclxuICAgICAqL1xyXG4gICAgcGxheU11c2ljKHVybDogc3RyaW5nLCBjYWxsYmFjaz86IEZ1bmN0aW9uLCBidW5kbGVOYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgb29wcy5hdWRpby5wbGF5TXVzaWModXJsLCBjYWxsYmFjaywgYnVuZGxlTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvqrnjq/mkq3mlL7og4zmma/pn7PkuZDvvIjkuI3lj5foh6rliqjph4rmlL7otYTmupDnrqHnkIbvvIlcclxuICAgICAqIEBwYXJhbSB1cmwgICAgICAgICAgIOi1hOa6kOWcsOWdgFxyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUgICAg6LWE5rqQ5YyF5ZCNXHJcbiAgICAgKi9cclxuICAgIHBsYXlNdXNpY0xvb3AodXJsOiBzdHJpbmcsIGJ1bmRsZU5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBvb3BzLmF1ZGlvLnN0b3BNdXNpYygpO1xyXG4gICAgICAgIG9vcHMuYXVkaW8ucGxheU11c2ljTG9vcCh1cmwsIGJ1bmRsZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pKt5pS+6Z+z5pWIXHJcbiAgICAgKiBAcGFyYW0gdXJsICAgICAgICAgICDotYTmupDlnLDlnYBcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAgICAgIOi1hOa6kOWKoOi9veWujOaIkOWbnuiwg1xyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUgICAg6LWE5rqQ5YyF5ZCNXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHBsYXlFZmZlY3QodXJsOiBzdHJpbmcsIGJ1bmRsZU5hbWU/OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoYnVuZGxlTmFtZSA9PSBudWxsKSBidW5kbGVOYW1lID0gb29wcy5yZXMuZGVmYXVsdEJ1bmRsZU5hbWU7XHJcbiAgICAgICAgYXdhaXQgb29wcy5hdWRpby5wbGF5RWZmZWN0KHVybCwgYnVuZGxlTmFtZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBycHMgPSB0aGlzLnJlc1BhdGhzLmdldChSZXNUeXBlLkF1ZGlvKTtcclxuICAgICAgICAgICAgaWYgKHJwcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5nZXRSZXNLZXkoYnVuZGxlTmFtZSwgdXJsKTtcclxuICAgICAgICAgICAgICAgIHJwcy5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWRkUGF0aFRvUmVjb3JkKFJlc1R5cGUuQXVkaW8sIGJ1bmRsZU5hbWUsIHVybCk7XHJcbiAgICB9XHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAvLyNyZWdpb24g5ri45oiP6YC76L6R5LqL5Lu2XHJcbiAgICAvKipcclxuICAgICAqIOaJuemHj+iuvue9ruW9k+WJjeeVjOmdouaMiemSruS6i+S7tlxyXG4gICAgICogQHBhcmFtIGJpbmRSb290RXZlbnQgIOaYr+WQpuWvuemihOWItuagueiKgueCuee7keWumuinpuaRuOS6i+S7tlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIOazqO+8muaMiemSruiKgueCuUxhYmVsMeOAgUxhYmVsMuW/hemhu+e7keWumlVJQnV0dG9u562J57G75Z6L55qE5oyJ6ZKu57uE5Lu25omN5Lya55Sf5pWI77yM5pa55rOV5ZCN5b+F6aG75LiO6IqC54K55ZCN5LiA6Ie0XHJcbiAgICAgKiB0aGlzLnNldEJ1dHRvbigpO1xyXG4gICAgICpcclxuICAgICAqIExhYmVsMShldmVudDogRXZlbnRUb3VjaCkgeyBjb25zb2xlLmxvZyhldmVudC50YXJnZXQubmFtZSk7IH1cclxuICAgICAqIExhYmVsMihldmVudDogRXZlbnRUb3VjaCkgeyBjb25zb2xlLmxvZyhldmVudC50YXJnZXQubmFtZSk7IH1cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHNldEJ1dHRvbihiaW5kUm9vdEV2ZW50OiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIC8vIOiHquWumuS5ieaMiemSruaJuemHj+e7keWumuinpuaRuOS6i+S7tlxyXG4gICAgICAgIGlmIChiaW5kUm9vdEV2ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIChldmVudDogRXZlbnRUb3VjaCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSBzZWxmW2V2ZW50LnRhcmdldC5uYW1lXTtcclxuICAgICAgICAgICAgICAgIGlmIChmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZnVuYy5jYWxsKHRoaXMsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOS4jeinpuWPkeeVjOmdouagueiKgueCueinpuaRuOS6i+S7tuOAgeS4jeinpuWPkemVv+aMiemSrue7hOS7tueahOinpuaRuOS6i+S7tlxyXG4gICAgICAgICAgICAgICAgLy8gZWxzZSBpZiAoZXZlbnQudGFyZ2V0ICE9IHRoaXMubm9kZSAmJiBldmVudC50YXJnZXQuZ2V0Q29tcG9uZW50KEJ1dHRvblRvdWNoTG9uZykgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUud2Fybihg5ZCN5Li644CQJHtldmVudC50YXJnZXQubmFtZX3jgJHnmoTmjInpkq7kuovku7bmlrnms5XkuI3lrZjlnKhgKTtcclxuICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb2NvcyBDcmVhdG9yIEJ1dHRvbue7hOS7tuaJuemHj+e7keWumuinpuaRuOS6i+S7tu+8iOS9v+eUqFVJQnV0dG9u5pSv5oyB5pS+6L+e54K55Yqf6IO977yJXHJcbiAgICAgICAgY29uc3QgcmVnZXggPSAvPChbXj5dKyk+LztcclxuICAgICAgICBjb25zdCBidXR0b25zID0gdGhpcy5ub2RlLmdldENvbXBvbmVudHNJbkNoaWxkcmVuPEJ1dHRvbj4oQnV0dG9uKTtcclxuICAgICAgICBidXR0b25zLmZvckVhY2goKGI6IEJ1dHRvbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBub2RlID0gYi5ub2RlO1xyXG4gICAgICAgICAgICBjb25zdCBzZWxmOiBhbnkgPSB0aGlzO1xyXG4gICAgICAgICAgICBjb25zdCBmdW5jID0gc2VsZltub2RlLm5hbWVdO1xyXG4gICAgICAgICAgICBpZiAoZnVuYykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgRXZlbnRIYW5kbGVyKCk7XHJcbiAgICAgICAgICAgICAgICBldmVudC50YXJnZXQgPSB0aGlzLm5vZGU7XHJcbiAgICAgICAgICAgICAgICBldmVudC5oYW5kbGVyID0gYi5ub2RlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBldmVudC5jb21wb25lbnQgPSB0aGlzLm5hbWUubWF0Y2gocmVnZXgpIVsxXTtcclxuICAgICAgICAgICAgICAgIGIuY2xpY2tFdmVudHMucHVzaChldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLndhcm4oYOWQjeS4uuOAkCR7bm9kZS5uYW1lfeOAkeeahOaMiemSruS6i+S7tuaWueazleS4jeWtmOWcqGApO1xyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmibnph4/orr7nva7lhajlsYDkuovku7ZcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiAgdGhpcy5zZXRFdmVudChcIm9uR2xvYmFsXCIpO1xyXG4gICAgICogIHRoaXMuZGlzcGF0Y2hFdmVudChcIm9uR2xvYmFsXCIsIFwi5YWo5bGA5LqL5Lu2XCIpO1xyXG4gICAgICpcclxuICAgICAqICBvbkdsb2JhbChldmVudDogc3RyaW5nLCBhcmdzOiBhbnkpIHsgY29uc29sZS5sb2coYXJncykgfTtcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHNldEV2ZW50KC4uLmFyZ3M6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZjogYW55ID0gdGhpcztcclxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgYXJncykge1xyXG4gICAgICAgICAgICBjb25zdCBmdW5jID0gc2VsZltuYW1lXTtcclxuICAgICAgICAgICAgaWYgKGZ1bmMpXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKG5hbWUsIGZ1bmMsIHRoaXMpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGDlkI3kuLrjgJAke25hbWV944CR55qE5YWo5bGA5LqL5pa55rOV5LiN5a2Y5ZyoYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6ZSu55uY5LqL5Lu25byA5YWzXHJcbiAgICAgKiBAcGFyYW0gb24g5omT5byA6ZSu55uY5LqL5Lu25Li6dHJ1ZVxyXG4gICAgICovXHJcbiAgICBzZXRLZXlib2FyZChvbjogYm9vbGVhbikge1xyXG4gICAgICAgIGlmIChvbikge1xyXG4gICAgICAgICAgICBpbnB1dC5vbihJbnB1dC5FdmVudFR5cGUuS0VZX0RPV04sIHRoaXMub25LZXlEb3duLCB0aGlzKTtcclxuICAgICAgICAgICAgaW5wdXQub24oSW5wdXQuRXZlbnRUeXBlLktFWV9VUCwgdGhpcy5vbktleVVwLCB0aGlzKTtcclxuICAgICAgICAgICAgaW5wdXQub24oSW5wdXQuRXZlbnRUeXBlLktFWV9QUkVTU0lORywgdGhpcy5vbktleVByZXNzaW5nLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlucHV0Lm9mZihJbnB1dC5FdmVudFR5cGUuS0VZX0RPV04sIHRoaXMub25LZXlEb3duLCB0aGlzKTtcclxuICAgICAgICAgICAgaW5wdXQub2ZmKElucHV0LkV2ZW50VHlwZS5LRVlfVVAsIHRoaXMub25LZXlVcCwgdGhpcyk7XHJcbiAgICAgICAgICAgIGlucHV0Lm9mZihJbnB1dC5FdmVudFR5cGUuS0VZX1BSRVNTSU5HLCB0aGlzLm9uS2V5UHJlc3NpbmcsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6ZSu5oyJ5LiLICovXHJcbiAgICBwcm90ZWN0ZWQgb25LZXlEb3duKGV2ZW50OiBFdmVudEtleWJvYXJkKSB7IH1cclxuXHJcbiAgICAvKiog6ZSu5pS+5byAICovXHJcbiAgICBwcm90ZWN0ZWQgb25LZXlVcChldmVudDogRXZlbnRLZXlib2FyZCkgeyB9XHJcblxyXG4gICAgLyoqIOmUrumVv+aMiSAqL1xyXG4gICAgcHJvdGVjdGVkIG9uS2V5UHJlc3NpbmcoZXZlbnQ6IEV2ZW50S2V5Ym9hcmQpIHsgfVxyXG5cclxuICAgIC8qKiDnm5HlkKzmuLjmiI/ku47lkI7lj7Dov5vlhaXkuovku7YgKi9cclxuICAgIHByb3RlY3RlZCBzZXRHYW1lU2hvdygpIHtcclxuICAgICAgICB0aGlzLm9uKEV2ZW50TWVzc2FnZS5HQU1FX1NIT1csIHRoaXMub25HYW1lU2hvdywgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOebkeWQrOa4uOaIj+WIh+WIsOWQjuWPsOS6i+S7tiAqL1xyXG4gICAgcHJvdGVjdGVkIHNldEdhbWVIaWRlKCkge1xyXG4gICAgICAgIHRoaXMub24oRXZlbnRNZXNzYWdlLkdBTUVfSElERSwgdGhpcy5vbkdhbWVIaWRlLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog55uR5ZCs5ri45oiP55S756yU5bC65a+45Y+Y5YyW5LqL5Lu2ICovXHJcbiAgICBwcm90ZWN0ZWQgc2V0R2FtZVJlc2l6ZSgpIHtcclxuICAgICAgICB0aGlzLm9uKEV2ZW50TWVzc2FnZS5HQU1FX1JFU0laRSwgdGhpcy5vbkdhbWVSZXNpemUsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDnm5HlkKzmuLjmiI/lhajlsY/kuovku7YgKi9cclxuICAgIHByb3RlY3RlZCBzZXRHYW1lRnVsbFNjcmVlbigpIHtcclxuICAgICAgICB0aGlzLm9uKEV2ZW50TWVzc2FnZS5HQU1FX0ZVTExfU0NSRUVOLCB0aGlzLm9uR2FtZUZ1bGxTY3JlZW4sIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDnm5HlkKzmuLjmiI/ml4vovazlsY/luZXkuovku7YgKi9cclxuICAgIHByb3RlY3RlZCBzZXRHYW1lT3JpZW50YXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5vbihFdmVudE1lc3NhZ2UuR0FNRV9PUklFTlRBVElPTiwgdGhpcy5vbkdhbWVPcmllbnRhdGlvbiwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOa4uOaIj+S7juWQjuWPsOi/m+WFpeS6i+S7tuWbnuiwgyAqL1xyXG4gICAgcHJvdGVjdGVkIG9uR2FtZVNob3coKTogdm9pZCB7IH1cclxuXHJcbiAgICAvKiog5ri45oiP5YiH5Yiw5ZCO5Y+w5LqL5Lu25Zue6LCDICovXHJcbiAgICBwcm90ZWN0ZWQgb25HYW1lSGlkZSgpOiB2b2lkIHsgfVxyXG5cclxuICAgIC8qKiDmuLjmiI/nlLvnrJTlsLrlr7jlj5jljJbkuovku7blm57osIMgKi9cclxuICAgIHByb3RlY3RlZCBvbkdhbWVSZXNpemUoKTogdm9pZCB7IH1cclxuXHJcbiAgICAvKiog5ri45oiP5YWo5bGP5LqL5Lu25Zue6LCDICovXHJcbiAgICBwcm90ZWN0ZWQgb25HYW1lRnVsbFNjcmVlbigpOiB2b2lkIHsgfVxyXG5cclxuICAgIC8qKiDmuLjmiI/ml4vovazlsY/luZXkuovku7blm57osIMgKi9cclxuICAgIHByb3RlY3RlZCBvbkdhbWVPcmllbnRhdGlvbigpOiB2b2lkIHsgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgcHJvdGVjdGVkIG9uRGVzdHJveSgpIHtcclxuICAgICAgICAvLyDph4rmlL7mtojmga/lr7nosaFcclxuICAgICAgICBpZiAodGhpcy5fZXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXZlbnQuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9ldmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDoioLngrnlvJXnlKjmlbDmja7muIXpmaRcclxuICAgICAgICBpZiAodGhpcy5ub2Rlcykge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZXMgPSBudWxsITtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOiHquWKqOmHiuaUvui1hOa6kFxyXG4gICAgICAgIGlmICh0aGlzLnJlc1BhdGhzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZUF1ZGlvRWZmZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbGVhc2VEaXIoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNQYXRocy5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc1BhdGhzID0gbnVsbCE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0wNy0wMyAxNjoxMzoxN1xyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMi0xNCAxNDoyNzoyMlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IG9vcHMgfSBmcm9tIFwiLi4vLi4vY29yZS9Pb3BzXCI7XHJcblxyXG4vKiDmuLjmiI/phY3nva7op6PmnpDvvIzlr7nlupQgcmVzb3VyY2VzL2NvbmZpZy9jb25maWcuanNvbiDphY3nva4gKi9cclxuZXhwb3J0IGNsYXNzIEdhbWVDb25maWcge1xyXG4gICAgLyoqIOWuouaIt+err+eJiOacrOWPt+mFjee9riAqL1xyXG4gICAgZ2V0IHZlcnNpb24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtcImNvbmZpZ1wiXVtcInZlcnNpb25cIl07XHJcbiAgICB9XHJcbiAgICAvKiog5YyF5ZCNICovXHJcbiAgICBnZXQgcGFja2FnZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhW1wiY29uZmlnXCJdW1wicGFja2FnZVwiXTtcclxuICAgIH1cclxuICAgIC8qKiDmuLjmiI/mr4/np5LkvKDovpPluKfmlbAgKi9cclxuICAgIGdldCBmcmFtZVJhdGUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5jb25maWcuZnJhbWVSYXRlO1xyXG4gICAgfVxyXG4gICAgLyoqIOacrOWcsOWtmOWCqOWGheWuueWKoOWvhiBrZXkgKi9cclxuICAgIGdldCBsb2NhbERhdGFLZXkoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5jb25maWcubG9jYWxEYXRhS2V5O1xyXG4gICAgfVxyXG4gICAgLyoqIOacrOWcsOWtmOWCqOWGheWuueWKoOWvhiBpdiAqL1xyXG4gICAgZ2V0IGxvY2FsRGF0YUl2KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuY29uZmlnLmxvY2FsRGF0YUl2O1xyXG4gICAgfVxyXG4gICAgLyoqIEh0dHAg5pyN5Yqh5Zmo5Zyw5Z2AICovXHJcbiAgICBnZXQgaHR0cFNlcnZlcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmNvbmZpZy5odHRwU2VydmVyO1xyXG4gICAgfVxyXG4gICAgLyoqIEh0dHAg6K+35rGC6LaF5pe25pe26Ze0ICovXHJcbiAgICBnZXQgaHR0cFRpbWVvdXQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5jb25maWcuaHR0cFRpbWVvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiOt+WPluW9k+WJjeWuouaIt+err+aUr+aMgeeahOivreiogOexu+WeiyAqL1xyXG4gICAgZ2V0IGxhbmd1YWdlKCk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmxhbmd1YWdlLnR5cGUgfHwgW1wiemhcIl07XHJcbiAgICB9XHJcbiAgICAvKiog6I635Y+W5b2T5YmN5a6i5oi356uv5pSv5oyB55qE6K+t6KiAIEpzb24g6YWN572u6Lev5b6EICovXHJcbiAgICBnZXQgbGFuZ3VhZ2VQYXRoSnNvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmxhbmd1YWdlLnBhdGguanNvbiB8fCBcImxhbmd1YWdlL2pzb25cIjtcclxuICAgIH1cclxuICAgIC8qKiDojrflj5blvZPliY3lrqLmiLfnq6/mlK/mjIHnmoTor63oqIDnurnnkIbphY3nva7ot6/lvoQgKi9cclxuICAgIGdldCBsYW5ndWFnZVBhdGhUZXh0dXJlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEubGFuZ3VhZ2UucGF0aC50ZXh0dXJlIHx8IFwibGFuZ3VhZ2UvdGV4dHVyZVwiO1xyXG4gICAgfVxyXG4gICAgLyoqIOm7mOiupOivreiogCAqL1xyXG4gICAgZ2V0IGxhbmd1YWdlRGVmYXVsdCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmxhbmd1YWdlLmRlZmF1bHQgfHwgXCJ6aFwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmmK/lkKblkK/nlKjov5znqIvotYTmupAgKi9cclxuICAgIGdldCBidW5kbGVFbmFibGUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5idW5kbGUuZW5hYmxlO1xyXG4gICAgfVxyXG4gICAgLyoqIOi/nOeoi+i1hOa6kOacjeWKoeWZqOWcsOWdgCAqL1xyXG4gICAgZ2V0IGJ1bmRsZVNlcnZlcigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmJ1bmRsZS5zZXJ2ZXI7XHJcbiAgICB9XHJcbiAgICAvKiog6L+c56iL6LWE5rqQ5ZCNICovXHJcbiAgICBnZXQgYnVuZGxlRGVmYXVsdCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmJ1bmRsZS5kZWZhdWx0O1xyXG4gICAgfVxyXG4gICAgLyoqIOi/nOeoi+aJgOaciei1hOa6kOWMhemFjee9riAqL1xyXG4gICAgZ2V0IGJ1bmRsZVBhY2thZ2VzKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuYnVuZGxlLnBhY2thZ2VzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliqDovb3nlYzpnaLotYTmupDotoXml7bmj5DnpLogKi9cclxuICAgIGdldCBsb2FkaW5nVGltZW91dEd1aSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmNvbmZpZy5sb2FkaW5nVGltZW91dEd1aSB8fCAxMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmmK/lkKblvIDlkK/np7vliqjorr7lpIflronlhajljLrln5/pgILphY0gKi9cclxuICAgIGdldCBtb2JpbGVTYWZlQXJlYSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5jb25maWcubW9iaWxlU2FmZUFyZWEgfHwgZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZGF0YTogYW55ID0gbnVsbDtcclxuICAgIC8qKiDmuLjmiI/phY3nva7mlbDmja4gKi9cclxuICAgIGdldCBkYXRhKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl9kYXRhID0gT2JqZWN0LmZyZWV6ZShjb25maWcuanNvbik7XHJcblxyXG4gICAgICAgIG9vcHMubG9nLmxvZ0NvbmZpZyh0aGlzLl9kYXRhLCBcIua4uOaIj+mFjee9rlwiKTtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjEtMTEtMjMgMTU6Mjg6MzlcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDEtMjYgMTY6NDI6MDBcclxuICovXHJcblxyXG4vKiog5ri45oiP5LqL5Lu2ICovXHJcbmV4cG9ydCBlbnVtIEdhbWVFdmVudCB7XHJcbiAgICAvKiog5ri45oiP5pyN5Yqh5Zmo6L+e5o6l5oiQ5YqfICovXHJcbiAgICBHYW1lU2VydmVyQ29ubmVjdGVkID0gXCJHYW1lU2VydmVyQ29ubmVjdGVkXCIsXHJcbiAgICAvKiog55m76ZmG5oiQ5YqfICovXHJcbiAgICBMb2dpblN1Y2Nlc3MgPSBcIkxvZ2luU3VjY2Vzc1wiLFxyXG4gICAgLyoqIOaSreaUvuWQuOWwmOWZqOWKqOeUuyAqL1xyXG4gICAgVmFjdXVtQ2xlYW5lckFuaSA9IFwiVmFjdXVtQ2xlYW5lckFuaVwiLFxyXG4gICAgLyoqIOaSreaUvua1t+e7teWKqOeUuyAqL1xyXG4gICAgSG0gPSBcIkhtXCIsXHJcbiAgICAvKiog5L+u5pS56YCJ6aG55Zu+54mHICovXHJcbiAgICBtb2RpZnlGdW5JbWcgPSBcIm1vZGlmeUZ1bkltZ1wiLFxyXG5cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDItMTAgMDk6NTA6NDFcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDIgMTI6MDk6NTVcclxuICovXHJcbmltcG9ydCB7IE5vZGUsIGRpcmVjdG9yIH0gZnJvbSAnY2MnO1xyXG5cclxuLyoqIOa4uOaIj+S4lueVjOeuoeeQhiAqL1xyXG5leHBvcnQgY2xhc3MgR2FtZU1hbmFnZXIge1xyXG4gICAgLyoqIOeVjOmdouagueiKgueCuSAqL1xyXG4gICAgcm9vdCE6IE5vZGU7XHJcblxyXG4gICAgY29uc3RydWN0b3Iocm9vdDogTm9kZSkge1xyXG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiuvue9rua4uOaIj+WKqOeUu+mAn+W6piAqL1xyXG4gICAgc2V0VGltZVNjYWxlKHNjYWxlOiBudW1iZXIpIHtcclxuICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICBkaXJlY3Rvci5nbG9iYWxHYW1lVGltZVNjYWxlID0gc2NhbGU7XHJcbiAgICB9XHJcbiAgICAvKiog6I635Y+W5ri45oiP5Yqo55S76YCf5bqmICovXHJcbiAgICBnZXRUaW1lU2NhbGUoKSB7XHJcbiAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgcmV0dXJuIGRpcmVjdG9yLmdsb2JhbEdhbWVUaW1lU2NhbGU7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wNC0xNCAxNzowODowMVxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wNiAxNzoyOTo0NVxyXG4gKi9cclxuaW1wb3J0IHsgc3lzIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IG9vcHMgfSBmcm9tIFwiLi4vLi4vY29yZS9Pb3BzXCI7XHJcbmltcG9ydCB7IFN0cmluZ1V0aWwgfSBmcm9tIFwiLi4vLi4vY29yZS91dGlscy9TdHJpbmdVdGlsXCI7XHJcblxyXG4vKipcclxuICog6I635Y+W5ZKM5aSE55CG5rWP6KeI5Zmo5Zyw5Z2A5qCP5Y+C5pWwXHJcbiAqIEBleGFtcGxlXHJcbiAqIGNvbmZpZy5xdWVyeS5kYXRhLnVzZXJuYW1lXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR2FtZVF1ZXJ5Q29uZmlnIHtcclxuICAgIC8qKiDosIPor5XmqKHlvI/lvIDlhbMgKi9cclxuICAgIGdldCBkZWJ1ZygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhW1wiZGVidWdcIl07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOeOqeWutuW4kOWPt+WQjSAqL1xyXG4gICAgZ2V0IHVzZXJuYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFbXCJ1c2VybmFtZVwiXTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6K+t6KiAICovXHJcbiAgICBnZXQgbGFuZygpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhW1wibGFuZ1wiXSB8fCBcInpoXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZGF0YTogYW55ID0gbnVsbDtcclxuICAgIC8qKiDmtY/op4jlmajlnLDlnYDmoI/ljp/lp4vlj4LmlbAgKi9cclxuICAgIGdldCBkYXRhKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaehOmAoOWHveaVsCAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgaWYgKCFzeXMuaXNCcm93c2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9kYXRhID0gdGhpcy5wYXJzZVVybCgpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuX2RhdGFbXCJ1c2VybmFtZVwiXSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhW1widXNlcm5hbWVcIl0gPSBTdHJpbmdVdGlsLmd1aWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9vcHMubG9nLmxvZ0NvbmZpZyh0aGlzLl9kYXRhLCBcIuafpeivouWPguaVsFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBhcnNlVXJsKCkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcIm9iamVjdFwiKSByZXR1cm4ge307XHJcbiAgICAgICAgaWYgKCF3aW5kb3cuZG9jdW1lbnQpIHJldHVybiB7fTtcclxuXHJcbiAgICAgICAgbGV0IHVybCA9IHdpbmRvdy5kb2N1bWVudC5sb2NhdGlvbi5ocmVmLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgbGV0IHUgPSB1cmwuc3BsaXQoXCI/XCIpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgKHVbMV0pID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdSA9IHVbMV0uc3BsaXQoXCImXCIpO1xyXG4gICAgICAgICAgICBsZXQgZ2V0OiBhbnkgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB1Lmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGogPSB1W2ldO1xyXG4gICAgICAgICAgICAgICAgbGV0IHggPSBqLmluZGV4T2YoXCI9XCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHggPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gai5zdWJzdHJpbmcoMCwgeCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBqLnN1YnN0cmluZyh4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICBnZXRbZGVjb2RlVVJJQ29tcG9uZW50KGtleSldID0gdmFsdWUgJiYgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjMtMDEtMTggMTA6NDY6NDBcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjMtMDEtMTggMTA6NDY6NTNcclxuICovXHJcbi8qKiDmnKzlnLDlrZjlgqjlkI3phY3nva4gKi9cclxuZXhwb3J0IGVudW0gR2FtZVN0b3JhZ2VDb25maWcge1xyXG4gICAgLyoqIOeOqeWutuW4kOWPt+WQjSAqL1xyXG4gICAgQWNjb3VudE5hbWUgPSBcIkFjY291bnROYW1lXCJcclxufSIsIi8qXHJcbiAqIEBEYXRlOiAyMDIxLTA4LTEyIDA5OjMzOjM3XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTAyLTE1IDA5OjM4OjM2XHJcbiAqL1xyXG5pbXBvcnQgeyBMYXllclR5cGUsIFVJQ29uZmlnIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL2d1aS9sYXllci9MYXllck1hbmFnZXJcIjtcclxuXHJcbi8qKiDnlYzpnaLllK/kuIDmoIfor4bvvIjmlrnkvr/mnI3liqHlmajpgJrov4fnvJblj7fmlbDmja7op6blj5HnlYzpnaLmiZPlvIDvvIkgKi9cclxuZXhwb3J0IGVudW0gVUlJRCB7XHJcbiAgICAvKiog6LWE5rqQ5Yqg6L2955WM6Z2iICovXHJcbiAgICBMb2FkaW5nID0gMSxcclxuICAgIC8qKiDmj5DnpLrlvLnlh7rnqpflj6MgKi9cclxuICAgIEFsZXJ0PTIsXHJcbiAgICAvKiog56Gu6K6k5by55Ye656qX5Y+jICovXHJcbiAgICBDb25maXJtPTMsXHJcbiAgICAvKiogREVNTyAqL1xyXG4gICAgRGVtbz00LFxyXG4gICAgLyoqIOS4u+eVjOmdoiAqL1xyXG4gICAgTWFpbj01LFxyXG4gICAgLyoqIOmAieaLqeWKn+iDveeVjOmdoiAqL1xyXG4gICAgc2VsZWN0RnVuPTYsXHJcbn1cclxuXHJcbi8qKiDmiZPlvIDnlYzpnaLmlrnlvI/nmoTphY3nva7mlbDmja4gKi9cclxuZXhwb3J0IHZhciBVSUNvbmZpZ0RhdGE6IHsgW2tleTogbnVtYmVyXTogVUlDb25maWcgfSA9IHtcclxuICAgIFtVSUlELkxvYWRpbmddOiB7IGxheWVyOiBMYXllclR5cGUuVUksIHByZWZhYjogXCJndWkvbG9hZGluZy9sb2FkaW5nXCIgfSxcclxuICAgIFtVSUlELkFsZXJ0XTogeyBsYXllcjogTGF5ZXJUeXBlLkRpYWxvZywgcHJlZmFiOiBcImNvbW1vbi9wcmVmYWIvYWxlcnRcIiB9LFxyXG4gICAgW1VJSUQuQ29uZmlybV06IHsgbGF5ZXI6IExheWVyVHlwZS5EaWFsb2csIHByZWZhYjogXCJjb21tb24vcHJlZmFiL2NvbmZpcm1cIiB9LFxyXG4gICAgW1VJSUQuRGVtb106IHsgbGF5ZXI6IExheWVyVHlwZS5VSSwgcHJlZmFiOiBcImd1aS9kZW1vL2RlbW9cIiB9LFxyXG4gICAgW1VJSUQuTWFpbl06IHsgbGF5ZXI6IExheWVyVHlwZS5VSSwgcHJlZmFiOiBcImd1aS9tYWluL21haW5cIiB9LFxyXG4gICAgW1VJSUQuc2VsZWN0RnVuXTogeyBsYXllcjogTGF5ZXJUeXBlLlBvcFVwLCBwcmVmYWI6IFwiZ3VpL3NlbGVjdEZ1bi9zZWxlY3RGdW5cIiB9LFxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wOS0wMSAxODowMDoyOFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wOSAxODoxMDo1MFxyXG4gKi9cclxuaW1wb3J0IHsgZXJyb3IsIHdhcm4gfSBmcm9tIFwiY2NcIjtcclxuXHJcbi8qKlxyXG4gKiDkvb/nlKjmtYHnqIvmlofmoaPlj6/lj4LogIPjgIHnroDljJbkuI7mnI3liqHlmajlr7nmjqXjgIHkvb/nlKjmlrDniYhBUEnkvZPpqozvvIzlj6/ov5vlhaXkuIvpnaLlnLDlnYDojrflj5bmlrDniYjmnKzvvIzmm7/mjaJuZXR3b3Jr55uu5b2V5Lit55qE5YaF5a65XHJcbiAqIGh0dHBzOi8vc3RvcmUuY29jb3MuY29tL2FwcC9kZXRhaWwvNTg3N1xyXG4gKi9cclxuXHJcbi8qKiDlvZPliY3or7fmsYLlnLDlnYDpm4blkIggKi9cclxudmFyIHVybHM6IGFueSA9IHt9O1xyXG4vKiog6K+35rGC5Y+C5pWwICovXHJcbnZhciByZXFwYXJhbXM6IGFueSA9IHt9O1xyXG5cclxudHlwZSBIdHRwQ2FsbGJhY2sgPSAocmV0OiBIdHRwUmV0dXJuKSA9PiB2b2lkO1xyXG5cclxuLyoqIOivt+axguS6i+S7tiAqL1xyXG5leHBvcnQgZW51bSBIdHRwRXZlbnQge1xyXG4gICAgLyoqIOaWree9kSAqL1xyXG4gICAgTk9fTkVUV09SSyA9IFwiaHR0cF9yZXF1ZXN0X25vX25ldHdvcmtcIixcclxuICAgIC8qKiDmnKrnn6XplJnor68gKi9cclxuICAgIFVOS05PV05fRVJST1IgPSBcImh0dHBfcmVxdWVzdF91bmtub3duX2Vycm9yXCIsXHJcbiAgICAvKiog6K+35rGC6LaF5pe2ICovXHJcbiAgICBUSU1FT1VUID0gXCJodHRwX3JlcXVlc3RfdGltb3V0XCJcclxufVxyXG5cclxuLyoqXHJcbiAqIEhUVFDor7fmsYLov5Tlm57lgLxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBIdHRwUmV0dXJuIHtcclxuICAgIC8qKiDmmK/lkKbor7fmsYLmiJDlip8gKi9cclxuICAgIGlzU3VjYzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoqIOivt+axgui/lOWbnuaVsOaNriAqL1xyXG4gICAgcmVzPzogYW55O1xyXG4gICAgLyoqIOivt+axgumUmeivr+aVsOaNriAqL1xyXG4gICAgZXJyPzogYW55O1xyXG59XHJcblxyXG4vKiogSFRUUOivt+axgiAqL1xyXG5leHBvcnQgY2xhc3MgSHR0cFJlcXVlc3Qge1xyXG4gICAgLyoqIOacjeWKoeWZqOWcsOWdgCAqL1xyXG4gICAgc2VydmVyOiBzdHJpbmcgPSBcImh0dHA6Ly8xMjcuMC4wLjEvXCI7XHJcbiAgICAvKiog6K+35rGC6LaF5pe25pe26Ze0ICovXHJcbiAgICB0aW1lb3V0OiBudW1iZXIgPSAxMDAwMDtcclxuICAgIC8qKiDoh6rlrprkuYnor7fmsYLlpLTkv6Hmga8gKi9cclxuICAgIHByaXZhdGUgaGVhZGVyOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOa3u+WKoOiHquWumuS5ieivt+axguWktOS/oeaBr1xyXG4gICAgICogQHBhcmFtIG5hbWUgIOS/oeaBr+WQjVxyXG4gICAgICogQHBhcmFtIHZhbHVlIOS/oeaBr+WAvFxyXG4gICAgICovXHJcbiAgICBhZGRIZWFkZXIobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5oZWFkZXIuc2V0KG5hbWUsIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhUVFAgR0VU6K+35rGCXHJcbiAgICAgKiBAcGFyYW0gbmFtZSAgICAgICAgICAgICAgICAgIOWNj+iuruWQjVxyXG4gICAgICogQHBhcmFtIG9uQ29tcGxldGUgICAgICAgICAgICDor7fmsYLlrozmlbTlm57osIPmlrnms5VcclxuICAgICAqIEBwYXJhbSBwYXJhbXMgICAgICAgICAgICAgICAg5p+l6K+i5Y+C5pWwXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgdmFyIHBhcmFtID0gJ3tcInVpZFwiOjEyMzQ1fSdcclxuICAgIHZhciBjb21wbGV0ZSA9IChyZXQ6IEh0dHBSZXR1cm4pID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXQucmVzKTtcclxuICAgIH1cclxuICAgIG9vcHMuaHR0cC5nZXRXaXRoUGFyYW1zKG5hbWUsIGNvbXBsZXRlLCBwYXJhbSk7XHJcbiAgICAgKi9cclxuICAgIGdldChuYW1lOiBzdHJpbmcsIG9uQ29tcGxldGU6IEh0dHBDYWxsYmFjaywgcGFyYW1zOiBhbnkgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kUmVxdWVzdChuYW1lLCBwYXJhbXMsIGZhbHNlLCBvbkNvbXBsZXRlKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSFRUUCBHRVTor7fmsYJcclxuICAgICAqIEBwYXJhbSBuYW1lICAgICAgICAgICAgICAgICAg5Y2P6K6u5ZCNXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zICAgICAgICAgICAgICAgIOafpeivouWPguaVsFxyXG4gICAgICogQGV4YW1wbGUgXHJcbiAgICB2YXIgdHh0ID0gYXdhaXQgb29wcy5odHRwLmdldEFzeW5jKG5hbWUpO1xyXG4gICAgaWYgKHR4dC5pc1N1Y2MpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyh0eHQucmVzKTtcclxuICAgIH1cclxuICAgICAqL1xyXG4gICAgZ2V0QXN5bmMobmFtZTogc3RyaW5nLCBwYXJhbXM6IGFueSA9IG51bGwpOiBQcm9taXNlPEh0dHBSZXR1cm4+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRSZXF1ZXN0KG5hbWUsIHBhcmFtcywgZmFsc2UsIChyZXQ6IEh0dHBSZXR1cm4pID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUocmV0KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhUVFAgR0VU6K+35rGC6Z2e5paH5pys5qC85byP5pWw5o2uXHJcbiAgICAgKiBAcGFyYW0gbmFtZSAgICAgICAgICAgICAgICAgIOWNj+iuruWQjVxyXG4gICAgICogQHBhcmFtIG9uQ29tcGxldGUgICAgICAgICAgICDor7fmsYLlrozmlbTlm57osIPmlrnms5VcclxuICAgICAqIEBwYXJhbSBwYXJhbXMgICAgICAgICAgICAgICAg5p+l6K+i5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIGdldEJ5QXJyYXlidWZmZXIobmFtZTogc3RyaW5nLCBvbkNvbXBsZXRlOiBIdHRwQ2FsbGJhY2ssIHBhcmFtczogYW55ID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuc2VuZFJlcXVlc3QobmFtZSwgcGFyYW1zLCBmYWxzZSwgb25Db21wbGV0ZSwgJ2FycmF5YnVmZmVyJywgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSFRUUCBHRVTor7fmsYLpnZ7mlofmnKzmoLzlvI/mlbDmja5cclxuICAgICAqIEBwYXJhbSBuYW1lICAgICAgICAgICAgICAgICAg5Y2P6K6u5ZCNXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zICAgICAgICAgICAgICAgIOafpeivouWPguaVsFxyXG4gICAgICogQHJldHVybnMgUHJvbWlzZTxhbnk+XHJcbiAgICAgKi9cclxuICAgIGdldEFzeW5jQnlBcnJheWJ1ZmZlcihuYW1lOiBzdHJpbmcsIHBhcmFtczogYW55ID0gbnVsbCk6IFByb21pc2U8SHR0cFJldHVybj4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZFJlcXVlc3QobmFtZSwgcGFyYW1zLCBmYWxzZSwgKHJldDogSHR0cFJldHVybikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXQpO1xyXG4gICAgICAgICAgICB9LCAnYXJyYXlidWZmZXInLCBmYWxzZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIVFRQIFBPU1Tor7fmsYJcclxuICAgICAqIEBwYXJhbSBuYW1lICAgICAgICAgICAgICAgICAg5Y2P6K6u5ZCNXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zICAgICAgICAgICAgICAgIOafpeivouWPguaVsFxyXG4gICAgICogQHBhcmFtIG9uQ29tcGxldGUgICAgICDor7fmsYLlrozmlbTlm57osIPmlrnms5VcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICB2YXIgcGFyYW0gPSAne1wiTG9naW5Db2RlXCI6XCJkb25nZ2FuZ19kZXZcIixcIlBhc3N3b3JkXCI6XCJlMTBhZGMzOTQ5YmE1OWFiYmU1NmUwNTdmMjBmODgzZVwifSdcclxuICAgIHZhciBjb21wbGV0ZSA9IChyZXQ6IEh0dHBSZXR1cm4pID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXQucmVzKTtcclxuICAgIH1cclxuICAgIG9vcHMuaHR0cC5wb3N0KG5hbWUsIGNvbXBsZXRlLCBwYXJhbSk7XHJcbiAgICAgKi9cclxuICAgIHBvc3QobmFtZTogc3RyaW5nLCBvbkNvbXBsZXRlOiBIdHRwQ2FsbGJhY2ssIHBhcmFtczogYW55ID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuc2VuZFJlcXVlc3QobmFtZSwgcGFyYW1zLCB0cnVlLCBvbkNvbXBsZXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhUVFAgUE9TVOivt+axglxyXG4gICAgICogQHBhcmFtIG5hbWUgICAgICAgICAgICAgICAgICDljY/orq7lkI1cclxuICAgICAqIEBwYXJhbSBwYXJhbXMgICAgICAgICAgICAgICAg5p+l6K+i5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIHBvc3RBc3luYyhuYW1lOiBzdHJpbmcsIHBhcmFtczogYW55ID0gbnVsbCk6IFByb21pc2U8SHR0cFJldHVybj4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZFJlcXVlc3QobmFtZSwgcGFyYW1zLCB0cnVlLCAocmV0OiBIdHRwUmV0dXJuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJldCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+W5raI6K+35rGC5Lit55qE6K+35rGCXHJcbiAgICAgKiBAcGFyYW0gbmFtZSAgICAg5Y2P6K6u5ZCNXHJcbiAgICAgKi9cclxuICAgIGFib3J0KG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHZhciB4aHIgPSB1cmxzW3RoaXMuc2VydmVyICsgbmFtZV07XHJcbiAgICAgICAgaWYgKHhocikge1xyXG4gICAgICAgICAgICB4aHIuYWJvcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflvpflrZfnrKbkuLLlvaLlvI/nmoTlj4LmlbBcclxuICAgICAqIEBwYXJhbSBwYXJhbXMg5Y+C5pWw5a+56LGhXHJcbiAgICAgKiBAcmV0dXJucyDlj4LmlbDlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRQYXJhbVN0cmluZyhwYXJhbXM6IGFueSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xyXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcGFyYW1zKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0gcGFyYW1zW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGAke2tleX09JHtkYXRhW2tleV19JmA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gYCR7bmFtZX09JHtkYXRhfSZgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQuc3Vic3RyaW5nKDAsIHJlc3VsdC5sZW5ndGggLSAxKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiBIdHRw6K+35rGCIFxyXG4gICAgICogQHBhcmFtIG5hbWUoc3RyaW5nKSAgICAgICAgICAgICAg6K+35rGC5Zyw5Z2AXHJcbiAgICAgKiBAcGFyYW0gcGFyYW1zKEpTT04pICAgICAgICAgICAgICDor7fmsYLlj4LmlbBcclxuICAgICAqIEBwYXJhbSBpc1Bvc3QoYm9vbGVuKSAgICAgICAgICAgIOaYr+WQpuS4ulBPU1TmlrnlvI9cclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayhmdW5jdGlvbikgICAgICAgIOivt+axguaIkOWKn+Wbnuiwg1xyXG4gICAgICogQHBhcmFtIHJlc3BvbnNlVHlwZShzdHJpbmcpICAgICAg5ZON5bqU57G75Z6LXHJcbiAgICAgKiBAcGFyYW0gaXNPcGVuVGltZW91dChib29sZWFuKSAgICDmmK/lkKbop6blj5Hor7fmsYLotoXml7bplJnor69cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzZW5kUmVxdWVzdChuYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgcGFyYW1zOiBhbnksXHJcbiAgICAgICAgaXNQb3N0OiBib29sZWFuLFxyXG4gICAgICAgIG9uQ29tcGxldGU6IEh0dHBDYWxsYmFjayxcclxuICAgICAgICByZXNwb25zZVR5cGU/OiBzdHJpbmcsXHJcbiAgICAgICAgaXNPcGVuVGltZW91dDogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICBpZiAobmFtZSA9PSBudWxsIHx8IG5hbWUgPT0gJycpIHtcclxuICAgICAgICAgICAgZXJyb3IoXCLor7fmsYLlnLDlnYDkuI3og73kuLrnqbpcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB1cmw6IHN0cmluZywgbmV3VXJsOiBzdHJpbmcsIHBhcmFtc1N0cjogc3RyaW5nID0gXCJcIjtcclxuICAgICAgICBpZiAobmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpLmluZGV4T2YoXCJodHRwXCIpID09IDApIHtcclxuICAgICAgICAgICAgdXJsID0gbmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHVybCA9IHRoaXMuc2VydmVyICsgbmFtZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXJhbXMpIHtcclxuICAgICAgICAgICAgcGFyYW1zU3RyID0gdGhpcy5nZXRQYXJhbVN0cmluZyhwYXJhbXMpO1xyXG4gICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoXCI/XCIpID4gLTEpXHJcbiAgICAgICAgICAgICAgICBuZXdVcmwgPSB1cmwgKyBcIiZcIiArIHBhcmFtc1N0cjtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgbmV3VXJsID0gdXJsICsgXCI/XCIgKyBwYXJhbXNTdHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuZXdVcmwgPSB1cmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodXJsc1tuZXdVcmxdICE9IG51bGwgJiYgcmVxcGFyYW1zW25ld1VybF0gPT0gcGFyYW1zU3RyKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYOWcsOWdgOOAkCR7dXJsfeOAkeW3suato+WcqOivt+axguS4re+8jOS4jeiDvemHjeWkjeivt+axgmApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG4gICAgICAgIC8vIOmYsumHjeWkjeivt+axguWKn+iDvVxyXG4gICAgICAgIHVybHNbbmV3VXJsXSA9IHhocjtcclxuICAgICAgICByZXFwYXJhbXNbbmV3VXJsXSA9IHBhcmFtc1N0cjtcclxuXHJcbiAgICAgICAgaWYgKGlzUG9zdCkge1xyXG4gICAgICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHhoci5vcGVuKFwiR0VUXCIsIG5ld1VybCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmt7vliqDoh6rlrprkuYnor7fmsYLlpLTkv6Hmga9cclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLmhlYWRlcikge1xyXG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8geGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOFwiKTtcclxuICAgICAgICAvLyB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9dXRmLThcIik7XHJcblxyXG4gICAgICAgIHZhciBkYXRhOiBhbnkgPSB7fTtcclxuICAgICAgICBkYXRhLnVybCA9IHVybDtcclxuICAgICAgICBkYXRhLnBhcmFtcyA9IHBhcmFtcztcclxuXHJcbiAgICAgICAgLy8g6K+35rGC6LaF5pe2XHJcbiAgICAgICAgaWYgKGlzT3BlblRpbWVvdXQpIHtcclxuICAgICAgICAgICAgeGhyLnRpbWVvdXQgPSB0aGlzLnRpbWVvdXQ7XHJcbiAgICAgICAgICAgIHhoci5vbnRpbWVvdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZUNhY2hlKG5ld1VybCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0LmlzU3VjYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0LmVyciA9IEh0dHBFdmVudC5USU1FT1VUOyAgICAgICAgICAgICAgICAvLyDotoXml7ZcclxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGUoZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOWTjeW6lOe7k+aenFxyXG4gICAgICAgIHZhciByZXQ6IEh0dHBSZXR1cm4gPSBuZXcgSHR0cFJldHVybigpO1xyXG5cclxuICAgICAgICB4aHIub25sb2FkZW5kID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSA1MDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlQ2FjaGUobmV3VXJsKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXQuaXNTdWNjID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXQuZXJyID0gSHR0cEV2ZW50Lk5PX05FVFdPUks7ICAgICAgICAgICAgIC8vIOaWree9kVxyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZShyZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB4aHIub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kZWxldGVDYWNoZShuZXdVcmwpO1xyXG5cclxuICAgICAgICAgICAgcmV0LmlzU3VjYyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gMCB8fCB4aHIucmVhZHlTdGF0ZSA9PSAxIHx8IHhoci5zdGF0dXMgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0LmVyciA9IEh0dHBFdmVudC5OT19ORVRXT1JLOyAgICAgICAgICAgICAvLyDmlq3nvZFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldC5lcnIgPSBIdHRwRXZlbnQuVU5LTk9XTl9FUlJPUjsgICAgICAgICAgLy8g5pyq55+l6ZSZ6K+vXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGUocmV0KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT0gNCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kZWxldGVDYWNoZShuZXdVcmwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gMjAwICYmIG9uQ29tcGxldGUpIHtcclxuICAgICAgICAgICAgICAgIHJldC5pc1N1Y2MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSA9PSAnYXJyYXlidWZmZXInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZTsgICAgICAgIC8vIOWKoOi9vemdnuaWh+acrOagvOW8j1xyXG4gICAgICAgICAgICAgICAgICAgIHJldC5yZXMgPSB4aHIucmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXQucmVzID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZShyZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8g5Y+R6YCB6K+35rGCXHJcbiAgICAgICAgaWYgKHBhcmFtcyA9PSBudWxsIHx8IHBhcmFtcyA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB4aHIuc2VuZChwYXJhbXNTdHIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRlbGV0ZUNhY2hlKHVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgZGVsZXRlIHVybHNbdXJsXTtcclxuICAgICAgICBkZWxldGUgcmVxcGFyYW1zW3VybF07XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA2LTIxIDEyOjA1OjE0XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA3LTIwIDE0OjA0OjI3XHJcbiAqL1xyXG4vKiog6KGM5Li65o6n5Yi25o6l5Y+jICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUNvbnRyb2wge1xyXG4gICAgLyoqIOihjOS4uuWkhOeQhuaIkOWKnyAqL1xyXG4gICAgc3VjY2VzcyhibGFja2JvYXJkPzogYW55KTogdm9pZDtcclxuXHJcbiAgICAvKiog6KGM5Li65aSE55CG5aSx6LSlICovXHJcbiAgICBmYWlsKGJsYWNrYm9hcmQ/OiBhbnkpOiB2b2lkO1xyXG5cclxuICAgIC8qKiDlpITnkIbooYzkuLrpgLvovpEgKi9cclxuICAgIHJ1bihibGFja2JvYXJkPzogYW55KTogdm9pZDtcclxuICAgIFxyXG4gICAgLyoqIOato+WcqOWkhOeQhuS4rSAqL1xyXG4gICAgcnVubmluZyhibGFja2JvYXJkPzogYW55KTogdm9pZDtcclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDktMDEgMTg6MDA6MjhcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDIgMTQ6NDk6NDJcclxuICovXHJcbmltcG9ydCB7IENvbG9yLCBUZXh0dXJlMkQgfSBmcm9tIFwiY2NcIjtcclxuXHJcbi8qKlxyXG4gKiDlm77lg4/lt6XlhbdcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWFnZVV0aWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bnurnnkIbkuK3mjIflrprlg4/ntKDnmoTpopzoibLvvIzljp/ngrnkuLrlt6bkuIrop5LvvIzku47lg4/ntKAgKDEsIDEpIOW8gOWni+OAglxyXG4gICAgICogQHBhcmFtIHRleHR1cmUg57q555CGXHJcbiAgICAgKiBAcGFyYW0geCB4IOWdkOagh1xyXG4gICAgICogQHBhcmFtIHkgeSDlnZDmoIdcclxuICAgICAqIEBleGFtcGxlXHJcbi8vIOiOt+WPlue6ueeQhuW3puS4iuinkuesrOS4gOS4quWDj+e0oOeahOminOiJslxyXG5jb25zdCBjb2xvciA9IEltYWdlVXRpbC5nZXRQaXhlbENvbG9yKHRleHR1cmUsIDEsIDEpO1xyXG5jYy5jb2xvcig1MCwgMTAwLCAxMjMsIDI1NSk7XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXRQaXhlbENvbG9yKHRleHR1cmU6IFRleHR1cmUyRCwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBDb2xvciB7XHJcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykhO1xyXG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHRleHR1cmUud2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHRleHR1cmUuaGVpZ2h0O1xyXG4gICAgICAgIGNvbnN0IGltYWdlID0gdGV4dHVyZS5pbWFnZT8uZGF0YSBhcyBIVE1MQ2FudmFzRWxlbWVudCB8IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgdGV4dHVyZS53aWR0aCwgdGV4dHVyZS5oZWlnaHQpO1xyXG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdGV4dHVyZS53aWR0aCwgdGV4dHVyZS5oZWlnaHQpO1xyXG4gICAgICAgIGNvbnN0IHBpeGVsSW5kZXggPSAoKHkgLSAxKSAqIHRleHR1cmUud2lkdGggKiA0KSArICh4IC0gMSkgKiA0O1xyXG4gICAgICAgIGNvbnN0IHBpeGVsRGF0YSA9IGltYWdlRGF0YS5kYXRhLnNsaWNlKHBpeGVsSW5kZXgsIHBpeGVsSW5kZXggKyA0KTtcclxuICAgICAgICBjb25zdCBjb2xvciA9IG5ldyBDb2xvcihwaXhlbERhdGFbMF0sIHBpeGVsRGF0YVsxXSwgcGl4ZWxEYXRhWzJdLCBwaXhlbERhdGFbM10pO1xyXG4gICAgICAgIGltYWdlLnJlbW92ZSgpO1xyXG4gICAgICAgIGNhbnZhcy5yZW1vdmUoKTtcclxuICAgICAgICByZXR1cm4gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlsIblm77lg4/ovazkuLogQmFzZTY0IOWtl+espu+8iOS7hSBwbmfjgIFqcGcg5oiWIGpwZWcg5qC85byP6LWE5rqQ77yJ77yI5pyJ6Zeu6aKY77yJXHJcbiAgICAgKiBAcGFyYW0gdXJsIOWbvuWDj+WcsOWdgFxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIOWujOaIkOWbnuiwg1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaW1hZ2VUb0Jhc2U2NCh1cmw6IHN0cmluZywgY2FsbGJhY2s/OiAoZGF0YVVSTDogc3RyaW5nKSA9PiB2b2lkKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzID0+IHtcclxuICAgICAgICAgICAgbGV0IGV4dG5hbWUgPSAvXFwucG5nfFxcLmpwZ3xcXC5qcGVnLy5leGVjKHVybCk/LlswXTtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGlmIChbJy5wbmcnLCAnLmpwZycsICcuanBlZyddLmluY2x1ZGVzKGV4dG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpITtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSB1cmw7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBleHRuYW1lID0gZXh0bmFtZSA9PT0gJy5qcGcnID8gJ2pwZWcnIDogZXh0bmFtZSEucmVwbGFjZSgnLicsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTChgaW1hZ2UvJHtleHRuYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGRhdGFVUkwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcyhkYXRhVVJMKTtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYW52YXMucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ05vdCBhIGpwZy9qcGVnIG9yIHBuZyByZXNvdXJjZSEnKTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVzKFwiXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlsIYgQmFzZTY0IOWtl+espui9rOS4uiBjYy5UZXh0dXJlMkQg6LWE5rqQ77yI5pyJ6Zeu6aKY77yJXHJcbiAgICAgKiBAcGFyYW0gYmFzZTY0IEJhc2U2NCDlrZfnrKZcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGJhc2U2NFRvVGV4dHVyZShiYXNlNjQ6IHN0cmluZyk6IFRleHR1cmUyRCB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICBpbWFnZS5zcmMgPSBiYXNlNjQ7XHJcbiAgICAgICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlMkQoKTtcclxuICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICB0ZXh0dXJlLmluaXRXaXRoRWxlbWVudChpbWFnZSk7XHJcbiAgICAgICAgaW1hZ2UucmVtb3ZlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRleHR1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlsIYgQmFzZTY0IOWtl+espui9rOS4uuS6jOi/m+WItuaVsOaNru+8iOaciemXrumimO+8iVxyXG4gICAgICogQHBhcmFtIGJhc2U2NCBCYXNlNjQg5a2X56ymXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBiYXNlNjRUb0Jsb2IoYmFzZTY0OiBzdHJpbmcpOiBCbG9iIHtcclxuICAgICAgICBjb25zdCBzdHJpbmdzID0gYmFzZTY0LnNwbGl0KCcsJyk7XHJcbiAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgY29uc3QgdHlwZSA9IC9pbWFnZVxcL1xcdyt8Oy8uZXhlYyhzdHJpbmdzWzBdKVswXTtcclxuICAgICAgICBjb25zdCBkYXRhID0gd2luZG93LmF0b2Ioc3RyaW5nc1sxXSk7XHJcbiAgICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoZGF0YS5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IHVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHVpbnQ4QXJyYXlbaV0gPSBkYXRhLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IEJsb2IoW3VpbnQ4QXJyYXldLCB7IHR5cGU6IHR5cGUgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSAnLi9CZWhhdmlvclRyZWUnO1xyXG5leHBvcnQgKiBmcm9tICcuL0JyYW5jaE5vZGUnO1xyXG5leHBvcnQgKiBmcm9tICcuL0RlY29yYXRvcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vQlRyZWVOb2RlJztcclxuZXhwb3J0ICogZnJvbSAnLi9Qcmlvcml0eSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vU2VxdWVuY2UnO1xyXG5leHBvcnQgKiBmcm9tICcuL1Rhc2snO1xyXG5leHBvcnQgKiBmcm9tICcuL1NlbGVjdG9yJzsiLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTExLTExIDE3OjQ1OjIzXHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA4LTAzIDEwOjA3OjE0XHJcbiAqL1xyXG5pbXBvcnQgeyBlY3MgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL0VDU1wiO1xyXG5pbXBvcnQgeyBJbml0UmVzQ29tcCB9IGZyb20gXCIuL2JsbC9Jbml0UmVzXCI7XHJcblxyXG4vKipcclxuICog5ri45oiP6L+b5YWl5Yid5aeL5YyW5qih5Z2XXHJcbiAqIDHjgIHng63mm7TmlrBcclxuICogMuOAgeWKoOi9vem7mOiupOi1hOa6kFxyXG4gKi9cclxuQGVjcy5yZWdpc3RlcignSW5pdGlhbGl6ZScpXHJcbmV4cG9ydCBjbGFzcyBJbml0aWFsaXplIGV4dGVuZHMgZWNzLkVudGl0eSB7XHJcbiAgICBwcm90ZWN0ZWQgaW5pdCgpIHtcclxuICAgICAgICAvLyDliJ3lp4vljJbmuLjmiI/lhazlhbHotYTmupBcclxuICAgICAgICB0aGlzLmFkZChJbml0UmVzQ29tcCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIGV4cG9ydCBjbGFzcyBFY3NJbml0aWFsaXplU3lzdGVtIGV4dGVuZHMgZWNzLlN5c3RlbSB7XHJcbi8vICAgICBjb25zdHJ1Y3RvcigpIHtcclxuLy8gICAgICAgICBzdXBlcigpO1xyXG5cclxuLy8gICAgICAgICB0aGlzLmFkZChuZXcgSW5pdFJlc1N5c3RlbSgpKTtcclxuLy8gICAgIH1cclxuLy8gfSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDctMjIgMTc6MDY6MjJcclxuICogQExhc3RFZGl0b3JzOiBiYW5zb21pblxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDI0LTAzLTMxIDAxOjIwOjE4XHJcbiAqL1xyXG5pbXBvcnQgeyBvb3BzIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL09vcHNcIjtcclxuaW1wb3J0IHsgQXN5bmNRdWV1ZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2NvbGxlY3Rpb24vQXN5bmNRdWV1ZVwiO1xyXG5pbXBvcnQgeyBlY3MgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL0VDU1wiO1xyXG5pbXBvcnQgeyBNb2R1bGVVdGlsIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9tb2R1bGUvY29tbW9uL01vZHVsZVV0aWxcIjtcclxuaW1wb3J0IHsgVUlJRCB9IGZyb20gXCIuLi8uLi9jb21tb24vY29uZmlnL0dhbWVVSUNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBJbml0aWFsaXplIH0gZnJvbSBcIi4uL0luaXRpYWxpemVcIjtcclxuaW1wb3J0IHsgTG9hZGluZ1ZpZXdDb21wIH0gZnJvbSBcIi4uL3ZpZXcvTG9hZGluZ1ZpZXdDb21wXCI7XHJcblxyXG4vKiog5Yid5aeL5YyW5ri45oiP5YWs5YWx6LWE5rqQICovXHJcbkBlY3MucmVnaXN0ZXIoJ0luaXRSZXMnKVxyXG5leHBvcnQgY2xhc3MgSW5pdFJlc0NvbXAgZXh0ZW5kcyBlY3MuQ29tcCB7XHJcbiAgICByZXNldCgpIHsgfVxyXG59XHJcblxyXG4vKiog5Yid5aeL5YyW6LWE5rqQ6YC76L6R5rOo5YaM5YiwSW5pdGlhbGl6ZeaooeWdl+S4rSAqL1xyXG5AZWNzLnJlZ2lzdGVyKCdJbml0aWFsaXplJylcclxuZXhwb3J0IGNsYXNzIEluaXRSZXNTeXN0ZW0gZXh0ZW5kcyBlY3MuQ29tYmxvY2tTeXN0ZW0gaW1wbGVtZW50cyBlY3MuSUVudGl0eUVudGVyU3lzdGVtIHtcclxuICAgIGZpbHRlcigpOiBlY3MuSU1hdGNoZXIge1xyXG4gICAgICAgIHJldHVybiBlY3MuYWxsT2YoSW5pdFJlc0NvbXApO1xyXG4gICAgfVxyXG5cclxuICAgIGVudGl0eUVudGVyKGU6IEluaXRpYWxpemUpOiB2b2lkIHtcclxuICAgICAgICB2YXIgcXVldWU6IEFzeW5jUXVldWUgPSBuZXcgQXN5bmNRdWV1ZSgpO1xyXG5cclxuICAgICAgICAvLyDliqDovb3oh6rlrprkuYnotYTmupBcclxuICAgICAgICB0aGlzLmxvYWRDdXN0b20ocXVldWUpO1xyXG4gICAgICAgIC8vIOWKoOi9veWkmuivreiogOWMheWKoOi9veWkmuivreiogOWMhVxyXG4gICAgICAgIHRoaXMubG9hZExhbmd1YWdlKHF1ZXVlKTtcclxuICAgICAgICAvLyDliqDovb3lhazlhbHotYTmupBcclxuICAgICAgICB0aGlzLmxvYWRDb21tb24ocXVldWUpO1xyXG4gICAgICAgIC8vIOWKoOi9vea4uOaIj+WGheWuueWKoOi9vei/m+W6puaPkOekuueVjOmdolxyXG4gICAgICAgIHRoaXMub25Db21wbGV0ZShxdWV1ZSwgZSk7XHJcblxyXG4gICAgICAgIHF1ZXVlLnBsYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yqg6L296Ieq5a6a5LmJ5YaF5a6577yI5Y+v6YCJ77yJICovXHJcbiAgICBwcml2YXRlIGxvYWRDdXN0b20ocXVldWU6IEFzeW5jUXVldWUpIHtcclxuICAgICAgICBxdWV1ZS5wdXNoKGFzeW5jIChuZXh0OiBOZXh0RnVuY3Rpb24sIHBhcmFtczogYW55LCBhcmdzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgLy8g5Yqg6L295aSa6K+t6KiA5a+55bqU5a2X5L2TXHJcbiAgICAgICAgICAgIG9vcHMucmVzLmxvYWQoXCJsYW5ndWFnZS9mb250L1wiICsgb29wcy5sYW5ndWFnZS5jdXJyZW50LCBuZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yqg6L295YyW6K+t6KiA5YyF77yI5Y+v6YCJ77yJICovXHJcbiAgICBwcml2YXRlIGxvYWRMYW5ndWFnZShxdWV1ZTogQXN5bmNRdWV1ZSkge1xyXG4gICAgICAgIHF1ZXVlLnB1c2goKG5leHQ6IE5leHRGdW5jdGlvbiwgcGFyYW1zOiBhbnksIGFyZ3M6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAvLyDorr7nva7pu5jorqTor63oqIBcclxuICAgICAgICAgICAgbGV0IGxhbiA9IG9vcHMuc3RvcmFnZS5nZXQoXCJsYW5ndWFnZVwiKTtcclxuICAgICAgICAgICAgaWYgKGxhbiA9PSBudWxsIHx8IGxhbiA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBsYW4gPSBcInpoXCI7XHJcbiAgICAgICAgICAgICAgICBvb3BzLnN0b3JhZ2Uuc2V0KFwibGFuZ3VhZ2VcIiwgbGFuKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g5Yqg6L296K+t6KiA5YyF6LWE5rqQXHJcbiAgICAgICAgICAgIG9vcHMubGFuZ3VhZ2Uuc2V0TGFuZ3VhZ2UobGFuLCBuZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yqg6L295YWs5YWx6LWE5rqQ77yI5b+F5aSH77yJICovXHJcbiAgICBwcml2YXRlIGxvYWRDb21tb24ocXVldWU6IEFzeW5jUXVldWUpIHtcclxuICAgICAgICBxdWV1ZS5wdXNoKChuZXh0OiBOZXh0RnVuY3Rpb24sIHBhcmFtczogYW55LCBhcmdzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgb29wcy5yZXMubG9hZERpcihcImNvbW1vblwiLCBuZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yqg6L295a6M5oiQ6L+b5YWl5ri45oiP5YaF5a655Yqg6L2955WM6Z2iICovXHJcbiAgICBwcml2YXRlIG9uQ29tcGxldGUocXVldWU6IEFzeW5jUXVldWUsIGU6IEluaXRpYWxpemUpIHtcclxuICAgICAgICBxdWV1ZS5jb21wbGV0ZSA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgTW9kdWxlVXRpbC5hZGRWaWV3VWkoZSwgTG9hZGluZ1ZpZXdDb21wLCBVSUlELkxvYWRpbmcpO1xyXG4gICAgICAgICAgICBlLnJlbW92ZShJbml0UmVzQ29tcCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDktMDEgMTg6MDA6MjhcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDYgMTc6MTg6MDVcclxuICovXHJcblxyXG4vKipcclxuICog5a6e546w5Yqo5oCB57uR5a6a55qE5qC45b+D6YOo5YiG77yMXHJcbiAqIOavj+asoeS/ruaUueWxnuaAp+WAvO+8jOmDveS8muiwg+eUqOWvueW6lOWHveaVsO+8jOW5tuS4lOiOt+WPluWAvOeahOi3r+W+hFxyXG4gKi9cclxuY29uc3QgT1AgPSBPYmplY3QucHJvdG90eXBlO1xyXG5jb25zdCB0eXBlcyA9IHtcclxuICAgIG9iajogJ1tvYmplY3QgT2JqZWN0XScsXHJcbiAgICBhcnJheTogJ1tvYmplY3QgQXJyYXldJ1xyXG59XHJcbmNvbnN0IE9BTSA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAndW5zaGlmdCcsICdzb3J0JywgJ3JldmVyc2UnLCAnc3BsaWNlJ107XHJcblxyXG4vKipcclxuICog5a6e546w5bGe5oCn5oum5oiq55qE57G7XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSnNvbk9iPFQ+IHtcclxuICAgIGNvbnN0cnVjdG9yKG9iajogVCwgY2FsbGJhY2s6IChuZXdWYWw6IGFueSwgb2xkVmFsOiBhbnksIHBhdGhBcnJheTogc3RyaW5nW10pID0+IHZvaWQpIHtcclxuICAgICAgICBpZiAoT1AudG9TdHJpbmcuY2FsbChvYmopICE9PSB0eXBlcy5vYmogJiYgT1AudG9TdHJpbmcuY2FsbChvYmopICE9PSB0eXBlcy5hcnJheSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCfor7fkvKDlhaXkuIDkuKrlr7nosaHmiJbmlbDnu4QnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICB0aGlzLm9ic2VydmUob2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jYWxsYmFjaztcclxuXHJcbiAgICAvKirlr7nosaHlsZ7mgKfliqvmjIEgKi9cclxuICAgIHByaXZhdGUgb2JzZXJ2ZTxUPihvYmo6IFQsIHBhdGg/OiBhbnkpIHtcclxuICAgICAgICBpZiAoT1AudG9TdHJpbmcuY2FsbChvYmopID09PSB0eXBlcy5hcnJheSkge1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJyaWRlQXJyYXlQcm90byhvYmosIHBhdGgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZSAg5rOo77ya6YG/5YWNQVBJ55Sf5oiQ5bel5YW35oql6ZSZXHJcbiAgICAgICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGxldCBvbGRWYWwgPSBvYmpba2V5XTtcclxuICAgICAgICAgICAgbGV0IHBhdGhBcnJheSA9IHBhdGggJiYgcGF0aC5zbGljZSgpO1xyXG4gICAgICAgICAgICBpZiAocGF0aEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBwYXRoQXJyYXkucHVzaChrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGF0aEFycmF5ID0gW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkVmFsO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKG5ld1ZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2MubG9nKG5ld1ZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPUC50b1N0cmluZy5jYWxsKG5ld1ZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9ic2VydmUobmV3VmFsLCBwYXRoQXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvdiA9IG9sZFZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsID0gbmV3VmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9jYWxsYmFjayhuZXdWYWwsIG92LCBwYXRoQXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgaWYgKE9QLnRvU3RyaW5nLmNhbGwob2JqW2tleV0pID09PSB0eXBlcy5vYmogfHwgT1AudG9TdHJpbmcuY2FsbChvYmpba2V5XSkgPT09IHR5cGVzLmFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmUob2JqW2tleV0sIHBhdGhBcnJheSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5a+55pWw57uE57G75Z6L6L+b6KGM5Yqo5oCB57uR5a6aXHJcbiAgICAgKiBAcGFyYW0gYXJyYXkgXHJcbiAgICAgKiBAcGFyYW0gcGF0aCBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvdmVycmlkZUFycmF5UHJvdG8oYXJyYXk6IGFueSwgcGF0aDogYW55KSB7XHJcbiAgICAgICAgLy8g5L+d5a2Y5Y6f5aeLIEFycmF5IOWOn+WeiyAgXHJcbiAgICAgICAgdmFyIG9yaWdpbmFsUHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XHJcbiAgICAgICAgLy8g6YCa6L+HIE9iamVjdC5jcmVhdGUg5pa55rOV5Yib5bu65LiA5Liq5a+56LGh77yM6K+l5a+56LGh55qE5Y6f5Z6L5pivQXJyYXkucHJvdG90eXBlICBcclxuICAgICAgICB2YXIgb3ZlcnJpZGVQcm90byA9IE9iamVjdC5jcmVhdGUoQXJyYXkucHJvdG90eXBlKTtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuXHJcbiAgICAgICAgLy8g6YGN5Y6G6KaB6YeN5YaZ55qE5pWw57uE5pa55rOVICBcclxuICAgICAgICBPQU0uZm9yRWFjaCgobWV0aG9kOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG92ZXJyaWRlUHJvdG8sIG1ldGhvZCwge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkVmFsID0gdGhpcy5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8v6LCD55So5Y6f5aeL5Y6f5Z6L5LiK55qE5pa55rOVICBcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBvcmlnaW5hbFByb3RvW21ldGhvZF0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICAvL+e7p+e7reebkeWQrOaWsOaVsOe7hCAgXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vYnNlcnZlKHRoaXMsIHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2NhbGxiYWNrKHRoaXMsIG9sZFZhbCwgcGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g5pyA5ZCOIOiuqeivpeaVsOe7hOWunuS+i+eahCBfX3Byb3RvX18g5bGe5oCn5oyH5ZCRIOWBh+eahOWOn+WeiyBvdmVycmlkZVByb3RvICBcclxuICAgICAgICBhcnJheVsnX19wcm90b19fJ10gPSBvdmVycmlkZVByb3RvO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0wOC0xOCAxNzowMDo1OVxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wOC0yMiAxNTo0ODowMlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEpzb25Bc3NldCB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyByZXNMb2FkZXIgfSBmcm9tIFwiLi4vY29tbW9uL2xvYWRlci9SZXNMb2FkZXJcIjtcclxuXHJcbi8qKiDotYTmupDot6/lvoQgKi9cclxuY29uc3QgcGF0aDogc3RyaW5nID0gXCJjb25maWcvZ2FtZS9cIjtcclxuXHJcbi8qKiDmlbDmja7nvJPlrZggKi9cclxuY29uc3QgZGF0YTogTWFwPHN0cmluZywgYW55PiA9IG5ldyBNYXAoKTtcclxuXHJcbi8qKiBKU09O5pWw5o2u6KGo5bel5YW3ICovXHJcbmV4cG9ydCBjbGFzcyBKc29uVXRpbCB7XHJcbiAgICAvKipcclxuICAgICAqIOmAmuefpei1hOa6kOWQjeS7jue8k+WtmOS4reiOt+WPluS4gOS4qkpzb27mlbDmja7ooahcclxuICAgICAqIEBwYXJhbSBuYW1lICDotYTmupDlkI1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldChuYW1lOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIGlmIChkYXRhLmhhcyhuYW1lKSlcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGEuZ2V0KG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YCa55+l6LWE5rqQ5ZCN5Yqg6L29SnNvbuaVsOaNruihqFxyXG4gICAgICogQHBhcmFtIG5hbWUgICAgICDotYTmupDlkI1cclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAg6LWE5rqQ5Yqg6L295a6M5oiQ5Zue6LCDXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBsb2FkKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGRhdGEuaGFzKG5hbWUpKVxyXG4gICAgICAgICAgICBjYWxsYmFjayhkYXRhLmdldChuYW1lKSk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IHBhdGggKyBuYW1lO1xyXG4gICAgICAgICAgICByZXNMb2FkZXIubG9hZCh1cmwsIEpzb25Bc3NldCwgKGVycjogRXJyb3IgfCBudWxsLCBjb250ZW50OiBKc29uQXNzZXQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXQobmFtZSwgY29udGVudC5qc29uKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNMb2FkZXIucmVsZWFzZSh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvbnRlbnQuanNvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW8guatpeWKoOi9vUpzb27mlbDmja7ooahcclxuICAgICAqIEBwYXJhbSBuYW1lIOi1hOa6kOWQjVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbG9hZEFzeW5jKG5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuZ2V0KG5hbWUpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gcGF0aCArIG5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXNMb2FkZXIubG9hZCh1cmwsIEpzb25Bc3NldCwgKGVycjogRXJyb3IgfCBudWxsLCBjb250ZW50OiBKc29uQXNzZXQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNldChuYW1lLCBjb250ZW50Lmpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNMb2FkZXIucmVsZWFzZSh1cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvbnRlbnQuanNvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yqg6L295omA5pyJ6YWN572u6KGo5pWw5o2u5Yiw57yT5a2Y5LitICovXHJcbiAgICBzdGF0aWMgbG9hZERpckFzeW5jKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHJlc0xvYWRlci5sb2FkRGlyKHBhdGgsIChlcnI6IEVycm9yIHwgbnVsbCwgYXNzZXRzOiBKc29uQXNzZXRbXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhc3NldHMuZm9yRWFjaChhc3NldCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0KGFzc2V0Lm5hbWUsIGFzc2V0Lmpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc0xvYWRlci5yZWxlYXNlRGlyKHBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YCa6L+H5oyH5a6a6LWE5rqQ5ZCN6YeK5pS+6LWE5rqQ5YaF5a2YXHJcbiAgICAgKiBAcGFyYW0gbmFtZSDotYTmupDlkI1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHJlbGVhc2UobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgZGF0YS5kZWxldGUobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOa4heeQhuaJgOacieaVsOaNriAqL1xyXG4gICAgc3RhdGljIGNsZWFyKCkge1xyXG4gICAgICAgIGRhdGEuY2xlYXIoKTtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDQtMTQgMTc6MDg6MDFcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjMtMDgtMTEgMTA6MDA6NTFcclxuICovXHJcbmltcG9ydCB7IF9kZWNvcmF0b3IgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IExhYmVsTnVtYmVyIGZyb20gXCIuL0xhYmVsTnVtYmVyXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5LCBtZW51IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIOaVsOWAvOWPmOWMluWKqOeUu+agh+etvue7hOS7tiAqL1xyXG5AY2NjbGFzcyhcIkxhYmVsQ2hhbmdlXCIpXHJcbkBtZW51KCdPb3BzRnJhbWV3b3JrL0xhYmVsL0xhYmVsQ2hhbmdlIO+8iOaVsOWAvOWPmOWMluWKqOeUu+agh+etvu+8iScpXHJcbmV4cG9ydCBjbGFzcyBMYWJlbENoYW5nZSBleHRlbmRzIExhYmVsTnVtYmVyIHtcclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgaXNJbnRlZ2VyOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBkdXJhdGlvbjogbnVtYmVyID0gMDsgICAgICAgICAgICAvLyDmjIHnu63ml7bpl7RcclxuICAgIHByaXZhdGUgY2FsbGJhY2s6IEZ1bmN0aW9uIHwgdW5kZWZpbmVkOyAgLy8g5a6M5oiQ5Zue6LCDXHJcbiAgICBwcml2YXRlIGlzQmVnaW46IGJvb2xlYW4gPSBmYWxzZTsgICAgICAgIC8vIOaYr+WQpuW8gOWni1xyXG4gICAgcHJpdmF0ZSBzcGVlZDogbnVtYmVyID0gMDsgICAgICAgICAgICAgICAvLyDlj5jljJbpgJ/luqZcclxuICAgIHByaXZhdGUgZW5kOiBudW1iZXIgPSAwOyAgICAgICAgICAgICAgICAgLy8g5pyA57uI5YC8XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlj5jljJbliLDmn5DlgLws5aaC5p6c5LuO5b2T5YmN5byA5aeL55qEYmVnaW7kvKDlhaVudWxsXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2hhbmdlVG8oZHVyYXRpb246IG51bWJlciwgZW5kOiBudW1iZXIsIGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcclxuICAgICAgICBpZiAoZHVyYXRpb24gPT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wbGF5QW5pbShkdXJhdGlvbiwgdGhpcy5udW0sIGVuZCwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWPmOWMluWAvCzlpoLmnpzku47lvZPliY3lvIDlp4vnmoRiZWdpbuS8oOWFpW51bGxcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gXHJcbiAgICAgKiBAbWVtYmVyb2YgTGFiZWxDaGFuZ2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNoYW5nZUJ5KGR1cmF0aW9uOiBudW1iZXIsIHZhbHVlOiBudW1iZXIsIGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcclxuICAgICAgICBpZiAoZHVyYXRpb24gPT0gMCkge1xyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wbGF5QW5pbShkdXJhdGlvbiwgdGhpcy5udW0sIHRoaXMubnVtICsgdmFsdWUsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog56uL5Yi75YGc5q2iICovXHJcbiAgICBwdWJsaWMgc3RvcChleGNDYWxsYmFjazogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLm51bSA9IHRoaXMuZW5kO1xyXG4gICAgICAgIHRoaXMuaXNCZWdpbiA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChleGNDYWxsYmFjayAmJiB0aGlzLmNhbGxiYWNrKSB0aGlzLmNhbGxiYWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaSreaUvuWKqOeUuyAqL1xyXG4gICAgcHJpdmF0ZSBwbGF5QW5pbShkdXJhdGlvbjogbnVtYmVyLCBiZWdpbjogbnVtYmVyLCBlbmQ6IG51bWJlciwgY2FsbGJhY2s/OiBGdW5jdGlvbikge1xyXG4gICAgICAgIHRoaXMuZHVyYXRpb24gPSBkdXJhdGlvbjtcclxuICAgICAgICB0aGlzLmVuZCA9IGVuZDtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5zcGVlZCA9IChlbmQgLSBiZWdpbikgLyBkdXJhdGlvbjtcclxuXHJcbiAgICAgICAgdGhpcy5udW0gPSBiZWdpbjtcclxuICAgICAgICB0aGlzLmlzQmVnaW4gPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmmK/lkKblt7Lnu4/nu5PmnZ8gKi9cclxuICAgIHByaXZhdGUgaXNFbmQobnVtOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5zcGVlZCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bSA+PSB0aGlzLmVuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudW0gPD0gdGhpcy5lbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkdDogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNCZWdpbikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5udW0gPT0gdGhpcy5lbmQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNCZWdpbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2spIHRoaXMuY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgbnVtID0gdGhpcy5udW0gKyBkdCAqIHRoaXMuc3BlZWQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0ludGVnZXIpe1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5lbmQgPCB0aGlzLm51bSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBudW0gPSBNYXRoLmZsb29yKG51bSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIG51bSA9IE1hdGguY2VpbChudW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKiog5Y+Y5YyW5a6M5oiQICovXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRW5kKG51bSkpIHtcclxuICAgICAgICAgICAgICAgIG51bSA9IHRoaXMuZW5kO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0JlZ2luID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxsYmFjaykgdGhpcy5jYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubnVtID0gbnVtO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDQtMTQgMTc6MDg6MDFcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjMtMDgtMTEgMTA6Mjc6MDRcclxuICovXHJcbmltcG9ydCB7TGFiZWwsIF9kZWNvcmF0b3IsIGVycm9yfSBmcm9tIFwiY2NcIjtcclxuXHJcbmNvbnN0IHtjY2NsYXNzLCBwcm9wZXJ0eSwgbWVudX0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIOWPquiDveaYvuekuuaVsOWtl+eahOagh+etvue7hOS7tiAqL1xyXG5AY2NjbGFzcyhcIkxhYmVsTnVtYmVyXCIpXHJcbkBtZW51KCdPb3BzRnJhbWV3b3JrL0xhYmVsL0xhYmVsTnVtYmVyIO+8iOWPquaYvuekuuaVsOWtl+eahOagh+etvu+8iScpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhYmVsTnVtYmVyIGV4dGVuZHMgTGFiZWwge1xyXG4gICAgQHByb3BlcnR5KHt0b29sdGlwOiBcIuaVsOWtl1wifSlcclxuICAgIF9udW06IG51bWJlciA9IDA7XHJcbiAgICBAcHJvcGVydHkoe3Rvb2x0aXA6IFwi5pWw5a2XXCJ9KVxyXG4gICAgZ2V0IG51bSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9udW07XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IG51bSh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fbnVtID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMYWJlbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7dG9vbHRpcDogXCLotKfluIHnrKblj7dcIn0pXHJcbiAgICBzeW1ib2w6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVMYWJlbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliLfmlrDmlofmnKwgKi9cclxuICAgIHByb3RlY3RlZCB1cGRhdGVMYWJlbCgpIHtcclxuICAgICAgICB0aGlzLnN0cmluZyA9IHRoaXMubnVtLnRvU3RyaW5nKCkgKyB0aGlzLnN5bWJvbDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IExhYmVsLCBfZGVjb3JhdG9yIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IG9vcHMgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9Pb3BzXCI7XHJcbmltcG9ydCB7IEV2ZW50TWVzc2FnZSB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL2NvbW1vbi9ldmVudC9FdmVudE1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgVGltZVV0aWwgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS91dGlscy9UaW1lVXRpbHNcIjtcclxuaW1wb3J0IHsgRURJVE9SIH0gZnJvbSBcImNjL2VudlwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgbWVudSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiDlgJLorqHml7bmoIfnrb4gKi9cclxuQGNjY2xhc3MoXCJMYWJlbFRpbWVcIilcclxuQG1lbnUoJ09vcHNGcmFtZXdvcmsvTGFiZWwvTGFiZWxUaW1lIO+8iOWAkuiuoeaXtuagh+etvu+8iScpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExhYmVsVGltZSBleHRlbmRzIExhYmVsIHtcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLliLDorqHml7bpl7TmgLvml7bpl7TvvIjljZXkvY3np5LvvIlcIlxyXG4gICAgfSlcclxuICAgIGNvdW50RG93bjogbnVtYmVyID0gMTAwMDtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6IFwi5aSp5pWw5pWw5o2u5qC85byP5YyWXCJcclxuICAgIH0pXHJcbiAgICBkYXlGb3JtYXQ6IHN0cmluZyA9IFwiezB9IGRheVwiO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLml7bpl7TmoLzlvI/ljJZcIlxyXG4gICAgfSlcclxuICAgIHRpbWVGb3JtYXQ6IHN0cmluZyA9IFwiezB9OnsxfTp7Mn1cIjtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6IFwi5piv5ZCm5pyJMDBcIlxyXG4gICAgfSlcclxuICAgIHplcm9pemU6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIHByaXZhdGUgYmFja1N0YXJ0VGltZTogbnVtYmVyID0gMDsgICAgICAvLyDov5vlhaXlkI7lj7DlvIDlp4vml7bpl7RcclxuICAgIHByaXZhdGUgZGF0ZURpc2FibGUhOiBib29sZWFuOyAgICAgICAgICAvLyDml7bpl7Tog73lkKbnlLHlpKnmlbDmmL7npLpcclxuICAgIHByaXZhdGUgcmVzdWx0ITogc3RyaW5nOyAgICAgICAgICAgICAgICAvLyDml7bpl7Tnu5PmnpzlrZfnrKbkuLJcclxuXHJcbiAgICAvKiog5q+P56eS6Kem5Y+R5LqL5Lu2ICovXHJcbiAgICBvblNlY29uZDogRnVuY3Rpb24gPSBudWxsITtcclxuICAgIC8qKiDlgJLorqHml7blrozmiJDkuovku7YgKi9cclxuICAgIG9uQ29tcGxldGU6IEZ1bmN0aW9uID0gbnVsbCE7XHJcblxyXG4gICAgcHJpdmF0ZSByZXBsYWNlKHZhbHVlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueSk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1xceyhcXGQrKVxcfS9nLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAobSwgaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3NbaV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmoLzlvI/ljJblrZfnrKbkuLIgKi9cclxuICAgIHByaXZhdGUgZm9ybWF0KCkge1xyXG4gICAgICAgIGxldCBjOiBudW1iZXIgPSB0aGlzLmNvdW50RG93bjtcclxuICAgICAgICBsZXQgZGF0ZTogbnVtYmVyID0gTWF0aC5mbG9vcihjIC8gODY0MDApO1xyXG4gICAgICAgIGMgPSBjIC0gZGF0ZSAqIDg2NDAwO1xyXG4gICAgICAgIGxldCBob3VyczogbnVtYmVyID0gTWF0aC5mbG9vcihjIC8gMzYwMCk7XHJcbiAgICAgICAgYyA9IGMgLSBob3VycyAqIDM2MDA7XHJcbiAgICAgICAgbGV0IG1pbnV0ZXM6IG51bWJlciA9IE1hdGguZmxvb3IoYyAvIDYwKTtcclxuICAgICAgICBjID0gYyAtIG1pbnV0ZXMgKiA2MDtcclxuICAgICAgICBsZXQgc2Vjb25kczogbnVtYmVyID0gYztcclxuXHJcbiAgICAgICAgdGhpcy5kYXRlRGlzYWJsZSA9IHRoaXMuZGF0ZURpc2FibGUgfHwgZmFsc2U7XHJcbiAgICAgICAgaWYgKGRhdGUgPT0gMCAmJiBob3VycyA9PSAwICYmIG1pbnV0ZXMgPT0gMCAmJiBzZWNvbmRzID09IDApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuemVyb2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSB0aGlzLnJlcGxhY2UodGhpcy50aW1lRm9ybWF0LCBcIjAwXCIsIFwiMDBcIiwgXCIwMFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5yZXBsYWNlKHRoaXMudGltZUZvcm1hdCwgXCIwXCIsIFwiMFwiLCBcIjBcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGF0ZSA+IDAgJiYgIXRoaXMuZGF0ZURpc2FibGUpIHtcclxuICAgICAgICAgICAgbGV0IGRhdGFGb3JtYXQgPSB0aGlzLmRheUZvcm1hdDtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gZGF0YUZvcm1hdC5pbmRleE9mKFwiezF9XCIpO1xyXG4gICAgICAgICAgICBpZiAoaG91cnMgPT0gMCAmJiBpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhRm9ybWF0ID0gZGF0YUZvcm1hdC5zdWJzdHJpbmcoMCwgaW5kZXggLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgZGYgPSBkYXRhRm9ybWF0O1xyXG4gICAgICAgICAgICBpZiAoZGF0ZSA+IDEgJiYgZGF0YUZvcm1hdC5pbmRleE9mKFwiZGF5c1wiKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIGRmID0gZGYucmVwbGFjZShcImRheVwiLCBcImRheXNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRhdGUgPCAyKSB7XHJcbiAgICAgICAgICAgICAgICBkZiA9IGRmLnJlcGxhY2UoXCJkYXlzXCIsIFwiZGF5XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5yZXBsYWNlKGRmLCBkYXRlLCBob3Vycyk7ICAgICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOWkqeWkp+S6jjHvvIzliJnmmL7npLogXCIxIERheS4uLlwiXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBob3VycyArPSBkYXRlICogMjQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnplcm9pemUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5yZXBsYWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZUZvcm1hdCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdmVyU3RyaW5nKGhvdXJzKSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvdmVyU3RyaW5nKG1pbnV0ZXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY292ZXJTdHJpbmcoc2Vjb25kcykpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5ZCm5YiZ5pi+56S6IFwiMDE6MTI6MjRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSB0aGlzLnJlcGxhY2UoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lRm9ybWF0LFxyXG4gICAgICAgICAgICAgICAgICAgIGhvdXJzLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdHJpbmcgPSB0aGlzLnJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Liq5L2N5pWw55qE5pe26Ze05pWw5o2u5bCG5a2X56ym5Liy6KGl5L2NICovXHJcbiAgICBwcml2YXRlIGNvdmVyU3RyaW5nKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAxMClcclxuICAgICAgICAgICAgcmV0dXJuIFwiMFwiICsgdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiuvue9ruaXtumXtOiDveWQpueUseWkqeaVsOaYvuekuiAqL1xyXG4gICAgc2V0RGF0ZURpc2FibGUoZmxhZzogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuZGF0ZURpc2FibGUgPSBmbGFnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5YCS6K6h5pe25pe26Ze0XHJcbiAgICAgKiBAcGFyYW0gc2Vjb25kICAgICAgICDlgJLorqHml7bml7bpl7TvvIjljZXkvY3np5LvvIlcclxuICAgICAqL1xyXG4gICAgc2V0VGltZShzZWNvbmQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY291bnREb3duID0gc2Vjb25kOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWAkuiuoeaXtu+8jOWIneWni+WMluaYvuekuuWtl+espuS4slxyXG4gICAgICAgIHRoaXMudGltaW5nX2VuZCgpO1xyXG4gICAgICAgIHRoaXMudGltaW5nX3N0YXJ0KCk7XHJcbiAgICAgICAgdGhpcy5mb3JtYXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9rue7k+adn+aXtumXtOaIs+WAkuiuoeaXtlxyXG4gICAgICogQHBhcmFtIHRpbWVTdGFtcCAgICAg5pe26Ze05oizXHJcbiAgICAgKi9cclxuICAgIHNldFRpbWVTdGFtcCh0aW1lU3RhbXA6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY291bnREb3duID0gVGltZVV0aWwuc2Vjc0JldHdlZW4ob29wcy50aW1lci5nZXRTZXJ2ZXJUaW1lKCksIHRpbWVTdGFtcCk7XHJcbiAgICAgICAgdGhpcy50aW1pbmdfZW5kKCk7XHJcbiAgICAgICAgdGhpcy50aW1pbmdfc3RhcnQoKTtcclxuICAgICAgICB0aGlzLmZvcm1hdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmICghRURJVE9SKSB7XHJcbiAgICAgICAgICAgIG9vcHMubWVzc2FnZS5vbihFdmVudE1lc3NhZ2UuR0FNRV9TSE9XLCB0aGlzLm9uR2FtZVNob3csIHRoaXMpO1xyXG4gICAgICAgICAgICBvb3BzLm1lc3NhZ2Uub24oRXZlbnRNZXNzYWdlLkdBTUVfSElERSwgdGhpcy5vbkdhbWVIaWRlLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50aW1pbmdfc3RhcnQoKTtcclxuICAgICAgICB0aGlzLmZvcm1hdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGVzdHJveSgpIHtcclxuICAgICAgICBpZiAoIUVESVRPUikge1xyXG4gICAgICAgICAgICBvb3BzLm1lc3NhZ2Uub2ZmKEV2ZW50TWVzc2FnZS5HQU1FX1NIT1csIHRoaXMub25HYW1lU2hvdywgdGhpcyk7XHJcbiAgICAgICAgICAgIG9vcHMubWVzc2FnZS5vZmYoRXZlbnRNZXNzYWdlLkdBTUVfSElERSwgdGhpcy5vbkdhbWVIaWRlLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkdhbWVTaG93KCkge1xyXG4gICAgICAgIGNvbnN0IGludGVydmFsID0gTWF0aC5mbG9vcigob29wcy50aW1lci5nZXRUaW1lKCkgLSAodGhpcy5iYWNrU3RhcnRUaW1lIHx8IG9vcHMudGltZXIuZ2V0VGltZSgpKSkgLyAxMDAwKTtcclxuICAgICAgICB0aGlzLmNvdW50RG93biAtPSBpbnRlcnZhbDtcclxuICAgICAgICBpZiAodGhpcy5jb3VudERvd24gPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY291bnREb3duID0gMDtcclxuICAgICAgICAgICAgdGhpcy5vblNjaGVkdWxlQ29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkdhbWVIaWRlKCkge1xyXG4gICAgICAgIHRoaXMuYmFja1N0YXJ0VGltZSA9IG9vcHMudGltZXIuZ2V0VGltZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25TY2hlZHVsZVNlY29uZCgpIHtcclxuICAgICAgICB0aGlzLmNvdW50RG93bi0tO1xyXG4gICAgICAgIHRoaXMuZm9ybWF0KCk7XHJcbiAgICAgICAgaWYgKHRoaXMub25TZWNvbmQpIHRoaXMub25TZWNvbmQodGhpcy5ub2RlKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY291bnREb3duID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5vblNjaGVkdWxlQ29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvblNjaGVkdWxlQ29tcGxldGUoKSB7XHJcbiAgICAgICAgdGhpcy50aW1pbmdfZW5kKCk7XHJcbiAgICAgICAgdGhpcy5mb3JtYXQoKTtcclxuICAgICAgICBpZiAodGhpcy5vbkNvbXBsZXRlKSB0aGlzLm9uQ29tcGxldGUodGhpcy5ub2RlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5byA5aeL6K6h5pe2ICovXHJcbiAgICBwcml2YXRlIHRpbWluZ19zdGFydCgpIHtcclxuICAgICAgICB0aGlzLnNjaGVkdWxlKHRoaXMub25TY2hlZHVsZVNlY29uZCwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0aW1pbmdfZW5kKCkge1xyXG4gICAgICAgIHRoaXMudW5zY2hlZHVsZUFsbENhbGxiYWNrcygpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IHN5cyB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9jb21tb24vbG9nL0xvZ2dlclwiO1xyXG5pbXBvcnQgeyBMYW5ndWFnZURhdGEgfSBmcm9tIFwiLi9MYW5ndWFnZURhdGFcIjtcclxuaW1wb3J0IHsgTGFuZ3VhZ2VQYWNrIH0gZnJvbSBcIi4vTGFuZ3VhZ2VQYWNrXCI7XHJcblxyXG4vKiog5aSa6K+t6KiA566h55CG5ZmoICovXHJcbmV4cG9ydCBjbGFzcyBMYW5ndWFnZU1hbmFnZXIge1xyXG4gICAgcHJpdmF0ZSBfbGFuZ3VhZ2VzOiBBcnJheTxzdHJpbmc+ID0gW3N5cy5MYW5ndWFnZS5DSElORVNFLCBzeXMuTGFuZ3VhZ2UuRU5HTElTSF07ICAgICAgLy8g5pSv5oyB55qE6K+t6KiAXHJcbiAgICBwcml2YXRlIF9sYW5ndWFnZVBhY2s6IExhbmd1YWdlUGFjayA9IG5ldyBMYW5ndWFnZVBhY2soKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDor63oqIDljIVcclxuICAgIHByaXZhdGUgX2RlZmF1bHRMYW5ndWFnZTogc3RyaW5nID0gc3lzLkxhbmd1YWdlLkNISU5FU0U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOm7mOiupOivreiogFxyXG5cclxuICAgIC8qKiDmlK/mjIHnmoTlpJrnp43or63oqIDliJfooaggKi9cclxuICAgIGdldCBsYW5ndWFnZXMoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sYW5ndWFnZXM7XHJcbiAgICB9XHJcbiAgICBzZXQgbGFuZ3VhZ2VzKGxhbmd1YWdlczogQXJyYXk8c3RyaW5nPikge1xyXG4gICAgICAgIHRoaXMuX2xhbmd1YWdlcyA9IGxhbmd1YWdlcztcclxuICAgIH1cclxuXHJcbiAgICAvKiog6K6+572u55qE5b2T5YmN6K+t6KiA5YiX6KGo5Lit5rKh5pyJ6YWN572u5pe277yM5L2/55So6buY6K6k6K+t6KiAICovXHJcbiAgICBzZXQgZGVmYXVsdChsYW5nOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9kZWZhdWx0TGFuZ3VhZ2UgPSBsYW5nIHx8IHN5cy5MYW5ndWFnZS5DSElORVNFO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5blvZPliY3or63np40gKi9cclxuICAgIGdldCBjdXJyZW50KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlRGF0YS5jdXJyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDor63oqIDljIUgKi9cclxuICAgIGdldCBwYWNrKCk6IExhbmd1YWdlUGFjayB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlUGFjaztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaYr+WQpuWtmOWcqOaMh+WumuivreiogFxyXG4gICAgICogQHBhcmFtIGxhbmcgIOivreiogOWQjVxyXG4gICAgICogQHJldHVybnMg5a2Y5Zyo6L+U5ZuedHJ1ZSzliJnlkKZmYWxzZVxyXG4gICAgICovXHJcbiAgICBpc0V4aXN0KGxhbmc6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlcy5pbmRleE9mKGxhbmcpID4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiOt+WPluS4i+S4gOS4quivreenjSAqL1xyXG4gICAgZ2V0TmV4dExhbmcoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgc3VwcG9ydExhbmdzID0gdGhpcy5sYW5ndWFnZXM7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gc3VwcG9ydExhbmdzLmluZGV4T2YoTGFuZ3VhZ2VEYXRhLmN1cnJlbnQpO1xyXG4gICAgICAgIHJldHVybiBzdXBwb3J0TGFuZ3NbKGluZGV4ICsgMSkgJSBzdXBwb3J0TGFuZ3MubGVuZ3RoXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaUueWPmOivreenje+8jOS8muiHquWKqOS4i+i9veWvueW6lOeahOivreenjVxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIOivreiogOWQjVxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIOWkmuivreiogOi1hOa6kOaVsOaNruWKoOi9veWujOaIkOWbnuiwg1xyXG4gICAgICovXHJcbiAgICBzZXRMYW5ndWFnZShsYW5ndWFnZTogc3RyaW5nLCBjYWxsYmFjaz86IChzdWNjZXNzOiBib29sZWFuKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgaWYgKGxhbmd1YWdlID09IG51bGwgfHwgbGFuZ3VhZ2UgPT0gXCJcIikge1xyXG4gICAgICAgICAgICBsYW5ndWFnZSA9IHRoaXMuX2RlZmF1bHRMYW5ndWFnZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlID0gbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMubGFuZ3VhZ2VzLmluZGV4T2YobGFuZ3VhZ2UpO1xyXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYOW9k+WJjeS4jeaUr+aMgeOAkCR7bGFuZ3VhZ2V944CR6K+t6KiA77yM5bCG6Ieq5Yqo5YiH5o2i5Yiw44CQJHt0aGlzLl9kZWZhdWx0TGFuZ3VhZ2V944CR6K+t6KiAYCk7XHJcbiAgICAgICAgICAgIGxhbmd1YWdlID0gdGhpcy5fZGVmYXVsdExhbmd1YWdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxhbmd1YWdlID09PSBMYW5ndWFnZURhdGEuY3VycmVudCkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubG9hZExhbmd1YWdlQXNzZXRzKGxhbmd1YWdlLCAobGFuZzogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIExvZ2dlci5pbnN0YW5jZS5sb2dDb25maWcoYOW9k+WJjeivreiogOS4uuOAkCR7bGFuZ3VhZ2V944CRYCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZExhbmd1YWdlID0gTGFuZ3VhZ2VEYXRhLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIExhbmd1YWdlRGF0YS5jdXJyZW50ID0gbGFuZ3VhZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhbmd1YWdlUGFjay51cGRhdGVMYW5ndWFnZShsYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhbmd1YWdlUGFjay5yZWxlYXNlTGFuZ3VhZ2VBc3NldHMob2xkTGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayh0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNrmRhdGHojrflj5blr7nlupTor63np43nmoTlrZfnrKZcclxuICAgICAqIEBwYXJhbSBsYWJJZCBcclxuICAgICAqIEBwYXJhbSBhcnIgXHJcbiAgICAgKi9cclxuICAgIGdldExhbmdCeUlEKGxhYklkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBMYW5ndWFnZURhdGEuZ2V0TGFuZ0J5SUQobGFiSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiL6L296K+t6KiA5YyF57Sg5p2Q6LWE5rqQXHJcbiAgICAgKiDljIXmi6zor63oqIBqc29u6YWN572u5ZKM6K+t6KiA57q555CG5YyFXHJcbiAgICAgKiBAcGFyYW0gbGFuZyBcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBcclxuICAgICAqL1xyXG4gICAgbG9hZExhbmd1YWdlQXNzZXRzKGxhbmc6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgbGFuZyA9IGxhbmcudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VQYWNrLmxvYWRMYW5ndWFnZUFzc2V0cyhsYW5nLCBjYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDph4rmlL7kuI3pnIDopoHnmoTor63oqIDljIXotYTmupBcclxuICAgICAqIEBwYXJhbSBsYW5nIFxyXG4gICAgICovXHJcbiAgICByZWxlYXNlTGFuZ3VhZ2VBc3NldHMobGFuZzogc3RyaW5nKSB7XHJcbiAgICAgICAgbGFuZyA9IGxhbmcudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB0aGlzLl9sYW5ndWFnZVBhY2sucmVsZWFzZUxhbmd1YWdlQXNzZXRzKGxhbmcpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVFRGRm9udCB9IGZyb20gXCJjY1wiO1xyXG5cclxuLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wMi0xMSAwOTozMTo1MlxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wOC0yMiAxNjozNzo0MFxyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBMYW5ndWFnZURhdGEge1xyXG4gICAgLyoqIEpTT07otYTmupDnm67lvZUgKi9cclxuICAgIHN0YXRpYyBwYXRoX2pzb246IHN0cmluZyA9IFwibGFuZ3VhZ2UvanNvblwiO1xyXG4gICAgLyoqIOe6ueeQhui1hOa6kOebruW9lSAqL1xyXG4gICAgc3RhdGljIHBhdGhfdGV4dHVyZTogc3RyaW5nID0gXCJsYW5ndWFnZS90ZXh0dXJlXCI7XHJcbiAgICAvKiogU1BJTkXotYTmupDnm67lvZUgKi9cclxuICAgIHN0YXRpYyBwYXRoX3NwaW5lOiBzdHJpbmcgPSBcImxhbmd1YWdlL3NwaW5lXCI7XHJcblxyXG4gICAgLyoqIOW9k+WJjeivreiogCAqL1xyXG4gICAgc3RhdGljIGN1cnJlbnQ6IHN0cmluZyA9IFwiXCI7XHJcbiAgICAvKiog6K+t6KiASlNPTumFjee9ruaVsOaNriAqL1xyXG4gICAgc3RhdGljIGpzb246IGFueSA9IHt9XHJcbiAgICAvKiog6K+t6KiARVhDRUzkuK3nmoTphY3nva7mlbDmja4gKi9cclxuICAgIHN0YXRpYyBleGNlbDogYW55ID0gbnVsbCE7XHJcbiAgICAvKiogVFRG5a2X5L2TICovXHJcbiAgICBzdGF0aWMgZm9udDogVFRGRm9udCA9IG51bGwhO1xyXG5cclxuICAgIC8qKiBcclxuICAgICAqIOmAmui/h+WkmuivreiogOWFs+mUruWtl+iOt+WPluivreiogOaWh+acrCBcclxuICAgICAqIFxyXG4gICAgICog5rOo77yaXHJcbiAgICAgKiBcclxuICAgICAqIDHjgIHlhYjojrflj5ZsYW5ndWFnZS9qc29u5Lit55qE6YWN572u5pWw5o2u77yM5aaC5p6c5rKh5pyJ6ICF6I635Y+WY29uZmlnL2dhbWUvTGFuZ3VhZ2XphY3nva7ooajkuK3nmoTlpJror63oqIDmlbDmja5cclxuICAgICAqIFxyXG4gICAgICogMuOAgWNvbmZpZy9nYW1lL0xhbmd1YWdl6YWN572u6KGo5Y+v6YCJ5L2/55So77yM5LiN55So5pe25LiN5Yib5bu65ZCM5ZCN6YWN572u6KGo5Y2z5Y+vXHJcbiAgICAgKiBcclxuICAgICAqIDPjgIFjb25maWcvZ2FtZS9MYW5ndWFnZemFjee9ruihqOS9v+eUqG9vcHMtcGx1Z2luLWV4Y2VsLXRvLWpzb27mj5Lku7bnlJ/miJDvvIzngrnlh7vpobnnm67moLnnm67lvZXkuIvovb11cGRhdGUtb29wcy1wbHVnaW4tZnJhbWV3b3JrLmJhdOaIlnVwZGF0ZS1vb3BzLXBsdWdpbi1mcmFtZXdvcmsuc2johJrmnKzkuIvovb3mj5Lku7ZcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRMYW5nQnlJRChsYWJJZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5qc29uW2xhYklkXTtcclxuICAgICAgICBpZiAodGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmV4Y2VsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZCA9IHRoaXMuZXhjZWxbbGFiSWRdO1xyXG4gICAgICAgICAgICBpZiAocmVjb3JkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkW3RoaXMuY3VycmVudF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsYWJJZDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExhbmd1YWdlVHlwZSA9IFtcclxuICAgICdMYW5ndWFnZUxhYmVsJyxcclxuICAgICdMYW5ndWFnZVNwcml0ZScsXHJcbiAgICAnTGFuZ3VhZ2VTcGluZSdcclxuXSIsImltcG9ydCB7IENDU3RyaW5nLCBDb21wb25lbnQsIExhYmVsLCBSaWNoVGV4dCwgVFRGRm9udCwgX2RlY29yYXRvciwgd2FybiB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBFRElUT1IgfSBmcm9tIFwiY2MvZW52XCI7XHJcbmltcG9ydCB7IExhbmd1YWdlRGF0YSB9IGZyb20gXCIuL0xhbmd1YWdlRGF0YVwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgbWVudSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKFwiTGFuZ0xhYmVsUGFyYW1zSXRlbVwiKVxyXG5leHBvcnQgY2xhc3MgTGFuZ0xhYmVsUGFyYW1zSXRlbSB7XHJcbiAgICBAcHJvcGVydHlcclxuICAgIGtleTogc3RyaW5nID0gXCJcIjtcclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgdmFsdWU6IHN0cmluZyA9IFwiXCI7XHJcbn1cclxuXHJcbi8qKiDmlofmnKzlpJror63oqIAgKi9cclxuQGNjY2xhc3MoXCJMYW5ndWFnZUxhYmVsXCIpXHJcbkBtZW51KCdPb3BzRnJhbWV3b3JrL0xhbmd1YWdlL0xhbmd1YWdlTGFiZWwg77yI5paH5pys5aSa6K+t6KiA77yJJylcclxuZXhwb3J0IGNsYXNzIExhbmd1YWdlTGFiZWwgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBMYW5nTGFiZWxQYXJhbXNJdGVtLFxyXG4gICAgICAgIGRpc3BsYXlOYW1lOiBcInBhcmFtc1wiXHJcbiAgICB9KVxyXG4gICAgcHJpdmF0ZSBfcGFyYW1zOiBBcnJheTxMYW5nTGFiZWxQYXJhbXNJdGVtPiA9IFtdO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogTGFuZ0xhYmVsUGFyYW1zSXRlbSxcclxuICAgICAgICBkaXNwbGF5TmFtZTogXCJwYXJhbXNcIlxyXG4gICAgfSlcclxuICAgIHNldCBwYXJhbXModmFsdWU6IEFycmF5PExhbmdMYWJlbFBhcmFtc0l0ZW0+KSB7XHJcbiAgICAgICAgdGhpcy5fcGFyYW1zID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKCFFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5fbmVlZFVwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IHBhcmFtcygpOiBBcnJheTxMYW5nTGFiZWxQYXJhbXNJdGVtPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtcyB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICBAcHJvcGVydHkoeyBzZXJpYWxpemFibGU6IHRydWUgfSlcclxuICAgIHByaXZhdGUgX2RhdGFJRDogc3RyaW5nID0gXCJcIjtcclxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IENDU3RyaW5nLCBzZXJpYWxpemFibGU6IHRydWUgfSlcclxuICAgIGdldCBkYXRhSUQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YUlEIHx8IFwiXCI7XHJcbiAgICB9XHJcbiAgICBzZXQgZGF0YUlEKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9kYXRhSUQgPSB2YWx1ZTtcclxuICAgICAgICBpZiAoIUVESVRPUikge1xyXG4gICAgICAgICAgICB0aGlzLl9uZWVkVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBfc3RyaW5nID0gTGFuZ3VhZ2VEYXRhLmdldExhbmdCeUlEKHRoaXMuX2RhdGFJRCk7XHJcbiAgICAgICAgaWYgKF9zdHJpbmcgJiYgdGhpcy5fcGFyYW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFyYW1zLmZvckVhY2goKGl0ZW06IExhbmdMYWJlbFBhcmFtc0l0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIF9zdHJpbmcgPSBfc3RyaW5nLnJlcGxhY2UoYCV7JHtpdGVtLmtleX19YCwgaXRlbS52YWx1ZSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFfc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJbTGFuZ3VhZ2VMYWJlbF0g5pyq5om+5Yiw6K+t6KiA5qCH6K+G77yM5L2/55SoZGF0YUlE5pu/5o2iXCIpO1xyXG4gICAgICAgICAgICBfc3RyaW5nID0gdGhpcy5fZGF0YUlEO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3N0cmluZztcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pu05paw6K+t6KiAICovXHJcbiAgICBsYW5ndWFnZSgpIHtcclxuICAgICAgICB0aGlzLl9uZWVkVXBkYXRlID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yid5aeL5a2X5L2T5bC65a+4ICovXHJcbiAgICBpbml0Rm9udFNpemU6IG51bWJlciA9IDA7XHJcblxyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIHRoaXMuX25lZWRVcGRhdGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5L+u5pS55aSa6K+t6KiA5Y+C5pWw77yM6YeH55So5oOw5oCn5rGC5YC8562W55WlXHJcbiAgICAgKiBAcGFyYW0ga2V5IOWvueS6jmkxOG7ooajph4zpnaLnmoRrZXnlgLxcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDmm7/mjaLnmoTmlofmnKxcclxuICAgICAqL1xyXG4gICAgc2V0VmFycyhrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBoYXNrZXkgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3BhcmFtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgZWxlbWVudDogTGFuZ0xhYmVsUGFyYW1zSXRlbSA9IHRoaXMuX3BhcmFtc1tpXTtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQua2V5ID09PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGhhc2tleSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFoYXNrZXkpIHtcclxuICAgICAgICAgICAgbGV0IGlpID0gbmV3IExhbmdMYWJlbFBhcmFtc0l0ZW0oKTtcclxuICAgICAgICAgICAgaWkua2V5ID0ga2V5O1xyXG4gICAgICAgICAgICBpaS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJhbXMucHVzaChpaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX25lZWRVcGRhdGUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBfbmVlZFVwZGF0ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHVwZGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fbmVlZFVwZGF0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbnRlbnQoKTtcclxuICAgICAgICAgICAgdGhpcy5fbmVlZFVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVDb250ZW50KCkge1xyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5nZXRDb21wb25lbnQoTGFiZWwpO1xyXG4gICAgICAgIGNvbnN0IHJpY2h0ZXh0ID0gdGhpcy5nZXRDb21wb25lbnQoUmljaFRleHQpO1xyXG4gICAgICAgIGNvbnN0IGZvbnQ6IFRURkZvbnQgfCBudWxsID0gTGFuZ3VhZ2VEYXRhLmZvbnQ7XHJcblxyXG4gICAgICAgIGlmIChsYWJlbCkge1xyXG4gICAgICAgICAgICBpZiAoZm9udCkge1xyXG4gICAgICAgICAgICAgICAgbGFiZWwuZm9udCA9IGZvbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGFiZWwuc3RyaW5nID0gdGhpcy5zdHJpbmc7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEZvbnRTaXplID0gbGFiZWwuZm9udFNpemU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJpY2h0ZXh0KSB7XHJcbiAgICAgICAgICAgIGlmIChmb250KSB7XHJcbiAgICAgICAgICAgICAgICByaWNodGV4dC5mb250ID0gZm9udDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByaWNodGV4dC5zdHJpbmcgPSB0aGlzLnN0cmluZztcclxuICAgICAgICAgICAgdGhpcy5pbml0Rm9udFNpemUgPSByaWNodGV4dC5mb250U2l6ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJbTGFuZ3VhZ2VMYWJlbF0sIOivpeiKgueCueayoeaciWNjLkxhYmVsIHx8IGNjLlJpY2hUZXh057uE5Lu2XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTA3LTAzIDE2OjEzOjE3XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTA4LTIyIDE2OjM0OjI4XHJcbiAqL1xyXG5pbXBvcnQgeyBkaXJlY3RvciwgZXJyb3IsIEpzb25Bc3NldCwgVFRGRm9udCB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyByZXNMb2FkZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9jb21tb24vbG9hZGVyL1Jlc0xvYWRlclwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9jb21tb24vbG9nL0xvZ2dlclwiO1xyXG5pbXBvcnQgeyBKc29uVXRpbCB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL3V0aWxzL0pzb25VdGlsXCI7XHJcbmltcG9ydCB7IExhbmd1YWdlRGF0YSwgTGFuZ3VhZ2VUeXBlIH0gZnJvbSBcIi4vTGFuZ3VhZ2VEYXRhXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTGFuZ3VhZ2VQYWNrIHtcclxuICAgIC8qKlxyXG4gICAgICog5Yi35paw6K+t6KiA5paH5a2XXHJcbiAgICAgKiBAcGFyYW0gbGFuZyBcclxuICAgICAqL1xyXG4gICAgdXBkYXRlTGFuZ3VhZ2UobGFuZzogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHJvb3ROb2RlcyA9IGRpcmVjdG9yLmdldFNjZW5lKCkhLmNoaWxkcmVuO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm9vdE5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIExhbmd1YWdlVHlwZS5mb3JFYWNoKHR5cGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGNvbXBzOiBhbnlbXSA9IHJvb3ROb2Rlc1tpXS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbih0eXBlKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29tcHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wc1tqXS5sYW5ndWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS4i+i9veWvueW6lOivreiogOWMhei1hOa6kFxyXG4gICAgICogQHBhcmFtIGxhbmcg6K+t6KiA5qCH6K+GXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sg5LiL6L295a6M5oiQ5Zue6LCDXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGxvYWRMYW5ndWFnZUFzc2V0cyhsYW5nOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFRleHR1cmUobGFuZyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkU3BpbmUobGFuZyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkSnNvbihsYW5nKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmxvYWRUYWJsZShsYW5nKTtcclxuXHJcbiAgICAgICAgY2FsbGJhY2sobGFuZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWkmuivreiogEV4Y2Vs6YWN572u6KGo5pWw5o2uICovXHJcbiAgICBwcml2YXRlIGxvYWRUYWJsZShsYW5nOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBMYW5ndWFnZURhdGEuZXhjZWwgPSBhd2FpdCBKc29uVXRpbC5sb2FkQXN5bmMoXCJMYW5ndWFnZVwiKTtcclxuICAgICAgICAgICAgaWYgKExhbmd1YWdlRGF0YS5leGNlbCkge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLmluc3RhbmNlLmxvZ0NvbmZpZyhcImNvbmZpZy9nYW1lL0xhbmd1YWdlXCIsIFwi5LiL6L296K+t6KiA5YyFIHRhYmxlIOi1hOa6kFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDnurnnkIblpJror63oqIDotYTmupAgKi9cclxuICAgIHByaXZhdGUgbG9hZFRleHR1cmUobGFuZzogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGAke0xhbmd1YWdlRGF0YS5wYXRoX3RleHR1cmV9LyR7bGFuZ31gO1xyXG4gICAgICAgICAgICByZXNMb2FkZXIubG9hZERpcihwYXRoLCAoZXJyOiBhbnksIGFzc2V0czogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIExvZ2dlci5pbnN0YW5jZS5sb2dDb25maWcocGF0aCwgXCLkuIvovb3or63oqIDljIUgdGV4dHVyZXMg6LWE5rqQXCIpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEpzb27moLzlvI/lpJror63oqIDotYTmupAgKi9cclxuICAgIHByaXZhdGUgbG9hZEpzb24obGFuZzogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGAke0xhbmd1YWdlRGF0YS5wYXRoX2pzb259LyR7bGFuZ31gO1xyXG4gICAgICAgICAgICBjb25zdCBqc29uQXNzZXQgPSBhd2FpdCByZXNMb2FkZXIubG9hZEFzeW5jKHBhdGgsIEpzb25Bc3NldCk7XHJcbiAgICAgICAgICAgIGlmIChqc29uQXNzZXQpIHtcclxuICAgICAgICAgICAgICAgIExhbmd1YWdlRGF0YS5qc29uID0ganNvbkFzc2V0Lmpzb247XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuaW5zdGFuY2UubG9nQ29uZmlnKHBhdGgsIFwi5LiL6L296K+t6KiA5YyFIGpzb24g6LWE5rqQXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVzTG9hZGVyLmxvYWQocGF0aCwgVFRGRm9udCwgKGVycjogRXJyb3IgfCBudWxsLCBmb250OiBUVEZGb250KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyID09IG51bGwpIExvZ2dlci5pbnN0YW5jZS5sb2dDb25maWcocGF0aCwgXCLkuIvovb3or63oqIDljIUgdHRmIOi1hOa6kFwiKTtcclxuICAgICAgICAgICAgICAgIExhbmd1YWdlRGF0YS5mb250ID0gZm9udDtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBTUElOReWKqOeUu+WkmuivreiogOi1hOa6kCAqL1xyXG4gICAgcHJpdmF0ZSBsb2FkU3BpbmUobGFuZzogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IGAke0xhbmd1YWdlRGF0YS5wYXRoX3NwaW5lfS8ke2xhbmd9YDtcclxuICAgICAgICAgICAgcmVzTG9hZGVyLmxvYWREaXIocGF0aCwgKGVycjogYW55LCBhc3NldHM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuaW5zdGFuY2UubG9nQ29uZmlnKHBhdGgsIFwi5LiL6L296K+t6KiA5YyFIHNwaW5lIOi1hOa6kFwiKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDph4rmlL7mn5DkuKror63oqIDnmoTor63oqIDljIXotYTmupDljIXmi6xqc29uXHJcbiAgICAgKiBAcGFyYW0gbGFuZyBcclxuICAgICAqL1xyXG4gICAgcmVsZWFzZUxhbmd1YWdlQXNzZXRzKGxhbmc6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBsYW5nVGV4dHVyZSA9IGAke0xhbmd1YWdlRGF0YS5wYXRoX3RleHR1cmV9LyR7bGFuZ31gO1xyXG4gICAgICAgIHJlc0xvYWRlci5yZWxlYXNlRGlyKGxhbmdUZXh0dXJlKTtcclxuXHJcbiAgICAgICAgbGV0IGxhbmdKc29uID0gYCR7TGFuZ3VhZ2VEYXRhLnBhdGhfanNvbn0vJHtsYW5nfWA7XHJcbiAgICAgICAgbGV0IGpzb24gPSByZXNMb2FkZXIuZ2V0KGxhbmdKc29uLCBKc29uQXNzZXQpO1xyXG4gICAgICAgIGlmIChqc29uKSB7XHJcbiAgICAgICAgICAgIGpzb24uZGVjUmVmKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZm9udCA9IHJlc0xvYWRlci5nZXQobGFuZ0pzb24sIFRURkZvbnQpO1xyXG4gICAgICAgIGlmIChmb250KSB7XHJcbiAgICAgICAgICAgIGZvbnQuZGVjUmVmKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbGFuZ1NwaW5lID0gYCR7TGFuZ3VhZ2VEYXRhLnBhdGhfc3BpbmV9LyR7bGFuZ31gO1xyXG4gICAgICAgIHJlc0xvYWRlci5yZWxlYXNlKGxhbmdTcGluZSk7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIzLTA3LTI1IDEwOjQ0OjM4XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTA3LTI1IDExOjQ4OjUyXHJcbiAqL1xyXG5pbXBvcnQgeyBDQ1N0cmluZywgQ29tcG9uZW50LCBfZGVjb3JhdG9yLCBzcCB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBFRElUT1IgfSBmcm9tIFwiY2MvZW52XCI7XHJcbmltcG9ydCB7IHJlc0xvYWRlciB9IGZyb20gXCIuLi8uLi8uLi9jb3JlL2NvbW1vbi9sb2FkZXIvUmVzTG9hZGVyXCI7XHJcbmltcG9ydCB7IExhbmd1YWdlRGF0YSB9IGZyb20gXCIuL0xhbmd1YWdlRGF0YVwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgbWVudSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiBTcGluZSDliqjnlLvlpJror63oqIAgKi9cclxuQGNjY2xhc3MoXCJMYW5ndWFnZVNwaW5lXCIpXHJcbkBtZW51KCdPb3BzRnJhbWV3b3JrL0xhbmd1YWdlL0xhbmd1YWdlU3BpbmUg77yIU3BpbmUg5Yqo55S75aSa6K+t6KiA77yJJylcclxuZXhwb3J0IGNsYXNzIExhbmd1YWdlU3BpbmUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KHsgc2VyaWFsaXphYmxlOiB0cnVlIH0pXHJcbiAgICBwcml2YXRlIF9kYXRhSUQ6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBAcHJvcGVydHkoeyB0eXBlOiBDQ1N0cmluZywgc2VyaWFsaXphYmxlOiB0cnVlIH0pXHJcbiAgICBnZXQgZGF0YUlEKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFJRCB8fCBcIlwiO1xyXG4gICAgfVxyXG4gICAgc2V0IGRhdGFJRCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fZGF0YUlEID0gdmFsdWU7XHJcbiAgICAgICAgaWYgKCFFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTcGluZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6buY6K6k5Yqo55S75ZCNICovXHJcbiAgICBwcml2YXRlIF9kZWZhdWx0QW5pbWF0aW9uOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBsZXQgc3BpbmU6IHNwLlNrZWxldG9uID0gdGhpcy5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pITtcclxuICAgICAgICB0aGlzLl9kZWZhdWx0QW5pbWF0aW9uID0gc3BpbmUuYW5pbWF0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlU3BpbmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pu05paw6K+t6KiAICovXHJcbiAgICBsYW5ndWFnZSgpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNwaW5lKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVTcGluZSgpIHtcclxuICAgICAgICAvLyDojrflj5bor63oqIDmoIforrBcclxuICAgICAgICBsZXQgcGF0aCA9IGBsYW5ndWFnZS9zcGluZS8ke0xhbmd1YWdlRGF0YS5jdXJyZW50fS8ke3RoaXMuZGF0YUlEfWA7XHJcbiAgICAgICAgbGV0IHJlczogc3AuU2tlbGV0b25EYXRhIHwgbnVsbCA9IHJlc0xvYWRlci5nZXQocGF0aCwgc3AuU2tlbGV0b25EYXRhKTtcclxuICAgICAgICBpZiAocmVzKSB7XHJcbiAgICAgICAgICAgIGxldCBzcGluZTogc3AuU2tlbGV0b24gPSB0aGlzLmdldENvbXBvbmVudChzcC5Ta2VsZXRvbikhO1xyXG4gICAgICAgICAgICBzcGluZS5za2VsZXRvbkRhdGEgPSByZXM7XHJcbiAgICAgICAgICAgIHNwaW5lLnNldEFuaW1hdGlvbigwLCB0aGlzLl9kZWZhdWx0QW5pbWF0aW9uLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJbTGFuZ3VhZ2VTcGluZV0g6LWE5rqQ5LiN5a2Y5ZyoIFwiICsgcGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0xMS0yNCAxNTo1MTowMVxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wMiAxMDowNDo1N1xyXG4gKi9cclxuaW1wb3J0IHsgQ0NTdHJpbmcsIENvbXBvbmVudCwgU2l6ZSwgU3ByaXRlLCBTcHJpdGVGcmFtZSwgVUlUcmFuc2Zvcm0sIF9kZWNvcmF0b3IgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgRURJVE9SIH0gZnJvbSBcImNjL2VudlwiO1xyXG5pbXBvcnQgeyByZXNMb2FkZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9jb21tb24vbG9hZGVyL1Jlc0xvYWRlclwiO1xyXG5pbXBvcnQgeyBMYW5ndWFnZURhdGEgfSBmcm9tIFwiLi9MYW5ndWFnZURhdGFcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHksIG1lbnUgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog5Zu+54mH5aSa6K+t6KiAICovXHJcbkBjY2NsYXNzKFwiTGFuZ3VhZ2VTcHJpdGVcIilcclxuQG1lbnUoJ09vcHNGcmFtZXdvcmsvTGFuZ3VhZ2UvTGFuZ3VhZ2VTcHJpdGUg77yI5Zu+54mH5aSa6K+t6KiA77yJJylcclxuZXhwb3J0IGNsYXNzIExhbmd1YWdlU3ByaXRlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eSh7IHNlcmlhbGl6YWJsZTogdHJ1ZSB9KVxyXG4gICAgcHJpdmF0ZSBfZGF0YUlEOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgQHByb3BlcnR5KHsgdHlwZTogQ0NTdHJpbmcsIHNlcmlhbGl6YWJsZTogdHJ1ZSB9KVxyXG4gICAgZ2V0IGRhdGFJRCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhSUQgfHwgXCJcIjtcclxuICAgIH1cclxuICAgIHNldCBkYXRhSUQodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX2RhdGFJRCA9IHZhbHVlO1xyXG4gICAgICAgIGlmICghRURJVE9SKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3ByaXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLmmK/lkKborr7nva7kuLrlm77niYfljp/lp4votYTmupDlpKflsI9cIlxyXG4gICAgfSlcclxuICAgIHByaXZhdGUgaXNSYXdTaXplOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNwcml0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmm7TmlrDor63oqIAgKi9cclxuICAgIGxhbmd1YWdlKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlU3ByaXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVTcHJpdGUoKSB7XHJcbiAgICAgICAgLy8g6I635Y+W6K+t6KiA5qCH6K6wXHJcbiAgICAgICAgbGV0IHBhdGggPSBgbGFuZ3VhZ2UvdGV4dHVyZS8ke0xhbmd1YWdlRGF0YS5jdXJyZW50fS8ke3RoaXMuZGF0YUlEfS9zcHJpdGVGcmFtZWA7XHJcbiAgICAgICAgbGV0IHJlczogU3ByaXRlRnJhbWUgfCBudWxsID0gcmVzTG9hZGVyLmdldChwYXRoLCBTcHJpdGVGcmFtZSk7XHJcbiAgICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgICAgICBsZXQgc3Bjb21wOiBTcHJpdGUgPSB0aGlzLmdldENvbXBvbmVudChTcHJpdGUpITtcclxuICAgICAgICAgICAgc3Bjb21wLnNwcml0ZUZyYW1lID0gcmVzO1xyXG5cclxuICAgICAgICAgICAgLyoqIOS/ruaUueiKgueCueS4uuWOn+Wni+WbvueJh+i1hOa6kOWkp+WwjyAqL1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1Jhd1NpemUpIHtcclxuICAgICAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgbGV0IHJhd1NpemUgPSByZXMuX29yaWdpbmFsU2l6ZSBhcyBTaXplO1xyXG4gICAgICAgICAgICAgICAgc3Bjb21wLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSk/LnNldENvbnRlbnRTaXplKHJhd1NpemUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW0xhbmd1YWdlU3ByaXRlXSDotYTmupDkuI3lrZjlnKggXCIgKyBwYXRoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTA3LTAzIDE2OjEzOjE3XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTA3LTI0IDE3OjE0OjU3XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgVUlDYWxsYmFja3MsIFZpZXdQYXJhbXMgfSBmcm9tIFwiLi9EZWZpbmVzXCI7XHJcbmltcG9ydCB7IFVJQ29uZmlnIH0gZnJvbSBcIi4vTGF5ZXJNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IExheWVyUG9wVXAgfSBmcm9tIFwiLi9MYXllclBvcHVwXCI7XHJcblxyXG4vKiog5qih5byP5by556qX5pWw5o2uICovXHJcbnR5cGUgRGlhbG9nUGFyYW0gPSB7XHJcbiAgICBjb25maWc6IFVJQ29uZmlnO1xyXG4gICAgcGFyYW1zPzogYW55O1xyXG4gICAgY2FsbGJhY2tzPzogVUlDYWxsYmFja3M7XHJcbn1cclxuXHJcbi8qXHJcbiAqIOaooeW8j+W8ueeql+Wxgu+8jOivpeWxgueahOeql+WPo+WQjOaXtuWPquiDveaYvuekuuS4gOS4qu+8jOWIoOmZpOS7peWQjuS8muiHquWKqOS7jumYn+WIl+W9k+S4reWPluS4gOS4quW8ueeql++8jOebtOWIsOmYn+WIl+S4uuepulxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExheWVyRGlhbG9nIGV4dGVuZHMgTGF5ZXJQb3BVcCB7XHJcbiAgICAvKiog56qX5Y+j6LCD55So5Y+C5pWw6Zif5YiXICovXHJcbiAgICBwcml2YXRlIHBhcmFtczogQXJyYXk8RGlhbG9nUGFyYW0+ID0gW107XHJcblxyXG4gICAgYWRkKGNvbmZpZzogVUlDb25maWcsIHBhcmFtcz86IGFueSwgY2FsbGJhY2tzPzogVUlDYWxsYmFja3MpIHtcclxuICAgICAgICAvLyDmjqfliLblkIzkuIDml7bpl7Tlj6rog73mmL7npLrkuIDkuKrmqKHlvI/nqpflj6NcclxuICAgICAgICBpZiAodGhpcy51aV9ub2Rlcy5zaXplID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja3M6IGNhbGxiYWNrcyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2hvdyhjb25maWcsIHBhcmFtcywgY2FsbGJhY2tzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pi+56S65qih5byP5by556qXICovXHJcbiAgICBwcml2YXRlIHNob3coY29uZmlnOiBVSUNvbmZpZywgcGFyYW1zPzogYW55LCBjYWxsYmFja3M/OiBVSUNhbGxiYWNrcykge1xyXG4gICAgICAgIGxldCB2cCA9IHRoaXMudWlfY2FjaGUuZ2V0KGNvbmZpZy5wcmVmYWIpO1xyXG4gICAgICAgIGlmICh2cCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZwID0gbmV3IFZpZXdQYXJhbXMoKTtcclxuICAgICAgICAgICAgdnAudmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB2cC5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cC5wYXJhbXMgPSBwYXJhbXMgfHwge307XHJcbiAgICAgICAgdnAuY2FsbGJhY2tzID0gY2FsbGJhY2tzID8/IHt9O1xyXG4gICAgICAgIHRoaXMudWlfbm9kZXMuc2V0KHZwLmNvbmZpZy5wcmVmYWIsIHZwKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkKHZwLCBjb25maWcuYnVuZGxlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25DbG9zZVdpbmRvdyh2cDogVmlld1BhcmFtcykge1xyXG4gICAgICAgIHN1cGVyLm9uQ2xvc2VXaW5kb3codnApO1xyXG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0LmJpbmQodGhpcyksIDApO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBzZXRCbGFja0Rpc2FibGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmxhY2suZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlVmFjYW5jeVJlbW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTWFzaygpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbmV4dCgpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJhbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW0gPSB0aGlzLnBhcmFtcy5zaGlmdCgpITtcclxuICAgICAgICAgICAgdGhpcy5zaG93KHBhcmFtLmNvbmZpZywgcGFyYW0ucGFyYW1zLCBwYXJhbS5jYWxsYmFja3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IENhbWVyYSwgTGF5ZXJzLCBOb2RlLCBSZXNvbHV0aW9uUG9saWN5LCBTYWZlQXJlYSwgV2lkZ2V0LCBzY3JlZW4sIHZpZXcsIHdhcm4gfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgb29wcyB9IGZyb20gXCIuLi8uLi9Pb3BzXCI7XHJcbmltcG9ydCB7IFVJQ2FsbGJhY2tzIH0gZnJvbSBcIi4vRGVmaW5lc1wiO1xyXG5pbXBvcnQgeyBEZWxlZ2F0ZUNvbXBvbmVudCB9IGZyb20gXCIuL0RlbGVnYXRlQ29tcG9uZW50XCI7XHJcbmltcG9ydCB7IExheWVyRGlhbG9nIH0gZnJvbSBcIi4vTGF5ZXJEaWFsb2dcIjtcclxuaW1wb3J0IHsgTGF5ZXJOb3RpZnkgfSBmcm9tIFwiLi9MYXllck5vdGlmeVwiO1xyXG5pbXBvcnQgeyBMYXllclBvcFVwIH0gZnJvbSBcIi4vTGF5ZXJQb3B1cFwiO1xyXG5pbXBvcnQgeyBMYXllclVJIH0gZnJvbSBcIi4vTGF5ZXJVSVwiO1xyXG5cclxuLyoqIOWxj+W5lemAgumFjeexu+WeiyAqL1xyXG5leHBvcnQgZW51bSBTY3JlZW5BZGFwdGVyVHlwZSB7XHJcbiAgICAvKiog6Ieq5Yqo6YCC6YWNICovXHJcbiAgICBBdXRvLFxyXG4gICAgLyoqIOaoquWxj+mAgumFjSAqL1xyXG4gICAgTGFuZHNjYXBlLFxyXG4gICAgLyoqIOerluWxj+mAgumFjSAqL1xyXG4gICAgUG9ydHJhaXRcclxufVxyXG5cclxuLyoqIOeVjOmdouWxguexu+WeiyAqL1xyXG5leHBvcnQgZW51bSBMYXllclR5cGUge1xyXG4gICAgLyoqIOS6jOe7tOa4uOaIj+WxgiAqL1xyXG4gICAgR2FtZSA9IFwiTGF5ZXJHYW1lXCIsXHJcbiAgICAvKiog5Li755WM6Z2i5bGCICovXHJcbiAgICBVSSA9IFwiTGF5ZXJVSVwiLFxyXG4gICAgLyoqIOW8ueeql+WxgiAqL1xyXG4gICAgUG9wVXAgPSBcIkxheWVyUG9wVXBcIixcclxuICAgIC8qKiDmqKHlvI/nqpflj6PlsYIgKi9cclxuICAgIERpYWxvZyA9IFwiTGF5ZXJEaWFsb2dcIixcclxuICAgIC8qKiDns7vnu5/op6blj5HmqKHlvI/nqpflj6PlsYIgKi9cclxuICAgIFN5c3RlbSA9IFwiTGF5ZXJTeXN0ZW1cIixcclxuICAgIC8qKiDmu5rliqjmtojmga/mj5DnpLrlsYIgKi9cclxuICAgIE5vdGlmeSA9IFwiTGF5ZXJOb3RpZnlcIixcclxuICAgIC8qKiDmlrDmiYvlvJXlr7zlsYIgKi9cclxuICAgIEd1aWRlID0gXCJMYXllckd1aWRlXCJcclxufVxyXG5cclxuLyoqIFxyXG4gKiDnlYzpnaLphY3nva7nu5PmnoTkvZNcclxuICogQGhlbHAgICAgaHR0cHM6Ly9naXRlZS5jb20vZGdmbGFzaC9vb3BzLWZyYW1ld29yay93aWtpcy9wYWdlcz9zb3J0X2lkPTEyMDM3OTg2JmRvY19pZD0yODczNTY1XHJcbiAqIEBleGFtcGxlXHJcbi8vIOeVjOmdouWUr+S4gOagh+ivhlxyXG5leHBvcnQgZW51bSBVSUlEIHtcclxuICAgIExvYWRpbmcgPSAxLFxyXG4gICAgV2luZG93LFxyXG4gICAgTmV0aW5zdGFibGVcclxufVxyXG5cclxuLy8g5omT5byA55WM6Z2i5pa55byP55qE6YWN572u5pWw5o2uXHJcbmV4cG9ydCB2YXIgVUlDb25maWdEYXRhOiB7IFtrZXk6IG51bWJlcl06IFVJQ29uZmlnIH0gPSB7XHJcbiAgICBbVUlJRC5Mb2FkaW5nXTogeyBsYXllcjogTGF5ZXJUeXBlLlVJLCBwcmVmYWI6IFwibG9hZGluZy9wcmVmYWIvbG9hZGluZ1wiLCBidW5kbGU6IFwicmVzb3VyY2VzXCIgfSxcclxuICAgIFtVSUlELk5ldGluc3RhYmxlXTogeyBsYXllcjogTGF5ZXJUeXBlLlBvcFVwLCBwcmVmYWI6IFwiY29tbW9uL3ByZWZhYi9uZXRpbnN0YWJsZVwiIH0sXHJcbiAgICBbVUlJRC5XaW5kb3ddOiB7IGxheWVyOiBMYXllclR5cGUuRGlhbG9nLCBwcmVmYWI6IFwiY29tbW9uL3ByZWZhYi93aW5kb3dcIiB9XHJcbn1cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgVUlDb25maWcge1xyXG4gICAgLyoqIC0tLS0t5YWs5YWx5bGe5oCnLS0tLS0gKi9cclxuICAgIC8qKiDov5znqIvljIXlkI0gKi9cclxuICAgIGJ1bmRsZT86IHN0cmluZztcclxuICAgIC8qKiDnqpflj6PlsYLnuqcgKi9cclxuICAgIGxheWVyOiBMYXllclR5cGU7XHJcbiAgICAvKiog6aKE5Yi26LWE5rqQ55u45a+56Lev5b6EICovXHJcbiAgICBwcmVmYWI6IHN0cmluZztcclxuICAgIC8qKiDmmK/lkKboh6rliqjmlr3mlL7vvIjpu5jorqTkuI3oh6rliqjph4rmlL7vvIkgKi9cclxuICAgIGRlc3Ryb3k/OiBib29sZWFuO1xyXG5cclxuICAgIC8qKiAtLS0tLeW8ueeql+WxnuaApy0tLS0tICovXHJcbiAgICAvKiog5piv5ZCm6Kem5pG46Z2e56qX5Y+j5Yy65Z+f5YWz6Zet77yI6buY6K6k5YWz6Zet77yJICovXHJcbiAgICB2YWNhbmN5PzogYm9vbGVhbixcclxuICAgIC8qKiDmmK/lkKbmiZPlvIDnqpflj6PlkI7mmL7npLrog4zmma/pga7nvanvvIjpu5jorqTlhbPpl63vvIkgKi9cclxuICAgIG1hc2s/OiBib29sZWFuO1xyXG4gICAgLyoqIOaYr+WQpuWQr+WKqOecn+acuuWuieWFqOWMuuWfn+aYvuekuiAqL1xyXG4gICAgc2FmZUFyZWE/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKiog55WM6Z2i5bGC57qn566h55CG5ZmoICovXHJcbmV4cG9ydCBjbGFzcyBMYXllck1hbmFnZXIge1xyXG4gICAgLyoqIOeVjOmdouagueiKgueCuSAqL1xyXG4gICAgcm9vdCE6IE5vZGU7XHJcbiAgICAvKiog55WM6Z2i5pGE5YOP5py6ICovXHJcbiAgICBjYW1lcmEhOiBDYW1lcmE7XHJcbiAgICAvKiog5ri45oiP55WM6Z2i54m55pWI5bGCICovXHJcbiAgICBnYW1lITogTm9kZTtcclxuICAgIC8qKiDmlrDmiYvlvJXlr7zlsYIgKi9cclxuICAgIGd1aWRlITogTm9kZTtcclxuXHJcbiAgICAvKiog56qX5Y+j5a696auY5q+U5L6LICovXHJcbiAgICB3aW5kb3dBc3BlY3RSYXRpbzogbnVtYmVyID0gMDtcclxuICAgIC8qKiDorr7orqHlrr3pq5jmr5TkvosgKi9cclxuICAgIGRlc2lnbkFzcGVjdFJhdGlvOiBudW1iZXIgPSAwO1xyXG4gICAgLyoqIOaYr+WQpuW8gOWQr+enu+WKqOiuvuWkh+WuieWFqOWMuuWfn+mAgumFjSAqL1xyXG4gICAgbW9iaWxlU2FmZUFyZWE6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKiog55WM6Z2i5bGCICovXHJcbiAgICBwcml2YXRlIHVpITogTGF5ZXJVSTtcclxuICAgIC8qKiDlvLnnqpflsYIgKi9cclxuICAgIHByaXZhdGUgcG9wdXAhOiBMYXllclBvcFVwO1xyXG4gICAgLyoqIOWPquiDveW8ueWHuuS4gOS4queahOW8ueeqlyAqL1xyXG4gICAgcHJpdmF0ZSBkaWFsb2chOiBMYXllckRpYWxvZztcclxuICAgIC8qKiDmuLjmiI/ns7vnu5/mj5DnpLrlvLnnqpcgICovXHJcbiAgICBwcml2YXRlIHN5c3RlbSE6IExheWVyRGlhbG9nO1xyXG4gICAgLyoqIOa2iOaBr+aPkOekuuaOp+WItuWZqO+8jOivt+S9v+eUqHNob3fmlrnms5XmnaXmmL7npLogKi9cclxuICAgIHByaXZhdGUgbm90aWZ5ITogTGF5ZXJOb3RpZnk7XHJcbiAgICAvKiogVUnphY3nva4gKi9cclxuICAgIHByaXZhdGUgY29uZmlnczogeyBba2V5OiBudW1iZXJdOiBVSUNvbmZpZyB9ID0ge307XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vljJbnlYzpnaLlsYJcclxuICAgICAqIEBwYXJhbSByb290ICDnlYzpnaLmoLnoioLngrlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpbml0TGF5ZXIocm9vdDogTm9kZSkge1xyXG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XHJcbiAgICAgICAgdGhpcy5pbml0U2NyZWVuQWRhcHRlcigpO1xyXG4gICAgICAgIHRoaXMuY2FtZXJhID0gdGhpcy5yb290LmdldENvbXBvbmVudEluQ2hpbGRyZW4oQ2FtZXJhKSE7XHJcbiAgICAgICAgdGhpcy5nYW1lID0gdGhpcy5jcmVhdGVfbm9kZShMYXllclR5cGUuR2FtZSk7XHJcblxyXG4gICAgICAgIHRoaXMudWkgPSBuZXcgTGF5ZXJVSShMYXllclR5cGUuVUkpO1xyXG4gICAgICAgIHRoaXMucG9wdXAgPSBuZXcgTGF5ZXJQb3BVcChMYXllclR5cGUuUG9wVXApO1xyXG4gICAgICAgIHRoaXMuZGlhbG9nID0gbmV3IExheWVyRGlhbG9nKExheWVyVHlwZS5EaWFsb2cpO1xyXG4gICAgICAgIHRoaXMuc3lzdGVtID0gbmV3IExheWVyRGlhbG9nKExheWVyVHlwZS5TeXN0ZW0pO1xyXG4gICAgICAgIHRoaXMubm90aWZ5ID0gbmV3IExheWVyTm90aWZ5KExheWVyVHlwZS5Ob3RpZnkpO1xyXG4gICAgICAgIHRoaXMuZ3VpZGUgPSB0aGlzLmNyZWF0ZV9ub2RlKExheWVyVHlwZS5HdWlkZSk7XHJcblxyXG4gICAgICAgIHJvb3QuYWRkQ2hpbGQodGhpcy5nYW1lKTtcclxuICAgICAgICByb290LmFkZENoaWxkKHRoaXMudWkpO1xyXG4gICAgICAgIHJvb3QuYWRkQ2hpbGQodGhpcy5wb3B1cCk7XHJcbiAgICAgICAgcm9vdC5hZGRDaGlsZCh0aGlzLmRpYWxvZyk7XHJcbiAgICAgICAgcm9vdC5hZGRDaGlsZCh0aGlzLnN5c3RlbSk7XHJcbiAgICAgICAgcm9vdC5hZGRDaGlsZCh0aGlzLm5vdGlmeSk7XHJcbiAgICAgICAgcm9vdC5hZGRDaGlsZCh0aGlzLmd1aWRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yid5aeL5YyW5bGP5bmV6YCC6YWNICovXHJcbiAgICBwcml2YXRlIGluaXRTY3JlZW5BZGFwdGVyKCkge1xyXG4gICAgICAgIGNvbnN0IGRycyA9IHZpZXcuZ2V0RGVzaWduUmVzb2x1dGlvblNpemUoKTtcclxuICAgICAgICBjb25zdCB3cyA9IHNjcmVlbi53aW5kb3dTaXplO1xyXG4gICAgICAgIHRoaXMud2luZG93QXNwZWN0UmF0aW8gPSB3cy53aWR0aCAvIHdzLmhlaWdodDtcclxuICAgICAgICB0aGlzLmRlc2lnbkFzcGVjdFJhdGlvID0gZHJzLndpZHRoIC8gZHJzLmhlaWdodDtcclxuXHJcbiAgICAgICAgbGV0IGZpbmFsVzogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgZmluYWxIOiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICBpZiAodGhpcy53aW5kb3dBc3BlY3RSYXRpbyA+IHRoaXMuZGVzaWduQXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgICAgZmluYWxIID0gZHJzLmhlaWdodDtcclxuICAgICAgICAgICAgZmluYWxXID0gZmluYWxIICogd3Mud2lkdGggLyB3cy5oZWlnaHQ7XHJcbiAgICAgICAgICAgIG9vcHMubG9nLmxvZ1ZpZXcoXCLpgILphY3lsY/luZXpq5jluqZcIiwgXCLjgJDmqKrlsY/jgJFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmaW5hbFcgPSBkcnMud2lkdGg7XHJcbiAgICAgICAgICAgIGZpbmFsSCA9IGZpbmFsVyAqIHdzLmhlaWdodCAvIHdzLndpZHRoO1xyXG4gICAgICAgICAgICBvb3BzLmxvZy5sb2dWaWV3KFwi6YCC6YWN5bGP5bmV5a695bqmXCIsIFwi44CQ56uW5bGP44CRXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2aWV3LnNldERlc2lnblJlc29sdXRpb25TaXplKGZpbmFsVywgZmluYWxILCBSZXNvbHV0aW9uUG9saWN5LlVOS05PV04pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5tb2JpbGVTYWZlQXJlYSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb3QuYWRkQ29tcG9uZW50KFNhZmVBcmVhKTtcclxuICAgICAgICAgICAgb29wcy5sb2cubG9nVmlldyhcIuW8gOWQr+enu+WKqOiuvuWkh+WuieWFqOWMuuWfn+mAgumFjVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vljJbmiYDmnIlVSeeahOmFjee9ruWvueixoVxyXG4gICAgICogQHBhcmFtIGNvbmZpZ3Mg6YWN572u5a+56LGhXHJcbiAgICAgKi9cclxuICAgIGluaXQoY29uZmlnczogeyBba2V5OiBudW1iZXJdOiBVSUNvbmZpZyB9KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb25maWdzID0gY29uZmlncztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9rueql+WPo+aJk+W8gOWksei0peWbnuiwg1xyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrICDlm57osIPmlrnms5VcclxuICAgICAqL1xyXG4gICAgc2V0T3BlbkZhaWx1cmUoY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy51aS5vbk9wZW5GYWlsdXJlID0gdGhpcy5wb3B1cC5vbk9wZW5GYWlsdXJlID0gdGhpcy5kaWFsb2cub25PcGVuRmFpbHVyZSA9IHRoaXMuc3lzdGVtLm9uT3BlbkZhaWx1cmUgPSBjYWxsYmFjaztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4kOmakOmjmOi/h+aPkOekulxyXG4gICAgICogQHBhcmFtIGNvbnRlbnQg5paH5pys6KGo56S6XHJcbiAgICAgKiBAcGFyYW0gdXNlSTE4biDmmK/lkKbkvb/nlKjlpJror63oqIBcclxuICAgICAqIEBleGFtcGxlIFxyXG4gICAgICogb29wcy5ndWkudG9hc3QoXCLmj5DnpLrlhoXlrrlcIik7XHJcbiAgICAgKi9cclxuICAgIHRvYXN0KGNvbnRlbnQ6IHN0cmluZywgdXNlSTE4bjogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkudG9hc3QoY29udGVudCwgdXNlSTE4bilcclxuICAgIH1cclxuXHJcbiAgICAvKiog5omT5byA562J5b6F5o+Q56S6ICovXHJcbiAgICB3YWl0T3BlbigpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeS53YWl0T3BlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlhbPpl63nrYnlvoXmj5DnpLogKi9cclxuICAgIHdhaXRDbG9zZSgpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeS53YWl0Q2xvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9rueVjOmdoumFjee9rlxyXG4gICAgICogQHBhcmFtIHVpSWQgICDopoHorr7nva7nmoTnlYzpnaJpZFxyXG4gICAgICogQHBhcmFtIGNvbmZpZyDopoHorr7nva7nmoTphY3nva5cclxuICAgICAqL1xyXG4gICAgc2V0Q29uZmlnKHVpSWQ6IG51bWJlciwgY29uZmlnOiBVSUNvbmZpZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY29uZmlnc1t1aUlkXSA9IGNvbmZpZztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWQjOatpeaJk+W8gOS4gOS4queql+WPo1xyXG4gICAgICogQHBhcmFtIHVpSWQgICAgICAgICAg56qX5Y+j5ZSv5LiA57yW5Y+3XHJcbiAgICAgKiBAcGFyYW0gdWlBcmdzICAgICAgICDnqpflj6Plj4LmlbBcclxuICAgICAqIEBwYXJhbSBjYWxsYmFja3MgICAgIOWbnuiwg+WvueixoVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgIHZhciB1aWM6IFVJQ2FsbGJhY2tzID0ge1xyXG4gICAgICAgIG9uQWRkZWQ6IChub2RlOiBOb2RlLCBwYXJhbXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgY29tcCA9IG5vZGUuZ2V0Q29tcG9uZW50KExvYWRpbmdWaWV3Q29tcCkgYXMgZWNzLkNvbXA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9uUmVtb3ZlZDoobm9kZTogTm9kZSB8IG51bGwsIHBhcmFtczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIG9vcHMuZ3VpLm9wZW4oVUlJRC5Mb2FkaW5nLCBudWxsLCB1aWMpO1xyXG4gICAgICovXHJcbiAgICBvcGVuKHVpSWQ6IG51bWJlciwgdWlBcmdzOiBhbnkgPSBudWxsLCBjYWxsYmFja3M/OiBVSUNhbGxiYWNrcyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnc1t1aUlkXTtcclxuICAgICAgICBpZiAoY29uZmlnID09IG51bGwpIHtcclxuICAgICAgICAgICAgd2Fybihg5omT5byA57yW5Y+35Li644CQJHt1aUlkfeOAkeeahOeVjOmdouWksei0pe+8jOmFjee9ruS/oeaBr+S4jeWtmOWcqGApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKGNvbmZpZy5sYXllcikge1xyXG4gICAgICAgICAgICBjYXNlIExheWVyVHlwZS5VSTpcclxuICAgICAgICAgICAgICAgIHRoaXMudWkuYWRkKGNvbmZpZywgdWlBcmdzLCBjYWxsYmFja3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTGF5ZXJUeXBlLlBvcFVwOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3B1cC5hZGQoY29uZmlnLCB1aUFyZ3MsIGNhbGxiYWNrcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBMYXllclR5cGUuRGlhbG9nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2cuYWRkKGNvbmZpZywgdWlBcmdzLCBjYWxsYmFja3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTGF5ZXJUeXBlLlN5c3RlbTpcclxuICAgICAgICAgICAgICAgIHRoaXMuc3lzdGVtLmFkZChjb25maWcsIHVpQXJncywgY2FsbGJhY2tzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW8guatpeaJk+W8gOS4gOS4queql+WPo1xyXG4gICAgICogQHBhcmFtIHVpSWQgICAgICAgICAg56qX5Y+j5ZSv5LiA57yW5Y+3XHJcbiAgICAgKiBAcGFyYW0gdWlBcmdzICAgICAgICDnqpflj6Plj4LmlbBcclxuICAgICAqIEBleGFtcGxlIFxyXG4gICAgICogdmFyIG5vZGUgPSBhd2FpdCBvb3BzLmd1aS5vcGVuQXN5bmMoVUlJRC5Mb2FkaW5nKTtcclxuICAgICAqL1xyXG4gICAgYXN5bmMgb3BlbkFzeW5jKHVpSWQ6IG51bWJlciwgdWlBcmdzOiBhbnkgPSBudWxsKTogUHJvbWlzZTxOb2RlIHwgbnVsbD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxOb2RlIHwgbnVsbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3M6IFVJQ2FsbGJhY2tzID0ge1xyXG4gICAgICAgICAgICAgICAgb25BZGRlZDogKG5vZGU6IE5vZGUsIHBhcmFtczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShub2RlKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbkxvYWRGYWlsdXJlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5vcGVuKHVpSWQsIHVpQXJncywgY2FsbGJhY2tzKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWcuuaZr+abv+aNolxyXG4gICAgICogQHBhcmFtIHJlbW92ZVVpSWQgIOenu+mZpOWcuuaZr+e8luWPt1xyXG4gICAgICogQHBhcmFtIG9wZW5VaUlkICAgIOaWsOaJk+W8gOWcuuaZr+e8luWPt1xyXG4gICAgICogQHBhcmFtIHVpQXJncyAgICAgIOaWsOaJk+W8gOWcuuaZr+WPguaVsFxyXG4gICAgICovXHJcbiAgICByZXBsYWNlKHJlbW92ZVVpSWQ6IG51bWJlciwgb3BlblVpSWQ6IG51bWJlciwgdWlBcmdzOiBhbnkgPSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzOiBVSUNhbGxiYWNrcyA9IHtcclxuICAgICAgICAgICAgb25BZGRlZDogKG5vZGU6IE5vZGUsIHBhcmFtczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShyZW1vdmVVaUlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5vcGVuKG9wZW5VaUlkLCB1aUFyZ3MsIGNhbGxiYWNrcyk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5byC5q2l5Zy65pmv5pu/5o2iXHJcbiAgICAgKiBAcGFyYW0gcmVtb3ZlVWlJZCAg56e76Zmk5Zy65pmv57yW5Y+3XHJcbiAgICAgKiBAcGFyYW0gb3BlblVpSWQgICAg5paw5omT5byA5Zy65pmv57yW5Y+3XHJcbiAgICAgKiBAcGFyYW0gdWlBcmdzICAgICAg5paw5omT5byA5Zy65pmv5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIHJlcGxhY2VBc3luYyhyZW1vdmVVaUlkOiBudW1iZXIsIG9wZW5VaUlkOiBudW1iZXIsIHVpQXJnczogYW55ID0gbnVsbCk6IFByb21pc2U8Tm9kZSB8IG51bGw+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Tm9kZSB8IG51bGw+KGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGF3YWl0IHRoaXMub3BlbkFzeW5jKG9wZW5VaUlkLCB1aUFyZ3MpO1xyXG4gICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUocmVtb3ZlVWlJZCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57yT5a2Y5Lit5piv5ZCm5a2Y5Zyo5oyH5a6a5qCH6K+G55qE56qX5Y+jXHJcbiAgICAgKiBAcGFyYW0gdWlJZCDnqpflj6PllK/kuIDmoIfor4ZcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBvb3BzLmd1aS5oYXMoVUlJRC5Mb2FkaW5nKTtcclxuICAgICAqL1xyXG4gICAgaGFzKHVpSWQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnc1t1aUlkXTtcclxuICAgICAgICBpZiAoY29uZmlnID09IG51bGwpIHtcclxuICAgICAgICAgICAgd2Fybihg57yW5Y+35Li644CQJHt1aUlkfeOAkeeahOeVjOmdoumFjee9ruS4jeWtmOWcqO+8jOmFjee9ruS/oeaBr+S4jeWtmOWcqGApO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgc3dpdGNoIChjb25maWcubGF5ZXIpIHtcclxuICAgICAgICAgICAgY2FzZSBMYXllclR5cGUuVUk6XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnVpLmhhcyhjb25maWcucHJlZmFiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIExheWVyVHlwZS5Qb3BVcDpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMucG9wdXAuaGFzKGNvbmZpZy5wcmVmYWIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTGF5ZXJUeXBlLkRpYWxvZzpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZGlhbG9nLmhhcyhjb25maWcucHJlZmFiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIExheWVyVHlwZS5TeXN0ZW06XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnN5c3RlbS5oYXMoY29uZmlnLnByZWZhYik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnvJPlrZjkuK3mmK/lkKblrZjlnKjmjIflrprmoIfor4bnmoTnqpflj6NcclxuICAgICAqIEBwYXJhbSB1aUlkIOeql+WPo+WUr+S4gOagh+ivhlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIG9vcHMuZ3VpLmhhcyhVSUlELkxvYWRpbmcpO1xyXG4gICAgICovXHJcbiAgICBnZXQodWlJZDogbnVtYmVyKTogTm9kZSB7XHJcbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWdzW3VpSWRdO1xyXG4gICAgICAgIGlmIChjb25maWcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB3YXJuKGDnvJblj7fkuLrjgJAke3VpSWR944CR55qE55WM6Z2i6YWN572u5LiN5a2Y5Zyo77yM6YWN572u5L+h5oGv5LiN5a2Y5ZyoYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsITtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQ6IE5vZGUgPSBudWxsITtcclxuICAgICAgICBzd2l0Y2ggKGNvbmZpZy5sYXllcikge1xyXG4gICAgICAgICAgICBjYXNlIExheWVyVHlwZS5VSTpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMudWkuZ2V0KGNvbmZpZy5wcmVmYWIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTGF5ZXJUeXBlLlBvcFVwOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5wb3B1cC5nZXQoY29uZmlnLnByZWZhYik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBMYXllclR5cGUuRGlhbG9nOlxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5kaWFsb2cuZ2V0KGNvbmZpZy5wcmVmYWIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTGF5ZXJUeXBlLlN5c3RlbTpcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc3lzdGVtLmdldChjb25maWcucHJlZmFiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk5oyH5a6a5qCH6K+G55qE56qX5Y+jXHJcbiAgICAgKiBAcGFyYW0gdWlJZCAgICAgICAgIOeql+WPo+WUr+S4gOagh+ivhlxyXG4gICAgICogQHBhcmFtIGlzRGVzdHJveSAgICDnp7vpmaTlkI7mmK/lkKbph4rmlL5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBvb3BzLmd1aS5yZW1vdmUoVUlJRC5Mb2FkaW5nKTtcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlKHVpSWQ6IG51bWJlciwgaXNEZXN0cm95PzogYm9vbGVhbikge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnc1t1aUlkXTtcclxuICAgICAgICBpZiAoY29uZmlnID09IG51bGwpIHtcclxuICAgICAgICAgICAgd2Fybihg5Yig6Zmk57yW5Y+35Li644CQJHt1aUlkfeOAkeeahOeVjOmdouWksei0pe+8jOmFjee9ruS/oeaBr+S4jeWtmOWcqGApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKGNvbmZpZy5sYXllcikge1xyXG4gICAgICAgICAgICBjYXNlIExheWVyVHlwZS5VSTpcclxuICAgICAgICAgICAgICAgIHRoaXMudWkucmVtb3ZlKGNvbmZpZy5wcmVmYWIsIGlzRGVzdHJveSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBMYXllclR5cGUuUG9wVXA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVwLnJlbW92ZShjb25maWcucHJlZmFiLCBpc0Rlc3Ryb3kpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTGF5ZXJUeXBlLkRpYWxvZzpcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nLnJlbW92ZShjb25maWcucHJlZmFiLCBpc0Rlc3Ryb3kpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTGF5ZXJUeXBlLlN5c3RlbTpcclxuICAgICAgICAgICAgICAgIHRoaXMuc3lzdGVtLnJlbW92ZShjb25maWcucHJlZmFiLCBpc0Rlc3Ryb3kpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yig6Zmk5LiA5Liq6YCa6L+HdGhpc+ahhuaetua3u+WKoOi/m+adpeeahOiKgueCuVxyXG4gICAgICogQHBhcmFtIG5vZGUgICAgICAgICAg56qX5Y+j6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gaXNEZXN0cm95ICAgICDnp7vpmaTlkI7mmK/lkKbph4rmlL7otYTmupBcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBvb3BzLmd1aS5yZW1vdmVCeU5vZGUoY2MuTm9kZSk7XHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUJ5Tm9kZShub2RlOiBOb2RlLCBpc0Rlc3Ryb3k/OiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBOb2RlKSB7XHJcbiAgICAgICAgICAgIGxldCBjb21wID0gbm9kZS5nZXRDb21wb25lbnQoRGVsZWdhdGVDb21wb25lbnQpO1xyXG4gICAgICAgICAgICBpZiAoY29tcCAmJiBjb21wLnZwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDph4rmlL7mmL7npLrnmoTnlYzpnaJcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIChub2RlLnBhcmVudCBhcyBMYXllclVJKS5yZW1vdmUoY29tcC52cC5jb25maWcucHJlZmFiLCBpc0Rlc3Ryb3kpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g6YeK5pS+57yT5a2Y5Lit55qE55WM6Z2iXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0Rlc3Ryb3kpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvbXAudnAuY29uZmlnLmxheWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTGF5ZXJUeXBlLlVJOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSDms6jvvJrkuI3lr7nlpJbkvb/nlKhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWkucmVtb3ZlQ2FjaGUoY29tcC52cC5jb25maWcucHJlZmFiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIExheWVyVHlwZS5Qb3BVcDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUg5rOo77ya5LiN5a+55aSW5L2/55SoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVwLnJlbW92ZUNhY2hlKGNvbXAudnAuY29uZmlnLnByZWZhYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBMYXllclR5cGUuRGlhbG9nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSDms6jvvJrkuI3lr7nlpJbkvb/nlKhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nLnJlbW92ZUNhY2hlKGNvbXAudnAuY29uZmlnLnByZWZhYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBMYXllclR5cGUuU3lzdGVtOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSDms6jvvJrkuI3lr7nlpJbkvb/nlKhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3lzdGVtLnJlbW92ZUNhY2hlKGNvbXAudnAuY29uZmlnLnByZWZhYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGDlvZPliY3liKDpmaTnmoRub2Rl5LiN5piv6YCa6L+H55WM6Z2i566h55CG5Zmo5re75Yqg5Yiw6Iie5Y+w5LiKYCk7XHJcbiAgICAgICAgICAgICAgICBub2RlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4hemZpOaJgOacieeql+WPo1xyXG4gICAgICogQHBhcmFtIGlzRGVzdHJveSDnp7vpmaTlkI7mmK/lkKbph4rmlL5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBvb3BzLmd1aS5jbGVhcigpO1xyXG4gICAgICovXHJcbiAgICBjbGVhcihpc0Rlc3Ryb3k6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIHRoaXMudWkuY2xlYXIoaXNEZXN0cm95KTtcclxuICAgICAgICB0aGlzLnBvcHVwLmNsZWFyKGlzRGVzdHJveSk7XHJcbiAgICAgICAgdGhpcy5kaWFsb2cuY2xlYXIoaXNEZXN0cm95KTtcclxuICAgICAgICB0aGlzLnN5c3RlbS5jbGVhcihpc0Rlc3Ryb3kpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlX25vZGUobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBOb2RlKG5hbWUpO1xyXG4gICAgICAgIG5vZGUubGF5ZXIgPSBMYXllcnMuRW51bS5VSV8yRDtcclxuICAgICAgICBjb25zdCB3OiBXaWRnZXQgPSBub2RlLmFkZENvbXBvbmVudChXaWRnZXQpO1xyXG4gICAgICAgIHcuaXNBbGlnbkxlZnQgPSB3LmlzQWxpZ25SaWdodCA9IHcuaXNBbGlnblRvcCA9IHcuaXNBbGlnbkJvdHRvbSA9IHRydWU7XHJcbiAgICAgICAgdy5sZWZ0ID0gdy5yaWdodCA9IHcudG9wID0gdy5ib3R0b20gPSAwO1xyXG4gICAgICAgIHcuYWxpZ25Nb2RlID0gMjtcclxuICAgICAgICB3LmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wOC0xNSAxMDowNjo0N1xyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wMiAxMzo0NDoxMlxyXG4gKi9cclxuaW1wb3J0IHsgQmxvY2tJbnB1dEV2ZW50cywgTGF5ZXJzLCBOb2RlLCBXaWRnZXQsIGluc3RhbnRpYXRlIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IFZpZXdVdGlsIH0gZnJvbSBcIi4uLy4uL3V0aWxzL1ZpZXdVdGlsXCI7XHJcbmltcG9ydCB7IE5vdGlmeSB9IGZyb20gXCIuLi9wcm9tcHQvTm90aWZ5XCI7XHJcblxyXG5jb25zdCBUb2FzdFByZWZhYlBhdGg6IHN0cmluZyA9ICdjb21tb24vcHJlZmFiL25vdGlmeSc7XHJcbmNvbnN0IFdhaXRQcmVmYWJQYXRoOiBzdHJpbmcgPSAnY29tbW9uL3ByZWZhYi93YWl0JztcclxuXHJcbi8qXHJcbiAqIOa7muWKqOa2iOaBr+aPkOekuuWxglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExheWVyTm90aWZ5IGV4dGVuZHMgTm9kZSB7XHJcbiAgICBwcml2YXRlIGJsYWNrITogQmxvY2tJbnB1dEV2ZW50cztcclxuICAgIC8qKiDnrYnlvoXmj5DnpLrotYTmupAgKi9cclxuICAgIHByaXZhdGUgd2FpdDogTm9kZSA9IG51bGwhO1xyXG4gICAgLyoqIOiHquWumuS5ieW8ueWHuuaPkOekuui1hOa6kCAqL1xyXG4gICAgcHJpdmF0ZSBub3RpZnk6IE5vZGUgPSBudWxsITtcclxuICAgIC8qKiDoh6rlrprkuYnlvLnlh7rmj5DnpLrlhoXlrrnotYTmupAgKi9cclxuICAgIHByaXZhdGUgbm90aWZ5SXRlbTogTm9kZSA9IG51bGwhO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG5cclxuICAgICAgICBjb25zdCB3aWRnZXQ6IFdpZGdldCA9IHRoaXMuYWRkQ29tcG9uZW50KFdpZGdldCk7XHJcbiAgICAgICAgd2lkZ2V0LmlzQWxpZ25MZWZ0ID0gd2lkZ2V0LmlzQWxpZ25SaWdodCA9IHdpZGdldC5pc0FsaWduVG9wID0gd2lkZ2V0LmlzQWxpZ25Cb3R0b20gPSB0cnVlO1xyXG4gICAgICAgIHdpZGdldC5sZWZ0ID0gd2lkZ2V0LnJpZ2h0ID0gd2lkZ2V0LnRvcCA9IHdpZGdldC5ib3R0b20gPSAwO1xyXG4gICAgICAgIHdpZGdldC5hbGlnbk1vZGUgPSAyO1xyXG4gICAgICAgIHdpZGdldC5lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5sYXllciA9IExheWVycy5FbnVtLlVJXzJEO1xyXG4gICAgICAgIHRoaXMuYmxhY2sgPSB0aGlzLmFkZENvbXBvbmVudChCbG9ja0lucHV0RXZlbnRzKTtcclxuICAgICAgICB0aGlzLmJsYWNrLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5omT5byA562J5b6F5o+Q56S6ICovXHJcbiAgICB3YWl0T3BlbigpIHtcclxuICAgICAgICBpZiAodGhpcy53YWl0ID09IG51bGwpIHRoaXMud2FpdCA9IFZpZXdVdGlsLmNyZWF0ZVByZWZhYk5vZGUoV2FpdFByZWZhYlBhdGgpO1xyXG4gICAgICAgIGlmICh0aGlzLndhaXQucGFyZW50ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy53YWl0LnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuYmxhY2suZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlhbPpl63nrYnlvoXmj5DnpLogKi9cclxuICAgIHdhaXRDbG9zZSgpIHtcclxuICAgICAgICBpZiAodGhpcy53YWl0ICYmIHRoaXMud2FpdC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy53YWl0LnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuYmxhY2suZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4kOmakOmjmOi/h+aPkOekulxyXG4gICAgICogQHBhcmFtIGNvbnRlbnQg5paH5pys6KGo56S6XHJcbiAgICAgKiBAcGFyYW0gdXNlSTE4biDmmK/lkKbkvb/nlKjlpJror63oqIBcclxuICAgICAqL1xyXG4gICAgdG9hc3QoY29udGVudDogc3RyaW5nLCB1c2VJMThuOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5ID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnkgPSBWaWV3VXRpbC5jcmVhdGVQcmVmYWJOb2RlKFRvYXN0UHJlZmFiUGF0aCk7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5SXRlbSA9IHRoaXMubm90aWZ5LmNoaWxkcmVuWzBdO1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeUl0ZW0ucGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubm90aWZ5LnBhcmVudCA9IHRoaXM7XHJcbiAgICAgICAgbGV0IGNoaWxkTm9kZSA9IGluc3RhbnRpYXRlKHRoaXMubm90aWZ5SXRlbSk7XHJcbiAgICAgICAgbGV0IHByb21wdCA9IGNoaWxkTm9kZS5nZXRDaGlsZEJ5TmFtZShcInByb21wdFwiKSE7XHJcbiAgICAgICAgbGV0IHRvYXN0Q29tID0gcHJvbXB0LmdldENvbXBvbmVudChOb3RpZnkpITtcclxuICAgICAgICBjaGlsZE5vZGUucGFyZW50ID0gdGhpcy5ub3RpZnk7XHJcblxyXG4gICAgICAgIHRvYXN0Q29tLm9uQ29tcGxldGUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5vdGlmeS5jaGlsZHJlbi5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkucGFyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdG9hc3RDb20udG9hc3QoY29udGVudCwgdXNlSTE4bik7XHJcblxyXG4gICAgICAgIC8vIOi2hei/hzPkuKrmj5DnpLrvvIzlsLHmlr3mlL7nrKzkuIDkuKrmj5DnpLpcclxuICAgICAgICBpZiAodGhpcy5ub3RpZnkuY2hpbGRyZW4ubGVuZ3RoID4gMykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS5jaGlsZHJlblswXS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLypcclxuICogQERhdGU6IDIwMjEtMTEtMjQgMTY6MDg6MzZcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDIgMTM6NDQ6MjhcclxuICovXHJcblxyXG5pbXBvcnQgeyBCbG9ja0lucHV0RXZlbnRzLCBFdmVudFRvdWNoLCBMYXllcnMsIE5vZGUgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgVmlld1V0aWwgfSBmcm9tIFwiLi4vLi4vdXRpbHMvVmlld1V0aWxcIjtcclxuaW1wb3J0IHsgVmlld1BhcmFtcyB9IGZyb20gXCIuL0RlZmluZXNcIjtcclxuaW1wb3J0IHsgVUlDb25maWcgfSBmcm9tIFwiLi9MYXllck1hbmFnZXJcIjtcclxuaW1wb3J0IHsgTGF5ZXJVSSB9IGZyb20gXCIuL0xheWVyVUlcIjtcclxuXHJcbmNvbnN0IE1hc2s6IHN0cmluZyA9ICdjb21tb24vcHJlZmFiL21hc2snO1xyXG5cclxuLyog5by556qX5bGC77yM5YWB6K645ZCM5pe25by55Ye65aSa5Liq56qX5Y+jICovXHJcbmV4cG9ydCBjbGFzcyBMYXllclBvcFVwIGV4dGVuZHMgTGF5ZXJVSSB7XHJcbiAgICAvKiog6Kem5pG45LqL5Lu26Zi75oyhICovXHJcbiAgICBwcm90ZWN0ZWQgYmxhY2shOiBCbG9ja0lucHV0RXZlbnRzO1xyXG4gICAgLyoqIOWNiumAj+aYjumBrue9qei1hOa6kCAqL1xyXG4gICAgcHJvdGVjdGVkIG1hc2shOiBOb2RlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG5hbWUpO1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLmxheWVyID0gTGF5ZXJzLkVudW0uVUlfMkQ7XHJcbiAgICAgICAgdGhpcy5vbihOb2RlLkV2ZW50VHlwZS5DSElMRF9BRERFRCwgdGhpcy5vbkNoaWxkQWRkZWQsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMub24oTm9kZS5FdmVudFR5cGUuQ0hJTERfUkVNT1ZFRCwgdGhpcy5vbkNoaWxkUmVtb3ZlZCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNoaWxkQWRkZWQoY2hpbGQ6IE5vZGUpIHtcclxuICAgICAgICBpZiAodGhpcy5tYXNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWFzay5zZXRTaWJsaW5nSW5kZXgodGhpcy5jaGlsZHJlbi5sZW5ndGggLSAyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkNoaWxkUmVtb3ZlZChjaGlsZDogTm9kZSkge1xyXG4gICAgICAgIGlmICh0aGlzLm1hc2spIHtcclxuICAgICAgICAgICAgdGhpcy5tYXNrLnNldFNpYmxpbmdJbmRleCh0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgc2hvd1VpKHZwOiBWaWV3UGFyYW1zKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHN1cGVyLnNob3dVaSh2cCk7XHJcbiAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgLy8g55WM6Z2i5Yqg6L295a6M5oiQ5pi+56S65pe277yM5ZCv5Yqo6Kem5pG46Z2e56qX5Y+j5Yy65Z+f5YWz6ZetXHJcbiAgICAgICAgICAgIHRoaXMub3BlblZhY2FuY3lSZW1vdmUodnAuY29uZmlnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOeVjOmdouWKoOi9veWujOaIkOaYvuekuuaXtu+8jOWxgue6p+S6i+S7tumYu+aMoVxyXG4gICAgICAgICAgICB0aGlzLmJsYWNrLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcjtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25DbG9zZVdpbmRvdyh2cDogVmlld1BhcmFtcykge1xyXG4gICAgICAgIHN1cGVyLm9uQ2xvc2VXaW5kb3codnApO1xyXG5cclxuICAgICAgICAvLyDnlYzpnaLlhbPpl63lkI7vvIzlhbPpl63op6bmkbjkuovku7bpmLvmjKHjgIHlhbPpl63op6bmkbjpnZ7nqpflj6PljLrln5/lhbPpl63jgIHlhbPpl63pga7nvalcclxuICAgICAgICB0aGlzLnNldEJsYWNrRGlzYWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDorr7nva7op6bmkbjkuovku7bpmLvmjKEgKi9cclxuICAgIHByb3RlY3RlZCBzZXRCbGFja0Rpc2FibGUoKSB7XHJcbiAgICAgICAgLy8g5omA5pyJ5by556qX5YWz6Zet5ZCO77yM5YWz6Zet5LqL5Lu26Zi75oyh5Yqf6IO9XHJcbiAgICAgICAgaWYgKHRoaXMudWlfbm9kZXMuc2l6ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmxhY2suZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlVmFjYW5jeVJlbW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlTWFzaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5YWz6Zet6YGu572pICovXHJcbiAgICBwcm90ZWN0ZWQgY2xvc2VNYXNrKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1hc2sgPT0gbnVsbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgZmxhZyA9IHRydWU7XHJcbiAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgdGhpcy51aV9ub2Rlcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuY29uZmlnLm1hc2spIHtcclxuICAgICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmxhZykge1xyXG4gICAgICAgICAgICB0aGlzLm1hc2sucGFyZW50ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWQr+WKqOinpuaRuOmdnueql+WPo+WMuuWfn+WFs+mXrSAqL1xyXG4gICAgcHJvdGVjdGVkIG9wZW5WYWNhbmN5UmVtb3ZlKGNvbmZpZzogVUlDb25maWcpIHtcclxuICAgICAgICAvLyDog4zmma/ljYrpgI/mmI7pga7nvalcclxuICAgICAgICBpZiAodGhpcy5tYXNrID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXNrID0gVmlld1V0aWwuY3JlYXRlUHJlZmFiTm9kZShNYXNrKTtcclxuICAgICAgICAgICAgdGhpcy5tYXNrLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCwgdGhpcy5vblRvdWNoRW5kLCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYmxhY2sgPSB0aGlzLm1hc2suYWRkQ29tcG9uZW50KEJsb2NrSW5wdXRFdmVudHMpO1xyXG4gICAgICAgICAgICB0aGlzLmJsYWNrLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjb25maWcubWFzaykge1xyXG4gICAgICAgICAgICB0aGlzLm1hc2sucGFyZW50ID0gdGhpcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOinpuaRuOmdnueql+WPo+WMuuWfn+WFs+mXrSAqL1xyXG4gICAgcHJpdmF0ZSBvblRvdWNoRW5kKGV2ZW50OiBFdmVudFRvdWNoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudWlfbm9kZXMuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgbGV0IHZwID0gdGhpcy51aV9ub2Rlcy5hcnJheVt0aGlzLnVpX25vZGVzLnNpemUgLSAxXTtcclxuICAgICAgICAgICAgaWYgKHZwLnZhbGlkICYmIHZwLmNvbmZpZy52YWNhbmN5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSh2cC5jb25maWcucHJlZmFiLCB2cC5jb25maWcuZGVzdHJveSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWFs+mXreinpuaRuOmdnueql+WPo+WMuuWfn+WFs+mXrSAqL1xyXG4gICAgcHJvdGVjdGVkIGNsb3NlVmFjYW5jeVJlbW92ZSgpIHtcclxuICAgICAgICBsZXQgZmxhZyA9IHRydWU7XHJcbiAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgdGhpcy51aV9ub2Rlcy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuY29uZmlnLnZhY2FuY3kpIHtcclxuICAgICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmxhZyAmJiB0aGlzLmhhc0V2ZW50TGlzdGVuZXIoTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLm9uVG91Y2hFbmQsIHRoaXMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2ZmKE5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCwgdGhpcy5vblRvdWNoRW5kLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXIoaXNEZXN0cm95OiBib29sZWFuKSB7XHJcbiAgICAgICAgc3VwZXIuY2xlYXIoaXNEZXN0cm95KVxyXG4gICAgICAgIGlmICh0aGlzLmJsYWNrKSB0aGlzLmJsYWNrLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNsb3NlVmFjYW5jeVJlbW92ZSgpO1xyXG4gICAgICAgIHRoaXMuY2xvc2VNYXNrKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBpbnN0YW50aWF0ZSwgTm9kZSwgUHJlZmFiLCBTYWZlQXJlYSwgV2lkZ2V0IH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tIFwiZGI6Ly9vb3BzLWZyYW1ld29yay9saWJzL2NvbGxlY3Rpb24vQ29sbGVjdGlvblwiO1xyXG5pbXBvcnQgeyBvb3BzIH0gZnJvbSBcIi4uLy4uL09vcHNcIjtcclxuaW1wb3J0IHsgVUlDYWxsYmFja3MsIFZpZXdQYXJhbXMgfSBmcm9tIFwiLi9EZWZpbmVzXCI7XHJcbmltcG9ydCB7IERlbGVnYXRlQ29tcG9uZW50IH0gZnJvbSBcIi4vRGVsZWdhdGVDb21wb25lbnRcIjtcclxuaW1wb3J0IHsgVUlDb25maWcgfSBmcm9tIFwiLi9MYXllck1hbmFnZXJcIjtcclxuXHJcbi8qKiDnlYzpnaLlsYLlr7nosaEgKi9cclxuZXhwb3J0IGNsYXNzIExheWVyVUkgZXh0ZW5kcyBOb2RlIHtcclxuICAgIC8qKiDlhajlsYDnqpflj6PmiZPlvIDlpLHotKUgKi9cclxuICAgIG9uT3BlbkZhaWx1cmU6IEZ1bmN0aW9uID0gbnVsbCE7XHJcbiAgICAvKiog5pi+56S655WM6Z2i6IqC54K56ZuG5ZCIICovXHJcbiAgICBwcm90ZWN0ZWQgdWlfbm9kZXMgPSBuZXcgQ29sbGVjdGlvbjxzdHJpbmcsIFZpZXdQYXJhbXM+KCk7XHJcbiAgICAvKiog6KKr56e76Zmk55qE55WM6Z2i57yT5a2Y5pWw5o2uICovXHJcbiAgICBwcm90ZWN0ZWQgdWlfY2FjaGUgPSBuZXcgTWFwPHN0cmluZywgVmlld1BhcmFtcz4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVJ5Z+656GA5bGC77yM5YWB6K645re75Yqg5aSa5Liq6aKE5Yi25Lu26IqC54K5XHJcbiAgICAgKiBAcGFyYW0gbmFtZSDor6XlsYLlkI1cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHdpZGdldDogV2lkZ2V0ID0gdGhpcy5hZGRDb21wb25lbnQoV2lkZ2V0KTtcclxuICAgICAgICB3aWRnZXQuaXNBbGlnbkxlZnQgPSB3aWRnZXQuaXNBbGlnblJpZ2h0ID0gd2lkZ2V0LmlzQWxpZ25Ub3AgPSB3aWRnZXQuaXNBbGlnbkJvdHRvbSA9IHRydWU7XHJcbiAgICAgICAgd2lkZ2V0LmxlZnQgPSB3aWRnZXQucmlnaHQgPSB3aWRnZXQudG9wID0gd2lkZ2V0LmJvdHRvbSA9IDA7XHJcbiAgICAgICAgd2lkZ2V0LmFsaWduTW9kZSA9IDI7XHJcbiAgICAgICAgd2lkZ2V0LmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5re75Yqg5LiA5Liq6aKE5Yi25Lu26IqC54K55Yiw5bGC5a655Zmo5Lit77yM6K+l5pa55rOV5bCG6L+U5Zue5LiA5Liq5ZSv5LiAYHV1aWRg5p2l5qCH6K+G6K+l5pON5L2c6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gY29uZmlnICAgICDnlYzpnaLphY3nva7mlbDmja5cclxuICAgICAqIEBwYXJhbSBwYXJhbXMgICAgIOiHquWumuS5ieWPguaVsFxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrcyAg5Zue6LCD5Ye95pWw5a+56LGh77yM5Y+v6YCJXHJcbiAgICAgKiBAcmV0dXJucyB0dXJl5Li65oiQ5YqfLGZhbHNl5Li65aSx6LSlXHJcbiAgICAgKi9cclxuICAgIGFkZChjb25maWc6IFVJQ29uZmlnLCBwYXJhbXM/OiBhbnksIGNhbGxiYWNrcz86IFVJQ2FsbGJhY2tzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudWlfbm9kZXMuaGFzKGNvbmZpZy5wcmVmYWIpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihg6Lev5b6E5Li644CQJHtjb25maWcucHJlZmFifeOAkeeahOmihOWItumHjeWkjeWKoOi9vWApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmo4Dmn6XnvJPlrZjkuK3mmK/lkKblrZjnlYzpnaJcclxuICAgICAgICBsZXQgdnAgPSB0aGlzLnVpX2NhY2hlLmdldChjb25maWcucHJlZmFiKTtcclxuICAgICAgICBpZiAodnAgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2cCA9IG5ldyBWaWV3UGFyYW1zKCk7XHJcbiAgICAgICAgICAgIHZwLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51aV9ub2Rlcy5zZXQoY29uZmlnLnByZWZhYiwgdnApO1xyXG5cclxuICAgICAgICB2cC5wYXJhbXMgPSBwYXJhbXMgPz8ge307XHJcbiAgICAgICAgdnAuY2FsbGJhY2tzID0gY2FsbGJhY2tzID8/IHt9O1xyXG4gICAgICAgIHZwLnZhbGlkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkKHZwLCBjb25maWcuYnVuZGxlKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqg6L2955WM6Z2i6LWE5rqQXHJcbiAgICAgKiBAcGFyYW0gdnAgICAgICAgICDmmL7npLrlj4LmlbBcclxuICAgICAqIEBwYXJhbSBidW5kbGUgICAgIOi/nOeoi+i1hOa6kOWMheWQje+8jOWmguaenOS4uuepuuWwseaYr+m7mOiupOacrOWcsOi1hOa6kOWMhVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgbG9hZCh2cDogVmlld1BhcmFtcywgYnVuZGxlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgLy8g5Yqg6L2955WM6Z2i6LWE5rqQ6LaF5pe25o+Q56S6XHJcbiAgICAgICAgY29uc3QgdGltZXJJZCA9IHNldFRpbWVvdXQodGhpcy5vbkxvYWRpbmdUaW1lb3V0R3VpLCBvb3BzLmNvbmZpZy5nYW1lLmxvYWRpbmdUaW1lb3V0R3VpKTtcclxuXHJcbiAgICAgICAgaWYgKHZwICYmIHZwLm5vZGUpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zaG93VWkodnApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5LyY5YWI5Yqg6L296YWN572u55qE5oyH5a6a6LWE5rqQ5YyF5Lit6LWE5rqQ77yM5aaC5p6c5rKh6YWN572u5YiZ5Yqg6L296buY6K6k6LWE5rqQ5YyF6LWE5rqQXHJcbiAgICAgICAgICAgIGJ1bmRsZSA9IGJ1bmRsZSB8fCBvb3BzLnJlcy5kZWZhdWx0QnVuZGxlTmFtZTtcclxuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgb29wcy5yZXMubG9hZEFzeW5jKGJ1bmRsZSwgdnAuY29uZmlnLnByZWZhYiwgUHJlZmFiKTtcclxuICAgICAgICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgICAgICAgICAgdnAubm9kZSA9IGluc3RhbnRpYXRlKHJlcyk7XHJcbiAgICAgICAgICAgICAgICAvLyDmmK/lkKblkK/liqjnnJ/mnLrlronlhajljLrln5/mmL7npLpcclxuICAgICAgICAgICAgICAgIGlmICh2cC5jb25maWcuc2FmZUFyZWEpIHZwLm5vZGUuYWRkQ29tcG9uZW50KFNhZmVBcmVhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDnqpflj6Pkuovku7blp5TmiZhcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRjID0gdnAubm9kZS5hZGRDb21wb25lbnQoRGVsZWdhdGVDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgZGMudnAgPSB2cDtcclxuICAgICAgICAgICAgICAgIGRjLm9uQ2xvc2VXaW5kb3cgPSB0aGlzLm9uQ2xvc2VXaW5kb3cuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDmmL7npLrnlYzpnaJcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2hvd1VpKHZwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihg6Lev5b6E5Li644CQJHt2cC5jb25maWcucHJlZmFifeOAkeeahOmihOWItuWKoOi9veWksei0pWApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mYWlsdXJlKHZwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5YWz6Zet55WM6Z2i6LWE5rqQ6LaF5pe25o+Q56S6XHJcbiAgICAgICAgb29wcy5ndWkud2FpdENsb3NlKCk7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliqDovb3otoXml7bkuovku7YqL1xyXG4gICAgcHJpdmF0ZSBvbkxvYWRpbmdUaW1lb3V0R3VpKCkge1xyXG4gICAgICAgIG9vcHMuZ3VpLndhaXRPcGVuKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOeql+WPo+WFs+mXreS6i+S7tiAqL1xyXG4gICAgcHJvdGVjdGVkIG9uQ2xvc2VXaW5kb3codnA6IFZpZXdQYXJhbXMpIHtcclxuICAgICAgICB0aGlzLnVpX25vZGVzLmRlbGV0ZSh2cC5jb25maWcucHJlZmFiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7uueVjOmdouiKgueCuVxyXG4gICAgICogQHBhcmFtIHZwICDop4blm77lj4LmlbBcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFzeW5jIHNob3dVaSh2cDogVmlld1BhcmFtcyk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIC8vIOinpuWPkeeql+WPo+a3u+WKoOS6i+S7tlxyXG4gICAgICAgIGNvbnN0IGNvbXAgPSB2cC5ub2RlLmdldENvbXBvbmVudChEZWxlZ2F0ZUNvbXBvbmVudCkhO1xyXG4gICAgICAgIGNvbnN0IHI6IGJvb2xlYW4gPSBhd2FpdCBjb21wLmFkZCgpO1xyXG4gICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgIHZwLm5vZGUucGFyZW50ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIC8vIOagh+iusOeVjOmdouS4uuS9v+eUqOeKtuaAgVxyXG4gICAgICAgICAgICB2cC52YWxpZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYOi3r+W+hOS4uuOAkCR7dnAuY29uZmlnLnByZWZhYn3jgJHnmoToh6rlrprkuYnpooTlpITnkIbpgLvovpHlvILluLgu5qOA5p+l6aKE5Yi25LiK57uR5a6a55qE57uE5Lu25LitIG9uQWRkZWQg5pa55rOVLOi/lOWbnnRydWXmiY3og73mraPnoa7lrozmiJDnqpflj6PmmL7npLrmtYHnqItgKTtcclxuICAgICAgICAgICAgdGhpcy5mYWlsdXJlKHZwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaJk+W8gOeql+WPo+Wksei0pemAu+i+kSAqL1xyXG4gICAgcHJvdGVjdGVkIGZhaWx1cmUodnA6IFZpZXdQYXJhbXMpIHtcclxuICAgICAgICB0aGlzLm9uQ2xvc2VXaW5kb3codnApO1xyXG4gICAgICAgIHZwLmNhbGxiYWNrcyAmJiB2cC5jYWxsYmFja3Mub25Mb2FkRmFpbHVyZSAmJiB2cC5jYWxsYmFja3Mub25Mb2FkRmFpbHVyZSgpO1xyXG4gICAgICAgIHRoaXMub25PcGVuRmFpbHVyZSAmJiB0aGlzLm9uT3BlbkZhaWx1cmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNrumihOWItuS7tui3r+W+hOWIoOmZpO+8jOmihOWItuS7tuWmguWcqOmYn+WIl+S4reS5n+S8muiiq+WIoOmZpO+8jOWmguaenOivpemihOWItuS7tuWtmOWcqOWkmuS4quS5n+S8muS4gOi1t+WIoOmZpFxyXG4gICAgICogQHBhcmFtIHByZWZhYlBhdGggICDpooTliLbot6/lvoRcclxuICAgICAqIEBwYXJhbSBpc0Rlc3Ryb3kgICAg56e76Zmk5ZCO5piv5ZCm6YeK5pS+XHJcbiAgICAgKi9cclxuICAgIHJlbW92ZShwcmVmYWJQYXRoOiBzdHJpbmcsIGlzRGVzdHJveT86IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBsZXQgcmVsZWFzZTogYW55ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmIChpc0Rlc3Ryb3kgIT09IHVuZGVmaW5lZCkgcmVsZWFzZSA9IGlzRGVzdHJveTtcclxuXHJcbiAgICAgICAgLy8g55WM6Z2i56e75Ye66Iie5Y+wXHJcbiAgICAgICAgY29uc3QgdnAgPSB0aGlzLnVpX25vZGVzLmdldChwcmVmYWJQYXRoKTtcclxuICAgICAgICBpZiAodnApIHtcclxuICAgICAgICAgICAgLy8g5LyY5YWI5L2/55So5Y+C5pWw5Lit5o6n5Yi255qE6YeK5pS+5p2h5Lu277yM5aaC5p6c5pyq5Lyg6YCS5Y+C5pWw5YiZ55So6YWN572u5Lit55qE6YeK5pS+5p2h5Lu277yM6buY6K6k5LiN57yT5a2Y5YWz6Zet55qE55WM6Z2iXHJcbiAgICAgICAgICAgIGlmIChyZWxlYXNlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlbGVhc2UgPSB2cC5jb25maWcuZGVzdHJveSAhPT0gdW5kZWZpbmVkID8gdnAuY29uZmlnLmRlc3Ryb3kgOiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDkuI3ph4rmlL7nlYzpnaLvvIznvJPlrZjotbfmnaXlvoXkuIvmrKHkvb/nlKhcclxuICAgICAgICAgICAgaWYgKHJlbGVhc2UgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVpX2NhY2hlLnNldCh2cC5jb25maWcucHJlZmFiLCB2cCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHZwLm5vZGU7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXAgPSBjaGlsZE5vZGUuZ2V0Q29tcG9uZW50KERlbGVnYXRlQ29tcG9uZW50KSE7XHJcbiAgICAgICAgICAgIGNvbXAucmVtb3ZlKHJlbGVhc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g6aqM6K+B5piv5ZCm5Yig6Zmk5ZCO5Y+w57yT5a2Y55WM6Z2iXHJcbiAgICAgICAgaWYgKHJlbGVhc2UgPT09IHRydWUpIHRoaXMucmVtb3ZlQ2FjaGUocHJlZmFiUGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWIoOmZpOe8k+WtmOeahOeVjOmdou+8jOW9k+e8k+WtmOeVjOmdouiiq+enu+mZpOiInuWPsOaXtu+8jOWPr+mAmui/h+atpOaWueazleWIoOmZpOe8k+WtmOeVjOmdoiAqL1xyXG4gICAgcHJpdmF0ZSByZW1vdmVDYWNoZShwcmVmYWJQYXRoOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgdnAgPSB0aGlzLnVpX2NhY2hlLmdldChwcmVmYWJQYXRoKTtcclxuICAgICAgICBpZiAodnApIHtcclxuICAgICAgICAgICAgdGhpcy5vbkNsb3NlV2luZG93KHZwKTtcclxuICAgICAgICAgICAgdGhpcy51aV9jYWNoZS5kZWxldGUocHJlZmFiUGF0aCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IHZwLm5vZGU7XHJcbiAgICAgICAgICAgIGNoaWxkTm9kZS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u6aKE5Yi26Lev5b6E6I635Y+W5bey5omT5byA55WM6Z2i55qE6IqC54K55a+56LGhXHJcbiAgICAgKiBAcGFyYW0gcHJlZmFiUGF0aCAg6aKE5Yi26Lev5b6EXHJcbiAgICAgKi9cclxuICAgIGdldChwcmVmYWJQYXRoOiBzdHJpbmcpOiBOb2RlIHtcclxuICAgICAgICBjb25zdCB2cCA9IHRoaXMudWlfbm9kZXMuZ2V0KHByZWZhYlBhdGgpO1xyXG4gICAgICAgIGlmICh2cClcclxuICAgICAgICAgICAgcmV0dXJuIHZwLm5vZGU7XHJcbiAgICAgICAgcmV0dXJuIG51bGwhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yik5pat5b2T5YmN5bGC5piv5ZCm5YyF5ZCrIHV1aWTmiJbpooTliLbku7bot6/lvoTlr7nlupTnmoROb2Rl6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gcHJlZmFiUGF0aCDpooTliLbku7bot6/lvoTmiJbogIVVVUlEXHJcbiAgICAgKi9cclxuICAgIGhhcyhwcmVmYWJQYXRoOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51aV9ub2Rlcy5oYXMocHJlZmFiUGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmuIXpmaTmiYDmnInoioLngrnvvIzpmJ/liJflvZPkuK3nmoTkuZ/liKDpmaRcclxuICAgICAqIEBwYXJhbSBpc0Rlc3Ryb3kgIOenu+mZpOWQjuaYr+WQpumHiuaUvlxyXG4gICAgICovXHJcbiAgICBjbGVhcihpc0Rlc3Ryb3k6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICAvLyDmuIXpmaTmiYDmnInmmL7npLrnmoTnlYzpnaJcclxuICAgICAgICB0aGlzLnVpX25vZGVzLmZvckVhY2goKHZhbHVlOiBWaWV3UGFyYW1zLCBrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZSh2YWx1ZS5jb25maWcucHJlZmFiLCBpc0Rlc3Ryb3kpO1xyXG4gICAgICAgICAgICB2YWx1ZS52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudWlfbm9kZXMuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgLy8g5riF6Zmk57yT5a2Y5Lit55qE55WM6Z2iXHJcbiAgICAgICAgaWYgKGlzRGVzdHJveSkge1xyXG4gICAgICAgICAgICB0aGlzLnVpX2NhY2hlLmZvckVhY2goKHZhbHVlOiBWaWV3UGFyYW1zLCBwcmVmYWJQYXRoOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2FjaGUocHJlZmFiUGF0aCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDktMDEgMTg6MDA6MjhcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDIgMTI6MDU6MzhcclxuICovXHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiY2NcIjtcclxuXHJcbi8qKiDmuLjmiI/mkYTlg4/mnLrlsYLmlbDmja4gKi9cclxuZXhwb3J0IGNsYXNzIExheWVySXRlbSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF92YWx1ZTogbnVtYmVyO1xyXG4gICAgZ2V0IHZhbHVlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX25hbWUhOiBzdHJpbmc7XHJcbiAgICBnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtYXNrKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDEgPDwgdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IodmFsdWU6IG51bWJlciwgbmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqKlxyXG4gKiDmuLjmiI/mkYTlg4/mnLrlsYLnrqHnkIblt6XlhbdcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMYXllclV0aWwge1xyXG4gICAgLyoqIOWcsOWbvuWvueixoeWxgiAqL1xyXG4gICAgc3RhdGljIE1BUCA9IG5ldyBMYXllckl0ZW0oMCwgJ01BUCcpO1xyXG4gICAgLyoqIOabv+i6q+WvueixoeWxgiAqL1xyXG4gICAgc3RhdGljIEFWQVRBUiA9IG5ldyBMYXllckl0ZW0oMSwgJ0FWQVRBUicpO1xyXG5cclxuICAgIHN0YXRpYyBJR05PUkVfUkFZQ0FTVCA9IG5ldyBMYXllckl0ZW0oMjAsICdJR05PUkVfUkFZQ0FTVCcpO1xyXG4gICAgc3RhdGljIEdJWk1PUyA9IG5ldyBMYXllckl0ZW0oMjEsICdHSVpNT1MnKTtcclxuICAgIC8qKiDnvJbovpHlmajlr7nosaHlsYIgKi9cclxuICAgIHN0YXRpYyBFRElUT1IgPSBuZXcgTGF5ZXJJdGVtKDIyLCAnRURJVE9SJyk7XHJcbiAgICAvKiog5LiJ57u05a+56LGh5bGCICovXHJcbiAgICBzdGF0aWMgVUlfM0QgPSBuZXcgTGF5ZXJJdGVtKDIzLCAnVUlfM0QnKTtcclxuICAgIHN0YXRpYyBTQ0VORV9HSVpNTyA9IG5ldyBMYXllckl0ZW0oMjQsICdTQ0VORV9HSVpNTycpO1xyXG4gICAgLyoqIOS6jOe7tOWvueixoeWxgiAqL1xyXG4gICAgc3RhdGljIFVJXzJEID0gbmV3IExheWVySXRlbSgyNSwgJ1VJXzJEJyk7XHJcbiAgICAvKiog5byV5pOO5YiG5p6Q5bel5YW35bGCICovXHJcbiAgICBzdGF0aWMgUFJPRklMVEVSID0gbmV3IExheWVySXRlbSgyOCwgJ1BST0ZJTFRFUicpO1xyXG4gICAgLyoqIOm7mOiupOWvueixoeWxgiAqL1xyXG4gICAgc3RhdGljIERFRkFVTFQgPSBuZXcgTGF5ZXJJdGVtKDMwLCAnREVGQVVMVCcpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u6IqC54K55bGCXHJcbiAgICAgKiBAcGFyYW0gaXRlbSDlsYLmlbDmja5cclxuICAgICAqIEBwYXJhbSBub2RlIOiKgueCuVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2V0Tm9kZUxheWVyKGl0ZW06IExheWVySXRlbSwgbm9kZTogTm9kZSk6IHZvaWQge1xyXG4gICAgICAgIG5vZGUubGF5ZXIgPSBpdGVtLm1hc2s7XHJcbiAgICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICBuLmxheWVyID0gaXRlbS5tYXNrO1xyXG4gICAgICAgICAgICBMYXllclV0aWwuc2V0Tm9kZUxheWVyKGl0ZW0sIG4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG4iLCIvKiog5YiX6KGoICovXHJcbmV4cG9ydCBjbGFzcyBMaXN0PFQ+IHtcclxuICAgIHByaXZhdGUgZWxlbWVudDogQXJyYXk8VD47XHJcblxyXG4gICAgLyoqIOaYr+WQpuS/neivgeWFg+e0oOeahOWUr+S4gOaApyAqL1xyXG4gICAgcHJpdmF0ZSBvbmx5OiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIOWFg+e0oOaVsOmHjyjlhoXpg6jlho3lop7liKDml7bkvJrkv67mlLnov5nkuKrlj4LmlbDvvIzlpJbpg6jlj6rlgZrorqHnrpflkoznu5Hlrprkvb/nlKjvvIzliIforrDkuI3lj6/lgZrotYvlgLzmk43kvZwpICovXHJcbiAgICBjb3VudDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihvbmx5OiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMub25seSA9IG9ubHk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDliLDmnKvlsL4o5rOo5oSP5aaC5p6c5L+d6K+B5ZSv5LiA5oCn77yM6YKj5LmI6YeN5aSN5pe25bCx55u05o6l6L+U5ZueKVxyXG4gICAgICogQHBhcmFtIHZhbHVlIFxyXG4gICAgICovXHJcbiAgICBwdXNoKHZhbHVlOiBUKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMub25seSkge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXg6IG51bWJlciA9IHRoaXMuZWxlbWVudC5pbmRleE9mKHZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVsZW1lbnQucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5jb3VudCA9IHRoaXMuZWxlbWVudC5sZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDliLDliJfooajlpLTpg6go5rOo5oSP5aaC5p6c5L+d6K+B5ZSv5LiA5oCn77yM6YKj5LmI6YeN5aSN5pe25bCx55u05o6l6L+U5ZueKVxyXG4gICAgICogQHBhcmFtIHZhbHVlIFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHVuc2hpZnQodmFsdWU6IFQpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5vbmx5KSB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gdGhpcy5lbGVtZW50LmluZGV4T2YodmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZWxlbWVudC51bnNoaWZ0KHZhbHVlKTtcclxuICAgICAgICB0aGlzLmNvdW50ID0gdGhpcy5lbGVtZW50Lmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluW5tuWIoOmZpOacgOWQjuS4gOS4quWFg+e0oFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHBvcCgpOiBUIHtcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5lbGVtZW50LnBvcCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvdW50ID0gdGhpcy5lbGVtZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsITtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluW5tuWIoOmZpOesrOS4gOS4quWFg+e0oFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHNoaWZ0KCk6IFQge1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmVsZW1lbnQuc2hpZnQoKTtcclxuICAgICAgICAgICAgdGhpcy5jb3VudCA9IHRoaXMuZWxlbWVudC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQhO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbCE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKDpmaTmjIflrprntKLlvJXnmoTlhYPntKBcclxuICAgICAqIEBwYXJhbSBpbmRleCBcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlQXQoaW5kZXg6IG51bWJlcik6IFQge1xyXG4gICAgICAgIGlmIChpbmRleCA+PSB0aGlzLmVsZW1lbnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIuWIoOmZpOe0ouW8lei2heWHuuiMg+WbtO+8gVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5lbGVtZW50W2luZGV4XTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB0aGlzLmNvdW50ID0gdGhpcy5lbGVtZW50Lmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yig6Zmk5YWD57SgXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZSh2YWx1ZTogVCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gdGhpcy5lbGVtZW50LmluZGV4T2YodmFsdWUpO1xyXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi6KaB5Yig6Zmk55qE5YaF5a655LiN5Zyo5YiX6KGo5Lit77yBXCIgKyB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZWxlbWVudFtpbmRleF07XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgdGhpcy5jb3VudCA9IHRoaXMuZWxlbWVudC5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOenu+mZpOaJgOacieWFg+e0oCAqL1xyXG4gICAgY2xlYXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50Lmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3mmK/lkKbljIXlkKtcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBoYXModmFsdWU6IFQpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kKHZhbHVlKSA+PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5p+l5om+5YWD57Sg5LiL5qCHXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgZmluZCh2YWx1ZTogVCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5pbmRleE9mKHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOafpeaJvuWFg+e0oOS4i+agh1xyXG4gICAgICogQHBhcmFtIHByZWRpY2F0ZSBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBmaW5kSW5kZXgocHJlZGljYXRlOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIG9iajogVFtdKSA9PiB1bmtub3duKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmVsZW1lbnQuZmluZEluZGV4KHByZWRpY2F0ZSk7XHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5oyH5a6a5YWD57SgXHJcbiAgICAgKiBAcGFyYW0gaW5kZXggXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgZ2V0KGluZGV4OiBudW1iZXIpOiBUIHtcclxuICAgICAgICBpZiAoaW5kZXggPj0gdGhpcy5lbGVtZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLotoXlh7rntKLlvJXojIPlm7Q6XCIgKyBpbmRleCArIFwiL1wiICsgdGhpcy5lbGVtZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRbaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rqQ5YiX6KGo5pWw5o2uKOazqOaEj+S4jeimgeebtOaOpei/m+ihjOWinuWIoOaTjeS9nO+8jOiAjOaYr+mAmui/h0xpc3QucHVzaC4uLi7nrYnmjqXlj6Pov5vooYzmk43kvZwpXHJcbiAgICAgKi9cclxuICAgIGdldCBlbGVtZW50cygpOiBBcnJheTxUPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcclxuICAgIH1cclxufSIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDQtMTQgMTc6MDg6MDFcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDIgMTQ6MDg6MzlcclxuICovXHJcbmltcG9ydCB7IENvbXBvbmVudCwgTm9kZSwgX2RlY29yYXRvciB9IGZyb20gXCJjY1wiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiDliqDovb3lu7bml7bmj5DnpLrliqjnlLsgKi9cclxuQGNjY2xhc3MoXCJMb2FkaW5nSW5kaWNhdG9yXCIpXHJcbmV4cG9ydCBjbGFzcyBMb2FkaW5nSW5kaWNhdG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgcHJpdmF0ZSBsb2FkaW5nOiBOb2RlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBsb2FkaW5nX3JvdGF0ZTogbnVtYmVyID0gMDtcclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ19yb3RhdGUgKz0gZHQgKiAyMjA7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nIS5zZXRSb3RhdGlvbkZyb21FdWxlcigwLCAwLCAtdGhpcy5sb2FkaW5nX3JvdGF0ZSAlIDM2MClcclxuICAgICAgICBpZiAodGhpcy5sb2FkaW5nX3JvdGF0ZSA+IDM2MCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdfcm90YXRlIC09IDM2MDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTA3LTAzIDE2OjEzOjE3XHJcbiAqIEBMYXN0RWRpdG9yczogYmFuc29taW5cclxuICogQExhc3RFZGl0VGltZTogMjAyNC0wMy0zMSAwMToxNzowMlxyXG4gKi9cclxuaW1wb3J0IHsgX2RlY29yYXRvciB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBvb3BzIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL09vcHNcIjtcclxuaW1wb3J0IHsgZWNzIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2Vjcy9FQ1NcIjtcclxuaW1wb3J0IHsgQ0NWTVBhcmVudENvbXAgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL21vZHVsZS9jb21tb24vQ0NWTVBhcmVudENvbXBcIjtcclxuaW1wb3J0IHsgTW9kdWxlVXRpbCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvbW9kdWxlL2NvbW1vbi9Nb2R1bGVVdGlsXCI7XHJcbmltcG9ydCB7IERlbW9WaWV3Q29tcCB9IGZyb20gXCIuLi8uLi9hY2NvdW50L3ZpZXcvRGVtb1ZpZXdDb21wXCI7XHJcbmltcG9ydCB7IHNtYyB9IGZyb20gXCIuLi8uLi9jb21tb24vU2luZ2xldG9uTW9kdWxlQ29tcFwiO1xyXG5pbXBvcnQgeyBVSUlEIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb25maWcvR2FtZVVJQ29uZmlnXCI7XHJcbmltcG9ydCB7IHNoaXBNYWluIH0gZnJvbSBcIi4uLy4uLy4uL2d1aS9zaGlwTWFpblwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiDmuLjmiI/otYTmupDliqDovb0gKi9cclxuQGNjY2xhc3MoJ0xvYWRpbmdWaWV3Q29tcCcpXHJcbkBlY3MucmVnaXN0ZXIoJ0xvYWRpbmdWaWV3JywgZmFsc2UpXHJcbmV4cG9ydCBjbGFzcyBMb2FkaW5nVmlld0NvbXAgZXh0ZW5kcyBDQ1ZNUGFyZW50Q29tcCB7XHJcbiAgICAvKiogVk0g57uE5Lu257uR5a6a5pWw5o2uICovXHJcbiAgICBkYXRhOiBhbnkgPSB7XHJcbiAgICAgICAgLyoqIOWKoOi9vei1hOa6kOW9k+WJjei/m+W6piAqL1xyXG4gICAgICAgIGZpbmlzaGVkOiAwLFxyXG4gICAgICAgIC8qKiDliqDovb3otYTmupDmnIDlpKfov5vluqYgKi9cclxuICAgICAgICB0b3RhbDogMCxcclxuICAgICAgICAvKiog5Yqg6L296LWE5rqQ6L+b5bqm5q+U5L6L5YC8ICovXHJcbiAgICAgICAgcHJvZ3Jlc3M6IFwiMFwiLFxyXG4gICAgICAgIC8qKiDliqDovb3mtYHnqIvkuK3mj5DnpLrmlofmnKwgKi9cclxuICAgICAgICBwcm9tcHQ6IFwiXCJcclxuICAgIH07XHJcblxyXG4gICAgcHJpdmF0ZSBwcm9ncmVzczogbnVtYmVyID0gMDtcclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICB0aGlzLmVudGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZW50ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkUmVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWKoOi9vei1hOa6kCAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkUmVzKCkge1xyXG4gICAgICAgIHRoaXMuZGF0YS5wcm9ncmVzcyA9IDA7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkQ3VzdG9tKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkR2FtZVJlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliqDovb3muLjmiI/mnKzlnLBKU09O5pWw5o2u77yI6Ieq5a6a5LmJ5YaF5a6577yJICovXHJcbiAgICBwcml2YXRlIGxvYWRDdXN0b20oKSB7XHJcbiAgICAgICAgLy8g5Yqg6L295ri45oiP5pys5ZywSlNPTuaVsOaNrueahOWkmuivreiogOaPkOekuuaWh+acrFxyXG4gICAgICAgIHRoaXMuZGF0YS5wcm9tcHQgPSBvb3BzLmxhbmd1YWdlLmdldExhbmdCeUlEKFwibG9hZGluZ19sb2FkX2pzb25cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWKoOi9veWIneWni+a4uOaIj+WGheWuuei1hOa6kCAqL1xyXG4gICAgcHJpdmF0ZSBsb2FkR2FtZVJlcygpIHtcclxuICAgICAgICAvLyDliqDovb3liJ3lp4vmuLjmiI/lhoXlrrnotYTmupDnmoTlpJror63oqIDmj5DnpLrmlofmnKxcclxuICAgICAgICB0aGlzLmRhdGEucHJvbXB0ID0gb29wcy5sYW5ndWFnZS5nZXRMYW5nQnlJRChcImxvYWRpbmdfbG9hZF9nYW1lXCIpO1xyXG4gICAgICAgIG9vcHMucmVzLmxvYWREaXIoXCJnYW1lXCIsIHRoaXMub25Qcm9ncmVzc0NhbGxiYWNrLmJpbmQodGhpcyksIHRoaXMub25Db21wbGV0ZUNhbGxiYWNrLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliqDovb3ov5vluqbkuovku7YgKi9cclxuICAgIHByaXZhdGUgb25Qcm9ncmVzc0NhbGxiYWNrKGZpbmlzaGVkOiBudW1iZXIsIHRvdGFsOiBudW1iZXIsIGl0ZW06IGFueSkge1xyXG4gICAgICAgIHRoaXMuZGF0YS5maW5pc2hlZCA9IGZpbmlzaGVkO1xyXG4gICAgICAgIHRoaXMuZGF0YS50b3RhbCA9IHRvdGFsO1xyXG4gICAgICAgIHZhciBwcm9ncmVzcyA9IGZpbmlzaGVkIC8gdG90YWw7XHJcbiAgICAgICAgaWYgKHByb2dyZXNzID4gdGhpcy5wcm9ncmVzcykge1xyXG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzID0gcHJvZ3Jlc3M7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5wcm9ncmVzcyA9IChwcm9ncmVzcyAqIDEwMCkudG9GaXhlZCgyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWKoOi9veWujOaIkOS6i+S7tiAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBvbkNvbXBsZXRlQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgLy8g6I635Y+W55So5oi35L+h5oGv55qE5aSa6K+t6KiA5o+Q56S65paH5pysXHJcbiAgICAgICAgdGhpcy5kYXRhLnByb21wdCA9IG9vcHMubGFuZ3VhZ2UuZ2V0TGFuZ0J5SUQoXCJsb2FkaW5nX2xvYWRfcGxheWVyXCIpO1xyXG4gICAgICAgIGF3YWl0IE1vZHVsZVV0aWwuYWRkVmlld1VpQXN5bmMoc21jLmFjY291bnQsIHNoaXBNYWluLCBVSUlELk1haW4pO1xyXG4gICAgICAgIE1vZHVsZVV0aWwucmVtb3ZlVmlld1VpKHRoaXMuZW50LCBMb2FkaW5nVmlld0NvbXAsIFVJSUQuTG9hZGluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXQoKTogdm9pZCB7IH1cclxufSIsImltcG9ydCB7IGxvZyB9IGZyb20gXCJjY1wiO1xyXG5cclxuLyoqIOaXpeW/l+exu+WeiyAqL1xyXG5leHBvcnQgZW51bSBMb2dUeXBlIHtcclxuICAgIC8qKiDnvZHnu5zlsYLml6Xlv5cgKi9cclxuICAgIE5ldCA9IDEsXHJcbiAgICAvKiog5pWw5o2u57uT5p6E5bGC5pel5b+XICovXHJcbiAgICBNb2RlbCA9IDIsXHJcbiAgICAvKiog5Lia5Yqh6YC76L6R5bGC5pel5b+XICovXHJcbiAgICBCdXNpbmVzcyA9IDQsXHJcbiAgICAvKiog6KeG5Zu+5bGC5pel5b+XICovXHJcbiAgICBWaWV3ID0gOCxcclxuICAgIC8qKiDphY3nva7ml6Xlv5cgKi9cclxuICAgIENvbmZpZyA9IDE2LFxyXG4gICAgLyoqIOagh+WHhuaXpeW/lyAqL1xyXG4gICAgVHJhY2UgPSAzMixcclxufVxyXG5cclxudmFyIG5hbWVzID0ge1xyXG4gICAgXCIxXCI6IFwi572R57uc5pel5b+XXCIsXHJcbiAgICBcIjJcIjogXCLmlbDmja7ml6Xlv5dcIixcclxuICAgIFwiNFwiOiBcIuS4muWKoeaXpeW/l1wiLFxyXG4gICAgXCI4XCI6IFwi6KeG5Zu+5pel5b+XXCIsXHJcbiAgICBcIjE2XCI6IFwi6YWN572u5pel5b+XXCIsXHJcbiAgICBcIjMyXCI6IFwi5qCH5YeG5pel5b+XXCIsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUxvZ2dlckNvbnNvbGUge1xyXG4gICAgdHJhY2UoY29udGVudDogc3RyaW5nLCBjb2xvcjogc3RyaW5nKTogdm9pZDtcclxufVxyXG5cclxuLyoqIFxyXG4gKiDml6Xlv5fnrqHnkIYgXHJcbiAqIEBoZWxwICAgIGh0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzkwNCZkb2NfaWQ9Mjg3MzU2NVxyXG4gKiBAZXhhbXBsZVxyXG5vb3BzLmxvZy50cmFjZShcIum7mOiupOagh+WHhuaXpeW/l1wiKTtcclxub29wcy5sb2cubG9nQ29uZmlnKFwi54Gw6Imy6YWN572u5pel5b+XXCIpO1xyXG5vb3BzLmxvZy5sb2dOZXQoXCLmqZnoibLnvZHnu5zml6Xlv5dcIik7XHJcbm9vcHMubG9nLmxvZ01vZGVsKFwi57Sr6Imy5pWw5o2u5pel5b+XXCIpO1xyXG5vb3BzLmxvZy5sb2dCdXNpbmVzcyhcIuiTneiJsuS4muWKoeaXpeW/l1wiKTtcclxub29wcy5sb2cubG9nVmlldyhcIue7v+iJsuinhuWbvuaXpeW/l1wiKTtcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBMb2dnZXI7XHJcbiAgICBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6IExvZ2dlciB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgTG9nZ2VyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlLmluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdGFnczogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgbGM6IElMb2dnZXJDb25zb2xlID0gbnVsbCE7XHJcblxyXG4gICAgLyoqIOiuvue9rueVjOmdouaXpeW/l+aOp+WItuWPsCAqL1xyXG4gICAgc2V0TG9nZ2VyQ29uc29sZShsYzogSUxvZ2dlckNvbnNvbGUpIHtcclxuICAgICAgICB0aGlzLmxjID0gbGM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGFncyA9XHJcbiAgICAgICAgICAgIExvZ1R5cGUuTmV0IHxcclxuICAgICAgICAgICAgTG9nVHlwZS5Nb2RlbCB8XHJcbiAgICAgICAgICAgIExvZ1R5cGUuQnVzaW5lc3MgfFxyXG4gICAgICAgICAgICBMb2dUeXBlLlZpZXcgfFxyXG4gICAgICAgICAgICBMb2dUeXBlLkNvbmZpZyB8XHJcbiAgICAgICAgICAgIExvZ1R5cGUuVHJhY2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICog6K6+572u5pi+56S655qE5pel5b+X57G75Z6L77yM6buY6K6k5YC85Li65LiN5pi+56S65Lu75L2V57G75Z6L5pel5b+XXHJcbiAgICAgKiBAZXhhbXBsZVxyXG5vb3BzLmxvZy5zZXRUYWdzKExvZ1R5cGUuVmlld3xMb2dUeXBlLkJ1c2luZXNzKVxyXG4gICAgICovXHJcbiAgICBzZXRUYWdzKHRhZzogTG9nVHlwZSA9IG51bGwhKSB7XHJcbiAgICAgICAgaWYgKHRhZykge1xyXG4gICAgICAgICAgICB0aGlzLnRhZ3MgPSB0YWc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6w5b2V5byA5aeL6K6h5pe2XHJcbiAgICAgKiBAcGFyYW0gZGVzY3JpYmUgIOagh+mimOaPj+i/sFxyXG4gICAgICogQGV4YW1wbGVcclxub29wcy5sb2cuc3RhcnQoKTtcclxuLi4uXHJcbuecgeeVpU7ooYzku6PnoIFcclxuLi4uXHJcbm9vcHMubG9nLmVuZCgpO1xyXG4gICAgICovXHJcbiAgICBzdGFydChkZXNjcmliZTogc3RyaW5nID0gXCJUaW1lXCIpOiB2b2lkIHtcclxuICAgICAgICBjb25zb2xlLnRpbWUoZGVzY3JpYmUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omT5Y2w6IyD5Zu05YaF5pe26Ze05raI6ICXXHJcbiAgICAgKiBAcGFyYW0gZGVzY3JpYmUgIOagh+mimOaPj+i/sFxyXG4gICAgICogQGV4YW1wbGVcclxub29wcy5sb2cuc3RhcnQoKTtcclxuLi4uXHJcbuecgeeVpU7ooYzku6PnoIFcclxuLi4uXHJcbm9vcHMubG9nLmVuZCgpO1xyXG4gICAgICovXHJcbiAgICBlbmQoZGVzY3JpYmU6IHN0cmluZyA9IFwiVGltZVwiKTogdm9pZCB7XHJcbiAgICAgICAgY29uc29sZS50aW1lRW5kKGRlc2NyaWJlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJk+WNsOihqOagvFxyXG4gICAgICogQHBhcmFtIG1zZyAgICAgICDml6Xlv5fmtojmga9cclxuICAgICAqIEBwYXJhbSBkZXNjcmliZSAg5qCH6aKY5o+P6L+wXHJcbiAgICAgKiBAZXhhbXBsZVxyXG52YXIgb2JqZWN0OmFueSA9IHt1aWQ6MTAwMCwgbmFtZTpcIm9vcHNcIn07XHJcbm9vcHMubG9nLnRhYmxlKG9iamVjdCk7XHJcbiAgICAgKi9cclxuICAgIHRhYmxlKG1zZzogYW55LCBkZXNjcmliZT86IHN0cmluZykge1xyXG4gICAgICAgIGlmICghdGhpcy5pc09wZW4oTG9nVHlwZS5UcmFjZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLnRhYmxlKG1zZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmiZPljbDmoIflh4bml6Xlv5dcclxuICAgICAqIEBwYXJhbSBtc2cgICAgICAg5pel5b+X5raI5oGvXHJcbiAgICAgKi9cclxuICAgIHRyYWNlKG1zZzogYW55LCBjb2xvcjogc3RyaW5nID0gXCIjMDAwMDAwXCIpIHtcclxuICAgICAgICB0aGlzLnByaW50KExvZ1R5cGUuVHJhY2UsIG1zZywgY29sb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omT5Y2w572R57uc5bGC5pel5b+XXHJcbiAgICAgKiBAcGFyYW0gbXNnICAgICAgIOaXpeW/l+a2iOaBr1xyXG4gICAgICogQHBhcmFtIGRlc2NyaWJlICDmoIfpopjmj4/ov7BcclxuICAgICAqL1xyXG4gICAgbG9nTmV0KG1zZzogYW55LCBkZXNjcmliZT86IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMub3JhbmdlKExvZ1R5cGUuTmV0LCBtc2csIGRlc2NyaWJlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJk+WNsOaVsOaNruWxguaXpeW/l1xyXG4gICAgICogQHBhcmFtIG1zZyAgICAgICDml6Xlv5fmtojmga9cclxuICAgICAqIEBwYXJhbSBkZXNjcmliZSAg5qCH6aKY5o+P6L+wXHJcbiAgICAgKi9cclxuICAgIGxvZ01vZGVsKG1zZzogYW55LCBkZXNjcmliZT86IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMudmlvbGV0KExvZ1R5cGUuTW9kZWwsIG1zZywgZGVzY3JpYmUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omT5Y2w5Lia5Yqh5bGC5pel5b+XXHJcbiAgICAgKiBAcGFyYW0gbXNnICAgICAgIOaXpeW/l+a2iOaBr1xyXG4gICAgICogQHBhcmFtIGRlc2NyaWJlICDmoIfpopjmj4/ov7BcclxuICAgICAqL1xyXG4gICAgbG9nQnVzaW5lc3MobXNnOiBhbnksIGRlc2NyaWJlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5ibHVlKExvZ1R5cGUuQnVzaW5lc3MsIG1zZywgZGVzY3JpYmUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omT5Y2w6KeG5Zu+5pel5b+XXHJcbiAgICAgKiBAcGFyYW0gbXNnICAgICAgIOaXpeW/l+a2iOaBr1xyXG4gICAgICogQHBhcmFtIGRlc2NyaWJlICDmoIfpopjmj4/ov7BcclxuICAgICAqL1xyXG4gICAgbG9nVmlldyhtc2c6IGFueSwgZGVzY3JpYmU/OiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmdyZWVuKExvZ1R5cGUuVmlldywgbXNnLCBkZXNjcmliZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaJk+WNsOmFjee9ruaXpeW/lyAqL1xyXG4gICAgbG9nQ29uZmlnKG1zZzogYW55LCBkZXNjcmliZT86IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuZ3JheShMb2dUeXBlLkNvbmZpZywgbXNnLCBkZXNjcmliZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5qmZ6ImyXHJcbiAgICBwcml2YXRlIG9yYW5nZSh0YWc6IExvZ1R5cGUsIG1zZzogYW55LCBkZXNjcmliZT86IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMucHJpbnQodGFnLCBtc2csIFwiI2VlNzcwMFwiLCBkZXNjcmliZSlcclxuICAgIH1cclxuXHJcbiAgICAvLyDntKvoibJcclxuICAgIHByaXZhdGUgdmlvbGV0KHRhZzogTG9nVHlwZSwgbXNnOiBhbnksIGRlc2NyaWJlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5wcmludCh0YWcsIG1zZywgXCIjODAwMDgwXCIsIGRlc2NyaWJlKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOiTneiJslxyXG4gICAgcHJpdmF0ZSBibHVlKHRhZzogTG9nVHlwZSwgbXNnOiBhbnksIGRlc2NyaWJlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5wcmludCh0YWcsIG1zZywgXCIjM2E1ZmNkXCIsIGRlc2NyaWJlKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOe7v+iJslxyXG4gICAgcHJpdmF0ZSBncmVlbih0YWc6IExvZ1R5cGUsIG1zZzogYW55LCBkZXNjcmliZT86IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMucHJpbnQodGFnLCBtc2csIFwiIzAwODAwMFwiLCBkZXNjcmliZSlcclxuICAgIH1cclxuXHJcbiAgICAvLyDngbDoibJcclxuICAgIHByaXZhdGUgZ3JheSh0YWc6IExvZ1R5cGUsIG1zZzogYW55LCBkZXNjcmliZT86IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMucHJpbnQodGFnLCBtc2csIFwiIzgwODA4MFwiLCBkZXNjcmliZSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzT3Blbih0YWc6IExvZ1R5cGUpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudGFncyAmIHRhZykgIT0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOi+k+WHuuaXpeW/l1xyXG4gICAgICogQHBhcmFtIHRhZyAgICAgICDml6Xlv5fnsbvlnotcclxuICAgICAqIEBwYXJhbSBtc2cgICAgICAg5pel5b+X5YaF5a65XHJcbiAgICAgKiBAcGFyYW0gY29sb3IgICAgIOaXpeW/l+aWh+acrOminOiJslxyXG4gICAgICogQHBhcmFtIGRlc2NyaWJlICDml6Xlv5fmoIfpopjmj4/ov7BcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwcmludCh0YWc6IExvZ1R5cGUsIG1zZzogYW55LCBjb2xvcjogc3RyaW5nLCBkZXNjcmliZT86IHN0cmluZykge1xyXG4gICAgICAgIC8vIOagh+iusOayoeacieaJk+W8gO+8jOS4jeaJk+WNsOivpeaXpeW/l1xyXG4gICAgICAgIGlmICghdGhpcy5pc09wZW4odGFnKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0eXBlID0gbmFtZXNbdGFnXTtcclxuICAgICAgICBpZiAodGhpcy5sYyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJhY2tMb2cgPSBjb25zb2xlLmxvZyB8fCBsb2c7XHJcbiAgICAgICAgICAgIGNvbG9yID0gXCJjb2xvcjpcIiArIGNvbG9yICsgXCI7XCI7XHJcbiAgICAgICAgICAgIGlmIChkZXNjcmliZSkge1xyXG4gICAgICAgICAgICAgICAgYmFja0xvZy5jYWxsKG51bGwsIFwiJWMlcyVzJXM6JXMlb1wiLCBjb2xvciwgdGhpcy5nZXREYXRlU3RyaW5nKCksICdbJyArIHR5cGUgKyAnXScsIHRoaXMuc3RhY2soNSksIGRlc2NyaWJlLCBtc2cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYmFja0xvZy5jYWxsKG51bGwsIFwiJWMlcyVzJXM6JW9cIiwgY29sb3IsIHRoaXMuZ2V0RGF0ZVN0cmluZygpLCAnWycgKyB0eXBlICsgJ10nLCB0aGlzLnN0YWNrKDUpLCBtc2cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxjLnRyYWNlKGAke3RoaXMuZ2V0RGF0ZVN0cmluZygpfVske3R5cGV9XSR7bXNnfWAsIGNvbG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGFjayhpbmRleDogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBlID0gbmV3IEVycm9yKCk7XHJcbiAgICAgICAgY29uc3QgbGluZXMgPSBlLnN0YWNrIS5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IEFycmF5PGFueT4gPSBbXTtcclxuICAgICAgICBsaW5lcy5mb3JFYWNoKChsaW5lKSA9PiB7XHJcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZyg3KTtcclxuICAgICAgICAgICAgdmFyIGxpbmVCcmVhayA9IGxpbmUuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgICAgICBpZiAobGluZUJyZWFrLmxlbmd0aCA8IDIpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxpbmVCcmVha1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IFtsaW5lQnJlYWtbMF1dOiBsaW5lQnJlYWtbMV0gfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IGxpc3Q6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgbGV0IHNwbGl0TGlzdDogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgICAgIGlmIChpbmRleCA8IHJlc3VsdC5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZTogc3RyaW5nO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBhIGluIHJlc3VsdFtpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIHNwbGl0TGlzdCA9IGEuc3BsaXQoXCIuXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzcGxpdExpc3QubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ID0gc3BsaXRMaXN0LmNvbmNhdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZXN1bHRbaW5kZXhdW2FdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gdmFsdWUhLmxhc3RJbmRleE9mKFwiL1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSB2YWx1ZSEubGFzdEluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydCA+IC0xICYmIGVuZCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB2YWx1ZSEuc3Vic3RyaW5nKHN0YXJ0ICsgMSwgZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIltcIiArIGxpc3RbMF0gKyBcIi50c11cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGlzdC5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJbXCIgKyBsaXN0WzBdICsgXCIudHMtPlwiICsgbGlzdFsxXSArIFwiXVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldERhdGVTdHJpbmcoKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgbGV0IHN0ciA9IGQuZ2V0SG91cnMoKS50b1N0cmluZygpO1xyXG4gICAgICAgIGxldCB0aW1lU3RyID0gXCJcIjtcclxuICAgICAgICB0aW1lU3RyICs9IChzdHIubGVuZ3RoID09IDEgPyBcIjBcIiArIHN0ciA6IHN0cikgKyBcIjpcIjtcclxuICAgICAgICBzdHIgPSBkLmdldE1pbnV0ZXMoKS50b1N0cmluZygpO1xyXG4gICAgICAgIHRpbWVTdHIgKz0gKHN0ci5sZW5ndGggPT0gMSA/IFwiMFwiICsgc3RyIDogc3RyKSArIFwiOlwiO1xyXG4gICAgICAgIHN0ciA9IGQuZ2V0U2Vjb25kcygpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgdGltZVN0ciArPSAoc3RyLmxlbmd0aCA9PSAxID8gXCIwXCIgKyBzdHIgOiBzdHIpICsgXCI6XCI7XHJcbiAgICAgICAgc3RyID0gZC5nZXRNaWxsaXNlY29uZHMoKS50b1N0cmluZygpO1xyXG4gICAgICAgIGlmIChzdHIubGVuZ3RoID09IDEpIHN0ciA9IFwiMDBcIiArIHN0cjtcclxuICAgICAgICBpZiAoc3RyLmxlbmd0aCA9PSAyKSBzdHIgPSBcIjBcIiArIHN0cjtcclxuICAgICAgICB0aW1lU3RyICs9IHN0cjtcclxuXHJcbiAgICAgICAgdGltZVN0ciA9IFwiW1wiICsgdGltZVN0ciArIFwiXVwiO1xyXG4gICAgICAgIHJldHVybiB0aW1lU3RyO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0wNy0wMyAxNjoxMzoxN1xyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOC0wNSAxODoyNTo1NlxyXG4gKi9cclxuaW1wb3J0IHsgX2RlY29yYXRvciwgcHJvZmlsZXIgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IERFQlVHIH0gZnJvbSAnY2MvZW52JztcclxuaW1wb3J0IHsgb29wcyB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL09vcHMnO1xyXG5pbXBvcnQgeyBSb290IH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvUm9vdCc7XHJcbmltcG9ydCB7IGVjcyB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9saWJzL2Vjcy9FQ1MnO1xyXG5pbXBvcnQgeyBBY2NvdW50IH0gZnJvbSAnLi9nYW1lL2FjY291bnQvQWNjb3VudCc7XHJcbmltcG9ydCB7IHNtYyB9IGZyb20gJy4vZ2FtZS9jb21tb24vU2luZ2xldG9uTW9kdWxlQ29tcCc7XHJcbmltcG9ydCB7IFVJQ29uZmlnRGF0YSB9IGZyb20gJy4vZ2FtZS9jb21tb24vY29uZmlnL0dhbWVVSUNvbmZpZyc7XHJcbmltcG9ydCB7IEluaXRpYWxpemUgfSBmcm9tICcuL2dhbWUvaW5pdGlhbGl6ZS9Jbml0aWFsaXplJztcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5AY2NjbGFzcygnTWFpbicpXHJcbmV4cG9ydCBjbGFzcyBNYWluIGV4dGVuZHMgUm9vdCB7XHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICBpZiAoREVCVUcpIHByb2ZpbGVyLnNob3dTdGF0cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBydW4oKSB7XHJcbiAgICAgICAgc21jLmluaXRpYWxpemUgPSBlY3MuZ2V0RW50aXR5PEluaXRpYWxpemU+KEluaXRpYWxpemUpO1xyXG4gICAgICAgIHNtYy5hY2NvdW50ID0gZWNzLmdldEVudGl0eTxBY2NvdW50PihBY2NvdW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgaW5pdEd1aSgpIHtcclxuICAgICAgICBvb3BzLmd1aS5pbml0KFVJQ29uZmlnRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcHJvdGVjdGVkIGluaXRFY3NTeXN0ZW0oKSB7XHJcbiAgICAvLyAgICAgb29wcy5lY3MuYWRkKG5ldyBFY3NJbml0aWFsaXplU3lzdGVtKCkpO1xyXG4gICAgLy8gfVxyXG59XHJcbiIsIi8qKiDmlbDlrablt6XlhbcgKi9cclxuZXhwb3J0IGNsYXNzIE1hdGhVdGlsIHtcclxuICAgIC8qKlxyXG4gICAgICog6KeS5bqm6L2s5byn5bqmXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkZWcyUmFkOiBudW1iZXIgPSBNYXRoLlBJIC8gMTgwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5byn5bqm6L2s6KeS5bqmXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyByYWQyRGVnOiBudW1iZXIgPSAxODAgLyBNYXRoLlBJO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635b6X6ZqP5py65pa55ZCRXHJcbiAgICAgKiBAcGFyYW0geCAtMeS4uuW3pu+8jDHkuLrlj7NcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2lnbih4OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoeCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh4IDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6ZqP5pe26Ze05Y+Y5YyW6L+b5bqm5YC8XHJcbiAgICAgKiBAcGFyYW0gc3RhcnQg5Yid5aeL5YC8XHJcbiAgICAgKiBAcGFyYW0gZW5kICAg57uT5p2f5YC8XHJcbiAgICAgKiBAcGFyYW0gdCAgICAg5pe26Ze0XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBwcm9ncmVzcyhzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciwgdDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgKGVuZCAtIHN0YXJ0KSAqIHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmj5LlgLxcclxuICAgICAqIEBwYXJhbSBudW1TdGFydCDlvIDlp4vmlbDlgLxcclxuICAgICAqIEBwYXJhbSBudW1FbmQgICDnu5PmnZ/mlbDlgLxcclxuICAgICAqIEBwYXJhbSB0ICAgICAgICDml7bpl7RcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGxlcnAobnVtU3RhcnQ6IG51bWJlciwgbnVtRW5kOiBudW1iZXIsIHQ6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKHQgPiAxKSB7XHJcbiAgICAgICAgICAgIHQgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0IDwgMCkge1xyXG4gICAgICAgICAgICB0ID0gMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bVN0YXJ0ICogKDEgLSB0KSArIChudW1FbmQgKiB0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOinkuW6puaPkuWAvFxyXG4gICAgICogQHBhcmFtIGN1cnJlbnQg5b2T5YmN6KeS5bqmXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0ICDnm67moIfop5LluqZcclxuICAgICAqIEBwYXJhbSB0ICAgICAgIOaXtumXtFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbGVycEFuZ2xlKGN1cnJlbnQ6IG51bWJlciwgdGFyZ2V0OiBudW1iZXIsIHQ6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgY3VycmVudCAlPSAzNjA7XHJcbiAgICAgICAgdGFyZ2V0ICU9IDM2MDtcclxuXHJcbiAgICAgICAgY29uc3QgZEFuZ2xlOiBudW1iZXIgPSB0YXJnZXQgLSBjdXJyZW50O1xyXG5cclxuICAgICAgICBpZiAoZEFuZ2xlID4gMTgwKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IGN1cnJlbnQgLSAoMzYwIC0gZEFuZ2xlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZEFuZ2xlIDwgLTE4MCkge1xyXG4gICAgICAgICAgICB0YXJnZXQgPSBjdXJyZW50ICsgKDM2MCArIGRBbmdsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKE1hdGhVdGlsLmxlcnAoY3VycmVudCwgdGFyZ2V0LCB0KSAlIDM2MCArIDM2MCkgJSAzNjA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmjInkuIDlrprnmoTpgJ/luqbku47kuIDkuKrop5LluqbovazlkJHku6TkuIDkuKrop5LluqZcclxuICAgICAqIEBwYXJhbSBjdXJyZW50IOW9k+WJjeinkuW6plxyXG4gICAgICogQHBhcmFtIHRhcmdldCAg55uu5qCH6KeS5bqmXHJcbiAgICAgKiBAcGFyYW0gc3BlZWQgICDpgJ/luqZcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFuZ2xlVG93YXJkcyhjdXJyZW50OiBudW1iZXIsIHRhcmdldDogbnVtYmVyLCBzcGVlZDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBjdXJyZW50ICU9IDM2MDtcclxuICAgICAgICB0YXJnZXQgJT0gMzYwO1xyXG5cclxuICAgICAgICBjb25zdCBkQW5nbGU6IG51bWJlciA9IHRhcmdldCAtIGN1cnJlbnQ7XHJcblxyXG4gICAgICAgIGlmIChkQW5nbGUgPiAxODApIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gY3VycmVudCAtICgzNjAgLSBkQW5nbGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkQW5nbGUgPCAtMTgwKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IGN1cnJlbnQgKyAoMzYwICsgZEFuZ2xlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRpciA9IHRhcmdldCAtIGN1cnJlbnQ7XHJcblxyXG4gICAgICAgIGlmIChzcGVlZCA+IE1hdGguYWJzKGRpcikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoKGN1cnJlbnQgKyBzcGVlZCAqIE1hdGguc2lnbihkaXIpKSAlIDM2MCArIDM2MCkgJSAzNjA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmlrnkvY3lhoXlgLzvvIzotoXov4fml7bojrflj5blr7nlupTovrnnlYzlgLxcclxuICAgICAqIEBwYXJhbSB2YWx1ZSAgICAg5YC8XHJcbiAgICAgKiBAcGFyYW0gbWluTGltaXQgIOacgOWwj+WAvFxyXG4gICAgICogQHBhcmFtIG1heExpbWl0ICDmnIDlpKflgLxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNsYW1wKHZhbHVlOiBudW1iZXIsIG1pbkxpbWl0OiBudW1iZXIsIG1heExpbWl0OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCBtaW5MaW1pdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWluTGltaXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodmFsdWUgPiBtYXhMaW1pdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF4TGltaXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflvpfkuIDkuKrlgLznmoTmpoLnjodcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDlgLxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHByb2JhYmlsaXR5KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSA8IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGxvZywgd2FybiB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBMaXN0ZW5lckZ1bmMgfSBmcm9tIFwiLi9FdmVudE1lc3NhZ2VcIjtcclxuXHJcbmNsYXNzIEV2ZW50RGF0YSB7XHJcbiAgICBwdWJsaWMgZXZlbnQhOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgbGlzdGVuZXIhOiBMaXN0ZW5lckZ1bmM7XHJcbiAgICBwdWJsaWMgb2JqZWN0OiBhbnk7XHJcbn1cclxuXHJcbi8qKiDmibnph4/ms6jlhozjgIHnp7vpmaTlhajlsYDkuovku7blr7nosaEgKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VFdmVudERhdGEge1xyXG4gICAgcHJpdmF0ZSBldmVudHM6IE1hcDxzdHJpbmcsIEFycmF5PEV2ZW50RGF0YT4+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5YWo5bGA5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgICAgICDkuovku7blkI1cclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAgIOWkhOeQhuS6i+S7tueahOS+puWQrOWZqOWHveaVsFxyXG4gICAgICogQHBhcmFtIG9iamVjdCAgICAg5L6m5ZCs5Ye95pWw57uR5a6a55qE5L2c55So5Z+f5a+56LGhXHJcbiAgICAgKi9cclxuICAgIG9uKGV2ZW50OiBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lckZ1bmMsIG9iamVjdDogb2JqZWN0KSB7XHJcbiAgICAgICAgbGV0IGVkcyA9IHRoaXMuZXZlbnRzLmdldChldmVudCk7XHJcbiAgICAgICAgaWYgKGVkcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVkcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5zZXQoZXZlbnQsIGVkcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBlZDogRXZlbnREYXRhID0gbmV3IEV2ZW50RGF0YSgpO1xyXG4gICAgICAgIGVkLmV2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcclxuICAgICAgICBlZC5vYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgZWRzLnB1c2goZWQpO1xyXG5cclxuICAgICAgICBtZXNzYWdlLm9uKGV2ZW50LCBsaXN0ZW5lciwgb2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICog56e76Zmk5YWo5bGA5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgICAgIOS6i+S7tuWQjVxyXG4gICAgICovXHJcbiAgICBvZmYoZXZlbnQ6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBlZHMgPSB0aGlzLmV2ZW50cy5nZXQoZXZlbnQpO1xyXG4gICAgICAgIGlmICghZWRzKSByZXR1cm47XHJcblxyXG4gICAgICAgIGZvciAobGV0IGViIG9mIGVkcykge1xyXG4gICAgICAgICAgICBtZXNzYWdlLm9mZihldmVudCwgZWIubGlzdGVuZXIsIGViLm9iamVjdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZXZlbnRzLmRlbGV0ZShldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICog6Kem5Y+R5YWo5bGA5LqL5Lu2IFxyXG4gICAgICogQHBhcmFtIGV2ZW50ICAgICAg5LqL5Lu25ZCNXHJcbiAgICAgKiBAcGFyYW0gYXJncyAgICAgICDkuovku7blj4LmlbBcclxuICAgICAqL1xyXG4gICAgZGlzcGF0Y2hFdmVudChldmVudDogc3RyaW5nLCAuLi5hcmdzOiBhbnkpIHtcclxuICAgICAgICBtZXNzYWdlLmRpc3BhdGNoRXZlbnQoZXZlbnQsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmuIXpmaTmiYDmnInnmoTlhajlsYDkuovku7bnm5HlkKwgKi9cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBBcnJheS5mcm9tKHRoaXMuZXZlbnRzLmtleXMoKSk7XHJcbiAgICAgICAgZm9yIChsZXQgZXZlbnQgb2Yga2V5cykge1xyXG4gICAgICAgICAgICB0aGlzLm9mZihldmVudClcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBcclxuICog5YWo5bGA5raI5oGv566h55CGXHJcbiAqIEBoZWxwICAgIGh0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzg5NCZkb2NfaWQ9Mjg3MzU2NVxyXG4gKiBAZXhhbXBsZSBcclxuLy8g5rOo5YaM5oyB57ut55uR5ZCs55qE5YWo5bGA5LqL5Lu2XHJcbmV4cG9ydCBjbGFzcyBSb2xlVmlld0NvbXAgZXh0ZW5kcyBDb21wb25lbnR7XHJcbiAgICBvbkxvYWQoKXtcclxuICAgICAgICAvLyDnm5HlkKzlhajlsYDkuovku7ZcclxuICAgICAgICBvb3BzLm1lc3NhZ2Uub24oR2FtZUV2ZW50LkdhbWVTZXJ2ZXJDb25uZWN0ZWQsIHRoaXMub25IYW5kbGVyLCB0aGlzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcHJvdGVjdGVkIG9uRGVzdHJveSgpIHtcclxuICAgICAgICAvLyDlr7nosaHph4rmlL7ml7blj5bmtojms6jlhoznmoTlhajlsYDkuovku7ZcclxuICAgICAgICBvb3BzLm1lc3NhZ2Uub2ZmKEdhbWVFdmVudC5HYW1lU2VydmVyQ29ubmVjdGVkLCB0aGlzLm9uSGFuZGxlciwgdGhpcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByaXZhdGUgb25IYW5kbGVyKGV2ZW50OiBzdHJpbmcsIGFyZ3M6IGFueSkge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcclxuICAgICAgICAgICAgY2FzZSBHYW1lRXZlbnQuR2FtZVNlcnZlckNvbm5lY3RlZDpcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5aSE55CG5ri45oiP5pyN5Yqh5Zmo6L+e5o6l5oiQ5Yqf5ZCO55qE6YC76L6RXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyDms6jlhozlj6rop6blj5HkuIDmrKHnmoTlhajlsYDkuovku7ZcclxuZXhwb3J0IGNsYXNzIFJvbGVWaWV3Q29tcCBleHRlbmRzIENvbXBvbmVudHtcclxuICAgIG9uTG9hZCgpe1xyXG4gICAgICAgIC8vIOebkeWQrOS4gOasoeS6i+S7tu+8jOS6i+S7tuWTjeW6lOWQju+8jOivpeebkeWQrOiHquWKqOenu+mZpFxyXG4gICAgICAgIG9vcHMubWVzc2FnZS5vbmNlKEdhbWVFdmVudC5HYW1lU2VydmVyQ29ubmVjdGVkLCB0aGlzLm9uSGFuZGxlciwgdGhpcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHByaXZhdGUgb25IYW5kbGVyKGV2ZW50OiBzdHJpbmcsIGFyZ3M6IGFueSkge1xyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcclxuICAgICAgICAgICAgY2FzZSBHYW1lRXZlbnQuR2FtZVNlcnZlckNvbm5lY3RlZDpcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5aSE55CG5ri45oiP5pyN5Yqh5Zmo6L+e5o6l5oiQ5Yqf5ZCO55qE6YC76L6RXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzc2FnZU1hbmFnZXIge1xyXG4gICAgcHJpdmF0ZSBldmVudHM6IE1hcDxzdHJpbmcsIEFycmF5PEV2ZW50RGF0YT4+ID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rOo5YaM5YWo5bGA5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgICAgICDkuovku7blkI1cclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAgIOWkhOeQhuS6i+S7tueahOS+puWQrOWZqOWHveaVsFxyXG4gICAgICogQHBhcmFtIG9iamVjdCAgICAg5L6m5ZCs5Ye95pWw57uR5a6a55qE5L2c55So5Z+f5a+56LGhXHJcbiAgICAgKi9cclxuICAgIG9uKGV2ZW50OiBzdHJpbmcsIGxpc3RlbmVyOiBMaXN0ZW5lckZ1bmMsIG9iamVjdDogb2JqZWN0KSB7XHJcbiAgICAgICAgaWYgKCFldmVudCB8fCAhbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgd2Fybihg5rOo5YaM44CQJHtldmVudH3jgJHkuovku7bnmoTkvqblkKzlmajlh73mlbDkuLrnqbpgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGVkcyA9IHRoaXMuZXZlbnRzLmdldChldmVudCk7XHJcbiAgICAgICAgaWYgKGVkcyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVkcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5zZXQoZXZlbnQsIGVkcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbGVuZ3RoID0gZWRzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBiaW4gPSBlZHNbaV07XHJcbiAgICAgICAgICAgIGlmIChiaW4ubGlzdGVuZXIgPT0gbGlzdGVuZXIgJiYgYmluLm9iamVjdCA9PSBvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYOWQjeS4uuOAkCR7ZXZlbnR944CR55qE5LqL5Lu26YeN5aSN5rOo5YaM5L6m5ZCs5ZmoYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBsZXQgZGF0YTogRXZlbnREYXRhID0gbmV3IEV2ZW50RGF0YSgpO1xyXG4gICAgICAgIGRhdGEuZXZlbnQgPSBldmVudDtcclxuICAgICAgICBkYXRhLmxpc3RlbmVyID0gbGlzdGVuZXI7XHJcbiAgICAgICAgZGF0YS5vYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgZWRzLnB1c2goZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnm5HlkKzkuIDmrKHkuovku7bvvIzkuovku7blk43lupTlkI7vvIzor6Xnm5HlkKzoh6rliqjnp7vpmaRcclxuICAgICAqIEBwYXJhbSBldmVudCAgICAg5LqL5Lu25ZCNXHJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgIOS6i+S7tuinpuWPkeWbnuiwg+aWueazlVxyXG4gICAgICogQHBhcmFtIG9iamVjdCAgICDkvqblkKzlh73mlbDnu5HlrprnmoTkvZznlKjln5/lr7nosaFcclxuICAgICAqL1xyXG4gICAgb25jZShldmVudDogc3RyaW5nLCBsaXN0ZW5lcjogTGlzdGVuZXJGdW5jLCBvYmplY3Q6IG9iamVjdCkge1xyXG4gICAgICAgIGxldCBfbGlzdGVuZXI6IGFueSA9ICgkZXZlbnQ6IHN0cmluZywgLi4uJGFyZ3M6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9mZihldmVudCwgX2xpc3RlbmVyLCBvYmplY3QpO1xyXG4gICAgICAgICAgICBfbGlzdGVuZXIgPSBudWxsO1xyXG4gICAgICAgICAgICBsaXN0ZW5lci5jYWxsKG9iamVjdCwgJGV2ZW50LCAkYXJncyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub24oZXZlbnQsIF9saXN0ZW5lciwgb2JqZWN0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOenu+mZpOWFqOWxgOS6i+S7tlxyXG4gICAgICogQHBhcmFtIGV2ZW50ICAgICDkuovku7blkI1cclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAg5aSE55CG5LqL5Lu255qE5L6m5ZCs5Zmo5Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gb2JqZWN0ICAgIOS+puWQrOWHveaVsOe7keWumueahOS9nOeUqOWfn+WvueixoVxyXG4gICAgICovXHJcbiAgICBvZmYoZXZlbnQ6IHN0cmluZywgbGlzdGVuZXI6IEZ1bmN0aW9uLCBvYmplY3Q6IG9iamVjdCkge1xyXG4gICAgICAgIGxldCBlZHMgPSB0aGlzLmV2ZW50cy5nZXQoZXZlbnQpO1xyXG5cclxuICAgICAgICBpZiAoIWVkcykge1xyXG4gICAgICAgICAgICBsb2coYOWQjeS4uuOAkCR7ZXZlbnR944CR55qE5LqL5Lu25LiN5a2Y5ZyoYCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsZW5ndGggPSBlZHMubGVuZ3RoO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IGJpbjogRXZlbnREYXRhID0gZWRzW2ldO1xyXG4gICAgICAgICAgICBpZiAoYmluLmxpc3RlbmVyID09IGxpc3RlbmVyICYmIGJpbi5vYmplY3QgPT0gb2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBlZHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlZHMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHMuZGVsZXRlKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICog6Kem5Y+R5YWo5bGA5LqL5Lu2IFxyXG4gICAgICogQHBhcmFtIGV2ZW50ICAgICAg5LqL5Lu25ZCNXHJcbiAgICAgKiBAcGFyYW0gYXJncyAgICAgICDkuovku7blj4LmlbBcclxuICAgICAqL1xyXG4gICAgZGlzcGF0Y2hFdmVudChldmVudDogc3RyaW5nLCAuLi5hcmdzOiBhbnkpIHtcclxuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuZXZlbnRzLmdldChldmVudCk7XHJcblxyXG4gICAgICAgIGlmIChsaXN0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgbGV0IGVkczogQXJyYXk8RXZlbnREYXRhPiA9IGxpc3QuY29uY2F0KCk7XHJcbiAgICAgICAgICAgIGxldCBsZW5ndGggPSBlZHMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXZlbnRCaW4gPSBlZHNbaV07XHJcbiAgICAgICAgICAgICAgICBldmVudEJpbi5saXN0ZW5lci5jYWxsKGV2ZW50QmluLm9iamVjdCwgZXZlbnQsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbWVzc2FnZSA9IG5ldyBNZXNzYWdlTWFuYWdlcigpOyIsImltcG9ydCB7IE5vZGUsIF9fcHJpdmF0ZSB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBvb3BzIH0gZnJvbSBcIi4uLy4uL2NvcmUvT29wc1wiO1xyXG5pbXBvcnQgeyBVSUNhbGxiYWNrcyB9IGZyb20gXCIuLi8uLi9jb3JlL2d1aS9sYXllci9EZWZpbmVzXCI7XHJcbmltcG9ydCB7IFZpZXdVdGlsIH0gZnJvbSBcIi4uLy4uL2NvcmUvdXRpbHMvVmlld1V0aWxcIjtcclxuaW1wb3J0IHsgZWNzIH0gZnJvbSBcIi4uLy4uL2xpYnMvZWNzL0VDU1wiO1xyXG5pbXBvcnQgeyBDb21wVHlwZSB9IGZyb20gXCIuLi8uLi9saWJzL2Vjcy9FQ1NNb2RlbFwiO1xyXG5pbXBvcnQgeyBDQ0NvbXAgfSBmcm9tIFwiLi9DQ0NvbXBcIjtcclxuaW1wb3J0IHsgQ0NWTVBhcmVudENvbXAgfSBmcm9tIFwiLi9DQ1ZNUGFyZW50Q29tcFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vZHVsZVV0aWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDnlYzpnaLnu4Tku7ZcclxuICAgICAqIEBwYXJhbSBlbnQgICAgICDmqKHlnZflrp7kvZNcclxuICAgICAqIEBwYXJhbSBjdG9yICAgICDnlYzpnaLpgLvovpHnu4Tku7ZcclxuICAgICAqIEBwYXJhbSB1aUlkICAgICDnlYzpnaLotYTmupDnvJblj7dcclxuICAgICAqIEBwYXJhbSB1aUFyZ3MgICDnlYzpnaLlj4LmlbBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBhZGRWaWV3VWk8VCBleHRlbmRzIENDVk1QYXJlbnRDb21wIHwgQ0NDb21wPihcclxuICAgICAgICBlbnQ6IGVjcy5FbnRpdHksXHJcbiAgICAgICAgY3RvcjogX19wcml2YXRlLl9fdHlwZXNfZ2xvYmFsc19fQ29uc3RydWN0b3I8VD4gfCBfX3ByaXZhdGUuX190eXBlc19nbG9iYWxzX19BYnN0cmFjdGVkQ29uc3RydWN0b3I8VD4sXHJcbiAgICAgICAgdWlJZDogbnVtYmVyLFxyXG4gICAgICAgIHVpQXJnczogYW55ID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IHVpYzogVUlDYWxsYmFja3MgPSB7XHJcbiAgICAgICAgICAgIG9uQWRkZWQ6IChub2RlOiBOb2RlLCBwYXJhbXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29tcCA9IG5vZGUuZ2V0Q29tcG9uZW50KGN0b3IpIGFzIGVjcy5Db21wO1xyXG4gICAgICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICBpZiAoIWVudC5oYXMoY3RvcikpIGVudC5hZGQoY29tcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIG9vcHMuZ3VpLm9wZW4odWlJZCwgdWlBcmdzLCB1aWMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5byC5q2l5re75Yqg6KeG5Zu+5bGC57uE5Lu2XHJcbiAgICAgKiBAcGFyYW0gZW50ICAgICAg5qih5Z2X5a6e5L2TXHJcbiAgICAgKiBAcGFyYW0gY3RvciAgICAg55WM6Z2i6YC76L6R57uE5Lu2XHJcbiAgICAgKiBAcGFyYW0gdWlJZCAgICAg55WM6Z2i6LWE5rqQ57yW5Y+3XHJcbiAgICAgKiBAcGFyYW0gdWlBcmdzICAg55WM6Z2i5Y+C5pWwXHJcbiAgICAgKiBAcmV0dXJucyDnlYzpnaLoioLngrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBhZGRWaWV3VWlBc3luYzxUIGV4dGVuZHMgQ0NWTVBhcmVudENvbXAgfCBDQ0NvbXA+KFxyXG4gICAgICAgIGVudDogZWNzLkVudGl0eSxcclxuICAgICAgICBjdG9yOiBfX3ByaXZhdGUuX190eXBlc19nbG9iYWxzX19Db25zdHJ1Y3RvcjxUPiB8IF9fcHJpdmF0ZS5fX3R5cGVzX2dsb2JhbHNfX0Fic3RyYWN0ZWRDb25zdHJ1Y3RvcjxUPixcclxuICAgICAgICB1aUlkOiBudW1iZXIsXHJcbiAgICAgICAgdWlBcmdzOiBhbnkgPSBudWxsKTogUHJvbWlzZTxOb2RlIHwgbnVsbD4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxOb2RlIHwgbnVsbD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1aWM6IFVJQ2FsbGJhY2tzID0ge1xyXG4gICAgICAgICAgICAgICAgb25BZGRlZDogKG5vZGU6IE5vZGUsIHBhcmFtczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcCA9IG5vZGUuZ2V0Q29tcG9uZW50KGN0b3IpIGFzIGVjcy5Db21wO1xyXG4gICAgICAgICAgICAgICAgICAgIGVudC5hZGQoY29tcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShub2RlKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbkxvYWRGYWlsdXJlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgb29wcy5ndWkub3Blbih1aUlkLCB1aUFyZ3MsIHVpYyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgJrov4fotYTmupDlhoXlrZjkuK3ojrflj5bpooTliLbkuIrnmoTnu4Tku7bmt7vliqDliLBFQ1Plrp7kvZPkuK1cclxuICAgICAqIEBwYXJhbSBlbnQgICAgICDmqKHlnZflrp7kvZNcclxuICAgICAqIEBwYXJhbSBjdG9yICAgICDnlYzpnaLpgLvovpHnu4Tku7ZcclxuICAgICAqIEBwYXJhbSBwYXJlbnQgICDmmL7npLrlr7nosaHniLbnuqdcclxuICAgICAqIEBwYXJhbSB1cmwgICAgICDmmL7npLrotYTmupDlnLDlnYBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBhZGRWaWV3PFQgZXh0ZW5kcyBDQ1ZNUGFyZW50Q29tcCB8IENDQ29tcD4oXHJcbiAgICAgICAgZW50OiBlY3MuRW50aXR5LFxyXG4gICAgICAgIGN0b3I6IF9fcHJpdmF0ZS5fX3R5cGVzX2dsb2JhbHNfX0NvbnN0cnVjdG9yPFQ+IHwgX19wcml2YXRlLl9fdHlwZXNfZ2xvYmFsc19fQWJzdHJhY3RlZENvbnN0cnVjdG9yPFQ+LFxyXG4gICAgICAgIHBhcmVudDogTm9kZSxcclxuICAgICAgICB1cmw6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IG5vZGUgPSBWaWV3VXRpbC5jcmVhdGVQcmVmYWJOb2RlKHVybCk7XHJcbiAgICAgICAgY29uc3QgY29tcCA9IG5vZGUuZ2V0Q29tcG9uZW50KGN0b3IpITtcclxuICAgICAgICBlbnQuYWRkKGNvbXApO1xyXG4gICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Lia5Yqh5a6e5L2T5LiK56e76Zmk55WM6Z2i57uE5Lu2XHJcbiAgICAgKiBAcGFyYW0gZW50ICAgICAgICDmqKHlnZflrp7kvZNcclxuICAgICAqIEBwYXJhbSBjdG9yICAgICAgIOeVjOmdoumAu+i+kee7hOS7tlxyXG4gICAgICogQHBhcmFtIHVpSWQgICAgICAg55WM6Z2i6LWE5rqQ57yW5Y+3XHJcbiAgICAgKiBAcGFyYW0gaXNEZXN0cm95ICDmmK/lkKbph4rmlL7nlYzpnaLnvJPlrZjvvIjpu5jorqTkuLrph4rmlL7nlYzpnaLnvJPlrZjvvIlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyByZW1vdmVWaWV3VWkoZW50OiBlY3MuRW50aXR5LCBjdG9yOiBDb21wVHlwZTxlY3MuSUNvbXA+LCB1aUlkOiBudW1iZXIsIGlzRGVzdHJveTogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICBpZiAoaXNEZXN0cm95KSBlbnQucmVtb3ZlKGN0b3IsIGlzRGVzdHJveSk7XHJcbiAgICAgICAgb29wcy5ndWkucmVtb3ZlKHVpSWQsIGlzRGVzdHJveSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb21wb25lbnQsIEVQU0lMT04sIFJpZ2lkQm9keSwgVmVjMywgX2RlY29yYXRvciB9IGZyb20gJ2NjJztcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcbmNvbnN0IHYzXzAgPSBuZXcgVmVjMygpO1xyXG5jb25zdCB2M18xID0gbmV3IFZlYzMoKTtcclxuXHJcbi8qKiBcclxuICog54mp55CG5pa55byP56e75YqoXHJcbiAqIDEuIOaWveWKoOe6v+aAp+aVsOW6plxyXG4gKiAyLiDmlr3liqDpmLvlsLxcclxuICogMy4g5pa95Yqg6YeN5YqbXHJcbiAqIDQuIOaOp+WItuenu+WKqOmAn+W6puaIlumAn+W6puavlOeOh1xyXG4gKi9cclxuQGNjY2xhc3MoJ01vdmVSaWdpZEJvZHknKVxyXG5leHBvcnQgY2xhc3MgTW92ZVJpZ2lkQm9keSBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgICBAcHJvcGVydHkoeyB0b29sdGlwOiAn6Zi75bC8JyB9KVxyXG4gICAgZGFtcGluZzogbnVtYmVyID0gMC41O1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7IHRvb2x0aXA6ICfph43lipsnIH0pXHJcbiAgICBncmF2aXR5OiBudW1iZXIgPSAtMTA7XHJcblxyXG4gICAgQHByb3BlcnR5XHJcbiAgICBwcml2YXRlIF9zcGVlZDogbnVtYmVyID0gNTtcclxuICAgIEBwcm9wZXJ0eSh7IHRvb2x0aXA6ICfnp7vliqjpgJ/luqYnIH0pXHJcbiAgICBwdWJsaWMgZ2V0IHNwZWVkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NwZWVkO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCBzcGVlZCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fc3BlZWQgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9jdXJNYXhTcGVlZCA9IHZhbHVlICogdGhpcy5yYXRpbztcclxuICAgIH1cclxuXHJcbiAgICBAcHJvcGVydHlcclxuICAgIHByaXZhdGUgX3JhdGlvOiBudW1iZXIgPSAxO1xyXG4gICAgQHByb3BlcnR5KHsgdG9vbHRpcDogJ+mAn+W6puavlOeOhycgfSlcclxuICAgIHB1YmxpYyBnZXQgcmF0aW8oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmF0aW87XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHJhdGlvKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9yYXRpbyA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2N1ck1heFNwZWVkID0gdGhpcy5zcGVlZCAqIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3JpZ2lkQm9keTogUmlnaWRCb2R5ID0gbnVsbCE7XHJcbiAgICBwcml2YXRlIF9ncm91bmRlZCA9IHRydWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOaYr+WQpuedgOWcsFxyXG4gICAgcHJpdmF0ZSBfY3VyTWF4U3BlZWQ6IG51bWJlciA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAvLyDlvZPliY3mnIDlpKfpgJ/luqZcclxuICAgIHByaXZhdGUgX3ByZXZBbmdsZVk6IG51bWJlciA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgLy8g5LmL5YmN55qEWeinkuW6puWAvFxyXG4gICAgcHJpdmF0ZSBfc3RhdGVYOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfc3RhdGVaOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKiDmmK/lkKbnnYDlnLAgKi9cclxuICAgIGdldCBncm91bmRlZCgpIHsgcmV0dXJuIHRoaXMuX2dyb3VuZGVkOyB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdmVsb2NpdHk6IFZlYzMgPSBuZXcgVmVjMygpO1xyXG4gICAgLyoqIOenu+WKqOaWueWQkSAqL1xyXG4gICAgcHVibGljIGdldCB2ZWxvY2l0eSgpOiBWZWMzIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmVsb2NpdHk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IHZlbG9jaXR5KHZhbHVlOiBWZWMzKSB7XHJcbiAgICAgICAgdGhpcy5fdmVsb2NpdHkgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgdmFyIHggPSB2YWx1ZS54O1xyXG4gICAgICAgIHZhciB6ID0gdmFsdWUuejtcclxuICAgICAgICBpZiAoKHggPiAwICYmIHRoaXMuX3N0YXRlWCA8IDApIHx8XHJcbiAgICAgICAgICAgICh4IDwgMCAmJiB0aGlzLl9zdGF0ZVggPiAwKSB8fFxyXG4gICAgICAgICAgICAoeiA+IDAgJiYgdGhpcy5fc3RhdGVaIDwgMCkgfHxcclxuICAgICAgICAgICAgKHogPCAwICYmIHRoaXMuX3N0YXRlWiA+IDApKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JpZ2lkQm9keS5jbGVhclZlbG9jaXR5KCk7ICAgICAgICAgICAgLy8g5b2T5YmN6Lef5LmL5YmN5pa55ZCR5LiN5LiA6Ie05YiZ5riF6Zmk6YCf5bqmLOmBv+WFjeaDr+aAp+WkquWkp1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc3RhdGVYID0geDtcclxuICAgICAgICB0aGlzLl9zdGF0ZVogPSB6O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMuX3JpZ2lkQm9keSA9IHRoaXMuZ2V0Q29tcG9uZW50KFJpZ2lkQm9keSkhO1xyXG4gICAgICAgIHRoaXMuX3ByZXZBbmdsZVkgPSB0aGlzLm5vZGUuZXVsZXJBbmdsZXMueTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yia5L2T5YGc5q2i56e75YqoICovXHJcbiAgICBzdG9wKCkge1xyXG4gICAgICAgIHRoaXMuX3N0YXRlWCA9IDA7XHJcbiAgICAgICAgdGhpcy5fc3RhdGVaID0gMDtcclxuICAgICAgICB0aGlzLl9yaWdpZEJvZHkuY2xlYXJWZWxvY2l0eSgpOyAgICAgICAgICAgICAgICAvLyDmuIXpmaTnp7vliqjpgJ/luqZcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIC8vIOaWveWKoOmHjeWKm1xyXG4gICAgICAgIHRoaXMuYXBwbHlHcmF2aXR5KCk7XHJcblxyXG4gICAgICAgIC8vIOaWveWKoOmYu+WwvFxyXG4gICAgICAgIHRoaXMuYXBwbHlEYW1waW5nKGR0KTtcclxuXHJcbiAgICAgICAgLy8g5pyq6JC95Zyw5peg5rOV56e75YqoXHJcbiAgICAgICAgaWYgKCF0aGlzLmdyb3VuZGVkKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIOaWveWKoOenu+WKqFxyXG4gICAgICAgIHRoaXMuYXBwbHlMaW5lYXJWZWxvY2l0eSh2M18wLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pa95Yqg6YeN5YqbICovXHJcbiAgICBwcml2YXRlIGFwcGx5R3Jhdml0eSgpIHtcclxuICAgICAgICBjb25zdCBnID0gdGhpcy5ncmF2aXR5O1xyXG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLl9yaWdpZEJvZHkubWFzcztcclxuICAgICAgICB2M18xLnNldCgwLCBtICogZywgMCk7XHJcbiAgICAgICAgdGhpcy5fcmlnaWRCb2R5LmFwcGx5Rm9yY2UodjNfMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaWveWKoOmYu+WwvCAqL1xyXG4gICAgcHJpdmF0ZSBhcHBseURhbXBpbmcoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIC8vIOiOt+WPlue6v+aAp+mAn+W6plxyXG4gICAgICAgIHRoaXMuX3JpZ2lkQm9keS5nZXRMaW5lYXJWZWxvY2l0eSh2M18xKTtcclxuXHJcbiAgICAgICAgaWYgKHYzXzEubGVuZ3RoU3FyKCkgPiBFUFNJTE9OKSB7XHJcbiAgICAgICAgICAgIHYzXzEubXVsdGlwbHlTY2FsYXIoTWF0aC5wb3coMS4wIC0gdGhpcy5kYW1waW5nLCBkdCkpO1xyXG4gICAgICAgICAgICB0aGlzLl9yaWdpZEJvZHkuc2V0TGluZWFyVmVsb2NpdHkodjNfMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pa95Yqg56e75YqoXHJcbiAgICAgKiBAcGFyYW0ge1ZlYzN9IGRpciAgICAgICAg5pa55ZCRXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3BlZWQgICAg56e75Yqo5pWw5bqmXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXBwbHlMaW5lYXJWZWxvY2l0eShkaXI6IFZlYzMsIHNwZWVkOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3RhdGVYIHx8IHRoaXMuX3N0YXRlWikge1xyXG4gICAgICAgICAgICB2M18wLnNldCh0aGlzLl9zdGF0ZVgsIDAsIHRoaXMuX3N0YXRlWik7XHJcbiAgICAgICAgICAgIHYzXzAubm9ybWFsaXplKCk7XHJcbiAgICAgICAgICAgIC8vIOiOt+WPlue6v+aAp+mAn+W6plxyXG4gICAgICAgICAgICB0aGlzLl9yaWdpZEJvZHkuZ2V0TGluZWFyVmVsb2NpdHkodjNfMSk7XHJcblxyXG4gICAgICAgICAgICBWZWMzLnNjYWxlQW5kQWRkKHYzXzEsIHYzXzEsIGRpciwgc3BlZWQpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbXMgPSB0aGlzLl9jdXJNYXhTcGVlZDtcclxuICAgICAgICAgICAgY29uc3QgbGVuID0gdjNfMS5sZW5ndGhTcXIoKTtcclxuICAgICAgICAgICAgbGV0IHJhdGlvID0gMTtcclxuICAgICAgICAgICAgaWYgKGxlbiA+IG1zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnModGhpcy5ub2RlLmV1bGVyQW5nbGVzLnkgLSB0aGlzLl9wcmV2QW5nbGVZKSA+PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhdGlvID0gMjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZBbmdsZVkgPSB0aGlzLm5vZGUuZXVsZXJBbmdsZXMueTtcclxuICAgICAgICAgICAgICAgIHYzXzEubm9ybWFsaXplKCk7XHJcbiAgICAgICAgICAgICAgICB2M18xLm11bHRpcGx5U2NhbGFyKG1zIC8gcmF0aW8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3JpZ2lkQm9keS5zZXRMaW5lYXJWZWxvY2l0eSh2M18xKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJcclxuLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wMy0yNSAxODoxMjoxMFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMS0xOSAxNDo1OTo1MFxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBOb2RlLCBWZWMzLCBfZGVjb3JhdG9yIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IFRpbWVyIH0gZnJvbSBcIi4uLy4uL2NvcmUvY29tbW9uL3RpbWVyL1RpbWVyXCI7XHJcbmltcG9ydCB7IFZlYzNVdGlsIH0gZnJvbSBcIi4uLy4uL2NvcmUvdXRpbHMvVmVjM1V0aWxcIjtcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog56e75Yqo5Yiw5oyH5a6a55uu5qCH5L2N572uICovXHJcbkBjY2NsYXNzKCdNb3ZlVG8nKVxyXG5leHBvcnQgY2xhc3MgTW92ZVRvIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIC8qKiDnm67moIfkvY3nva4gKi9cclxuICAgIHRhcmdldDogVmVjMyB8IE5vZGUgfCBudWxsID0gbnVsbDtcclxuICAgIC8qKiDnp7vliqjmlrnlkJEgKi9cclxuICAgIHZlbG9jaXR5OiBWZWMzID0gVmVjM1V0aWwuemVybztcclxuICAgIC8qKiDnp7vliqjpgJ/luqbvvIjmr4/np5Lnp7vliqjnmoTlg4/ntKDot53nprvvvIkgKi9cclxuICAgIHNwZWVkOiBudW1iZXIgPSAwO1xyXG4gICAgLyoqIOaYr+WQpuiuoeeul+WwhiBZIOi9tOW4puWFpeiuoeeulyAqL1xyXG4gICAgaGFzWUF4aXM6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIC8qKiDlnZDmoIfmoIfvvIjpu5jorqTmnKzlnLDlnZDmoIfvvIkgKi9cclxuICAgIG5zOiBudW1iZXIgPSBOb2RlLk5vZGVTcGFjZS5MT0NBTDtcclxuICAgIC8qKiDlgY/np7vot53nprsgKi9cclxuICAgIG9mZnNldDogbnVtYmVyID0gMDtcclxuICAgIC8qKiDlgY/np7vlkJHph48gKi9cclxuICAgIG9mZnNldFZlY3RvcjogVmVjMyB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIOenu+WKqOW8gOWniyAqL1xyXG4gICAgb25TdGFydDogRnVuY3Rpb24gfCBudWxsID0gbnVsbDtcclxuICAgIC8qKiDnp7vliqjlrozmiJDlm57osIMgKi9cclxuICAgIG9uQ29tcGxldGU6IEZ1bmN0aW9uIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKiog6Led56a75Y+Y5YyW5pe2ICovXHJcbiAgICBvbkNoYW5nZTogRnVuY3Rpb24gfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICAvKiog5bu25pe26Kem5Y+R5ZmoICovXHJcbiAgICBwcml2YXRlIHRpbWVyOiBUaW1lciA9IG5ldyBUaW1lcigpO1xyXG4gICAgLyoqIOe7iOeCueWkh+S7vSAqL1xyXG4gICAgcHJpdmF0ZSBlbmQ6IFZlYzMgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdmUoKSB7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBlbmQ6IFZlYzM7XHJcblxyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHRoaXMuc3BlZWQgPiAwLCBcIuenu+WKqOmAn+W6puW/hemhu+imgeWkp+S6jumbtlwiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0IGluc3RhbmNlb2YgTm9kZSkge1xyXG4gICAgICAgICAgICBlbmQgPSB0aGlzLm5zID09IE5vZGUuTm9kZVNwYWNlLldPUkxEID8gdGhpcy50YXJnZXQud29ybGRQb3NpdGlvbiA6IHRoaXMudGFyZ2V0LnBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZW5kID0gdGhpcy50YXJnZXQgYXMgVmVjMztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOenu+WKqOebruagh+iKgueCueiiq+mHiuaUvuaXtlxyXG4gICAgICAgIGlmIChlbmQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmV4aXQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g55uu5qCH56e75Yqo5ZCO77yM6YeN6K6h566X56e75Yqo5pa55ZCR5LiO56e75Yqo5Yiw55uu5qCH54K555qE6YCf5bqmXHJcbiAgICAgICAgaWYgKHRoaXMuZW5kID09IG51bGwgfHwgIXRoaXMuZW5kLnN0cmljdEVxdWFscyhlbmQpKSB7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBlbmQuY2xvbmUoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub2Zmc2V0VmVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuYWRkKHRoaXMub2Zmc2V0VmVjdG9yKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzWUF4aXMgPT0gZmFsc2UpIHRhcmdldC55ID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8vIOenu+WKqOaWueWQkeS4juenu+WKqOaVsOW6plxyXG4gICAgICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLm5zID09IE5vZGUuTm9kZVNwYWNlLldPUkxEID8gdGhpcy5ub2RlLndvcmxkUG9zaXRpb24gOiB0aGlzLm5vZGUucG9zaXRpb247XHJcbiAgICAgICAgICAgIHRoaXMudmVsb2NpdHkgPSBWZWMzVXRpbC5zdWIodGFyZ2V0LCBzdGFydCkubm9ybWFsaXplKCk7XHJcblxyXG4gICAgICAgICAgICAvLyDnp7vliqjml7bpl7TkuI7nm67moIflgY/kvY3nva7orqHnrpdcclxuICAgICAgICAgICAgbGV0IGRpc3RhbmNlID0gVmVjMy5kaXN0YW5jZShzdGFydCwgdGFyZ2V0KSAtIHRoaXMub2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgLy8g55uu5qCH5L2N572u5L+u5pS55LqL5Lu2XHJcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2U/LmNhbGwodGhpcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leGl0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uU3RhcnQ/LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVyLnN0ZXAgPSBkaXN0YW5jZSAvIHRoaXMuc3BlZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZCA9IGVuZC5jbG9uZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zcGVlZCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IHRyYW5zID0gVmVjM1V0aWwubXVsKHRoaXMudmVsb2NpdHksIHRoaXMuc3BlZWQgKiBkdCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5zID09IE5vZGUuTm9kZVNwYWNlLldPUkxEKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLndvcmxkUG9zaXRpb24gPSBWZWMzVXRpbC5hZGQodGhpcy5ub2RlLndvcmxkUG9zaXRpb24sIHRyYW5zKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlLnBvc2l0aW9uID0gVmVjM1V0aWwuYWRkKHRoaXMubm9kZS5wb3NpdGlvbiwgdHJhbnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g56e75Yqo5a6M5oiQ5LqL5Lu2XHJcbiAgICAgICAgaWYgKHRoaXMudGltZXIudXBkYXRlKGR0KSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vZmZzZXQgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubnMgPT0gTm9kZS5Ob2RlU3BhY2UuV09STEQpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlLndvcmxkUG9zaXRpb24gPSB0aGlzLmVuZDtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGUucG9zaXRpb24gPSB0aGlzLmVuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmV4aXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBleGl0KCkge1xyXG4gICAgICAgIHRoaXMub25Db21wbGV0ZT8uY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudmVsb2NpdHkgPSBWZWMzVXRpbC56ZXJvO1xyXG4gICAgICAgIHRoaXMuc3BlZWQgPSAwO1xyXG4gICAgICAgIHRoaXMuaGFzWUF4aXMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubnMgPSBOb2RlLk5vZGVTcGFjZS5MT0NBTDtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XHJcbiAgICAgICAgdGhpcy5vZmZzZXRWZWN0b3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub25TdGFydCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRpbWVyLnJlc2V0KCk7XHJcbiAgICAgICAgdGhpcy5lbmQgPSBudWxsO1xyXG4gICAgfVxyXG59IiwiXHJcbi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDMtMjUgMTg6MTI6MTBcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDctMjUgMTE6NTI6MjNcclxuICovXHJcbmltcG9ydCB7IENvbXBvbmVudCwgTm9kZSwgVmVjMywgX2RlY29yYXRvciB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBWZWMzVXRpbCB9IGZyb20gXCIuLi8uLi9jb3JlL3V0aWxzL1ZlYzNVdGlsXCI7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIOinkuiJsuWdkOagh+aWueW8j+enu+WKqCAqL1xyXG5AY2NjbGFzcygnTW92ZVRyYW5zbGF0ZScpXHJcbmV4cG9ydCBjbGFzcyBNb3ZlVHJhbnNsYXRlIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIC8qKiDnp7vliqjmlrnlkJEgKi9cclxuICAgIHZlbG9jaXR5OiBWZWMzID0gVmVjM1V0aWwuemVybztcclxuICAgIC8qKiDnp7vliqjpgJ/luqYgKi9cclxuICAgIHNwZWVkOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHByaXZhdGUgdmVjdG9yOiBWZWMzID0gbmV3IFZlYzMoKTtcclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnNwZWVkID4gMCkge1xyXG4gICAgICAgICAgICBWZWMzLm11bHRpcGx5U2NhbGFyKHRoaXMudmVjdG9yLCB0aGlzLnZlbG9jaXR5LCB0aGlzLnNwZWVkICogZHQpO1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUudHJhbnNsYXRlKHRoaXMudmVjdG9yLCBOb2RlLk5vZGVTcGFjZS5XT1JMRCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wOS0wMSAxODowMDoyOFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wOSAxODozMToxOFxyXG4gKi9cclxuXHJcbi8qXHJcbiAqIOe9kee7nOebuOWFs+aOpeWPo+WumuS5iVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgTmV0RGF0YSA9IChzdHJpbmcgfCBBcnJheUJ1ZmZlckxpa2UgfCBCbG9iIHwgQXJyYXlCdWZmZXJWaWV3KTtcclxuZXhwb3J0IHR5cGUgTmV0Q2FsbEZ1bmMgPSAoZGF0YTogYW55KSA9PiB2b2lkO1xyXG5cclxuLyoqIOivt+axguWNj+iuriAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElSZXF1ZXN0UHJvdG9jb2wge1xyXG4gICAgLyoqIOWNj+iuruWRveS7pOe8luWPtyAqL1xyXG4gICAgY21kOiBzdHJpbmcsXHJcbiAgICAvKiog5Zue6LCD5pa55rOV5ZCNICovXHJcbiAgICBjYWxsYmFjaz86IHN0cmluZyxcclxuICAgIC8qKiDmmK/lkKbljovnvKkgKi9cclxuICAgIGlzQ29tcHJlc3M6IGJvb2xlYW4sXHJcbiAgICAvKiog5rig6YGT57yW5Y+3ICovXHJcbiAgICBjaGFubmVsaWQ6IG51bWJlcixcclxuICAgIC8qKiDmtojmga/lhoXlrrkgKi9cclxuICAgIGRhdGE/OiBhbnk7XHJcbn1cclxuXHJcbi8qKiDlk43lupTljY/orq4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUmVzcG9uc2VQcm90b2NvbCB7XHJcbiAgICAvKiog5ZON5bqU5Y2P6K6u54q25oCB56CBICovXHJcbiAgICBjb2RlOiBudW1iZXIsXHJcbiAgICAvKiog5pWw5o2u5piv5ZCm5Y6L57ypICovXHJcbiAgICBpc0NvbXByZXNzOiBib29sZWFuLFxyXG4gICAgLyoqIOWNj+iuruaVsOaNriAqL1xyXG4gICAgZGF0YT86IGFueSxcclxuICAgIC8qKiDljY/orq7lm57osIPmlrnms5XlkI0gKi9cclxuICAgIGNhbGxiYWNrPzogc3RyaW5nXHJcbn1cclxuXHJcbi8qKiDlm57osIPlr7nosaEgKi9cclxuZXhwb3J0IGludGVyZmFjZSBDYWxsYmFja09iamVjdCB7XHJcbiAgICB0YXJnZXQ6IGFueSwgICAgICAgICAgICAgICAgLy8g5Zue6LCD5a+56LGh77yM5LiN5Li6bnVsbOaXtuiwg+eUqHRhcmdldC5jYWxsYmFjayh4eHgpXHJcbiAgICBjYWxsYmFjazogTmV0Q2FsbEZ1bmMsICAgICAgLy8g5Zue6LCD5Ye95pWwXHJcbn1cclxuXHJcbi8qKiDor7fmsYLlr7nosaEgKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0T2JqZWN0IHtcclxuICAgIGJ1ZmZlcjogTmV0RGF0YSwgICAgICAgICAgICAgICAgICAgLy8g6K+35rGC55qEQnVmZmVyXHJcbiAgICByc3BDbWQ6IHN0cmluZywgICAgICAgICAgICAgICAgICAgIC8vIOetieW+heWTjeW6lOaMh+S7pFxyXG4gICAgcnNwT2JqZWN0OiBDYWxsYmFja09iamVjdCB8IG51bGwsICAvLyDnrYnlvoXlk43lupTnmoTlm57osIPlr7nosaFcclxufVxyXG5cclxuLyoqIOWNj+iurui+heWKqeaOpeWPoyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQcm90b2NvbEhlbHBlciB7XHJcbiAgICAvKiog6L+U5Zue5YyF5aS06ZW/5bqmICovXHJcbiAgICBnZXRIZWFkbGVuKCk6IG51bWJlcjtcclxuICAgIC8qKiDov5Tlm57kuIDkuKrlv4Pot7PljIUgKi9cclxuICAgIGdldEhlYXJiZWF0KCk6IE5ldERhdGE7XHJcbiAgICAvKiog6L+U5Zue5pW05Liq5YyF55qE6ZW/5bqmICovXHJcbiAgICBnZXRQYWNrYWdlTGVuKG1zZzogTmV0RGF0YSk6IG51bWJlcjtcclxuICAgIC8qKiDmo4Dmn6XljIXmlbDmja7mmK/lkKblkIjms5XvvIjpgb/lhY3lrqLmiLfnq6/miqXplJnltKnmuoPvvIkgKi9cclxuICAgIGNoZWNrUmVzcG9uc2VQYWNrYWdlKG1zZzogSVJlc3BvbnNlUHJvdG9jb2wpOiBib29sZWFuO1xyXG4gICAgLyoqIOWkhOeQhuivt+axguWMheaVsOaNriAqL1xyXG4gICAgaGFuZGxlclJlcXVlc3RQYWNrYWdlKHJlcVByb3RvY29sOiBJUmVxdWVzdFByb3RvY29sKTogc3RyaW5nO1xyXG4gICAgLyoqIOWkhOeQhuWTjeW6lOWMheaVsOaNriAqL1xyXG4gICAgaGFuZGxlclJlc3BvbnNlUGFja2FnZShyZXNwUHJvdG9jb2w6IElSZXNwb25zZVByb3RvY29sKTogYm9vbGVhbjtcclxuICAgIC8qKiDov5Tlm57ljIXnmoRpZOaIluWNj+iuruexu+WeiyAqL1xyXG4gICAgZ2V0UGFja2FnZUlkKG1zZzogSVJlc3BvbnNlUHJvdG9jb2wpOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFNvY2tldEZ1bmMgPSAoZXZlbnQ6IGFueSkgPT4gdm9pZDtcclxuZXhwb3J0IHR5cGUgTWVzc2FnZUZ1bmMgPSAobXNnOiBOZXREYXRhKSA9PiB2b2lkO1xyXG5cclxuLyoqIFNvY2tldOaOpeWPoyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElTb2NrZXQge1xyXG4gICAgb25Db25uZWN0ZWQ6IFNvY2tldEZ1bmMgfCBudWxsOyAgICAgICAgIC8vIOi/nuaOpeWbnuiwg1xyXG4gICAgb25NZXNzYWdlOiBNZXNzYWdlRnVuYyB8IG51bGw7ICAgICAgICAgIC8vIOa2iOaBr+Wbnuiwg1xyXG4gICAgb25FcnJvcjogU29ja2V0RnVuYyB8IG51bGw7ICAgICAgICAgICAgIC8vIOmUmeivr+Wbnuiwg1xyXG4gICAgb25DbG9zZWQ6IFNvY2tldEZ1bmMgfCBudWxsOyAgICAgICAgICAgIC8vIOWFs+mXreWbnuiwg1xyXG5cclxuICAgIGNvbm5lY3Qob3B0aW9uczogYW55KTogYW55OyAgICAgICAgICAgICAgICAgICAgIC8vIOi/nuaOpeaOpeWPo1xyXG4gICAgc2VuZChidWZmZXI6IE5ldERhdGEpOiBudW1iZXI7ICAgICAgICAgICAgICAgICAgLy8g5pWw5o2u5Y+R6YCB5o6l5Y+jXHJcbiAgICBjbG9zZShjb2RlPzogbnVtYmVyLCByZWFzb24/OiBzdHJpbmcpOiB2b2lkOyAgICAvLyDlhbPpl63mjqXlj6NcclxufVxyXG5cclxuLyoqIOe9kee7nOaPkOekuuaOpeWPoyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElOZXR3b3JrVGlwcyB7XHJcbiAgICBjb25uZWN0VGlwcyhpc1Nob3c6IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgcmVjb25uZWN0VGlwcyhpc1Nob3c6IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgcmVxdWVzdFRpcHMoaXNTaG93OiBib29sZWFuKTogdm9pZDtcclxuICAgIHJlc3BvbnNlRXJyb3JDb2RlKGNvZGU6IG51bWJlcik6IHZvaWQ7XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA5LTAxIDE4OjAwOjI4XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA5LTA5IDE4OjEwOjUwXHJcbiAqL1xyXG5pbXBvcnQgeyBDYWxsYmFja09iamVjdCwgSVJlcXVlc3RQcm90b2NvbCwgTmV0RGF0YSB9IGZyb20gXCIuL05ldEludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBOZXRDb25uZWN0T3B0aW9ucywgTmV0Tm9kZSB9IGZyb20gXCIuL05ldE5vZGVcIjtcclxuXHJcbi8qKlxyXG4gKiDkvb/nlKjmtYHnqIvmlofmoaPlj6/lj4LogIPjgIHnroDljJbkuI7mnI3liqHlmajlr7nmjqXjgIHkvb/nlKjmlrDniYhBUEnkvZPpqozvvIzlj6/ov5vlhaXkuIvpnaLlnLDlnYDojrflj5bmlrDniYjmnKzvvIzmm7/mjaJuZXR3b3Jr55uu5b2V5Lit55qE5YaF5a65XHJcbiAqIGh0dHBzOi8vc3RvcmUuY29jb3MuY29tL2FwcC9kZXRhaWwvNTg3N1xyXG4gKi9cclxuXHJcbi8qXHJcbiAqIOe9kee7nOiKgueCueeuoeeQhuexu1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE5ldE1hbmFnZXIge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBOZXRNYW5hZ2VyO1xyXG4gICAgcHJvdGVjdGVkIF9jaGFubmVsczogeyBba2V5OiBudW1iZXJdOiBOZXROb2RlIH0gPSB7fTtcclxuXHJcbiAgICAvKiog572R57uc566h55CG5Y2V5L6L5a+56LGhICovXHJcbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogTmV0TWFuYWdlciB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBOZXRNYW5hZ2VyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa3u+WKoOe9kee7nOiKgueCuVxyXG4gICAgICogQHBhcmFtIG5vZGUgICAgICAg572R57uc6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gY2hhbm5lbElkICDpgJrpgZPnvJblj7dcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAvLyDmuLjmiI/mnI3liqHlmajlv4Pot7PljY/orq5cclxuICAgIGNsYXNzIEdhbWVQcm90b2NvbCBleHRlbmRzIE5ldFByb3RvY29sUGFrbyB7IFxyXG4gICAgICAgIC8vIOiHquWumuS5ieW/g+i3s+WNj+iurlxyXG4gICAgICAgIGdldEhlYXJiZWF0KCk6IE5ldERhdGEgeyBcclxuICAgICAgICAgICAgcmV0dXJuICd7XCJhY3Rpb25cIjpcIkxvZ2luQWN0aW9uXCIsXCJtZXRob2RcIjpcImhlYXJ0XCIsXCJkYXRhXCI6XCJudWxsXCIsXCJjYWxsYmFja1wiOlwiTG9naW5BY3Rpb25faGVhcnRcIn0nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgICAgICBcclxuICAgIHZhciBuZXQgPSBuZXcgTmV0Tm9kZUdhbWUoKTtcclxuICAgIHZhciB3cyA9IG5ldyBXZWJTb2NrKCk7ICAgICAgICAvLyBXZWJTb2NrZXQg572R57uc6L+e5o6l5a+56LGhXHJcbiAgICB2YXIgZ3AgPSBuZXcgR2FtZVByb3RvY29sKCk7ICAgLy8g572R57uc6YCa6K6v5Y2P6K6u5a+56LGhXHJcbiAgICB2YXIgZ3QgPSBuZXcgTmV0R2FtZVRpcHMoKSAgICAgLy8g572R57uc5o+Q56S65a+56LGhXHJcbiAgICBuZXQuaW5pdCh3cywgZ3AsIGd0KTtcclxuICAgIE5ldE1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5zZXROZXROb2RlKG5ldCwgTmV0Q2hhbm5lbFR5cGUuR2FtZSk7XHJcbiAgICAgKi9cclxuICAgIHNldE5ldE5vZGUobm9kZTogTmV0Tm9kZSwgY2hhbm5lbElkOiBudW1iZXIgPSAwKSB7XHJcbiAgICAgICAgdGhpcy5fY2hhbm5lbHNbY2hhbm5lbElkXSA9IG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOenu+mZpE5vZGUgKi9cclxuICAgIHJlbW92ZU5ldE5vZGUoY2hhbm5lbElkOiBudW1iZXIpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5fY2hhbm5lbHNbY2hhbm5lbElkXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe9kee7nOiKgueCuei/nuaOpeacjeWKoeWZqFxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgICAgICDov57mjqXlj4LmlbBcclxuICAgICAqIEBwYXJhbSBjaGFubmVsSWQgICAg6YCa6YGT57yW5Y+3XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgdmFyIG9wdGlvbnMgPSB7XHJcbiAgICAgICAgdXJsOiAnd3M6Ly8xMjcuMC4wLjE6MzAwMCcsXHJcbiAgICAgICAgYXV0b1JlY29ubmVjdDogMCAgICAgICAgICAgIC8vIC0xIOawuOS5hemHjei/nu+8jDDkuI3oh6rliqjph43ov57vvIzlhbbku5bmraPmlbTmlbDkuLroh6rliqjph43or5XmrKHmlbBcclxuICAgIH1cclxuICAgIE5ldE1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5jb25uZWN0KG9wdGlvbnMsIE5ldENoYW5uZWxUeXBlLkdhbWUpO1xyXG4gICAgICovXHJcbiAgICBjb25uZWN0KG9wdGlvbnM6IE5ldENvbm5lY3RPcHRpb25zLCBjaGFubmVsSWQ6IG51bWJlciA9IDApOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5fY2hhbm5lbHNbY2hhbm5lbElkXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hhbm5lbHNbY2hhbm5lbElkXS5jb25uZWN0KG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiKgueCuei/nuaOpeWPkemAgeaVsOaNriovXHJcbiAgICBzZW5kKGJ1ZjogTmV0RGF0YSwgZm9yY2U6IGJvb2xlYW4gPSBmYWxzZSwgY2hhbm5lbElkOiBudW1iZXIgPSAwKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuX2NoYW5uZWxzW2NoYW5uZWxJZF07XHJcbiAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGUhLnNlbmQoYnVmLCBmb3JjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWPkei1t+ivt+axgu+8jOW5tuWcqOWcqOe7k+aenOi/lOWbnuaXtuiwg+eUqOaMh+WumuWlveeahOWbnuiwg+WHveaVsFxyXG4gICAgICogQHBhcmFtIHJlcVByb3RvY29sIOivt+axguWNj+iurlxyXG4gICAgICogQHBhcmFtIHJzcE9iamVjdCAgIOWbnuiwg+WvueixoVxyXG4gICAgICogQHBhcmFtIHNob3dUaXBzICAgIOaYr+WQpuinpuWPkeivt+axguaPkOekulxyXG4gICAgICogQHBhcmFtIGZvcmNlICAgICAgIOaYr+WQpuW8uuWItuWPkemAgVxyXG4gICAgICogQHBhcmFtIGNoYW5uZWxJZCAgIOmAmumBk+e8luWPt1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgIGxldCBwcm90b2NvbDogSVJlcXVlc3RQcm90b2NvbCA9IHtcclxuICAgICAgICBhY3Rpb246IGFjdGlvbixcclxuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcclxuICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgICAgICBpc0NvbXByZXNzOiB0aGlzLmlzQ29tcHJlc3MsXHJcbiAgICAgICAgY2hhbm5lbGlkOiBuZXRDb25maWcuY2hhbm5lbGlkXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHByb3RvY29sLCByc3BPYmplY3QsIHNob3dUaXBzLCBmb3JjZSk7XHJcbiAgICAgKi9cclxuICAgIHJlcXVlc3QocmVxUHJvdG9jb2w6IElSZXF1ZXN0UHJvdG9jb2wsIHJzcE9iamVjdDogQ2FsbGJhY2tPYmplY3QsIHNob3dUaXBzOiBib29sZWFuID0gdHJ1ZSwgZm9yY2U6IGJvb2xlYW4gPSBmYWxzZSwgY2hhbm5lbElkOiBudW1iZXIgPSAwKSB7XHJcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLl9jaGFubmVsc1tjaGFubmVsSWRdO1xyXG4gICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgIG5vZGUucmVxdWVzdChyZXFQcm90b2NvbCwgcnNwT2JqZWN0LCBzaG93VGlwcywgZm9yY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWQjHJlcXVlc3Tlip/og73kuIDoh7TvvIzkvYblnKhyZXF1ZXN05LmL5YmN5Lya5YWI5Yik5pat6Zif5YiX5Lit5piv5ZCm5bey5pyJcnNwQ21k77yM5aaC5pyJ6YeN5aSN55qE5YiZ55u05o6l6L+U5ZueXHJcbiAgICAgKiBAcGFyYW0gcmVxUHJvdG9jb2wg6K+35rGC5Y2P6K6uXHJcbiAgICAgKiBAcGFyYW0gcnNwT2JqZWN0ICAg5Zue6LCD5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gc2hvd1RpcHMgICAg5piv5ZCm6Kem5Y+R6K+35rGC5o+Q56S6XHJcbiAgICAgKiBAcGFyYW0gZm9yY2UgICAgICAg5piv5ZCm5by65Yi25Y+R6YCBXHJcbiAgICAgKiBAcGFyYW0gY2hhbm5lbElkICAg6YCa6YGT57yW5Y+3XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgbGV0IHByb3RvY29sOiBJUmVxdWVzdFByb3RvY29sID0ge1xyXG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxyXG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxyXG4gICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxyXG4gICAgICAgIGlzQ29tcHJlc3M6IHRoaXMuaXNDb21wcmVzcyxcclxuICAgICAgICBjaGFubmVsaWQ6IG5ldENvbmZpZy5jaGFubmVsaWRcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QocHJvdG9jb2wsIHJzcE9iamVjdCwgc2hvd1RpcHMsIGZvcmNlKTtcclxuICAgICAqL1xyXG4gICAgcmVxdWVzdFVuaXF1ZShyZXFQcm90b2NvbDogSVJlcXVlc3RQcm90b2NvbCwgcnNwT2JqZWN0OiBDYWxsYmFja09iamVjdCwgc2hvd1RpcHM6IGJvb2xlYW4gPSB0cnVlLCBmb3JjZTogYm9vbGVhbiA9IGZhbHNlLCBjaGFubmVsSWQ6IG51bWJlciA9IDApOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMuX2NoYW5uZWxzW2NoYW5uZWxJZF07XHJcbiAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGUucmVxdWVzdFVuaXF1ZShyZXFQcm90b2NvbCwgcnNwT2JqZWN0LCBzaG93VGlwcywgZm9yY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDoioLngrnnvZHnu5zmlq3lvIBcclxuICAgICAqIEBwYXJhbSBjb2RlICAgICAgICDlhbPpl63noIFcclxuICAgICAqIEBwYXJhbSByZWFzb24gICAgICDlhbPpl63ljp/lm6BcclxuICAgICAqIEBwYXJhbSBjaGFubmVsSWQgICDpgJrpgZPnvJblj7dcclxuICAgICAqIEBleGFtcGxlIFxyXG4gICAgICogTmV0TWFuYWdlci5nZXRJbnN0YW5jZSgpLmNsb3NlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBOZXRDaGFubmVsVHlwZS5HYW1lKTtcclxuICAgICAqL1xyXG4gICAgY2xvc2UoY29kZT86IG51bWJlciwgcmVhc29uPzogc3RyaW5nLCBjaGFubmVsSWQ6IG51bWJlciA9IDApIHtcclxuICAgICAgICBpZiAodGhpcy5fY2hhbm5lbHNbY2hhbm5lbElkXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hhbm5lbHNbY2hhbm5lbElkXS5jbG9zZVNvY2tldChjb2RlLCByZWFzb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IGVycm9yLCB3YXJuIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi8uLi9jb3JlL2NvbW1vbi9sb2cvTG9nZ2VyXCI7XHJcbmltcG9ydCB7IENhbGxiYWNrT2JqZWN0LCBJTmV0d29ya1RpcHMsIElQcm90b2NvbEhlbHBlciwgSVJlcXVlc3RQcm90b2NvbCwgSVNvY2tldCwgTmV0Q2FsbEZ1bmMsIE5ldERhdGEsIFJlcXVlc3RPYmplY3QgfSBmcm9tIFwiLi9OZXRJbnRlcmZhY2VcIjtcclxuXHJcbi8qXHJcbiogICBDb2Nvc0NyZWF0b3LnvZHnu5zoioLngrnln7rnsbvvvIzku6Xlj4rnvZHnu5znm7jlhbPmjqXlj6PlrprkuYlcclxuKiAgIDEuIOe9kee7nOi/nuaOpeOAgeaWreW8gOOAgeivt+axguWPkemAgeOAgeaVsOaNruaOpeaUtuetieWfuuehgOWKn+iDvVxyXG4qICAgMi4g5b+D6Lez5py65Yi2XHJcbiogICAzLiDmlq3nur/ph43ov54gKyDor7fmsYLph43lj5FcclxuKiAgIDQuIOiwg+eUqOe9kee7nOWxj+iUveWxglxyXG4qL1xyXG5cclxudHlwZSBFeGVjdXRlckZ1bmMgPSAoY2FsbGJhY2s6IENhbGxiYWNrT2JqZWN0LCBidWZmZXI6IE5ldERhdGEpID0+IHZvaWQ7XHJcbnR5cGUgQ2hlY2tGdW5jID0gKGNoZWNrZWRGdW5jOiBWb2lkRnVuYykgPT4gdm9pZDtcclxudHlwZSBWb2lkRnVuYyA9ICgpID0+IHZvaWQ7XHJcbnR5cGUgQm9vbEZ1bmMgPSAoKSA9PiBib29sZWFuO1xyXG5cclxudmFyIE5ldE5vZGVTdGF0ZVN0cnMgPSBbXCLlt7LlhbPpl61cIiwgXCLov57mjqXkuK1cIiwgXCLpqozor4HkuK1cIiwgXCLlj6/kvKDovpPmlbDmja5cIl07XHJcblxyXG4vKiog572R57uc5o+Q56S657G75Z6L5p6a5Li+ICovXHJcbmV4cG9ydCBlbnVtIE5ldFRpcHNUeXBlIHtcclxuICAgIENvbm5lY3RpbmcsXHJcbiAgICBSZUNvbm5lY3RpbmcsXHJcbiAgICBSZXF1ZXN0aW5nLFxyXG59XHJcblxyXG4vKiog572R57uc54q25oCB5p6a5Li+ICovXHJcbmV4cG9ydCBlbnVtIE5ldE5vZGVTdGF0ZSB7XHJcbiAgICBDbG9zZWQsICAgICAgICAgICAgICAgICAgICAgLy8g5bey5YWz6ZetXHJcbiAgICBDb25uZWN0aW5nLCAgICAgICAgICAgICAgICAgLy8g6L+e5o6l5LitXHJcbiAgICBDaGVja2luZywgICAgICAgICAgICAgICAgICAgLy8g6aqM6K+B5LitXHJcbiAgICBXb3JraW5nLCAgICAgICAgICAgICAgICAgICAgLy8g5Y+v5Lyg6L6T5pWw5o2uXHJcbn1cclxuXHJcbi8qKiDnvZHnu5zov57mjqXlj4LmlbAgKi9cclxuZXhwb3J0IGludGVyZmFjZSBOZXRDb25uZWN0T3B0aW9ucyB7XHJcbiAgICBob3N0Pzogc3RyaW5nLCAgICAgICAgICAgICAgLy8g5Zyw5Z2AXHJcbiAgICBwb3J0PzogbnVtYmVyLCAgICAgICAgICAgICAgLy8g56uv5Y+jXHJcbiAgICB1cmw/OiBzdHJpbmcsICAgICAgICAgICAgICAgLy8gdXJs77yM5LiO5Zyw5Z2AK+err+WPo+S6jOmAieS4gFxyXG4gICAgYXV0b1JlY29ubmVjdD86IG51bWJlciwgICAgIC8vIC0xIOawuOS5hemHjei/nu+8jDDkuI3oh6rliqjph43ov57vvIzlhbbku5bmraPmlbTmlbDkuLroh6rliqjph43or5XmrKHmlbBcclxufVxyXG5cclxuLyoqIOe9kee7nOiKgueCuSAqL1xyXG5leHBvcnQgY2xhc3MgTmV0Tm9kZSB7XHJcbiAgICBwcm90ZWN0ZWQgX2Nvbm5lY3RPcHRpb25zOiBOZXRDb25uZWN0T3B0aW9ucyB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJvdGVjdGVkIF9hdXRvUmVjb25uZWN0OiBudW1iZXIgPSAwO1xyXG4gICAgcHJvdGVjdGVkIF9pc1NvY2tldEluaXQ6IGJvb2xlYW4gPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29ja2V05piv5ZCm5Yid5aeL5YyW6L+HXHJcbiAgICBwcm90ZWN0ZWQgX2lzU29ja2V0T3BlbjogYm9vbGVhbiA9IGZhbHNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTb2NrZXTmmK/lkKbov57mjqXmiJDlip/ov4dcclxuICAgIHByb3RlY3RlZCBfc3RhdGU6IE5ldE5vZGVTdGF0ZSA9IE5ldE5vZGVTdGF0ZS5DbG9zZWQ7ICAgICAgICAgICAgICAgICAgIC8vIOiKgueCueW9k+WJjeeKtuaAgVxyXG4gICAgcHJvdGVjdGVkIF9zb2NrZXQ6IElTb2NrZXQgfCBudWxsID0gbnVsbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU29ja2V05a+56LGh77yI5Y+v6IO95piv5Y6f55Sfc29ja2V044CBd2Vic29ja2V044CBd3guc29ja2V0Li4uKVxyXG5cclxuICAgIHByb3RlY3RlZCBfbmV0d29ya1RpcHM6IElOZXR3b3JrVGlwcyB8IG51bGwgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgIC8vIOe9kee7nOaPkOekunVp5a+56LGh77yI6K+35rGC5o+Q56S644CB5pat57q/6YeN6L+e5o+Q56S6562J77yJXHJcbiAgICBwcm90ZWN0ZWQgX3Byb3RvY29sSGVscGVyOiBJUHJvdG9jb2xIZWxwZXIgfCBudWxsID0gbnVsbDsgICAgICAgICAgICAgICAvLyDljIXop6PmnpDlr7nosaFcclxuICAgIHByb3RlY3RlZCBfY29ubmVjdGVkQ2FsbGJhY2s6IENoZWNrRnVuYyB8IG51bGwgPSBudWxsOyAgICAgICAgICAgICAgICAgIC8vIOi/nuaOpeWujOaIkOWbnuiwg1xyXG4gICAgcHJvdGVjdGVkIF9kaXNjb25uZWN0Q2FsbGJhY2s6IEJvb2xGdW5jIHwgbnVsbCA9IG51bGw7ICAgICAgICAgICAgICAgICAgLy8g5pat57q/5Zue6LCDXHJcbiAgICBwcm90ZWN0ZWQgX2NhbGxiYWNrRXhlY3V0ZXI6IEV4ZWN1dGVyRnVuYyB8IG51bGwgPSBudWxsOyAgICAgICAgICAgICAgICAvLyDlm57osIPmiafooYxcclxuXHJcbiAgICBwcm90ZWN0ZWQgX2tlZXBBbGl2ZVRpbWVyOiBhbnkgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDlv4Pot7Plrprml7blmahcclxuICAgIHByb3RlY3RlZCBfcmVjZWl2ZU1zZ1RpbWVyOiBhbnkgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOaOpeaUtuaVsOaNruWumuaXtuWZqFxyXG4gICAgcHJvdGVjdGVkIF9yZWNvbm5lY3RUaW1lcjogYW55ID0gbnVsbDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6YeN6L+e5a6a5pe25ZmoXHJcbiAgICBwcm90ZWN0ZWQgX2hlYXJ0VGltZTogbnVtYmVyID0gMTAwMDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDlv4Pot7Ppl7TpmpRcclxuICAgIHByb3RlY3RlZCBfcmVjZWl2ZVRpbWU6IG51bWJlciA9IDYwMDAwMDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWkmuS5heayoeaUtuWIsOaVsOaNruaWreW8gFxyXG4gICAgcHJvdGVjdGVkIF9yZWNvbm5ldFRpbWVPdXQ6IG51bWJlciA9IDgwMDAwMDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6YeN6L+e6Ze06ZqUXHJcbiAgICBwcm90ZWN0ZWQgX3JlcXVlc3RzOiBSZXF1ZXN0T2JqZWN0W10gPSBBcnJheTxSZXF1ZXN0T2JqZWN0PigpOyAgICAgICAgICAvLyDor7fmsYLliJfooahcclxuICAgIHByb3RlY3RlZCBfbGlzdGVuZXI6IHsgW2tleTogc3RyaW5nXTogQ2FsbGJhY2tPYmplY3RbXSB8IG51bGwgfSA9IHt9ICAgIC8vIOebkeWQrOiAheWIl+ihqFxyXG5cclxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqIOe9kee7nOebuOWFs+WkhOeQhiAqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICBpbml0KHNvY2tldDogSVNvY2tldCwgcHJvdG9jb2w6IElQcm90b2NvbEhlbHBlciwgbmV0d29ya1RpcHM6IElOZXR3b3JrVGlwcyB8IG51bGwgPSBudWxsLCBleGVjRnVuYzogRXhlY3V0ZXJGdW5jIHwgbnVsbCA9IG51bGwpIHtcclxuICAgICAgICBMb2dnZXIubG9nTmV0KGDnvZHnu5zliJ3lp4vljJZgKTtcclxuICAgICAgICB0aGlzLl9zb2NrZXQgPSBzb2NrZXQ7XHJcbiAgICAgICAgdGhpcy5fcHJvdG9jb2xIZWxwZXIgPSBwcm90b2NvbDtcclxuICAgICAgICB0aGlzLl9uZXR3b3JrVGlwcyA9IG5ldHdvcmtUaXBzO1xyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrRXhlY3V0ZXIgPSBleGVjRnVuYyA/IGV4ZWNGdW5jIDogKGNhbGxiYWNrOiBDYWxsYmFja09iamVjdCwgYnVmZmVyOiBOZXREYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrLmNhbGxiYWNrLmNhbGwoY2FsbGJhY2sudGFyZ2V0LCBidWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOivt+axgui/nuaOpeacjeWKoeWZqFxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMg6L+e5o6l5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIGNvbm5lY3Qob3B0aW9uczogTmV0Q29ubmVjdE9wdGlvbnMpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5fc29ja2V0ICYmIHRoaXMuX3N0YXRlID09IE5ldE5vZGVTdGF0ZS5DbG9zZWQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1NvY2tldEluaXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdFNvY2tldCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTmV0Tm9kZVN0YXRlLkNvbm5lY3Rpbmc7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fc29ja2V0LmNvbm5lY3Qob3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV0VGlwcyhOZXRUaXBzVHlwZS5Db25uZWN0aW5nLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2Nvbm5lY3RPcHRpb25zID09IG51bGwgJiYgdHlwZW9mIG9wdGlvbnMuYXV0b1JlY29ubmVjdCA9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hdXRvUmVjb25uZWN0ID0gb3B0aW9ucy5hdXRvUmVjb25uZWN0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RPcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVOZXRUaXBzKE5ldFRpcHNUeXBlLkNvbm5lY3RpbmcsIHRydWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBpbml0U29ja2V0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9zb2NrZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5fc29ja2V0Lm9uQ29ubmVjdGVkID0gKGV2ZW50KSA9PiB7IHRoaXMub25Db25uZWN0ZWQoZXZlbnQpIH07XHJcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5vbk1lc3NhZ2UgPSAobXNnKSA9PiB7IHRoaXMub25NZXNzYWdlKG1zZykgfTtcclxuICAgICAgICAgICAgdGhpcy5fc29ja2V0Lm9uRXJyb3IgPSAoZXZlbnQpID0+IHsgdGhpcy5vbkVycm9yKGV2ZW50KSB9O1xyXG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQub25DbG9zZWQgPSAoZXZlbnQpID0+IHsgdGhpcy5vbkNsb3NlZChldmVudCkgfTtcclxuICAgICAgICAgICAgdGhpcy5faXNTb2NrZXRJbml0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZU5ldFRpcHModGlwc1R5cGU6IE5ldFRpcHNUeXBlLCBpc1Nob3c6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5fbmV0d29ya1RpcHMpIHtcclxuICAgICAgICAgICAgaWYgKHRpcHNUeXBlID09IE5ldFRpcHNUeXBlLlJlcXVlc3RpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25ldHdvcmtUaXBzLnJlcXVlc3RUaXBzKGlzU2hvdyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGlwc1R5cGUgPT0gTmV0VGlwc1R5cGUuQ29ubmVjdGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbmV0d29ya1RpcHMuY29ubmVjdFRpcHMoaXNTaG93KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aXBzVHlwZSA9PSBOZXRUaXBzVHlwZS5SZUNvbm5lY3RpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25ldHdvcmtUaXBzLnJlY29ubmVjdFRpcHMoaXNTaG93KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog572R57uc6L+e5o6l5oiQ5YqfICovXHJcbiAgICBwcm90ZWN0ZWQgb25Db25uZWN0ZWQoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIExvZ2dlci5sb2dOZXQoXCLnvZHnu5zlt7Lov57mjqVcIilcclxuICAgICAgICB0aGlzLl9pc1NvY2tldE9wZW4gPSB0cnVlO1xyXG4gICAgICAgIC8vIOWmguaenOiuvue9ruS6humJtOadg+Wbnuiwg++8jOWcqOi/nuaOpeWujOaIkOWQjui/m+WFpemJtOadg+mYtuaute+8jOetieW+hemJtOadg+e7k+adn1xyXG4gICAgICAgIGlmICh0aGlzLl9jb25uZWN0ZWRDYWxsYmFjayAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IE5ldE5vZGVTdGF0ZS5DaGVja2luZztcclxuICAgICAgICAgICAgdGhpcy5fY29ubmVjdGVkQ2FsbGJhY2soKCkgPT4geyB0aGlzLm9uQ2hlY2tlZCgpIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vbkNoZWNrZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgTG9nZ2VyLmxvZ05ldChg572R57uc5bey6L+e5o6l5b2T5YmN54q25oCB5Li644CQJHtOZXROb2RlU3RhdGVTdHJzW3RoaXMuX3N0YXRlXX3jgJFgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6L+e5o6l6aqM6K+B5oiQ5Yqf77yM6L+b5YWl5bel5L2c54q25oCBICovXHJcbiAgICBwcm90ZWN0ZWQgb25DaGVja2VkKCkge1xyXG4gICAgICAgIExvZ2dlci5sb2dOZXQoXCLov57mjqXpqozor4HmiJDlip/vvIzov5vlhaXlt6XkvZznirbmgIFcIik7XHJcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBOZXROb2RlU3RhdGUuV29ya2luZztcclxuICAgICAgICAvLyDlhbPpl63ov57mjqXmiJbph43ov57kuK3nmoTnirbmgIHmmL7npLpcclxuICAgICAgICB0aGlzLnVwZGF0ZU5ldFRpcHMoTmV0VGlwc1R5cGUuQ29ubmVjdGluZywgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTmV0VGlwcyhOZXRUaXBzVHlwZS5SZUNvbm5lY3RpbmcsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8g6YeN5Y+R5b6F5Y+R6YCB5L+h5oGvXHJcbiAgICAgICAgdmFyIHJlcXVlc3RzID0gdGhpcy5fcmVxdWVzdHMuY29uY2F0KCk7XHJcbiAgICAgICAgaWYgKHJlcXVlc3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgTG9nZ2VyLmxvZ05ldChg6K+35rGC44CQJHt0aGlzLl9yZXF1ZXN0cy5sZW5ndGh944CR5Liq5b6F5Y+R6YCB55qE5L+h5oGvYCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcXVlc3RzLmxlbmd0aDspIHtcclxuICAgICAgICAgICAgICAgIGxldCByZXEgPSByZXF1ZXN0c1tpXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NvY2tldCEuc2VuZChyZXEuYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXEucnNwT2JqZWN0ID09IG51bGwgfHwgcmVxLnJzcENtZCAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIOWmguaenOi/mOacieetieW+hei/lOWbnueahOivt+axgu+8jOWQr+WKqOe9kee7nOivt+axguWxglxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU5ldFRpcHMoTmV0VGlwc1R5cGUuUmVxdWVzdGluZywgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID4gMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmjqXmlLbliLDkuIDkuKrlrozmlbTnmoTmtojmga/ljIUgKi9cclxuICAgIHByb3RlY3RlZCBvbk1lc3NhZ2UobXNnOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICAvLyBMb2dnZXIubG9nTmV0KGDmjqXlj5fmtojmga/nirbmgIHkuLrjgJAke05ldE5vZGVTdGF0ZVN0cnNbdGhpcy5fc3RhdGVdfeOAkWApO1xyXG5cclxuICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UobXNnKTtcclxuXHJcbiAgICAgICAgLy8g6L+b6KGM5aS06YOo55qE5qCh6aqM77yI5a6e6ZmF5YyF6ZW/5LiO5aS06YOo6ZW/5bqm5piv5ZCm5Yy56YWN77yJXHJcbiAgICAgICAgaWYgKCF0aGlzLl9wcm90b2NvbEhlbHBlciEuY2hlY2tSZXNwb25zZVBhY2thZ2UoanNvbikpIHtcclxuICAgICAgICAgICAgZXJyb3IoYOagoemqjOaOpeWPl+a2iOaBr+aVsOaNruW8guW4uGApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDlpITnkIbnm7jlupTljIXmlbDmja5cclxuICAgICAgICBpZiAoIXRoaXMuX3Byb3RvY29sSGVscGVyIS5oYW5kbGVyUmVzcG9uc2VQYWNrYWdlKGpzb24pKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9uZXR3b3JrVGlwcylcclxuICAgICAgICAgICAgICAgIHRoaXMuX25ldHdvcmtUaXBzLnJlc3BvbnNlRXJyb3JDb2RlKGpzb24uY29kZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmjqXlj5fliLDmlbDmja7vvIzph43mlrDlrprml7bmlLbmlbDmja7orqHml7blmahcclxuICAgICAgICB0aGlzLnJlc2V0UmVjZWl2ZU1zZ1RpbWVyKCk7XHJcbiAgICAgICAgLy8g6YeN572u5b+D6Lez5YyF5Y+R6YCB5ZmoXHJcbiAgICAgICAgdGhpcy5yZXNldEhlYXJiZWF0VGltZXIoKTtcclxuICAgICAgICAvLyDop6blj5Hmtojmga/miafooYxcclxuICAgICAgICBsZXQgcnNwQ21kID0gdGhpcy5fcHJvdG9jb2xIZWxwZXIhLmdldFBhY2thZ2VJZChqc29uKTtcclxuXHJcbiAgICAgICAgTG9nZ2VyLmxvZ05ldChg5o6l5Y+X5Yiw5ZG95Luk44CQJHtyc3BDbWR944CR55qE5raI5oGvYCk7XHJcbiAgICAgICAgLy8g5LyY5YWI6Kem5Y+RcmVxdWVzdOmYn+WIl1xyXG4gICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHJlcUlkeCBpbiB0aGlzLl9yZXF1ZXN0cykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlcSA9IHRoaXMuX3JlcXVlc3RzW3JlcUlkeF07XHJcbiAgICAgICAgICAgICAgICBpZiAocmVxLnJzcENtZCA9PSByc3BDbWQgJiYgcmVxLnJzcE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5sb2dOZXQoYOinpuWPkeivt+axguWRveS7pOOAkCR7cnNwQ21kfeOAkeeahOWbnuiwg2ApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrRXhlY3V0ZXIhKHJlcS5yc3BPYmplY3QsIGpzb24uZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMuc3BsaWNlKHBhcnNlSW50KHJlcUlkeCksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVxdWVzdHMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTmV0VGlwcyhOZXRUaXBzVHlwZS5SZXF1ZXN0aW5nLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIubG9nTmV0KGDor7fmsYLpmJ/liJfkuK3ov5jmnInjgJAke3RoaXMuX3JlcXVlc3RzLmxlbmd0aH3jgJHkuKror7fmsYLlnKjnrYnlvoVgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyW3JzcENtZF07XHJcbiAgICAgICAgaWYgKG51bGwgIT0gbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcnNwIG9mIGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLmxvZ05ldChg6Kem5Y+R55uR5ZCs5ZG95Luk44CQJHtyc3BDbWR944CR55qE5Zue6LCDYCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFja0V4ZWN1dGVyIShyc3AsIGpzb24uZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uRXJyb3IoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIGVycm9yKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25DbG9zZWQoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xyXG5cclxuICAgICAgICAvLyDmiafooYzmlq3nur/lm57osIPvvIzov5Tlm55mYWxzZeihqOekuuS4jei/m+ihjOmHjei/nlxyXG4gICAgICAgIGlmICh0aGlzLl9kaXNjb25uZWN0Q2FsbGJhY2sgJiYgIXRoaXMuX2Rpc2Nvbm5lY3RDYWxsYmFjaygpKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5sb2dOZXQoYOaWreW8gOi/nuaOpWApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDoh6rliqjph43ov55cclxuICAgICAgICBpZiAodGhpcy5pc0F1dG9SZWNvbm5lY3QoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU5ldFRpcHMoTmV0VGlwc1R5cGUuUmVDb25uZWN0aW5nLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NvY2tldCEuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gTmV0Tm9kZVN0YXRlLkNsb3NlZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdCh0aGlzLl9jb25uZWN0T3B0aW9ucyEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2F1dG9SZWNvbm5lY3QgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXV0b1JlY29ubmVjdCAtPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB0aGlzLl9yZWNvbm5ldFRpbWVPdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBOZXROb2RlU3RhdGUuQ2xvc2VkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaWreW8gOe9kee7nFxyXG4gICAgICogQHBhcmFtIGNvZGUgICAgICDlhbPpl63noIFcclxuICAgICAqIEBwYXJhbSByZWFzb24gICAg5YWz6Zet5Y6f5ZugXHJcbiAgICAgKi9cclxuICAgIGNsb3NlKGNvZGU/OiBudW1iZXIsIHJlYXNvbj86IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY2xlYXJUaW1lcigpO1xyXG4gICAgICAgIHRoaXMuX2xpc3RlbmVyID0ge307XHJcbiAgICAgICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcclxuICAgICAgICBpZiAodGhpcy5fbmV0d29ya1RpcHMpIHtcclxuICAgICAgICAgICAgdGhpcy5fbmV0d29ya1RpcHMuY29ubmVjdFRpcHMoZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLl9uZXR3b3JrVGlwcy5yZWNvbm5lY3RUaXBzKGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5fbmV0d29ya1RpcHMucmVxdWVzdFRpcHMoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fc29ja2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5jbG9zZShjb2RlLCByZWFzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBOZXROb2RlU3RhdGUuQ2xvc2VkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWPquaYr+WFs+mXrVNvY2tldOWll+aOpeWtl++8iOS7jeeEtumHjeeUqOe8k+WtmOS4juW9k+WJjeeKtuaAge+8iVxyXG4gICAgICogQHBhcmFtIGNvZGUgICAgICDlhbPpl63noIFcclxuICAgICAqIEBwYXJhbSByZWFzb24gICAg5YWz6Zet5Y6f5ZugXHJcbiAgICAgKi9cclxuICAgIGNsb3NlU29ja2V0KGNvZGU/OiBudW1iZXIsIHJlYXNvbj86IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl9zb2NrZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5fc29ja2V0LmNsb3NlKGNvZGUsIHJlYXNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+R6LW36K+35rGC77yM5aaC5p6c5b2T5YmN5aSE5LqO6YeN6L+e5Lit77yM6L+b5YWl57yT5a2Y5YiX6KGo562J5b6F6YeN6L+e5a6M5oiQ5ZCO5Y+R6YCBXHJcbiAgICAgKiBAcGFyYW0gYnVmICAgICAgIOe9kee7nOaVsOaNrlxyXG4gICAgICogQHBhcmFtIGZvcmNlICAgICDmmK/lkKblvLrliLblj5HpgIFcclxuICAgICAqL1xyXG4gICAgc2VuZChidWY6IE5ldERhdGEsIGZvcmNlOiBib29sZWFuID0gZmFsc2UpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PSBOZXROb2RlU3RhdGUuV29ya2luZyB8fCBmb3JjZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc29ja2V0IS5zZW5kKGJ1Zik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09IE5ldE5vZGVTdGF0ZS5DaGVja2luZyB8fFxyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9PSBOZXROb2RlU3RhdGUuQ29ubmVjdGluZykge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcjogYnVmLFxyXG4gICAgICAgICAgICAgICAgcnNwQ21kOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgcnNwT2JqZWN0OiBudWxsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBMb2dnZXIubG9nTmV0KGDlvZPliY3nirbmgIHkuLrjgJAke05ldE5vZGVTdGF0ZVN0cnNbdGhpcy5fc3RhdGVdfeOAkSznuYHlv5nlubbnvJPlhrLlj5HpgIHmlbDmja5gKTtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlcnJvcihg5b2T5YmN54q25oCB5Li644CQJHtOZXROb2RlU3RhdGVTdHJzW3RoaXMuX3N0YXRlXX3jgJEs6K+35rGC6ZSZ6K+vYCk7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlj5Hotbfor7fmsYLvvIzlubbov5vlhaXnvJPlrZjliJfooahcclxuICAgICAqIEBwYXJhbSByZXFQcm90b2NvbCDor7fmsYLljY/orq5cclxuICAgICAqIEBwYXJhbSByc3BPYmplY3QgICDlm57osIPlr7nosaFcclxuICAgICAqIEBwYXJhbSBzaG93VGlwcyAgICDmmK/lkKbop6blj5Hor7fmsYLmj5DnpLpcclxuICAgICAqIEBwYXJhbSBmb3JjZSAgICAgICDmmK/lkKblvLrliLblj5HpgIFcclxuICAgICAqL1xyXG4gICAgcmVxdWVzdDxUPihyZXFQcm90b2NvbDogSVJlcXVlc3RQcm90b2NvbCwgcnNwT2JqZWN0OiBDYWxsYmFja09iamVjdCwgc2hvd1RpcHM6IGJvb2xlYW4gPSB0cnVlLCBmb3JjZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgdmFyIHJzcENtZCA9IHRoaXMuX3Byb3RvY29sSGVscGVyIS5oYW5kbGVyUmVxdWVzdFBhY2thZ2UocmVxUHJvdG9jb2wpO1xyXG4gICAgICAgIHRoaXMuYmFzZV9yZXF1ZXN0KHJlcVByb3RvY29sLCByc3BDbWQsIHJzcE9iamVjdCwgc2hvd1RpcHMsIGZvcmNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWUr+S4gHJlcXVlc3TvvIznoa7kv53msqHmnInlkIzkuIDlk43lupTnmoTor7fmsYLvvIjpgb/lhY3kuIDkuKror7fmsYLph43lpI3lj5HpgIHvvIxuZXRUaXBz55WM6Z2i55qE5bGP6JS95Lmf5piv5LiA5Liq5aW955qE5pa55rOV77yJXHJcbiAgICAgKiBAcGFyYW0gcmVxUHJvdG9jb2wg6K+35rGC5Y2P6K6uXHJcbiAgICAgKiBAcGFyYW0gcnNwT2JqZWN0ICAg5Zue6LCD5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gc2hvd1RpcHMgICAg5piv5ZCm6Kem5Y+R6K+35rGC5o+Q56S6XHJcbiAgICAgKiBAcGFyYW0gZm9yY2UgICAgICAg5piv5ZCm5by65Yi25Y+R6YCBXHJcbiAgICAgKi9cclxuICAgIHJlcXVlc3RVbmlxdWUocmVxUHJvdG9jb2w6IElSZXF1ZXN0UHJvdG9jb2wsIHJzcE9iamVjdDogQ2FsbGJhY2tPYmplY3QsIHNob3dUaXBzOiBib29sZWFuID0gdHJ1ZSwgZm9yY2U6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHZhciByc3BDbWQgPSB0aGlzLl9wcm90b2NvbEhlbHBlciEuaGFuZGxlclJlcXVlc3RQYWNrYWdlKHJlcVByb3RvY29sKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9yZXF1ZXN0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVxdWVzdHNbaV0ucnNwQ21kID09IHJzcENtZCkge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLmxvZ05ldChg5ZG95Luk44CQJHtyc3BDbWR944CR6YeN5aSN6K+35rGCYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYmFzZV9yZXF1ZXN0KHJlcVByb3RvY29sLCByc3BDbWQsIHJzcE9iamVjdCwgc2hvd1RpcHMsIGZvcmNlKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJhc2VfcmVxdWVzdChyZXFQcm90b2NvbDogSVJlcXVlc3RQcm90b2NvbCwgcnNwQ21kOiBzdHJpbmcsIHJzcE9iamVjdDogQ2FsbGJhY2tPYmplY3QsIHNob3dUaXBzOiBib29sZWFuID0gdHJ1ZSwgZm9yY2U6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIHZhciBidWY6IE5ldERhdGEgPSBKU09OLnN0cmluZ2lmeShyZXFQcm90b2NvbCk7ICAgICAgICAgLy8g6L2s5Li65LqM6L+b5Yi25rWB5Y+R6YCBXHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PSBOZXROb2RlU3RhdGUuV29ya2luZyB8fCBmb3JjZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQhLnNlbmQoYnVmKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIExvZ2dlci5sb2dOZXQoYOmYn+WIl+WRveS7pOS4uuOAkCR7cnNwQ21kfeOAkeeahOivt+axgu+8jOetieW+heivt+axguaVsOaNrueahOWbnuiwg2ApO1xyXG5cclxuICAgICAgICAvLyDov5vlhaXlj5HpgIHnvJPlrZjliJfooahcclxuICAgICAgICB0aGlzLl9yZXF1ZXN0cy5wdXNoKHtcclxuICAgICAgICAgICAgYnVmZmVyOiBidWYsIHJzcENtZCwgcnNwT2JqZWN0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8g5ZCv5Yqo572R57uc6K+35rGC5bGCXHJcbiAgICAgICAgaWYgKHNob3dUaXBzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTmV0VGlwcyhOZXRUaXBzVHlwZS5SZXF1ZXN0aW5nLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKiog5Zue6LCD55u45YWz5aSE55CGICoqKioqKioqKioqKioqKioqKioqKi9cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5LiA5Liq5ZSv5LiA55qE5pyN5Yqh5Zmo5o6o6YCB55uR5ZCsXHJcbiAgICAgKiBAcGFyYW0gY21kICAgICAgIOWRveS7pOWtl+S4slxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrICDlm57osIPmlrnms5VcclxuICAgICAqIEBwYXJhbSB0YXJnZXQgICAg55uu5qCH5a+56LGhXHJcbiAgICAgKi9cclxuICAgIHNldFJlc3BvbmVIYW5kbGVyKGNtZDogc3RyaW5nLCBjYWxsYmFjazogTmV0Q2FsbEZ1bmMsIHRhcmdldD86IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVycm9yKGDlkb3ku6TkuLrjgJAke2NtZH3jgJHorr7nva7lk43lupTlpITnkIbnqIvluo/plJnor69gKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9saXN0ZW5lcltjbWRdID0gW3sgdGFyZ2V0LCBjYWxsYmFjayB9XTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWPr+a3u+WKoOWkmuS4quWQjOexu+i/lOWbnua2iOaBr+eahOebkeWQrFxyXG4gICAgICogQHBhcmFtIGNtZCAgICAgICDlkb3ku6TlrZfkuLJcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAg5Zue6LCD5pa55rOVXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0ICAgIOebruagh+WvueixoVxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIGFkZFJlc3BvbmVIYW5kbGVyKGNtZDogc3RyaW5nLCBjYWxsYmFjazogTmV0Q2FsbEZ1bmMsIHRhcmdldD86IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVycm9yKGDlkb3ku6TkuLrjgJAke2NtZH3jgJHmt7vliqDlk43lupTlpITnkIbnqIvluo/plJnor69gKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcnNwT2JqZWN0ID0geyB0YXJnZXQsIGNhbGxiYWNrIH07XHJcbiAgICAgICAgaWYgKG51bGwgPT0gdGhpcy5fbGlzdGVuZXJbY21kXSkge1xyXG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lcltjbWRdID0gW3JzcE9iamVjdF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLmdldE5ldExpc3RlbmVyc0luZGV4KGNtZCwgcnNwT2JqZWN0KTtcclxuICAgICAgICAgICAgaWYgKC0xID09IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lcltjbWRdIS5wdXNoKHJzcE9iamVjdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKDpmaTkuIDkuKrnm5HlkKzkuK3mjIflrprlrZDlm57osINcclxuICAgICAqIEBwYXJhbSBjbWQgICAgICAg5ZG95Luk5a2X5LiyXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgIOWbnuiwg+aWueazlVxyXG4gICAgICogQHBhcmFtIHRhcmdldCAgICDnm67moIflr7nosaFcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlUmVzcG9uZUhhbmRsZXIoY21kOiBzdHJpbmcsIGNhbGxiYWNrOiBOZXRDYWxsRnVuYywgdGFyZ2V0PzogYW55KSB7XHJcbiAgICAgICAgaWYgKG51bGwgIT0gdGhpcy5fbGlzdGVuZXJbY21kXSAmJiBjYWxsYmFjayAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuZ2V0TmV0TGlzdGVuZXJzSW5kZXgoY21kLCB7IHRhcmdldCwgY2FsbGJhY2sgfSk7XHJcbiAgICAgICAgICAgIGlmICgtMSAhPSBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJbY21kXSEuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa4hemZpOaJgOacieebkeWQrOaIluaMh+WumuWRveS7pOeahOebkeWQrFxyXG4gICAgICogQHBhcmFtIGNtZCAg5ZG95Luk5a2X5Liy77yI6buY6K6k5LiN5aGr5Li65riF6Zmk5omA5pyJ77yJXHJcbiAgICAgKi9cclxuICAgIGNsZWFuTGlzdGVuZXJzKGNtZDogc3RyaW5nID0gXCJcIikge1xyXG4gICAgICAgIGlmIChjbWQgPT0gXCJcIikge1xyXG4gICAgICAgICAgICB0aGlzLl9saXN0ZW5lciA9IHt9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fbGlzdGVuZXJbY21kXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldE5ldExpc3RlbmVyc0luZGV4KGNtZDogc3RyaW5nLCByc3BPYmplY3Q6IENhbGxiYWNrT2JqZWN0KTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgaW5kZXggPSAtMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2xpc3RlbmVyW2NtZF0hLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBpdGVyYXRvciA9IHRoaXMuX2xpc3RlbmVyW2NtZF0hW2ldO1xyXG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbGJhY2sgPT0gcnNwT2JqZWN0LmNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICAmJiBpdGVyYXRvci50YXJnZXQgPT0gcnNwT2JqZWN0LnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKioqKioqKioqKioqKioqKioqKioqIOW/g+i3s+OAgei2heaXtuebuOWFs+WkhOeQhiAqKioqKioqKioqKioqKioqKioqKiovXHJcbiAgICBwcm90ZWN0ZWQgcmVzZXRSZWNlaXZlTXNnVGltZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3JlY2VpdmVNc2dUaW1lciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fcmVjZWl2ZU1zZ1RpbWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3JlY2VpdmVNc2dUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB3YXJuKFwi5o6l5pS25raI5oGv5a6a5pe25Zmo5YWz6Zet572R57uc6L+e5o6lXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQhLmNsb3NlKCk7XHJcbiAgICAgICAgfSwgdGhpcy5fcmVjZWl2ZVRpbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCByZXNldEhlYXJiZWF0VGltZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2tlZXBBbGl2ZVRpbWVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9rZWVwQWxpdmVUaW1lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9rZWVwQWxpdmVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBMb2dnZXIubG9nTmV0KFwi572R57uc6IqC54K55L+d5oyB5rS76LeD5Y+R6YCB5b+D6Lez5L+h5oGvXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbmQodGhpcy5fcHJvdG9jb2xIZWxwZXIhLmdldEhlYXJiZWF0KCkpO1xyXG4gICAgICAgIH0sIHRoaXMuX2hlYXJ0VGltZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGNsZWFyVGltZXIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3JlY2VpdmVNc2dUaW1lciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fcmVjZWl2ZU1zZ1RpbWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2tlZXBBbGl2ZVRpbWVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9rZWVwQWxpdmVUaW1lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RUaW1lciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fcmVjb25uZWN0VGltZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5piv5ZCm6Ieq5Yqo6YeN6L+e5o6lICovXHJcbiAgICBpc0F1dG9SZWNvbm5lY3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9SZWNvbm5lY3QgIT0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5ouS57ud6YeN5paw6L+e5o6lICovXHJcbiAgICByZWplY3RSZWNvbm5lY3QoKSB7XHJcbiAgICAgICAgdGhpcy5fYXV0b1JlY29ubmVjdCA9IDA7XHJcbiAgICAgICAgdGhpcy5jbGVhclRpbWVyKCk7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA0LTIxIDEzOjQ1OjUxXHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA0LTIxIDEzOjUxOjMzXHJcbiAqL1xyXG5pbXBvcnQgeyBJUHJvdG9jb2xIZWxwZXIsIElSZXF1ZXN0UHJvdG9jb2wsIElSZXNwb25zZVByb3RvY29sLCBOZXREYXRhIH0gZnJvbSBcIi4vTmV0SW50ZXJmYWNlXCI7XHJcblxyXG52YXIgdW56aXAgPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHtcclxuICAgIGxldCBjaGFyRGF0YSA9IHN0ci5zcGxpdCgnJykubWFwKGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgcmV0dXJuIHguY2hhckNvZGVBdCgwKTtcclxuICAgIH0pO1xyXG4gICAgbGV0IGJpbkRhdGEgPSBuZXcgVWludDhBcnJheShjaGFyRGF0YSk7XHJcbiAgICAvL0B0cy1pZ25vcmVcclxuICAgIGxldCBkYXRhID0gcGFrby5pbmZsYXRlKGJpbkRhdGEsIHsgdG86ICdzdHJpbmcnIH0pO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbnZhciB6aXAgPSBmdW5jdGlvbiAoc3RyOiBzdHJpbmcpIHtcclxuICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgbGV0IGJpbmFyeVN0cmluZyA9IHBha28uZ3ppcChzdHIsIHsgdG86ICdzdHJpbmcnIH0pO1xyXG4gICAgcmV0dXJuIGJpbmFyeVN0cmluZztcclxufVxyXG5cclxuLyoqIFBha28uanMg5pWw5o2u5Y6L57yp5Y2P6K6uICovXHJcbmV4cG9ydCBjbGFzcyBOZXRQcm90b2NvbFBha28gaW1wbGVtZW50cyBJUHJvdG9jb2xIZWxwZXIge1xyXG4gICAgZ2V0SGVhZGxlbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEhlYXJiZWF0KCk6IE5ldERhdGEge1xyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBhY2thZ2VMZW4obXNnOiBOZXREYXRhKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gbXNnLnRvU3RyaW5nKCkubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrUmVzcG9uc2VQYWNrYWdlKHJlc3BQcm90b2NvbDogSVJlc3BvbnNlUHJvdG9jb2wpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVyUmVzcG9uc2VQYWNrYWdlKHJlc3BQcm90b2NvbDogSVJlc3BvbnNlUHJvdG9jb2wpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAocmVzcFByb3RvY29sLmNvZGUgPT0gMSkge1xyXG4gICAgICAgICAgICBpZiAocmVzcFByb3RvY29sLmlzQ29tcHJlc3MpIHtcclxuICAgICAgICAgICAgICAgIHJlc3BQcm90b2NvbC5kYXRhID0gdW56aXAocmVzcFByb3RvY29sLmRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3BQcm90b2NvbC5kYXRhID0gSlNPTi5wYXJzZShyZXNwUHJvdG9jb2wuZGF0YSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlclJlcXVlc3RQYWNrYWdlKHJlcVByb3RvY29sOiBJUmVxdWVzdFByb3RvY29sKTogc3RyaW5nIHtcclxuICAgICAgICB2YXIgcnNwQ21kID0gcmVxUHJvdG9jb2wuY21kO1xyXG4gICAgICAgIHJlcVByb3RvY29sLmNhbGxiYWNrID0gcnNwQ21kO1xyXG4gICAgICAgIGlmIChyZXFQcm90b2NvbC5pc0NvbXByZXNzKSB7XHJcbiAgICAgICAgICAgIHJlcVByb3RvY29sLmRhdGEgPSB6aXAocmVxUHJvdG9jb2wuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByc3BDbWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGFja2FnZUlkKHJlc3BQcm90b2NvbDogSVJlc3BvbnNlUHJvdG9jb2wpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiByZXNwUHJvdG9jb2wuY2FsbGJhY2shO1xyXG4gICAgfVxyXG59IiwiXHJcbmltcG9ydCB7IEV2ZW50VG91Y2gsIE5vZGUsIFZlYzIsIGpzLCB2MyB9IGZyb20gXCJjY1wiO1xyXG5cclxuLyoqIOiKgueCueaLluaLveWKn+iDvSAqL1xyXG4vL0B0cy1pZ25vcmVcclxuaWYgKCFOb2RlLnByb3RvdHlwZVtcIl9fJE5vZGVEcmFnRXh0JF9fXCJdKSB7XHJcbiAgICAvL0B0cy1pZ25vcmVcclxuICAgIE5vZGUucHJvdG90eXBlW1wiX18kTm9kZURyYWdFeHQkX19cIl0gPSB0cnVlO1xyXG5cclxuICAgIGxldCBfRHJhZ0V2ZW50ID0ge1xyXG4gICAgICAgIERSQUdfU1RBUlQ6IFwiZHJhZ19zdGFydFwiLFxyXG4gICAgICAgIERSQUdfTU9WRTogXCJkcmFnX21vdmVcIixcclxuICAgICAgICBEUkFHX0VORDogXCJkcmFnX2VuZFwiXHJcbiAgICB9XHJcblxyXG4gICAganMubWl4aW4oTm9kZSwge1xyXG4gICAgICAgIERyYWdFdmVudDogX0RyYWdFdmVudFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tICAgTm9kZSDmt7vliqAg5ouW5ou95bGe5oCnIC0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICBqcy5taXhpbihOb2RlLnByb3RvdHlwZSwge1xyXG4gICAgICAgIF9kcmFnZ2FibGU6IGZhbHNlLFxyXG4gICAgICAgIF9kcmFnZ2luZzogZmFsc2UsXHJcbiAgICAgICAgX2RyYWdUZXN0aW5nOiBmYWxzZSxcclxuICAgICAgICBfZHJhZ1N0YXJ0UG9pbnQ6IG51bGwsXHJcbiAgICAgICAgaW5pdERyYWc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdnYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy5vblRvdWNoQmVnaW5fMCwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX01PVkUsIHRoaXMub25Ub3VjaE1vdmVfMCwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKE5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCwgdGhpcy5vblRvdWNoRW5kXzAsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwsIHRoaXMub25Ub3VjaENhbmNlbF8wLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2ZmKE5vZGUuRXZlbnRUeXBlLlRPVUNIX1NUQVJULCB0aGlzLm9uVG91Y2hCZWdpbl8wLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub2ZmKE5vZGUuRXZlbnRUeXBlLlRPVUNIX01PVkUsIHRoaXMub25Ub3VjaE1vdmVfMCwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZihOb2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMub25Ub3VjaEVuZF8wLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub2ZmKE5vZGUuRXZlbnRUeXBlLlRPVUNIX0NBTkNFTCwgdGhpcy5vblRvdWNoQ2FuY2VsXzAsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblRvdWNoQmVnaW5fMDogZnVuY3Rpb24gKGV2ZW50OiBFdmVudFRvdWNoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnU3RhcnRQb2ludCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmFnU3RhcnRQb2ludCA9IG5ldyBWZWMyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gREVWICYmIGNvbnNvbGUubG9nKGBOb2RlRHJhZ0V4dCAtPiBvblRvdWNoQmVnaW5fMCAgJHt0aGlzLm5hbWV9YCk7XHJcblxyXG4gICAgICAgICAgICAvLyBldmVudC5wcmV2ZW50U3dhbGxvdyA9IHRydWU7XHJcbiAgICAgICAgICAgIGxldCBwb3MgPSBldmVudC5nZXRVSUxvY2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdTdGFydFBvaW50LnNldChwb3MpO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnVGVzdGluZyA9IHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblRvdWNoTW92ZV8wOiBmdW5jdGlvbiAoZXZlbnQ6IEV2ZW50VG91Y2gpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9kcmFnZ2luZyAmJiB0aGlzLl9kcmFnZ2FibGUgJiYgdGhpcy5fZHJhZ1Rlc3RpbmcpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzZW5zaXRpdml0eSA9IDEwO1xyXG4gICAgICAgICAgICAgICAgbGV0IHBvcyA9IGV2ZW50LmdldFVJTG9jYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzLl9kcmFnU3RhcnRQb2ludC54IC0gcG9zLngpIDwgc2Vuc2l0aXZpdHlcclxuICAgICAgICAgICAgICAgICAgICAmJiBNYXRoLmFicyh0aGlzLl9kcmFnU3RhcnRQb2ludC55IC0gcG9zLnkpIDwgc2Vuc2l0aXZpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZXZlbnQucHJldmVudFN3YWxsb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ2dpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ1Rlc3RpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChOb2RlLkRyYWdFdmVudC5EUkFHX1NUQVJULCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnZ2luZykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGRlbHRhID0gZXZlbnQuZ2V0VUlEZWx0YSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gLyoqIOi/memHjOmZpOS7pSDkuJbnlYznvKnmlL7vvIzlnKjmnInnvKnmlL7nmoTml7blgJnmi5bmi73kuI3oh7Pkuo7lvojmgKogKi9cclxuICAgICAgICAgICAgICAgIC8vIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uLmFkZCh2MyhkZWx0YS54IC8gdGhpcy53b3JsZFNjYWxlLngsIGRlbHRhLnkgLyB0aGlzLndvcmxkU2NhbGUueSwgMCkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG5ld1BvcyA9IHYzKGRlbHRhLngsIGRlbHRhLnksIDApLmFkZCh0aGlzLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXdQb3M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoTm9kZS5EcmFnRXZlbnQuRFJBR19NT1ZFLCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBvblRvdWNoRW5kXzA6IGZ1bmN0aW9uIChldmVudDogRXZlbnRUb3VjaCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZHJhZ2dpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoTm9kZS5EcmFnRXZlbnQuRFJBR19FTkQsIGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBERVYgJiYgY29uc29sZS5sb2coYE5vZGVEcmFnRXh0IC0+IG9uVG91Y2hFbmRfMCAgJHt0aGlzLm5hbWV9LCBfZHJhZ2dpbmc6ICR7dGhpcy5fZHJhZ2dpbmd9YCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgb25Ub3VjaENhbmNlbF8wOiBmdW5jdGlvbiAoZXZlbnQ6IEV2ZW50VG91Y2gpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmFnZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KE5vZGUuRHJhZ0V2ZW50LkRSQUdfRU5ELCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gREVWICYmIGNvbnNvbGUubG9nKGBOb2RlRHJhZ0V4dCAtPiBvblRvdWNoQ2FuY2VsXzAgICR7dGhpcy5uYW1lfSwgX2RyYWdnaW5nOiAke3RoaXMuX2RyYWdnaW5nfWApO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHN0YXJ0RHJhZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyDmraToioLngrnmmK/lkKblnKjlnLrmma/kuK3mv4DmtLtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZUluSGllcmFyY2h5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kcmFnQmVnaW4oKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkcmFnQmVnaW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fZHJhZ2dpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnVGVzdGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMub24oTm9kZS5FdmVudFR5cGUuVE9VQ0hfTU9WRSwgdGhpcy5vblRvdWNoTW92ZV8wLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMub25Ub3VjaEVuZF8wLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwsIHRoaXMub25Ub3VjaENhbmNlbF8wLCB0aGlzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRyYWdFbmQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmFnVGVzdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ2dpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIOWBnOatouaLluaLvVxyXG4gICAgICAgIHN0b3BEcmFnOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZ0VuZCgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIOenu+mZpCB0b3VjaCDkuovku7ZcclxuICAgICAgICByZW1vdmVEcmFnRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5vZmYoTm9kZS5FdmVudFR5cGUuVE9VQ0hfU1RBUlQsIHRoaXMub25Ub3VjaEJlZ2luXzAsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9mZihOb2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCB0aGlzLm9uVG91Y2hNb3ZlXzAsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9mZihOb2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMub25Ub3VjaEVuZF8wLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5vZmYoTm9kZS5FdmVudFR5cGUuVE9VQ0hfQ0FOQ0VMLCB0aGlzLm9uVG91Y2hDYW5jZWxfMCwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8g5aaC5p6cIG5vZGUg6K6+572uIG5vZGUuZHJhZ2dhYmxlID0gdHJ1ZSwg5YiZ5ZCv55SoIOaLluaLvVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcImRyYWdnYWJsZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kcmFnZ2FibGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZHJhZ2dhYmxlICE9IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kcmFnZ2FibGUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdERyYWcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJkcmFnVGVzdGluZ1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kcmFnVGVzdGluZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnVGVzdGluZyAhPSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhZ1Rlc3RpbmcgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tICAgTm9kZSDmt7vliqAg5ouW5ou95bGe5oCnIC0tLS0tLS0tLS0tLS0tLS1cclxufVxyXG5cclxuZGVjbGFyZSBtb2R1bGUgXCJjY1wiIHtcclxuICAgIC8vIOi/memHjOS9v+eUqCBpbnRlcmZhY2Ug6L+b6KGM5omp5bGV77yM5aaC5p6c5L2/55SoIGNsYXNzIOWImeS8muS4jueOsOacieeahCBkLnRzIOacieWGsueqgVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBOb2RlIHtcclxuICAgICAgICAvKiog5piv5ZCm5ZCv5Yqo5ouW5ou9IC0gdHJ1ZeS4uuWQr+WKqCAqL1xyXG4gICAgICAgIGRyYWdnYWJsZTogYm9vbGVhbjtcclxuICAgICAgICAvKiog5byA5aeL5ouW5ou9ICovXHJcbiAgICAgICAgc3RhcnREcmFnKCk6IHZvaWQ7XHJcbiAgICAgICAgLyoqIOWBnOatouaLluaLvSAqL1xyXG4gICAgICAgIHN0b3BEcmFnKCk6IHZvaWQ7XHJcbiAgICAgICAgLyoqIOenu+mZpOaLluaLveS6i+S7tiAqL1xyXG4gICAgICAgIHJlbW92ZURyYWdFdmVudCgpOiB2b2lkO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgTm9kZSB7XHJcbiAgICAgICAgLyoqIOaUr+aMgeeahOaLluaLveS6i+S7tiAqL1xyXG4gICAgICAgIGV4cG9ydCBjbGFzcyBEcmFnRXZlbnQge1xyXG4gICAgICAgICAgICAvKiog5ouW5ou95byA5aeL5LqL5Lu2ICovXHJcbiAgICAgICAgICAgIHN0YXRpYyBEUkFHX1NUQVJUOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIC8qKiDmi5bmi73np7vliqjkuovku7YgKi9cclxuICAgICAgICAgICAgc3RhdGljIERSQUdfTU9WRTogc3RyaW5nO1xyXG4gICAgICAgICAgICAvKiog5ouW5ou957uT5p2f5LqL5Lu2ICovXHJcbiAgICAgICAgICAgIHN0YXRpYyBEUkFHX0VORDogc3RyaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IEJ1dHRvbiwgQ2FudmFzLCBDb2xvciwgRWRpdEJveCwgR3JhcGhpY3MsIExhYmVsLCBMYXlvdXQsIE1hc2ssIE5vZGUsIFBhZ2VWaWV3LCBQcm9ncmVzc0JhciwgUmljaFRleHQsIFNjcm9sbFZpZXcsIFNpemUsIFNsaWRlciwgU3ByaXRlLCBUb2dnbGUsIFVJT3BhY2l0eSwgVUlSZW5kZXJlciwgVUlUcmFuc2Zvcm0sIFdpZGdldCwgdjMgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgRURJVE9SX05PVF9JTl9QUkVWSUVXIH0gZnJvbSBcImNjL2VudlwiO1xyXG5cclxuLy8gPT09PT09PT09IOaJqeWxlSBjYyDmj5DnpLrlo7DmmI4gPT09PT09PT09XHJcblxyXG4vKiog5omp5bGV6IqC54K55bGe5oCnICovXHJcbmRlY2xhcmUgbW9kdWxlIFwiY2NcIiB7XHJcbiAgICBpbnRlcmZhY2UgTm9kZSB7XHJcbiAgICAgICAgdWlHcmFwaGljczogR3JhcGhpY3MsXHJcbiAgICAgICAgdWlMYWJlbDogTGFiZWwsXHJcbiAgICAgICAgdWlSaWNoVGV4dDogUmljaFRleHQsXHJcbiAgICAgICAgdWlTcHJpdGU6IFNwcml0ZSxcclxuICAgICAgICB1aUJ1dHRvbjogQnV0dG9uLFxyXG4gICAgICAgIHVpQ2FudmFzOiBDYW52YXMsXHJcbiAgICAgICAgdWlFZGl0Qm94OiBFZGl0Qm94LFxyXG4gICAgICAgIHVpTGF5b3V0OiBMYXlvdXQsXHJcbiAgICAgICAgdWlQYWdlVmlldzogUGFnZVZpZXcsXHJcbiAgICAgICAgdWlQcm9ncmVzc0JhcjogUHJvZ3Jlc3NCYXIsXHJcbiAgICAgICAgdWlTY3JvbGxWaWV3OiBTY3JvbGxWaWV3LFxyXG4gICAgICAgIHVpU2xpZGVyOiBTbGlkZXIsXHJcbiAgICAgICAgdWlUb2dnbGU6IFRvZ2dsZSxcclxuICAgICAgICB1aVdpZGdldDogV2lkZ2V0LFxyXG4gICAgICAgIHVpT3BhY2l0eTogVUlPcGFjaXR5LFxyXG4gICAgICAgIHVpVHJhbnNmb3JtOiBVSVRyYW5zZm9ybSxcclxuICAgICAgICB1aU1hc2s6IE1hc2s7XHJcblxyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnnmoTmnKzlnLBY5Z2Q5qCHICovXHJcbiAgICAgICAgeDogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnnmoTmnKzlnLBZ5Z2Q5qCHICovXHJcbiAgICAgICAgeTogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnnmoTmnKzlnLBa5Z2Q5qCHICovXHJcbiAgICAgICAgejogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnlrr0gKi9cclxuICAgICAgICB3OiBudW1iZXI7XHJcbiAgICAgICAgLyoqIOiOt+WPluOAgeiuvue9ruiKgueCuemrmCAqL1xyXG4gICAgICAgIGg6IG51bWJlcjtcclxuICAgICAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K55bC65a+4ICovXHJcbiAgICAgICAgc2l6ZTogU2l6ZTtcclxuICAgICAgICAvKiog6I635Y+W44CB6K6+572uWOi9tOmUmueCuSAqL1xyXG4gICAgICAgIGFuY2hvcl94OiBudW1iZXI7XHJcbiAgICAgICAgLyoqIOiOt+WPluOAgeiuvue9rlnovbTplJrngrkgKi9cclxuICAgICAgICBhbmNob3JfeTogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnpgI/mmI7luqYgICovXHJcbiAgICAgICAgb3BhY2l0eTogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnpopzoibIgICovXHJcbiAgICAgICAgY29sb3I6IENvbG9yO1xyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva5Y6L2057yp5pS+ICovXHJcbiAgICAgICAgc2NhbGVfeDogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva5Z6L2057yp5pS+ICovXHJcbiAgICAgICAgc2NhbGVfeTogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva5a6L2057yp5pS+ICovXHJcbiAgICAgICAgc2NhbGVfejogbnVtYmVyO1xyXG4gICAgICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnnmoQgWCDmrKfmi4nop5IgKi9cclxuICAgICAgICBhbmdsZV94OiBudW1iZXI7XHJcbiAgICAgICAgLyoqIOiOt+WPluOAgeiuvue9ruiKgueCueeahCBZIOasp+aLieinkiAqL1xyXG4gICAgICAgIGFuZ2xlX3k6IG51bWJlcjtcclxuICAgICAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K555qEIFog5qyn5ouJ6KeSICovXHJcbiAgICAgICAgYW5nbGVfejogbnVtYmVyO1xyXG4gICAgfVxyXG59XHJcblxyXG5pZiAoIUVESVRPUl9OT1RfSU5fUFJFVklFVykge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpR3JhcGhpY3NcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnQoR3JhcGhpY3MpITtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJ1aUxhYmVsXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50KExhYmVsKSE7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwidWlSaWNoVGV4dFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBvbmVudChSaWNoVGV4dCkhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpU3ByaXRlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50KFNwcml0ZSkhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpQnV0dG9uXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50KEJ1dHRvbikhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpQ2FudmFzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50KENhbnZhcykhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpRWRpdEJveFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBvbmVudChFZGl0Qm94KSE7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwidWlMYXlvdXRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnQoTGF5b3V0KSE7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwidWlQYWdlVmlld1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBvbmVudChQYWdlVmlldykhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpUHJvZ3Jlc3NCYXJcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnQoUHJvZ3Jlc3NCYXIpITtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJ1aVNjcm9sbFZpZXdcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnQoU2Nyb2xsVmlldykhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpU2xpZGVyXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50KFNsaWRlcikhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpVG9nZ2xlXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50KFRvZ2dsZSkhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpV2lkZ2V0XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50KFdpZGdldCkhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpT3BhY2l0eVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBvbmVudChVSU9wYWNpdHkpITtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7IH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJ1aVRyYW5zZm9ybVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkhO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInVpTWFza1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBvbmVudChNYXNrKSE7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K555qEIFgg5Z2Q5qCHICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwieFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmOiBOb2RlID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYucG9zaXRpb24ueDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZWxmLnNldFBvc2l0aW9uKHZhbHVlLCBzZWxmLnBvc2l0aW9uLnkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnnmoQgWSDlnZDmoIcgKi9cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJ5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5wb3NpdGlvbi55O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgICAgICBsZXQgc2VsZjogTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0UG9zaXRpb24oc2VsZi5wb3NpdGlvbi54LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqIOiOt+WPluOAgeiuvue9ruiKgueCueeahCBaIOWdkOaghyAqL1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInpcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZjogTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnBvc2l0aW9uLno7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmOiBOb2RlID0gdGhpcztcclxuICAgICAgICAgICAgc2VsZi5zZXRQb3NpdGlvbihzZWxmLnBvc2l0aW9uLngsIHNlbGYucG9zaXRpb24ueSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnnmoTlrr3luqYgKi9cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJ3XCIsIHtcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmOiBOb2RlID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKT8ud2lkdGggPz8gMDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICAoc2VsZi5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pIHx8IHNlbGYuYWRkQ29tcG9uZW50KFVJVHJhbnNmb3JtKSkud2lkdGggPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K555qE6auY5bqmICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwiaFwiLCB7XHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZjogTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSk/LmhlaWdodCA/PyAwO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgICAgICBsZXQgc2VsZjogTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIChzZWxmLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkgfHwgc2VsZi5hZGRDb21wb25lbnQoVUlUcmFuc2Zvcm0pKS5oZWlnaHQgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K555qE5bC65a+4ICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmOiBOb2RlID0gdGhpcztcclxuICAgICAgICAgICAgbGV0IHVpVHJhbnNmb3JtID0gc2VsZi5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pITtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaXplKHVpVHJhbnNmb3JtLndpZHRoLCB1aVRyYW5zZm9ybS5oZWlnaHQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWU6IFNpemUpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICBsZXQgdWlUcmFuc2Zvcm0gPSBzZWxmLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkgfHwgc2VsZi5hZGRDb21wb25lbnQoVUlUcmFuc2Zvcm0pO1xyXG4gICAgICAgICAgICB1aVRyYW5zZm9ybS53aWR0aCA9IHZhbHVlLndpZHRoO1xyXG4gICAgICAgICAgICB1aVRyYW5zZm9ybS5oZWlnaHQgPSB2YWx1ZS5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqIOiOt+WPluOAgeiuvue9ruiKgueCueeahOmAj+aYjuW6piAqL1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcIm9wYWNpdHlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZjogTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIGxldCBvcCA9IHNlbGYuZ2V0Q29tcG9uZW50KFVJT3BhY2l0eSk7XHJcbiAgICAgICAgICAgIGlmIChvcCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3Aub3BhY2l0eTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbGV0IHJlbmRlciA9IHNlbGYuZ2V0Q29tcG9uZW50KFVJUmVuZGVyZXIpO1xyXG4gICAgICAgICAgICBpZiAocmVuZGVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyLmNvbG9yLmE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiAyNTU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgICAgICBsZXQgc2VsZjogTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIGxldCBvcCA9IHNlbGYuZ2V0Q29tcG9uZW50KFVJT3BhY2l0eSk7XHJcbiAgICAgICAgICAgIGlmIChvcCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBvcC5vcGFjaXR5ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCByZW5kZXIgPSBzZWxmLmdldENvbXBvbmVudChVSVJlbmRlcmVyKTtcclxuICAgICAgICAgICAgaWYgKHJlbmRlcikge1xyXG4gICAgICAgICAgICAgICAgLy8g55u05o6l6YCa6L+HIGNvbG9yLmEg6K6+572u6YCP5piO5bqm5Lya5pyJYnVn77yM5rKh6IO955u05o6l55Sf5pWI77yM6ZyA6KaB5r+A5rS76IqC54K55omN55Sf5pWIXHJcbiAgICAgICAgICAgICAgICAvLyAocmVuZGVyLmNvbG9yLmEgYXMgYW55KSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIOWIm+W7uuS4gOS4quminOiJsue8k+WtmOWvueixoe+8jOmBv+WFjeavj+asoemDveWIm+W7uuaWsOWvueixoVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLiRfX2NvbG9yX18pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRfX2NvbG9yX18gPSBuZXcgQ29sb3IocmVuZGVyLmNvbG9yLnIsIHJlbmRlci5jb2xvci5nLCByZW5kZXIuY29sb3IuYiwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kX19jb2xvcl9fLmEgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlbmRlci5jb2xvciA9IHRoaXMuJF9fY29sb3JfXzsgICAgIC8vIOiuvue9riBjb2xvciDlr7nosaHliJnlj6/ku6Xnq4vliLvnlJ/mlYhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuYWRkQ29tcG9uZW50KFVJT3BhY2l0eSkub3BhY2l0eSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqIOiOt+WPluOAgeiuvue9ruiKgueCueeahOminOiJsiAqL1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcImNvbG9yXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5nZXRDb21wb25lbnQoVUlSZW5kZXJlcik/LmNvbG9yO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWU6IENvbG9yKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmOiBOb2RlID0gdGhpcztcclxuICAgICAgICAgICAgbGV0IHJlbmRlciA9IHNlbGYuZ2V0Q29tcG9uZW50KFVJUmVuZGVyZXIpO1xyXG4gICAgICAgICAgICByZW5kZXIgJiYgKHJlbmRlci5jb2xvciA9IHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K555qEIFgg57yp5pS+57O75pWwICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwic2NhbGVfeFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmOiBOb2RlID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2NhbGUueDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZWxmLnNjYWxlID0gdjModmFsdWUsIHNlbGYuc2NhbGUueSwgc2VsZi5zY2FsZS56KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K555qEIFkg57yp5pS+57O75pWwICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwic2NhbGVfeVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmOiBOb2RlID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2NhbGUueTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZWxmLnNjYWxlID0gdjMoc2VsZi5zY2FsZS54LCB2YWx1ZSwgc2VsZi5zY2FsZS56KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K555qEIFog57yp5pS+57O75pWwICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwic2NhbGVfelwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmOiBOb2RlID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2NhbGUuejtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZWxmLnNjYWxlID0gdjMoc2VsZi5zY2FsZS54LCBzZWxmLnNjYWxlLnksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K555qE5rC05bmz6ZSa54K5ICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwiYW5jaG9yX3hcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZjogTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSk/LmFuY2hvclggPz8gMC41O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgICAgICBsZXQgc2VsZjogTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIChzZWxmLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkgfHwgc2VsZi5hZGRDb21wb25lbnQoVUlUcmFuc2Zvcm0pKS5hbmNob3JYID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqIOiOt+WPluOAgeiuvue9ruiKgueCueeahOWeguebtOmUmueCuSAqL1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcImFuY2hvcl95XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pPy5hbmNob3JZID8/IDAuNTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICAoc2VsZi5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pIHx8IHNlbGYuYWRkQ29tcG9uZW50KFVJVHJhbnNmb3JtKSkuYW5jaG9yWSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnnmoQgWCDmrKfmi4nop5IgKi9cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJhbmdsZV94XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5ldWxlckFuZ2xlcy54O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgICAgICBsZXQgc2VsZjogTm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0Um90YXRpb25Gcm9tRXVsZXIodmFsdWUsIHNlbGYuZXVsZXJBbmdsZXMueSwgc2VsZi5ldWxlckFuZ2xlcy56KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKiog6I635Y+W44CB6K6+572u6IqC54K555qEIFkg5qyn5ouJ6KeSICovXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwiYW5nbGVfeVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV1bGVyQW5nbGVzLnk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmOiBOb2RlID0gdGhpcztcclxuICAgICAgICAgICAgc2VsZi5zZXRSb3RhdGlvbkZyb21FdWxlcihzZWxmLmV1bGVyQW5nbGVzLngsIHZhbHVlLCBzZWxmLmV1bGVyQW5nbGVzLnopO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8qKiDojrflj5bjgIHorr7nva7oioLngrnnmoQgWiDmrKfmi4nop5IgKi9cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJhbmdsZV96XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXVsZXJBbmdsZXMueTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGY6IE5vZGUgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZWxmLnNldFJvdGF0aW9uRnJvbUV1bGVyKHNlbGYuZXVsZXJBbmdsZXMueCwgc2VsZi5ldWxlckFuZ2xlcy55LCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA0LTE0IDE3OjA4OjAxXHJcbiAqIEBMYXN0RWRpdG9yczogYmFuc29taW5cclxuICogQExhc3RFZGl0VGltZTogMjAyNS0wMS0wMiAxMDo0Nzo0N1xyXG4gKi9cclxuaW1wb3J0IHsgQW5pbWF0aW9uLCBDb21wb25lbnQsIExhYmVsLCBfZGVjb3JhdG9yIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IExhbmd1YWdlTGFiZWwgfSBmcm9tIFwiLi4vLi4vLi4vbGlicy9ndWkvbGFuZ3VhZ2UvTGFuZ3VhZ2VMYWJlbFwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiDmu5rliqjmtojmga/mj5DnpLrnu4Tku7YgICovXHJcbkBjY2NsYXNzKCdOb3RpZnknKVxyXG5leHBvcnQgY2xhc3MgTm90aWZ5IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eShMYWJlbClcclxuICAgIHByaXZhdGUgbGFiX2NvbnRlbnQ6IExhYmVsID0gbnVsbCE7XHJcblxyXG4gICAgQHByb3BlcnR5KEFuaW1hdGlvbilcclxuICAgIHByaXZhdGUgYW5pbWF0aW9uOiBBbmltYXRpb24gPSBudWxsITtcclxuXHJcbiAgICAvKiog5o+Q56S65Yqo55S75a6M5oiQICovXHJcbiAgICBvbkNvbXBsZXRlOiBGdW5jdGlvbiA9IG51bGwhO1xyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb24pXHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLm9uKEFuaW1hdGlvbi5FdmVudFR5cGUuRklOSVNIRUQsIHRoaXMub25GaW5pc2hlZCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkZpbmlzaGVkKCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5wYXJlbnQhLmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLm9uQ29tcGxldGUgJiYgdGhpcy5vbkNvbXBsZXRlKCk7XHJcbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlID0gbnVsbCE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmmL7npLrmj5DnpLpcclxuICAgICAqIEBwYXJhbSBtc2cgICAgICAg5paH5pysXHJcbiAgICAgKiBAcGFyYW0gdXNlSTE4biAgIOiuvue9ruS4uiB0cnVlIOaXtu+8jOS9v+eUqOWkmuivreiogOWKn+iDvSBtc2cg5Y+C5pWw5Li65aSa6K+t6KiAIGtleVxyXG4gICAgICovXHJcbiAgICB0b2FzdChtc2c6IHN0cmluZywgdXNlSTE4bjogYm9vbGVhbikge1xyXG4gICAgICAgIGxldCBsYWJlbCA9IHRoaXMubGFiX2NvbnRlbnQuZ2V0Q29tcG9uZW50KExhbmd1YWdlTGFiZWwpITtcclxuICAgICAgICBpZiAodXNlSTE4bikge1xyXG4gICAgICAgICAgICBsYWJlbC5lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGFiZWwuZGF0YUlEID0gbXNnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGFiZWwuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmxhYl9jb250ZW50LnN0cmluZyA9IG1zZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA3LTI2IDE1OjI5OjU3XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA5LTAyIDEyOjA3OjU0XHJcbiAqL1xyXG5cclxuLyoqIOWvueixoeW3peWFtyAqL1xyXG5leHBvcnQgY2xhc3MgT2JqZWN0VXRpbCB7XHJcbiAgICAvKipcclxuICAgICAqIOWIpOaWreaMh+WumueahOWAvOaYr+WQpuS4uuWvueixoVxyXG4gICAgICogQHBhcmFtIHZhbHVlIOWAvFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNPYmplY3QodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa3seaLt+i0nVxyXG4gICAgICogQHBhcmFtIHRhcmdldCDnm67moIdcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGRlZXBDb3B5KHRhcmdldDogYW55KTogYW55IHtcclxuICAgICAgICBpZiAodGFyZ2V0ID09IG51bGwgfHwgdHlwZW9mIHRhcmdldCAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXN1bHQ6IGFueSA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zZXRUaW1lKHRhcmdldC5nZXRUaW1lKCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gdGFyZ2V0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSB0aGlzLmRlZXBDb3B5KHRhcmdldFtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB0aGlzLmRlZXBDb3B5KHRhcmdldFtrZXldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS53YXJuKGDkuI3mlK/mjIHnmoTnsbvlnovvvJoke3Jlc3VsdH1gKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaLt+i0neWvueixoVxyXG4gICAgICogQHBhcmFtIHRhcmdldCDnm67moIdcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNvcHkodGFyZ2V0OiBvYmplY3QpOiBvYmplY3Qge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRhcmdldCkpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDItMTEgMDk6MzI6NDdcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjMtMDgtMjEgMTU6MTk6NTZcclxuICovXHJcbmltcG9ydCB7IERFQlVHIH0gZnJvbSBcImNjL2VudlwiO1xyXG5pbXBvcnQgeyBFZmZlY3RTaW5nbGVDYXNlIH0gZnJvbSBcIi4uL2xpYnMvYW5pbWF0b3ItZWZmZWN0L0VmZmVjdFNpbmdsZUNhc2VcIjtcclxuaW1wb3J0IHsgZWNzIH0gZnJvbSBcIi4uL2xpYnMvZWNzL0VDU1wiO1xyXG5pbXBvcnQgeyBFQ1NSb290U3lzdGVtIH0gZnJvbSBcIi4uL2xpYnMvZWNzL0VDU1N5c3RlbVwiO1xyXG5pbXBvcnQgeyBMYW5ndWFnZU1hbmFnZXIgfSBmcm9tIFwiLi4vbGlicy9ndWkvbGFuZ3VhZ2UvTGFuZ3VhZ2VcIjtcclxuaW1wb3J0IHsgVk0gfSBmcm9tIFwiLi4vbGlicy9tb2RlbC12aWV3L1ZpZXdNb2RlbFwiO1xyXG5pbXBvcnQgeyBIdHRwUmVxdWVzdCB9IGZyb20gXCIuLi9saWJzL25ldHdvcmsvSHR0cFJlcXVlc3RcIjtcclxuaW1wb3J0IHsgTmV0TWFuYWdlciB9IGZyb20gXCIuLi9saWJzL25ldHdvcmsvTmV0TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vbW9kdWxlL2NvbmZpZy9Db25maWdcIjtcclxuaW1wb3J0IHsgQXVkaW9NYW5hZ2VyIH0gZnJvbSBcIi4vY29tbW9uL2F1ZGlvL0F1ZGlvTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBNZXNzYWdlTWFuYWdlciB9IGZyb20gXCIuL2NvbW1vbi9ldmVudC9NZXNzYWdlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBSZXNMb2FkZXIgfSBmcm9tIFwiLi9jb21tb24vbG9hZGVyL1Jlc0xvYWRlclwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi9jb21tb24vbG9nL0xvZ2dlclwiO1xyXG5pbXBvcnQgeyBSYW5kb21NYW5hZ2VyIH0gZnJvbSBcIi4vY29tbW9uL3JhbmRvbS9SYW5kb21NYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFN0b3JhZ2VNYW5hZ2VyIH0gZnJvbSBcIi4vY29tbW9uL3N0b3JhZ2UvU3RvcmFnZU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgVGltZXJNYW5hZ2VyIH0gZnJvbSBcIi4vY29tbW9uL3RpbWVyL1RpbWVyTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBHYW1lTWFuYWdlciB9IGZyb20gXCIuL2dhbWUvR2FtZU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgTGF5ZXJNYW5hZ2VyIH0gZnJvbSBcIi4vZ3VpL2xheWVyL0xheWVyTWFuYWdlclwiO1xyXG5cclxuLyoqIOahhuaetueJiOacrOWPtyAqL1xyXG5leHBvcnQgdmFyIHZlcnNpb246IHN0cmluZyA9IFwiMi4wLjAuMjAyNTAxMjdcIjtcclxuXHJcbi8qKiDmoYbmnrbmoLjlv4PmqKHlnZforr/pl67lhaXlj6MgKi9cclxuZXhwb3J0IGNsYXNzIG9vcHMge1xyXG4gICAgLyoqIC0tLS0tLS0tLS3moLjlv4PmqKHlnZctLS0tLS0tLS0tICovXHJcblxyXG4gICAgLyoqIOaXpeW/l+euoeeQhiAqL1xyXG4gICAgc3RhdGljIGxvZyA9IExvZ2dlci5pbnN0YW5jZTtcclxuICAgIC8qKiDmuLjmiI/phY3nva4gKi9cclxuICAgIHN0YXRpYyBjb25maWcgPSBuZXcgQ29uZmlnKCk7XHJcbiAgICAvKiog5pys5Zyw5a2Y5YKoICovXHJcbiAgICBzdGF0aWMgc3RvcmFnZTogU3RvcmFnZU1hbmFnZXI7XHJcbiAgICAvKiog6LWE5rqQ566h55CGICovXHJcbiAgICBzdGF0aWMgcmVzOiBSZXNMb2FkZXI7XHJcbiAgICAvKiog5YWo5bGA5raI5oGvICovXHJcbiAgICBzdGF0aWMgbWVzc2FnZTogTWVzc2FnZU1hbmFnZXI7XHJcbiAgICAvKiog6ZqP5py65bel5YW3ICovXHJcbiAgICBzdGF0aWMgcmFuZG9tID0gUmFuZG9tTWFuYWdlci5pbnN0YW5jZTtcclxuICAgIC8qKiDmuLjmiI/ml7bpl7TnrqHnkIYgKi9cclxuICAgIHN0YXRpYyB0aW1lcjogVGltZXJNYW5hZ2VyO1xyXG4gICAgLyoqIOa4uOaIj+mfs+S5kOeuoeeQhiAqL1xyXG4gICAgc3RhdGljIGF1ZGlvOiBBdWRpb01hbmFnZXI7XHJcbiAgICAvKiog5LqM57u055WM6Z2i566h55CGICovXHJcbiAgICBzdGF0aWMgZ3VpOiBMYXllck1hbmFnZXI7XHJcbiAgICAvKiog5LiJ57u05ri45oiP5LiW55WM566h55CGICovXHJcbiAgICBzdGF0aWMgZ2FtZTogR2FtZU1hbmFnZXI7XHJcblxyXG4gICAgLyoqIC0tLS0tLS0tLS3lj6/pgInmqKHlnZctLS0tLS0tLS0tICovXHJcblxyXG4gICAgLyoqIOWkmuivreiogOaooeWdlyAqL1xyXG4gICAgc3RhdGljIGxhbmd1YWdlOiBMYW5ndWFnZU1hbmFnZXIgPSBuZXcgTGFuZ3VhZ2VNYW5hZ2VyKCk7XHJcbiAgICAvKiogSFRUUCAqL1xyXG4gICAgc3RhdGljIGh0dHA6IEh0dHBSZXF1ZXN0ID0gbmV3IEh0dHBSZXF1ZXN0KCk7ICAgICAgICAgICAvLyDkvb/nlKjmtYHnqIvmlofmoaPlj6/lj4LogIPjgIHnroDljJbkuI7mnI3liqHlmajlr7nmjqXjgIHkvb/nlKjmlrDniYhBUEnkvZPpqozvvIzlj6/ov5vlhaXkuIvpnaLlnLDlnYDojrflj5bmlrDniYjmnKzvvIzmm7/mjaJuZXR3b3Jr55uu5b2V5Lit55qE5YaF5a65KGh0dHBzOi8vc3RvcmUuY29jb3MuY29tL2FwcC9kZXRhaWwvNTg3NylcclxuICAgIC8qKiBXZWJTb2NrZXQgKi9cclxuICAgIHN0YXRpYyB0Y3A6IE5ldE1hbmFnZXIgPSBuZXcgTmV0TWFuYWdlcigpOyAgICAgICAgICAgICAgLy8g5L2/55So5rWB56iL5paH5qGj5Y+v5Y+C6ICD44CB566A5YyW5LiO5pyN5Yqh5Zmo5a+55o6l44CB5L2/55So5paw54mIQVBJ5L2T6aqM77yM5Y+v6L+b5YWl5LiL6Z2i5Zyw5Z2A6I635Y+W5paw54mI5pys77yM5pu/5o2ibmV0d29ya+ebruW9leS4reeahOWGheWuuShodHRwczovL3N0b3JlLmNvY29zLmNvbS9hcHAvZGV0YWlsLzU4NzcpXHJcbiAgICAvKiogRUNTICovXHJcbiAgICBzdGF0aWMgZWNzOiBFQ1NSb290U3lzdGVtID0gbmV3IGVjcy5Sb290U3lzdGVtKCk7XHJcbiAgICAvKiogTVZWTSAqL1xyXG4gICAgc3RhdGljIG12dm0gPSBWTTtcclxuICAgIC8qKiDlr7nosaHmsaAgKi9cclxuICAgIHN0YXRpYyBwb29sID0gRWZmZWN0U2luZ2xlQ2FzZS5pbnN0YW5jZTtcclxufVxyXG5cclxuLy8g5byV5YWlb29wc+WFqOWxgOWPmOmHj+S7peaWueS+v+iwg+ivlVxyXG5pZiAoREVCVUcpIHtcclxuICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgd2luZG93Lm9vcHMgPSBvb3BzO1xyXG59IiwiaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBFdmVudE1vdXNlLCBFdmVudFRvdWNoLCBpbnB1dCwgSW5wdXQsIGxlcnAsIE5vZGUsIFF1YXQsIFZlYzIsIFZlYzMgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IEVESVRPUiB9IGZyb20gJ2NjL2Vudic7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHksIG1lbnUgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5sZXQgdGVtcFZlYzMgPSBuZXcgVmVjMztcclxubGV0IHRlbXBWZWMzXzIgPSBuZXcgVmVjMztcclxubGV0IHRlbXBRdWF0ID0gbmV3IFF1YXQ7XHJcbmNvbnN0IERlbHRhRmFjdG9yID0gMSAvIDIwMDtcclxuXHJcbi8qKiBcclxuICog6L2o6YGT5pGE5b2x5py6XHJcbiAqIDHjgIHop6bmkbjoh6rnlLHml4vovaxcclxuICogMuOAgemVnOWktOi/nOi/kem8oOagh+a7mui9ruiwg+iKglxyXG4gKiAz44CB5Zu65a6a5Li656ys5LiJ5Lq656ew5pGE5YOP5py6XHJcbiAqL1xyXG5AY2NjbGFzcygnT3JiaXRDYW1lcmEnKVxyXG5AbWVudSgnT29wc0ZyYW1ld29yay9DYW1lcmEvT3JiaXRDYW1lcmEg77yI6L2o6YGT5pGE5b2x5py677yJJylcclxuZXhwb3J0IGNsYXNzIE9yYml0Q2FtZXJhIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLmmK/lkKblkK/liqjop6bmkbjmjqfliLZcIlxyXG4gICAgfSlcclxuICAgIGVuYWJsZVRvdWNoID0gdHJ1ZTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6IFwi5piv5ZCm5byA5ZCv5ZCv55So57yp5pS+5Y2K5b6E77yI6byg5qCH5rua6L2u5o6n5Yi25pGE5YOP5py65LiO55uu5qCH6Led56a777yJXCJcclxuICAgIH0pXHJcbiAgICBlbmFibGVTY2FsZVJhZGl1cyA9IGZhbHNlO1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiBcIuaRhOWDj+acuuS4juebruagh+eahOWNiuW+hOe8qeaUvumAn+W6plwiLFxyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVuYWJsZVNjYWxlUmFkaXVzID09PSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICByYWRpdXNTY2FsZVNwZWVkID0gMTtcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLmkYTlg4/mnLrkuI7nm67moIfnmoTljYrlvoTmnIDlsI/lgLxcIixcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVTY2FsZVJhZGl1cyA9PT0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgbWluUmFkaXVzID0gNTtcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLmkYTlg4/mnLrkuI7nm67moIfnmoTljYrlvoTmnIDlpKflgLxcIixcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVTY2FsZVJhZGl1cyA9PT0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgbWF4UmFkaXVzID0gMTA7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiBcIuiHquWKqOaXi+i9rOaYr+WQpuW8gOWQr1wiXHJcbiAgICB9KVxyXG4gICAgYXV0b1JvdGF0ZSA9IGZhbHNlO1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiBcIuiHquWKqOaXi+i9rOmAn+W6plwiLFxyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmF1dG9Sb3RhdGUgPT09IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIGF1dG9Sb3RhdGVTcGVlZCA9IDkwO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLml4vovazpgJ/luqZcIlxyXG4gICAgfSlcclxuXHJcbiAgICByb3RhdGVTcGVlZCA9IDE7XHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6IFwi6Lef6ZqP6YCf5bqmXCJcclxuICAgIH0pXHJcblxyXG4gICAgZm9sbG93U3BlZWQgPSAxO1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiBcIljovbTml4vovazojIPlm7TvvIjkurrniankuIrkuIvnnIvnmoTop5LluqbmjqfliLbvvIlcIlxyXG4gICAgfSlcclxuICAgIHhSb3RhdGlvblJhbmdlID0gbmV3IFZlYzIoNSwgNzApO1xyXG5cclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgcHJpdmF0ZSBfdGFyZ2V0UmFkaXVzID0gMTA7XHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6IFwi5pGE5YOP5py65LiO55uu5qCH55qE6Led56a777yI5Lul546p5a625Li65Lit5b+D546v57uV55CD5Y2K5b6E77yJXCJcclxuICAgIH0pXHJcbiAgICBnZXQgcmFkaXVzKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldFJhZGl1cztcclxuICAgIH1cclxuICAgIHNldCByYWRpdXModjogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fdGFyZ2V0UmFkaXVzID0gdjtcclxuICAgIH1cclxuXHJcbiAgICBAcHJvcGVydHlcclxuICAgIF90YXJnZXQ6IE5vZGUgPSBudWxsITtcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogTm9kZSxcclxuICAgICAgICB0b29sdGlwOiBcIui3n+maj+ebruagh1wiXHJcbiAgICB9KVxyXG4gICAgZ2V0IHRhcmdldCgpOiBOb2RlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgc2V0IHRhcmdldCh2OiBOb2RlKSB7XHJcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdjtcclxuICAgICAgICB0aGlzLl90YXJnZXRSb3RhdGlvbi5zZXQodGhpcy5fc3RhcnRSb3RhdGlvbik7XHJcbiAgICAgICAgdGhpcy5fdGFyZ2V0Q2VudGVyLnNldCh2LndvcmxkUG9zaXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgcHJpdmF0ZSBfc3RhcnRSb3RhdGlvbiA9IG5ldyBWZWMzO1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBWZWMzLFxyXG4gICAgICAgIHRvb2x0aXA6IFwi55uu5qCH5peL6L2s5YGP56e76YeP77yI5Yid5aeL5peL6L2s5ZCR6YeP77yJXCJcclxuICAgIH0pXHJcbiAgICBnZXQgdGFyZ2V0Um90YXRpb24oKTogVmVjMyB7XHJcbiAgICAgICAgaWYgKCFFRElUT1IpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhcnRSb3RhdGlvbi5zZXQodGhpcy5fdGFyZ2V0Um90YXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRSb3RhdGlvbjtcclxuICAgIH1cclxuICAgIHNldCB0YXJnZXRSb3RhdGlvbih2OiBWZWMzKSB7XHJcbiAgICAgICAgdGhpcy5fdGFyZ2V0Um90YXRpb24uc2V0KHYpO1xyXG4gICAgICAgIHRoaXMuX3N0YXJ0Um90YXRpb24uc2V0KHYpO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLmmK/lkKbot5/pmo/nm67moIcgWSDovbTml4vovaxcIlxyXG4gICAgfSlcclxuICAgIGZvbGxvd1RhcmdldFJvdGF0aW9uWSA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgX2NlbnRlciA9IG5ldyBWZWMzOyAgICAgICAgICAgICAgLy8g5pGE5YOP5py66KeG5Y+j5pa55ZCR6YePXHJcbiAgICBwcml2YXRlIF90YXJnZXRDZW50ZXIgPSBuZXcgVmVjMzsgICAgICAgIC8vIOaRhOWDj+acuuS4reW/g+eCueS9jee9ru+8iOebruagh+S9jee9ru+8iVxyXG4gICAgcHJpdmF0ZSBfdG91Y2hlZCA9IGZhbHNlOyAgICAgICAgICAgICAgICAvLyDmmK/lkKbop6bmkbjlsY/luZVcclxuICAgIHByaXZhdGUgX3RhcmdldFJvdGF0aW9uID0gbmV3IFZlYzM7ICAgICAgLy8g55uu5qCH5peL6L2s5ZCR6YePXHJcbiAgICBwcml2YXRlIF9yb3RhdGlvbiA9IG5ldyBRdWF0OyAgICAgICAgICAgIC8vIOaRhOWDj+acuuaXi+i9rOWbm+WFg+e0oFxyXG4gICAgcHJpdmF0ZSBfcmFkaXVzID0gMTA7ICAgICAgICAgICAgICAgICAgICAvLyDlvZPliY3njqnlrrbkuI7nm67moIfljYrlvoTot53nprtcclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICBpZiAodGhpcy5lbmFibGVUb3VjaCkge1xyXG4gICAgICAgICAgICBpbnB1dC5vbihJbnB1dC5FdmVudFR5cGUuVE9VQ0hfU1RBUlQsIHRoaXMub25Ub3VjaFN0YXJ0LCB0aGlzKTtcclxuICAgICAgICAgICAgaW5wdXQub24oSW5wdXQuRXZlbnRUeXBlLlRPVUNIX01PVkUsIHRoaXMub25Ub3VjaE1vdmUsIHRoaXMpO1xyXG4gICAgICAgICAgICBpbnB1dC5vbihJbnB1dC5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLm9uVG91Y2hFbmQsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlU2NhbGVSYWRpdXMpIHtcclxuICAgICAgICAgICAgaW5wdXQub24oSW5wdXQuRXZlbnRUeXBlLk1PVVNFX1dIRUVMLCB0aGlzLm9uTW91c2VXaGVlbCwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHRoaXMucmVzZXRUYXJnZXRSb3RhdGlvbigpO1xyXG5cclxuICAgICAgICAvLyDmoLnmja7mrKfmi4nop5Lkv6Hmga/orqHnrpfmkYTlg4/mnLrlm5vlhYPmlbDvvIzml4vovazpobrluo/kuLogWVpYXHJcbiAgICAgICAgUXVhdC5mcm9tRXVsZXIodGhpcy5fcm90YXRpb24sIHRoaXMuX3RhcmdldFJvdGF0aW9uLngsIHRoaXMuX3RhcmdldFJvdGF0aW9uLnksIHRoaXMuX3RhcmdldFJvdGF0aW9uLnopO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGFyZ2V0Q2VudGVyLnNldCh0aGlzLnRhcmdldC53b3JsZFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5fY2VudGVyLnNldCh0aGlzLl90YXJnZXRDZW50ZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcmFkaXVzID0gdGhpcy5yYWRpdXM7XHJcblxyXG4gICAgICAgIHRoaXMubGltaXRSb3RhdGlvbigpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOmHjee9ruaRhOWDj+acuuWIsOWIneWni+S9jee9riAqL1xyXG4gICAgcmVzZXRUYXJnZXRSb3RhdGlvbigpIHtcclxuICAgICAgICBsZXQgdGFyZ2V0Um90YXRpb246IFZlYzMgPSB0aGlzLl90YXJnZXRSb3RhdGlvbi5zZXQodGhpcy5fc3RhcnRSb3RhdGlvbik7XHJcbiAgICAgICAgaWYgKHRoaXMuZm9sbG93VGFyZ2V0Um90YXRpb25ZKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFJvdGF0aW9uID0gdGVtcFZlYzNfMi5zZXQodGFyZ2V0Um90YXRpb24pO1xyXG4gICAgICAgICAgICBRdWF0LnRvRXVsZXIodGVtcFZlYzMsIHRoaXMudGFyZ2V0LndvcmxkUm90YXRpb24pO1xyXG4gICAgICAgICAgICB0YXJnZXRSb3RhdGlvbi5hZGQodGVtcFZlYzMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6ZmQ5Yi2IFgg6L205peL6L2s77yI5LiK5LiL55yL77yJICovXHJcbiAgICBwcml2YXRlIGxpbWl0Um90YXRpb24oKSB7XHJcbiAgICAgICAgbGV0IHJvdGF0aW9uID0gdGhpcy5fdGFyZ2V0Um90YXRpb247XHJcblxyXG4gICAgICAgIGlmIChyb3RhdGlvbi54IDwgdGhpcy54Um90YXRpb25SYW5nZS54KSB7XHJcbiAgICAgICAgICAgIHJvdGF0aW9uLnggPSB0aGlzLnhSb3RhdGlvblJhbmdlLnhcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocm90YXRpb24ueCA+IHRoaXMueFJvdGF0aW9uUmFuZ2UueSkge1xyXG4gICAgICAgICAgICByb3RhdGlvbi54ID0gdGhpcy54Um90YXRpb25SYW5nZS55XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByb3RhdGlvbi56ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyNyZWdpb24gVG91Y2hcclxuICAgIHByaXZhdGUgb25Ub3VjaFN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMuX3RvdWNoZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Ub3VjaE1vdmUoZXZlbnQ6IEV2ZW50VG91Y2gpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3RvdWNoZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IGRlbHRhID0gZXZlbnQudG91Y2ghLmdldERlbHRhKClcclxuXHJcbiAgICAgICAgUXVhdC5mcm9tRXVsZXIodGVtcFF1YXQsIHRoaXMuX3RhcmdldFJvdGF0aW9uLngsIHRoaXMuX3RhcmdldFJvdGF0aW9uLnksIHRoaXMuX3RhcmdldFJvdGF0aW9uLnopO1xyXG4gICAgICAgIFF1YXQucm90YXRlWCh0ZW1wUXVhdCwgdGVtcFF1YXQsIC1kZWx0YS55ICogRGVsdGFGYWN0b3IpO1xyXG4gICAgICAgIFF1YXQucm90YXRlWSh0ZW1wUXVhdCwgdGVtcFF1YXQsIC1kZWx0YS54ICogRGVsdGFGYWN0b3IpO1xyXG4gICAgICAgIFF1YXQudG9FdWxlcih0aGlzLl90YXJnZXRSb3RhdGlvbiwgdGVtcFF1YXQpO1xyXG5cclxuICAgICAgICB0aGlzLmxpbWl0Um90YXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uVG91Y2hFbmQoKSB7XHJcbiAgICAgICAgdGhpcy5fdG91Y2hlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgcHJpdmF0ZSBvbk1vdXNlV2hlZWwoZXZlbnQ6IEV2ZW50TW91c2UpIHtcclxuICAgICAgICBsZXQgc2Nyb2xsWSA9IGV2ZW50LmdldFNjcm9sbFkoKTtcclxuICAgICAgICB0aGlzLl90YXJnZXRSYWRpdXMgKz0gdGhpcy5yYWRpdXNTY2FsZVNwZWVkICogLU1hdGguc2lnbihzY3JvbGxZKTsgICAgICAgICAgLy8g5rua6L2u5ZCR5YmN5Li66LSf77yM5rua6L2u5ZCR5ZCO5Li65q2jXHJcbiAgICAgICAgdGhpcy5fdGFyZ2V0UmFkaXVzID0gTWF0aC5taW4odGhpcy5tYXhSYWRpdXMsIE1hdGgubWF4KHRoaXMubWluUmFkaXVzLCB0aGlzLl90YXJnZXRSYWRpdXMpKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCB0YXJnZXRSb3RhdGlvbiA9IHRoaXMuX3RhcmdldFJvdGF0aW9uO1xyXG4gICAgICAgIC8vIOaYr+WQpuaRhOWDj+acuuWbtOe7lSBZIOi9tOiHquWKqOaXi+i9rFxyXG4gICAgICAgIGlmICh0aGlzLmF1dG9Sb3RhdGUgJiYgIXRoaXMuX3RvdWNoZWQpIHtcclxuICAgICAgICAgICAgdGFyZ2V0Um90YXRpb24ueSArPSB0aGlzLmF1dG9Sb3RhdGVTcGVlZCAqIGR0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIC8vIOmHjee9ruaRhOWDj+acuuS4reW/g+eCuVxyXG4gICAgICAgICAgICB0aGlzLl90YXJnZXRDZW50ZXIuc2V0KHRoaXMudGFyZ2V0LndvcmxkUG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgLy8g5piv5ZCm6Lef6ZqPIFkg6L2055uu5qCH5peL6L2sXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZvbGxvd1RhcmdldFJvdGF0aW9uWSkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0Um90YXRpb24gPSB0ZW1wVmVjM18yLnNldCh0YXJnZXRSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICBRdWF0LnRvRXVsZXIodGVtcFZlYzMsIHRoaXMudGFyZ2V0LndvcmxkUm90YXRpb24pO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0Um90YXRpb24ueSArPSB0ZW1wVmVjMy55OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6L+Q6KGM5pe277yM5Y+q5Y+Y5YyWIFkg5peL6L2sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFF1YXQuZnJvbUV1bGVyKHRlbXBRdWF0LCB0YXJnZXRSb3RhdGlvbi54LCB0YXJnZXRSb3RhdGlvbi55LCB0YXJnZXRSb3RhdGlvbi56KTsgICAgICAgICAgICAgLy8g6I635Y+W55uu5qCH5a+56LGh55qE5peL6L2s5Zub5YWD57Sg77yI5Lq654mp6Z2i5ZCR5LiO5pGE5YOP5py65LiA6Iez77yJXHJcblxyXG4gICAgICAgIFF1YXQuc2xlcnAodGhpcy5fcm90YXRpb24sIHRoaXMuX3JvdGF0aW9uLCB0ZW1wUXVhdCwgZHQgKiA3ICogdGhpcy5yb3RhdGVTcGVlZCk7ICAgICAgICAgICAgLy8g5peL6L2s57q/5oCn5o+S5YC877yI5bmz5ruR5pGE5YOP5py66KeG5Y+j5peL6L2s77yJXHJcbiAgICAgICAgVmVjMy5sZXJwKHRoaXMuX2NlbnRlciwgdGhpcy5fY2VudGVyLCB0aGlzLl90YXJnZXRDZW50ZXIsIGR0ICogNSAqIHRoaXMuZm9sbG93U3BlZWQpOyAgICAgICAvLyDmkYTlg4/mnLrot5/pmo/kvY3np7vnur/mgKfmj5LlgLzvvIjlubPmu5HmkYTlg4/mnLroioLngrnkvY3nva7np7vliqjvvIlcclxuXHJcbiAgICAgICAgdGhpcy5fcmFkaXVzID0gbGVycCh0aGlzLl9yYWRpdXMsIHRoaXMuX3RhcmdldFJhZGl1cywgZHQgKiA1KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmkYTlg4/mnLrkuI7nm67moIfot53nprvljYrlvoTnur/mgKfmj5LlgLzvvIjplZzlpLTlubPmu5HliY3lkI7np7vliqgpXHJcblxyXG4gICAgICAgIFZlYzMudHJhbnNmb3JtUXVhdCh0ZW1wVmVjMywgVmVjMy5GT1JXQVJELCB0aGlzLl9yb3RhdGlvbik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6K6h566X5pGE5YOP5py65peL6L2s5ZCO55qE5pa55ZCR6YePXHJcbiAgICAgICAgVmVjMy5tdWx0aXBseVNjYWxhcih0ZW1wVmVjMywgdGVtcFZlYzMsIHRoaXMuX3JhZGl1cyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDorqHnrpfmkYTlg4/mnLrkuI7nm67moIfljYrlvoTlkJHph49cclxuICAgICAgICB0ZW1wVmVjMy5hZGQodGhpcy5fY2VudGVyKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiuoeeul+aRhOWDj+acuuS4juebruagh+WBj+enu+WQjueahOS9jee9rlxyXG5cclxuICAgICAgICB0aGlzLm5vZGUucG9zaXRpb24gPSB0ZW1wVmVjMzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiuvue9ruaRhOWDj+acuuS9jee9rlxyXG4gICAgICAgIHRoaXMubm9kZS5sb29rQXQodGhpcy5fY2VudGVyKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6K6+572u5pGE5YOP5py66KeG5Y+j5pa55ZCRXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaRhOWDj+acuueri+WNs+i3n+maj+WIsOWItuWumuebruagh+eahOS9jee9riAqL1xyXG4gICAgZm9sbG93KCkge1xyXG4gICAgICAgIGxldCB0YXJnZXRSb3RhdGlvbiA9IHRoaXMuX3RhcmdldFJvdGF0aW9uO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50YXJnZXQpIHtcclxuICAgICAgICAgICAgLy8g6YeN572u5pGE5YOP5py65Lit5b+D54K5XHJcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldENlbnRlci5zZXQodGhpcy50YXJnZXQud29ybGRQb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgICAvLyDmmK/lkKbot5/pmo8gWSDovbTnm67moIfml4vovaxcclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9sbG93VGFyZ2V0Um90YXRpb25ZKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRSb3RhdGlvbiA9IHRlbXBWZWMzXzIuc2V0KHRhcmdldFJvdGF0aW9uKTtcclxuICAgICAgICAgICAgICAgIFF1YXQudG9FdWxlcih0ZW1wVmVjMywgdGhpcy50YXJnZXQud29ybGRSb3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRSb3RhdGlvbi55ICs9IHRlbXBWZWMzLnk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDov5DooYzml7bvvIzlj6rlj5jljJYgWSDml4vovaxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUXVhdC5mcm9tRXVsZXIodGVtcFF1YXQsIHRhcmdldFJvdGF0aW9uLngsIHRhcmdldFJvdGF0aW9uLnksIHRhcmdldFJvdGF0aW9uLnopOyAgICAgICAgICAgICAvLyDojrflj5bnm67moIflr7nosaHnmoTml4vovazlm5vlhYPntKDvvIjkurrnianpnaLlkJHkuI7mkYTlg4/mnLrkuIDoh7PvvIlcclxuXHJcbiAgICAgICAgdGhpcy5fcm90YXRpb24gPSB0ZW1wUXVhdDtcclxuICAgICAgICB0aGlzLl9jZW50ZXIgPSB0aGlzLl90YXJnZXRDZW50ZXI7XHJcbiAgICAgICAgdGhpcy5fcmFkaXVzID0gdGhpcy5fdGFyZ2V0UmFkaXVzO1xyXG5cclxuICAgICAgICBWZWMzLnRyYW5zZm9ybVF1YXQodGVtcFZlYzMsIFZlYzMuRk9SV0FSRCwgdGhpcy5fcm90YXRpb24pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiuoeeul+aRhOWDj+acuuaXi+i9rOWQjueahOaWueWQkemHj1xyXG4gICAgICAgIFZlYzMubXVsdGlwbHlTY2FsYXIodGVtcFZlYzMsIHRlbXBWZWMzLCB0aGlzLl9yYWRpdXMpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6K6h566X5pGE5YOP5py65LiO55uu5qCH5Y2K5b6E5ZCR6YePXHJcbiAgICAgICAgdGVtcFZlYzMuYWRkKHRoaXMuX2NlbnRlcik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDorqHnrpfmkYTlg4/mnLrkuI7nm67moIflgY/np7vlkI7nmoTkvY3nva5cclxuXHJcbiAgICAgICAgdGhpcy5ub2RlLnBvc2l0aW9uID0gdGVtcFZlYzM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDorr7nva7mkYTlg4/mnLrkvY3nva5cclxuICAgICAgICB0aGlzLm5vZGUubG9va0F0KHRoaXMuX2NlbnRlcik7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiuvue9ruaRhOWDj+acuuinhuWPo+aWueWQkVxyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wNy0yMSAxNzozMDo1OVxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wMiAxNDo0MDoyOFxyXG4gKi9cclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gXCJjY1wiO1xyXG5cclxuLyoqIOeJqeeQhuWIhue7hOaVsOaNriAqL1xyXG5leHBvcnQgY2xhc3MgR3JvdXBJdGVtIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3ZhbHVlOiBudW1iZXI7XHJcbiAgICAvKiog5YiG57uE5YC8ICovXHJcbiAgICBnZXQgdmFsdWUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbmFtZSE6IHN0cmluZztcclxuICAgIC8qKiDliIbnu4TlkI0gKi9cclxuICAgIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOeisOaSnuaOqeeggSAqL1xyXG4gICAgZ2V0IG1hc2soKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMSA8PCB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaehOmAoOWHveaVsFxyXG4gICAgICogQHBhcmFtIHZhbHVlIOWIhue7hOWAvFxyXG4gICAgICogQHBhcmFtIG5hbWUgIOWIhue7hOWQjVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogbnVtYmVyLCBuYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKioqXHJcbiAqIOS4uuS6huaWueS+v+S9v+eUqO+8jOWwhue8lui+keWZqOS4reeahOeJqeeQhuWIhue7hOWumuS5ieWIsOS7o+eggeOAguWmguaenOe8lui+keWZqOS4reacieS/ruaUue+8jOehruS/neWQjOatpeWIsOi/memHjOOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFBoeXNpY3NVdGlsIHtcclxuICAgIC8qKiDpu5jorqTniannkIbliIbnu4QgKi9cclxuICAgIHN0YXRpYyBERUZBVUxUID0gbmV3IEdyb3VwSXRlbSgwLCAnREVGQVVMVCcpO1xyXG4gICAgLyoqIOiDvemAmui/h+Wxj+W5leinpuaRuOS4reWPkeWHuueahOWwhOe6v+ajgOafpeWIsOeahOa4uOaIj+WvueixoSAqL1xyXG4gICAgc3RhdGljIEdBTUVfT0JKRUNUX1NFTEVDVCA9IG5ldyBHcm91cEl0ZW0oMSwgJ0dBTUVfT0JKRUNUX1NFTEVDVCcpO1xyXG4gICAgLyoqIOeOqeWutuiHquW3sSAqL1xyXG4gICAgc3RhdGljIEdBTUVfT1dORVIgPSBuZXcgR3JvdXBJdGVtKDIsICdHQU1FX09XTkVSJyk7XHJcblxyXG4gICAgc3RhdGljIHNldE5vZGVMYXllcihpdGVtOiBHcm91cEl0ZW0sIG5vZGU6IE5vZGUpIHtcclxuICAgICAgICBub2RlLmxheWVyID0gaXRlbS5tYXNrO1xyXG4gICAgICAgIG5vZGUuY2hpbGRyZW4uZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgbi5sYXllciA9IGl0ZW0ubWFzaztcclxuICAgICAgICAgICAgUGh5c2ljc1V0aWwuc2V0Tm9kZUxheWVyKGl0ZW0sIG4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQERhdGU6IDIwMjEtMDgtMTQgMTY6MTc6MDNcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDktMDIgMTQ6Mzk6MDNcclxuICovXHJcbmltcG9ydCB7IF9fcHJpdmF0ZSwgbmF0aXZlLCBzeXMgfSBmcm9tIFwiY2NcIjtcclxuXHJcbi8qKiDlubPlj7DmlbDmja4gKi9cclxuZXhwb3J0IGNsYXNzIFBsYXRmb3JtVXRpbCB7XHJcbiAgICAvKiog6I635Y+W5b2T5YmN6K6+5aSH55qE572R57uc57G75Z6LLCDlpoLmnpznvZHnu5znsbvlnovml6Dms5Xojrflj5bvvIzpu5jorqTlsIbov5Tlm54gYHN5cy5OZXR3b3JrVHlwZS5MQU5gICovXHJcbiAgICBnZXROZXR3b3JrVHlwZSgpOiBfX3ByaXZhdGUuX3BhbF9zeXN0ZW1faW5mb19lbnVtX3R5cGVfbmV0d29ya190eXBlX19OZXR3b3JrVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHN5cy5nZXROZXR3b3JrVHlwZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5b2T5YmN6K6+5aSH55qE55S15rGg55S16YeP77yM5aaC5p6c55S16YeP5peg5rOV6I635Y+W77yM6buY6K6k5bCG6L+U5ZueIDFcclxuICAgICAqIEByZXR1cm4gLSAwLjAgfiAxLjBcclxuICAgICAqL1xyXG4gICAgZ2V0QmF0dGVyeUxldmVsKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHN5cy5nZXRCYXR0ZXJ5TGV2ZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5bCd6K+V5omT5byA5LiA5LiqIHdlYiDpobXpnaLvvIzlubbpnZ7lnKjmiYDmnInlubPlj7Dpg73mnInmlYggKi9cclxuICAgIG9wZW5VUkwodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICBzeXMub3BlblVSTCh1cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmi7fotJ3lrZfnrKbkuLLliLDliarliIfmnb8gKi9cclxuICAgIGNvcHlUZXh0KHRleHQ6IHN0cmluZykge1xyXG4gICAgICAgIG5hdGl2ZS5jb3B5VGV4dFRvQ2xpcGJvYXJkKHRleHQpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IHNwIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBWZWMyIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyB0d2VlbiB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgX2RlY29yYXRvciwgQ29tcG9uZW50LCBOb2RlIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBvb3BzIH0gZnJvbSAnZGI6Ly9vb3BzLWZyYW1ld29yay9jb3JlL09vcHMnO1xyXG5pbXBvcnQgeyBlY3MgfSBmcm9tICdkYjovL29vcHMtZnJhbWV3b3JrL2xpYnMvZWNzL0VDUyc7XHJcbmltcG9ydCB7IE1vZHVsZVV0aWwgfSBmcm9tICdkYjovL29vcHMtZnJhbWV3b3JrL21vZHVsZS9jb21tb24vTW9kdWxlVXRpbCc7XHJcbmltcG9ydCB7IHNtYyB9IGZyb20gJy4uL2dhbWUvY29tbW9uL1NpbmdsZXRvbk1vZHVsZUNvbXAnO1xyXG5pbXBvcnQgeyBzZWxlY3RGdW4gfSBmcm9tICcuL3NlbGVjdEZ1bic7XHJcbmltcG9ydCB7IFVJSUQgfSBmcm9tICcuLi9nYW1lL2NvbW1vbi9jb25maWcvR2FtZVVJQ29uZmlnJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzKCdwbGF5ZXJBbmknKVxyXG5AZWNzLnJlZ2lzdGVyKCdwbGF5ZXJBbmlWaWV3JywgZmFsc2UpXHJcbmV4cG9ydCBjbGFzcyBwbGF5ZXJBbmkgZXh0ZW5kcyBDb21wb25lbnQge1xyXG5cclxuICAgIEBwcm9wZXJ0eShzcC5Ta2VsZXRvbilcclxuICAgIHBsYXllckFuaTpzcC5Ta2VsZXRvbiB8IG51bGw9bnVsbDtcclxuXHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBvbkxvYWQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYodGhpcy5wbGF5ZXJBbmkgJiYgdGhpcy5wbGF5ZXJBbmkuc2tlbGV0b25EYXRhKXtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJBbmkubm9kZS5zY2FsZSA9IG5ldyBWZWMzKC0wLjMsIDAuMywgMCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsYXllckFuaS5zZXRBbmltYXRpb24oMCwgJ2Zyb250X3dhbGsnLCBmYWxzZSk7IC8vIOaSreaUvuWKqOeUu1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlBbmlQbGF5ZXIoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwbGF5QW5pUGxheWVyKCl7XHJcbiAgICAgICAgaWYodGhpcy5wbGF5ZXJBbmkpe1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllckFuaS5zZXRDb21wbGV0ZUxpc3RlbmVyKChUcmFja0VudHJ5KT0+e1xyXG4gICAgICAgICAgICAgICAgaWYoVHJhY2tFbnRyeSAmJiBUcmFja0VudHJ5LmFuaW1hdGlvbi5uYW1lPT0nZnJvbnRfd2Fsaycpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMucGxheWVyQW5pKXRoaXMucGxheWVyQW5pLnNldEFuaW1hdGlvbigwLCAnZnJvbnRfaWRsZScsIHRydWUpOyAvLyDmkq3mlL7liqjnlLtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllckVtbygpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpPT57XHJcbiAgICAgICAgICAgICAgICBjb25zdCBQbGF5ZXJUYXJnZXRQb3M9bmV3IFZlYzModGhpcy5ub2RlLngtMzgsdGhpcy5ub2RlLnktMzgpXHJcbiAgICAgICAgICAgICAgICB0d2Vlbih0aGlzLm5vZGUpXHJcbiAgICAgICAgICAgICAgICAudG8oMC43NSx7cG9zaXRpb246UGxheWVyVGFyZ2V0UG9zfSlcclxuICAgICAgICAgICAgICAgIC5zdGFydCgpXHJcbiAgICAgICAgICAgIH0sMC4xKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKirlvLnlh7rooajmg4UgKi9cclxuICAgIHBsYXllckVtbygpe1xyXG4gICAgICAgIGNvbnN0IE5kZW1vPXRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZSgnZW1vJykgYXMgTm9kZVxyXG4gICAgICAgIGlmKE5kZW1vKXtcclxuICAgICAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCk9PntcclxuICAgICAgICAgICAgTmRlbW8uYWN0aXZlPXRydWVcclxuICAgICAgICAgICAgdHdlZW4oTmRlbW8pXHJcbiAgICAgICAgICAgIC50bygwLjUse3NjYWxlOm5ldyBWZWMzKDEuMSwxLjEpfSlcclxuICAgICAgICAgICAgLmNhbGwoKCk9Pnt0aGlzLm9uQ29tcGxldGVDYWxsYmFjaygpfSlcclxuICAgICAgICAgICAgLnN0YXJ0KClcclxuICAgICAgICB9LDAuMilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAgLyoqIOWKoOi9vemAiemhueeVjOmdoiAqL1xyXG4gICAgYXN5bmMgb25Db21wbGV0ZUNhbGxiYWNrKCkge1xyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKGFzeW5jICgpPT57XHJcbiAgICAgICAgICAgIGF3YWl0IE1vZHVsZVV0aWwuYWRkVmlld1VpQXN5bmMoc21jLmFjY291bnQsIHNlbGVjdEZ1biwgVUlJRC5zZWxlY3RGdW4pO1xyXG4gICAgICAgIH0sMC4yKVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShkZWx0YVRpbWU6IG51bWJlcikge1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wNi0yMSAxMjowNToxNFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wNy0yMCAxNDowODoxMFxyXG4gKi9cclxuaW1wb3J0IHsgQnJhbmNoTm9kZSB9IGZyb20gJy4vQnJhbmNoTm9kZSc7XHJcblxyXG4vKiog5LyY5YWIICovXHJcbmV4cG9ydCBjbGFzcyBQcmlvcml0eSBleHRlbmRzIEJyYW5jaE5vZGUge1xyXG4gICAgc3VjY2VzcygpIHtcclxuICAgICAgICBzdXBlci5zdWNjZXNzKCk7XHJcbiAgICAgICAgdGhpcy5fY29udHJvbC5zdWNjZXNzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZmFpbCgpIHtcclxuICAgICAgICBzdXBlci5mYWlsKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdHVhbFRhc2sgKz0gMTtcclxuICAgICAgICBpZiAodGhpcy5fYWN0dWFsVGFzayA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3J1bih0aGlzLl9ibGFja2JvYXJkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2wuZmFpbCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKiog5byV5pOOIHV0aWxzLnRzIOS4reacieS4gOS6m+WfuuehgOaVsOWtpuaWueazlSAqL1xyXG5cclxuLyoqIFxyXG4gKiDpmo/mnLrnrqHnkIYgXHJcbiAqIEBoZWxwICAgIGh0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzkxMSZkb2NfaWQ9Mjg3MzU2NVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJhbmRvbU1hbmFnZXIge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBSYW5kb21NYW5hZ2VyO1xyXG4gICAgcHJpdmF0ZSByYW5kb206IGFueSA9IG51bGwhO1xyXG5cclxuICAgIC8qKiDpmo/mnLrmlbDnrqHnkIbljZXkvovlr7nosaEgKi9cclxuICAgIHN0YXRpYyBnZXQgaW5zdGFuY2UoKTogUmFuZG9tTWFuYWdlciB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgUmFuZG9tTWFuYWdlcigpO1xyXG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZS5zZXRSYW5kb20oTWF0aC5yYW5kb20pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiuvue9ruesrOS4ieaWuemaj+acuuW6kyAqL1xyXG4gICAgc2V0UmFuZG9tKHJhbmRvbTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5yYW5kb20gPSByYW5kb207XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRSYW5kb20oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yYW5kb20oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUn+aIkOaMh+WumuiMg+WbtOeahOmaj+acuua1rueCueaVsFxyXG4gICAgICogQHBhcmFtIG1pbiAgIOacgOWwj+WAvFxyXG4gICAgICogQHBhcmFtIG1heCAgIOacgOWkp+WAvFxyXG4gICAgICovXHJcbiAgICBnZXRSYW5kb21GbG9hdChtaW46IG51bWJlciA9IDAsIG1heDogbnVtYmVyID0gMSk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeUn+aIkOaMh+WumuiMg+WbtOeahOmaj+acuuaVtOaVsFxyXG4gICAgICogQHBhcmFtIG1pbiAgIOacgOWwj+WAvFxyXG4gICAgICogQHBhcmFtIG1heCAgIOacgOWkp+WAvFxyXG4gICAgICogQHBhcmFtIHR5cGUgIOexu+Wei1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgIHZhciBtaW4gPSAxO1xyXG4gICAgdmFyIG1heCA9IDEwO1xyXG4gICAgLy8gW21pbixtYXgpIOW+l+WIsOS4gOS4quS4pOaVsOS5i+mXtOeahOmaj+acuuaVtOaVsCzov5nkuKrlgLzkuI3lsI/kuo5taW7vvIjlpoLmnpxtaW7kuI3mmK/mlbTmlbDnmoTor53vvIzlvpfliLDkuIDkuKrlkJHkuIrlj5bmlbTnmoQgbWlu77yJ77yM5bm25LiU5bCP5LqO77yI5L2G5LiN562J5LqO77yJbWF4ICBcclxuICAgIFJhbmRvbU1hbmFnZXIuaW5zdGFuY2UuZ2V0UmFuZG9tSW50KG1pbiwgbWF4LCAxKTtcclxuXHJcbiAgICAvLyBbbWluLG1heF0g5b6X5Yiw5LiA5Liq5Lik5pWw5LmL6Ze055qE6ZqP5py65pW05pWw77yM5YyF5ous5Lik5Liq5pWw5Zyo5YaFLOi/meS4quWAvOavlG1pbuWkp++8iOWmguaenG1pbuS4jeaYr+aVtOaVsO+8jOmCo+WwseS4jeWwj+S6juavlG1pbuWkp+eahOaVtOaVsO+8ie+8jOS9huWwj+S6ju+8iOS9huS4jeetieS6ju+8iW1heFxyXG4gICAgUmFuZG9tTWFuYWdlci5pbnN0YW5jZS5nZXRSYW5kb21JbnQobWluLCBtYXgsIDIpO1xyXG5cclxuICAgIC8vIChtaW4sbWF4KSDlvpfliLDkuIDkuKrkuKTmlbDkuYvpl7TnmoTpmo/mnLrmlbTmlbBcclxuICAgIFJhbmRvbU1hbmFnZXIuaW5zdGFuY2UuZ2V0UmFuZG9tSW50KG1pbiwgbWF4LCAzKTtcclxuICAgICAqL1xyXG4gICAgZ2V0UmFuZG9tSW50KG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgdHlwZTogbnVtYmVyID0gMik6IG51bWJlciB7XHJcbiAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7XHJcbiAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIDE6IC8vIFttaW4sbWF4KSDlvpfliLDkuIDkuKrkuKTmlbDkuYvpl7TnmoTpmo/mnLrmlbTmlbAs6L+Z5Liq5YC85LiN5bCP5LqObWlu77yI5aaC5p6cbWlu5LiN5piv5pW05pWw55qE6K+d77yM5b6X5Yiw5LiA5Liq5ZCR5LiK5Y+W5pW055qEIG1pbu+8ie+8jOW5tuS4lOWwj+S6ju+8iOS9huS4jeetieS6ju+8iW1heCAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmdldFJhbmRvbSgpICogKG1heCAtIG1pbikpICsgbWluO1xyXG4gICAgICAgICAgICBjYXNlIDI6IC8vIFttaW4sbWF4XSDlvpfliLDkuIDkuKrkuKTmlbDkuYvpl7TnmoTpmo/mnLrmlbTmlbDvvIzljIXmi6zkuKTkuKrmlbDlnKjlhoUs6L+Z5Liq5YC85q+UbWlu5aSn77yI5aaC5p6cbWlu5LiN5piv5pW05pWw77yM6YKj5bCx5LiN5bCP5LqO5q+UbWlu5aSn55qE5pW05pWw77yJ77yM5L2G5bCP5LqO77yI5L2G5LiN562J5LqO77yJbWF4XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmdldFJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcclxuICAgICAgICAgICAgY2FzZSAzOiAvLyAobWluLG1heCkg5b6X5Yiw5LiA5Liq5Lik5pWw5LmL6Ze055qE6ZqP5py65pW05pWwXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmdldFJhbmRvbSgpICogKG1heCAtIG1pbiAtIDEpKSArIG1pbiArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u5pyA5aSn5YC877yM5pyA5bCP5YC86IyD5Zu055Sf5oiQ6ZqP5py65pWw5pWw57uEXHJcbiAgICAgKiBAcGFyYW0gbWluICAg5pyA5bCP5YC8XHJcbiAgICAgKiBAcGFyYW0gbWF4ICAg5pyA5aSn5YC8XHJcbiAgICAgKiBAcGFyYW0gbiAgICAg6ZqP5py65Liq5pWwXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgdmFyIGEgPSBSYW5kb21NYW5hZ2VyLmluc3RhbmNlLmdldFJhbmRvbUJ5TWluTWF4TGlzdCg1MCwgMTAwLCA1KVxyXG4gICAgY29uc29sZS5sb2coXCLpmo/mnLrnmoTmlbDlrZdcIiwgYSk7XHJcbiAgICAgKi9cclxuICAgIGdldFJhbmRvbUJ5TWluTWF4TGlzdChtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIG46IG51bWJlcik6IEFycmF5PG51bWJlcj4ge1xyXG4gICAgICAgIHZhciByZXN1bHQ6IEFycmF5PG51bWJlcj4gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmdldFJhbmRvbUludChtaW4sIG1heCkpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmlbDnu4TkuK3pmo/mnLrlr7nosaFcclxuICAgICAqIEBwYXJhbSBvYmplY3RzIOWvueixoeaVsOe7hFxyXG4gICAgICogQHBhcmFtIG4g6ZqP5py65Liq5pWwXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgdmFyIGIgPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdO1xyXG4gICAgdmFyIHIgPSBSYW5kb21NYW5hZ2VyLmluc3RhbmNlLmdldFJhbmRvbUJ5T2JqZWN0TGlzdChiLCA1KTtcclxuICAgIGNvbnNvbGUubG9nKFwi5Y6f5aeL55qE5a+56LGhXCIsIGIpO1xyXG4gICAgY29uc29sZS5sb2coXCLpmo/mnLrnmoTlr7nosaFcIiwgcik7XHJcbiAgICAgKi9cclxuICAgIGdldFJhbmRvbUJ5T2JqZWN0TGlzdDxUPihvYmplY3RzOiBBcnJheTxUPiwgbjogbnVtYmVyKTogQXJyYXk8VD4ge1xyXG4gICAgICAgIHZhciB0ZW1wOiBBcnJheTxUPiA9IG9iamVjdHMuc2xpY2UoKTtcclxuICAgICAgICB2YXIgcmVzdWx0OiBBcnJheTxUPiA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIHRlbXAubGVuZ3RoLCAxKTtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2godGVtcC5zcGxpY2UoaW5kZXgsIDEpWzBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWumuWSjOmaj+acuuWIhumFjVxyXG4gICAgICogQHBhcmFtIG4gICAgIOmaj+acuuaVsOmHj1xyXG4gICAgICogQHBhcmFtIHN1bSAgIOmaj+acuuWFg+e0oOWQiFxyXG4gICAgICogQGV4YW1wbGVcclxuICAgIHZhciBjID0gUmFuZG9tTWFuYWdlci5pbnN0YW5jZS5nZXRSYW5kb21CeVN1bUxpc3QoNSwgLTEwMCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIuWumuWSjOmaj+acuuWIhumFjVwiLCBjKTtcclxuICAgICAqL1xyXG4gICAgZ2V0UmFuZG9tQnlTdW1MaXN0KG46IG51bWJlciwgc3VtOiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgbGV0IHJlc2lkdWUgPSBzdW07XHJcbiAgICAgICAgbGV0IHZhbHVlID0gMDtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IEFycmF5PG51bWJlcj4gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIHJlc2lkdWUsIDMpO1xyXG4gICAgICAgICAgICBpZiAoaSA9PSBuIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSByZXNpZHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzaWR1ZSAtPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn0iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA3LTI2IDE1OjI5OjU3XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA5LTAyIDEyOjA4OjI1XHJcbiAqL1xyXG5cclxuLyoqIOato+WImeW3peWFtyAqL1xyXG5leHBvcnQgY2xhc3MgUmVnZXhVdGlsIHtcclxuICAgIC8qKlxyXG4gICAgICog5Yik5pat5a2X56ym5piv5ZCm5Li65Y+M5a2X6IqC5a2X56ym77yI5aaC5Lit5paH5a2X56ym77yJXHJcbiAgICAgKiBAcGFyYW0gc3RyaW5nIOWOn+Wtl+espuS4slxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgaXNEb3VibGVXb3JkKHN0cmluZzogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIC9bXlxceDAwLVxceGZmXS8udGVzdChzdHJpbmcpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEFzc2V0LCBBc3NldE1hbmFnZXIsIF9fcHJpdmF0ZSwgYXNzZXRNYW5hZ2VyLCBlcnJvciwganMsIHJlc291cmNlcywgd2FybiB9IGZyb20gXCJjY1wiO1xyXG5cclxuZXhwb3J0IHR5cGUgQXNzZXRUeXBlPFQgPSBBc3NldD4gPSBfX3ByaXZhdGUuX190eXBlc19nbG9iYWxzX19Db25zdHJ1Y3RvcjxUPiB8IG51bGw7XHJcbmV4cG9ydCB0eXBlIFBhdGhzID0gc3RyaW5nIHwgc3RyaW5nW107XHJcbmV4cG9ydCB0eXBlIFByb2dyZXNzQ2FsbGJhY2sgPSAoKGZpbmlzaGVkOiBudW1iZXIsIHRvdGFsOiBudW1iZXIsIGl0ZW06IEFzc2V0TWFuYWdlci5SZXF1ZXN0SXRlbSkgPT4gdm9pZCkgfCBudWxsO1xyXG5leHBvcnQgdHlwZSBDb21wbGV0ZUNhbGxiYWNrID0gYW55O1xyXG5leHBvcnQgdHlwZSBJUmVtb3RlT3B0aW9ucyA9IHsgW2s6IHN0cmluZ106IGFueTsgZXh0Pzogc3RyaW5nOyB9IHwgbnVsbDtcclxuXHJcbmludGVyZmFjZSBJTG9hZFJlc0FyZ3M8VCBleHRlbmRzIEFzc2V0PiB7XHJcbiAgICAvKiog6LWE5rqQ5YyF5ZCNICovXHJcbiAgICBidW5kbGU/OiBzdHJpbmc7XHJcbiAgICAvKiog6LWE5rqQ5paH5Lu25aS55ZCNICovXHJcbiAgICBkaXI/OiBzdHJpbmc7XHJcbiAgICAvKiog6LWE5rqQ6Lev5b6EICovXHJcbiAgICBwYXRoczogUGF0aHM7XHJcbiAgICAvKiog6LWE5rqQ57G75Z6LICovXHJcbiAgICB0eXBlOiBBc3NldFR5cGU8VD47XHJcbiAgICAvKiog6LWE5rqQ5Yqg6L296L+b5bqmICovXHJcbiAgICBvblByb2dyZXNzOiBQcm9ncmVzc0NhbGxiYWNrO1xyXG4gICAgLyoqIOi1hOa6kOWKoOi9veWujOaIkCAqL1xyXG4gICAgb25Db21wbGV0ZTogQ29tcGxldGVDYWxsYmFjaztcclxuICAgIC8qKiDmmK/lkKbkuLrpooTliqDovb0gKi9cclxuICAgIHByZWxvYWQ/OiBib29sZWFuO1xyXG59XHJcblxyXG4vKiogXHJcbiAqIOa4uOaIj+i1hOa6kOeuoeeQhlxyXG4gKiAx44CB5Yqg6L296buY6K6kcmVzb3VyY2Vz5paH5Lu25aS55Lit6LWE5rqQXHJcbiAqIDLjgIHliqDovb3pu5jorqRidW5kbGXov5znqIvotYTmupBcclxuICogM+OAgeS4u+WKqOS8oOmAkmJ1bmRsZeWQjeaXtu+8jOS8mOWFiOWKoOi9veS8oOmAkmJ1bmRsZeWQjei1hOa6kOWMheS4reeahOi1hOa6kFxyXG4gKiBcclxuICogQGhlbHAgICAgaHR0cHM6Ly9naXRlZS5jb20vZGdmbGFzaC9vb3BzLWZyYW1ld29yay93aWtpcy9wYWdlcz9zb3J0X2lkPTEyMDM3OTAxJmRvY19pZD0yODczNTY1XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUmVzTG9hZGVyIHtcclxuICAgIC8vI3JlZ2lvbiDotYTmupDphY3nva7mlbDmja5cclxuICAgIC8qKiDlhajlsYDpu5jorqTliqDovb3nmoTotYTmupDljIXlkI0gKi9cclxuICAgIGRlZmF1bHRCdW5kbGVOYW1lOiBzdHJpbmcgPSBcInJlc291cmNlc1wiO1xyXG4gICAgLyoqIOaYr+WQpuS9v+eUqOi/nOeoiyBDRE4g6LWE5rqQICovXHJcbiAgICBjZG46IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKiog5LiL6L295pe255qE5pyA5aSn5bm25Y+R5pWwIC0g6aG555uu6K6+572uIC0+IOmhueebruaVsOaNriAtPiDotYTmupDkuIvovb3lubblj5HmlbDvvIzorr7nva7pu5jorqTlgLzvvJvliJ3lp4vlgLzkuLoxNSAqL1xyXG4gICAgZ2V0IG1heENvbmN1cnJlbmN5KCkge1xyXG4gICAgICAgIHJldHVybiBhc3NldE1hbmFnZXIuZG93bmxvYWRlci5tYXhDb25jdXJyZW5jeTtcclxuICAgIH1cclxuICAgIHNldCBtYXhDb25jdXJyZW5jeSh2YWx1ZSkge1xyXG4gICAgICAgIGFzc2V0TWFuYWdlci5kb3dubG9hZGVyLm1heENvbmN1cnJlbmN5ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOS4i+i9veaXtuavj+W4p+WPr+S7peWQr+WKqOeahOacgOWkp+ivt+axguaVsCAtIOm7mOiupOWAvOS4ujE1ICovXHJcbiAgICBnZXQgbWF4UmVxdWVzdHNQZXJGcmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gYXNzZXRNYW5hZ2VyLmRvd25sb2FkZXIubWF4UmVxdWVzdHNQZXJGcmFtZTtcclxuICAgIH1cclxuICAgIHNldCBtYXhSZXF1ZXN0c1BlckZyYW1lKHZhbHVlKSB7XHJcbiAgICAgICAgYXNzZXRNYW5hZ2VyLmRvd25sb2FkZXIubWF4UmVxdWVzdHNQZXJGcmFtZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlpLHotKXph43or5XmrKHmlbAgLSDpu5jorqTlgLzkuLowICovXHJcbiAgICBnZXQgbWF4UmV0cnlDb3VudCgpIHtcclxuICAgICAgICByZXR1cm4gYXNzZXRNYW5hZ2VyLmRvd25sb2FkZXIubWF4UmV0cnlDb3VudDtcclxuICAgIH1cclxuICAgIHNldCBtYXhSZXRyeUNvdW50KHZhbHVlKSB7XHJcbiAgICAgICAgYXNzZXRNYW5hZ2VyLmRvd25sb2FkZXIubWF4UmV0cnlDb3VudCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDph43or5XnmoTpl7TpmpTml7bpl7TvvIzljZXkvY3kuLrmr6vnp5IgLSDpu5jorqTlgLzkuLoyMDAw5q+r56eSICovXHJcbiAgICBnZXQgcmV0cnlJbnRlcnZhbCgpIHtcclxuICAgICAgICByZXR1cm4gYXNzZXRNYW5hZ2VyLmRvd25sb2FkZXIucmV0cnlJbnRlcnZhbDtcclxuICAgIH1cclxuICAgIHNldCByZXRyeUludGVydmFsKHZhbHVlKSB7XHJcbiAgICAgICAgYXNzZXRNYW5hZ2VyLmRvd25sb2FkZXIucmV0cnlJbnRlcnZhbCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDotYTmupDljIXphY3nva4gKi9cclxuICAgIHByaXZhdGUgYnVuZGxlczogTWFwPHN0cmluZywgc3RyaW5nPiA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICBpbml0KGNvbmZpZzogYW55KSB7XHJcbiAgICAgICAgdGhpcy5jZG4gPSBjb25maWcuZW5hYmxlO1xyXG4gICAgICAgIGZvciAobGV0IGJ1bmRsZU5hbWUgaW4gY29uZmlnLnBhY2thZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVuZGxlcy5zZXQoYnVuZGxlTmFtZSwgY29uZmlnLnBhY2thZ2VzW2J1bmRsZU5hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8jcmVnaW9uIOWKoOi9vei/nOeoi+i1hOa6kFxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3ov5znqIvotYTmupBcclxuICAgICAqIEBwYXJhbSB1cmwgICAgICAgICAgIOi1hOa6kOWcsOWdgFxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgICAgICAg6LWE5rqQ5Y+C5pWw77yM5L6L77yaeyBleHQ6IFwiLnBuZ1wiIH1cclxuICAgICAqIEBwYXJhbSBvbkNvbXBsZXRlICAgIOWKoOi9veWujOaIkOWbnuiwg1xyXG4gICAgICogQGV4YW1wbGVcclxudmFyIG9wdDogSVJlbW90ZU9wdGlvbnMgPSB7IGV4dDogXCIucG5nXCIgfTtcclxudmFyIG9uQ29tcGxldGUgPSAoZXJyOiBFcnJvciB8IG51bGwsIGRhdGE6IEltYWdlQXNzZXQpID0+IHtcclxuICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZTJEKCk7XHJcbiAgICB0ZXh0dXJlLmltYWdlID0gZGF0YTtcclxuICAgIFxyXG4gICAgY29uc3Qgc3ByaXRlRnJhbWUgPSBuZXcgU3ByaXRlRnJhbWUoKTtcclxuICAgIHNwcml0ZUZyYW1lLnRleHR1cmUgPSB0ZXh0dXJlO1xyXG4gICAgXHJcbiAgICB2YXIgc3ByaXRlID0gdGhpcy5zcHJpdGUuYWRkQ29tcG9uZW50KFNwcml0ZSk7XHJcbiAgICBzcHJpdGUuc3ByaXRlRnJhbWUgPSBzcHJpdGVGcmFtZTtcclxufVxyXG5vb3BzLnJlcy5sb2FkUmVtb3RlPEltYWdlQXNzZXQ+KHRoaXMudXJsLCBvcHQsIG9uQ29tcGxldGUpO1xyXG4gICAgICovXHJcbiAgICBsb2FkUmVtb3RlPFQgZXh0ZW5kcyBBc3NldD4odXJsOiBzdHJpbmcsIG9wdGlvbnM6IElSZW1vdGVPcHRpb25zIHwgbnVsbCwgb25Db21wbGV0ZT86IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZFJlbW90ZTxUIGV4dGVuZHMgQXNzZXQ+KHVybDogc3RyaW5nLCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkUmVtb3RlPFQgZXh0ZW5kcyBBc3NldD4odXJsOiBzdHJpbmcsIC4uLmFyZ3M6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGxldCBvcHRpb25zOiBJUmVtb3RlT3B0aW9ucyB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGxldCBvbkNvbXBsZXRlOiBDb21wbGV0ZUNhbGxiYWNrID0gbnVsbDtcclxuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICBvcHRpb25zID0gYXJnc1swXTtcclxuICAgICAgICAgICAgb25Db21wbGV0ZSA9IGFyZ3NbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvbkNvbXBsZXRlID0gYXJnc1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXNzZXRNYW5hZ2VyLmxvYWRSZW1vdGU8VD4odXJsLCBvcHRpb25zLCBvbkNvbXBsZXRlKTtcclxuICAgIH1cclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIC8vI3JlZ2lvbiDotYTmupDljIXnrqHnkIZcclxuICAgIC8qKlxyXG4gICAgICog5Yqg6L296LWE5rqQ5YyFXHJcbiAgICAgKiBAcGFyYW0gdXJsICAgICAgIOi1hOa6kOWcsOWdgFxyXG4gICAgICogQHBhcmFtIHYgICAgICAgICDotYTmupBNRDXniYjmnKzlj7dcclxuICAgICAqIEBleGFtcGxlXHJcbnZhciBzZXJ2ZXJVcmwgPSBcImh0dHA6Ly8xOTIuMTY4LjEuODo4MDgwL1wiOyAgICAgICAgIC8vIOacjeWKoeWZqOWcsOWdgFxyXG52YXIgbWQ1ID0gXCI4ZTVjMFwiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb2NvcyBDcmVhdG9yIOaehOW7uuWQjueahE1ENeWtl+esplxyXG5hd2FpdCBvb3BzLnJlcy5sb2FkQnVuZGxlKHNlcnZlclVybCxtZDUpO1xyXG4gICAgICovXHJcbiAgICBsb2FkQnVuZGxlKHVybDogc3RyaW5nLCB2Pzogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEFzc2V0TWFuYWdlci5CdW5kbGU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgYXNzZXRNYW5hZ2VyLmxvYWRCdW5kbGUodXJsLCB7IHZlcnNpb246IHYgfSwgKGVyciwgYnVuZGxlOiBBc3NldE1hbmFnZXIuQnVuZGxlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGJ1bmRsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YeK5pS+6LWE5rqQ5YyF5LiO5YyF5Lit5omA5pyJ6LWE5rqQXHJcbiAgICAgKiBAcGFyYW0gYnVuZGxlTmFtZSDotYTmupDlnLDlnYBcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlQnVuZGxlKGJ1bmRsZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBidW5kbGUgPSBhc3NldE1hbmFnZXIuYnVuZGxlcy5nZXQoYnVuZGxlTmFtZSk7XHJcbiAgICAgICAgaWYgKGJ1bmRsZSkge1xyXG4gICAgICAgICAgICBidW5kbGUucmVsZWFzZUFsbCgpO1xyXG4gICAgICAgICAgICBhc3NldE1hbmFnZXIucmVtb3ZlQnVuZGxlKGJ1bmRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgLy8jcmVnaW9uIOmihOWKoOi9vei1hOa6kFxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3kuIDkuKrotYTmupBcclxuICAgICAqIEBwYXJhbSBidW5kbGVOYW1lICAgIOi/nOeoi+WMheWQjVxyXG4gICAgICogQHBhcmFtIHBhdGhzICAgICAgICAg6LWE5rqQ6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICDotYTmupDnsbvlnotcclxuICAgICAqIEBwYXJhbSBvblByb2dyZXNzICAgIOWKoOi9vei/m+W6puWbnuiwg1xyXG4gICAgICogQHBhcmFtIG9uQ29tcGxldGUgICAg5Yqg6L295a6M5oiQ5Zue6LCDXHJcbiAgICAgKi9cclxuICAgIHByZWxvYWQ8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIHBhdGhzOiBQYXRocywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvblByb2dyZXNzOiBQcm9ncmVzc0NhbGxiYWNrLCBvbkNvbXBsZXRlOiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIHByZWxvYWQ8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIHBhdGhzOiBQYXRocywgb25Qcm9ncmVzczogUHJvZ3Jlc3NDYWxsYmFjaywgb25Db21wbGV0ZTogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBwcmVsb2FkPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBwYXRoczogUGF0aHMsIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIHByZWxvYWQ8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIHBhdGhzOiBQYXRocywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBwcmVsb2FkPFQgZXh0ZW5kcyBBc3NldD4ocGF0aHM6IFBhdGhzLCB0eXBlOiBBc3NldFR5cGU8VD4sIG9uUHJvZ3Jlc3M6IFByb2dyZXNzQ2FsbGJhY2ssIG9uQ29tcGxldGU6IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgcHJlbG9hZDxUIGV4dGVuZHMgQXNzZXQ+KHBhdGhzOiBQYXRocywgb25Qcm9ncmVzczogUHJvZ3Jlc3NDYWxsYmFjaywgb25Db21wbGV0ZTogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBwcmVsb2FkPFQgZXh0ZW5kcyBBc3NldD4ocGF0aHM6IFBhdGhzLCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBwcmVsb2FkPFQgZXh0ZW5kcyBBc3NldD4ocGF0aHM6IFBhdGhzLCB0eXBlOiBBc3NldFR5cGU8VD4sIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIHByZWxvYWQ8VCBleHRlbmRzIEFzc2V0PihcclxuICAgICAgICBidW5kbGVOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgcGF0aHM/OiBQYXRocyB8IEFzc2V0VHlwZTxUPiB8IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgICAgIHR5cGU/OiBBc3NldFR5cGU8VD4gfCBQcm9ncmVzc0NhbGxiYWNrIHwgQ29tcGxldGVDYWxsYmFjayxcclxuICAgICAgICBvblByb2dyZXNzPzogUHJvZ3Jlc3NDYWxsYmFjayB8IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICAgICAgb25Db21wbGV0ZT86IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICApIHtcclxuICAgICAgICBsZXQgYXJnczogSUxvYWRSZXNBcmdzPEFzc2V0PiB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcGF0aHMgPT09IFwic3RyaW5nXCIgfHwgcGF0aHMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICBhcmdzID0gdGhpcy5wYXJzZUxvYWRSZXNBcmdzKHBhdGhzLCB0eXBlLCBvblByb2dyZXNzLCBvbkNvbXBsZXRlKTtcclxuICAgICAgICAgICAgYXJncy5idW5kbGUgPSBidW5kbGVOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXJncyA9IHRoaXMucGFyc2VMb2FkUmVzQXJncyhidW5kbGVOYW1lLCBwYXRocywgdHlwZSwgb25Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIGFyZ3MuYnVuZGxlID0gdGhpcy5kZWZhdWx0QnVuZGxlTmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXJncy5wcmVsb2FkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmxvYWRCeUFyZ3MoYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvILmraXliqDovb3kuIDkuKrotYTmupBcclxuICAgICAqIEBwYXJhbSBidW5kbGVOYW1lICAgIOi/nOeoi+WMheWQjVxyXG4gICAgICogQHBhcmFtIHBhdGhzICAgICAgICAg6LWE5rqQ6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICDotYTmupDnsbvlnotcclxuICAgICAqL1xyXG4gICAgcHJlbG9hZEFzeW5jPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBwYXRoczogUGF0aHMsIHR5cGU6IEFzc2V0VHlwZTxUPik6IFByb21pc2U8QXNzZXRNYW5hZ2VyLlJlcXVlc3RJdGVtPjtcclxuICAgIHByZWxvYWRBc3luYzxUIGV4dGVuZHMgQXNzZXQ+KGJ1bmRsZU5hbWU6IHN0cmluZywgcGF0aHM6IFBhdGhzKTogUHJvbWlzZTxBc3NldE1hbmFnZXIuUmVxdWVzdEl0ZW0+O1xyXG4gICAgcHJlbG9hZEFzeW5jPFQgZXh0ZW5kcyBBc3NldD4ocGF0aHM6IFBhdGhzLCB0eXBlOiBBc3NldFR5cGU8VD4pOiBQcm9taXNlPEFzc2V0TWFuYWdlci5SZXF1ZXN0SXRlbT47XHJcbiAgICBwcmVsb2FkQXN5bmM8VCBleHRlbmRzIEFzc2V0PihwYXRoczogUGF0aHMpOiBQcm9taXNlPEFzc2V0TWFuYWdlci5SZXF1ZXN0SXRlbT47XHJcbiAgICBwcmVsb2FkQXN5bmM8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgcGF0aHM/OiBQYXRocyB8IEFzc2V0VHlwZTxUPiB8IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgICAgIHR5cGU/OiBBc3NldFR5cGU8VD4gfCBQcm9ncmVzc0NhbGxiYWNrIHwgQ29tcGxldGVDYWxsYmFjayk6IFByb21pc2U8QXNzZXRNYW5hZ2VyLlJlcXVlc3RJdGVtPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wcmVsb2FkKGJ1bmRsZU5hbWUsIHBhdGhzLCB0eXBlLCAoZXJyOiBFcnJvciB8IG51bGwsIGRhdGE6IEFzc2V0TWFuYWdlci5SZXF1ZXN0SXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpooTliqDovb3mlofku7blpLnkuK3nmoTotYTmupBcclxuICAgICAqIEBwYXJhbSBidW5kbGVOYW1lICAgIOi/nOeoi+WMheWQjVxyXG4gICAgICogQHBhcmFtIGRpciAgICAgICAgICAg5paH5Lu25aS55ZCNXHJcbiAgICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICDotYTmupDnsbvlnotcclxuICAgICAqIEBwYXJhbSBvblByb2dyZXNzICAgIOWKoOi9vei/m+W6puWbnuiwg1xyXG4gICAgICogQHBhcmFtIG9uQ29tcGxldGUgICAg5Yqg6L295a6M5oiQ5Zue6LCDXHJcbiAgICAgKi9cclxuICAgIHByZWxvYWREaXI8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIGRpcjogc3RyaW5nLCB0eXBlOiBBc3NldFR5cGU8VD4sIG9uUHJvZ3Jlc3M6IFByb2dyZXNzQ2FsbGJhY2ssIG9uQ29tcGxldGU6IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgcHJlbG9hZERpcjxUIGV4dGVuZHMgQXNzZXQ+KGJ1bmRsZU5hbWU6IHN0cmluZywgZGlyOiBzdHJpbmcsIG9uUHJvZ3Jlc3M6IFByb2dyZXNzQ2FsbGJhY2ssIG9uQ29tcGxldGU6IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgcHJlbG9hZERpcjxUIGV4dGVuZHMgQXNzZXQ+KGJ1bmRsZU5hbWU6IHN0cmluZywgZGlyOiBzdHJpbmcsIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIHByZWxvYWREaXI8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIGRpcjogc3RyaW5nLCB0eXBlOiBBc3NldFR5cGU8VD4sIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIHByZWxvYWREaXI8VCBleHRlbmRzIEFzc2V0PihkaXI6IHN0cmluZywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvblByb2dyZXNzOiBQcm9ncmVzc0NhbGxiYWNrLCBvbkNvbXBsZXRlOiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIHByZWxvYWREaXI8VCBleHRlbmRzIEFzc2V0PihkaXI6IHN0cmluZywgb25Qcm9ncmVzczogUHJvZ3Jlc3NDYWxsYmFjaywgb25Db21wbGV0ZTogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBwcmVsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oZGlyOiBzdHJpbmcsIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIHByZWxvYWREaXI8VCBleHRlbmRzIEFzc2V0PihkaXI6IHN0cmluZywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBwcmVsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oXHJcbiAgICAgICAgYnVuZGxlTmFtZTogc3RyaW5nLFxyXG4gICAgICAgIGRpcj86IHN0cmluZyB8IEFzc2V0VHlwZTxUPiB8IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgICAgIHR5cGU/OiBBc3NldFR5cGU8VD4gfCBQcm9ncmVzc0NhbGxiYWNrIHwgQ29tcGxldGVDYWxsYmFjayxcclxuICAgICAgICBvblByb2dyZXNzPzogUHJvZ3Jlc3NDYWxsYmFjayB8IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICAgICAgb25Db21wbGV0ZT86IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICApIHtcclxuICAgICAgICBsZXQgYXJnczogSUxvYWRSZXNBcmdzPFQ+IHwgbnVsbCA9IG51bGw7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkaXIgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgYXJncyA9IHRoaXMucGFyc2VMb2FkUmVzQXJncyhkaXIsIHR5cGUsIG9uUHJvZ3Jlc3MsIG9uQ29tcGxldGUpO1xyXG4gICAgICAgICAgICBhcmdzLmJ1bmRsZSA9IGJ1bmRsZU5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhcmdzID0gdGhpcy5wYXJzZUxvYWRSZXNBcmdzKGJ1bmRsZU5hbWUsIGRpciwgdHlwZSwgb25Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIGFyZ3MuYnVuZGxlID0gdGhpcy5kZWZhdWx0QnVuZGxlTmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXJncy5kaXIgPSBhcmdzLnBhdGhzIGFzIHN0cmluZztcclxuICAgICAgICBhcmdzLnByZWxvYWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubG9hZEJ5QXJncyhhcmdzKTtcclxuICAgIH1cclxuICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgIC8vI3JlZ2lvbiDotYTmupDliqDovb3jgIHojrflj5bjgIHph4rmlL5cclxuICAgIC8qKlxyXG4gICAgICog5Yqg6L295LiA5Liq6LWE5rqQXHJcbiAgICAgKiBAcGFyYW0gYnVuZGxlTmFtZSAgICDov5znqIvljIXlkI1cclxuICAgICAqIEBwYXJhbSBwYXRocyAgICAgICAgIOi1hOa6kOi3r+W+hFxyXG4gICAgICogQHBhcmFtIHR5cGUgICAgICAgICAg6LWE5rqQ57G75Z6LXHJcbiAgICAgKiBAcGFyYW0gb25Qcm9ncmVzcyAgICDliqDovb3ov5vluqblm57osINcclxuICAgICAqIEBwYXJhbSBvbkNvbXBsZXRlICAgIOWKoOi9veWujOaIkOWbnuiwg1xyXG4gICAgICogQGV4YW1wbGVcclxub29wcy5yZXMubG9hZChcInNwaW5lX3BhdGhcIiwgc3AuU2tlbGV0b25EYXRhLCAoZXJyOiBFcnJvciB8IG51bGwsIHNkOiBzcC5Ta2VsZXRvbkRhdGEpID0+IHtcclxuXHJcbn0pO1xyXG4gICAgICovXHJcbiAgICBsb2FkPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBwYXRoczogUGF0aHMsIHR5cGU6IEFzc2V0VHlwZTxUPiwgb25Qcm9ncmVzczogUHJvZ3Jlc3NDYWxsYmFjaywgb25Db21wbGV0ZTogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBwYXRoczogUGF0aHMsIG9uUHJvZ3Jlc3M6IFByb2dyZXNzQ2FsbGJhY2ssIG9uQ29tcGxldGU6IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZDxUIGV4dGVuZHMgQXNzZXQ+KGJ1bmRsZU5hbWU6IHN0cmluZywgcGF0aHM6IFBhdGhzLCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBwYXRoczogUGF0aHMsIHR5cGU6IEFzc2V0VHlwZTxUPiwgb25Db21wbGV0ZT86IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZDxUIGV4dGVuZHMgQXNzZXQ+KHBhdGhzOiBQYXRocywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvblByb2dyZXNzOiBQcm9ncmVzc0NhbGxiYWNrLCBvbkNvbXBsZXRlOiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIGxvYWQ8VCBleHRlbmRzIEFzc2V0PihwYXRoczogUGF0aHMsIG9uUHJvZ3Jlc3M6IFByb2dyZXNzQ2FsbGJhY2ssIG9uQ29tcGxldGU6IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZDxUIGV4dGVuZHMgQXNzZXQ+KHBhdGhzOiBQYXRocywgb25Db21wbGV0ZT86IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZDxUIGV4dGVuZHMgQXNzZXQ+KHBhdGhzOiBQYXRocywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkPFQgZXh0ZW5kcyBBc3NldD4oXHJcbiAgICAgICAgYnVuZGxlTmFtZTogc3RyaW5nLFxyXG4gICAgICAgIHBhdGhzPzogUGF0aHMgfCBBc3NldFR5cGU8VD4gfCBQcm9ncmVzc0NhbGxiYWNrIHwgQ29tcGxldGVDYWxsYmFjayxcclxuICAgICAgICB0eXBlPzogQXNzZXRUeXBlPFQ+IHwgUHJvZ3Jlc3NDYWxsYmFjayB8IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICAgICAgb25Qcm9ncmVzcz86IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgICAgIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgKSB7XHJcbiAgICAgICAgbGV0IGFyZ3M6IElMb2FkUmVzQXJnczxUPiB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcGF0aHMgPT09IFwic3RyaW5nXCIgfHwgcGF0aHMgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICBhcmdzID0gdGhpcy5wYXJzZUxvYWRSZXNBcmdzKHBhdGhzLCB0eXBlLCBvblByb2dyZXNzLCBvbkNvbXBsZXRlKTtcclxuICAgICAgICAgICAgYXJncy5idW5kbGUgPSBidW5kbGVOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXJncyA9IHRoaXMucGFyc2VMb2FkUmVzQXJncyhidW5kbGVOYW1lLCBwYXRocywgdHlwZSwgb25Qcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIGFyZ3MuYnVuZGxlID0gdGhpcy5kZWZhdWx0QnVuZGxlTmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2FkQnlBcmdzKGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5byC5q2l5Yqg6L295LiA5Liq6LWE5rqQXHJcbiAgICAgKiBAcGFyYW0gYnVuZGxlTmFtZSAgICDov5znqIvljIXlkI1cclxuICAgICAqIEBwYXJhbSBwYXRocyAgICAgICAgIOi1hOa6kOi3r+W+hFxyXG4gICAgICogQHBhcmFtIHR5cGUgICAgICAgICAg6LWE5rqQ57G75Z6LXHJcbiAgICAgKi9cclxuICAgIGxvYWRBc3luYzxUIGV4dGVuZHMgQXNzZXQ+KGJ1bmRsZU5hbWU6IHN0cmluZywgcGF0aHM6IFBhdGhzLCB0eXBlOiBBc3NldFR5cGU8VD4pOiBQcm9taXNlPFQ+O1xyXG4gICAgbG9hZEFzeW5jPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBwYXRoczogUGF0aHMpOiBQcm9taXNlPFQ+O1xyXG4gICAgbG9hZEFzeW5jPFQgZXh0ZW5kcyBBc3NldD4ocGF0aHM6IFBhdGhzLCB0eXBlOiBBc3NldFR5cGU8VD4pOiBQcm9taXNlPFQ+O1xyXG4gICAgbG9hZEFzeW5jPFQgZXh0ZW5kcyBBc3NldD4ocGF0aHM6IFBhdGhzKTogUHJvbWlzZTxUPjtcclxuICAgIGxvYWRBc3luYzxUIGV4dGVuZHMgQXNzZXQ+KGJ1bmRsZU5hbWU6IHN0cmluZyxcclxuICAgICAgICBwYXRocz86IFBhdGhzIHwgQXNzZXRUeXBlPFQ+IHwgUHJvZ3Jlc3NDYWxsYmFjayB8IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICAgICAgdHlwZT86IEFzc2V0VHlwZTxUPiB8IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrKTogUHJvbWlzZTxUPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkKGJ1bmRsZU5hbWUsIHBhdGhzLCB0eXBlLCAoZXJyOiBFcnJvciB8IG51bGwsIGFzc2V0OiBUKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFzc2V0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3mlofku7blpLnkuK3nmoTotYTmupBcclxuICAgICAqIEBwYXJhbSBidW5kbGVOYW1lICAgIOi/nOeoi+WMheWQjVxyXG4gICAgICogQHBhcmFtIGRpciAgICAgICAgICAg5paH5Lu25aS55ZCNXHJcbiAgICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICDotYTmupDnsbvlnotcclxuICAgICAqIEBwYXJhbSBvblByb2dyZXNzICAgIOWKoOi9vei/m+W6puWbnuiwg1xyXG4gICAgICogQHBhcmFtIG9uQ29tcGxldGUgICAg5Yqg6L295a6M5oiQ5Zue6LCDXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4vLyDliqDovb3ov5vluqbkuovku7ZcclxudmFyIG9uUHJvZ3Jlc3NDYWxsYmFjayA9IChmaW5pc2hlZDogbnVtYmVyLCB0b3RhbDogbnVtYmVyLCBpdGVtOiBhbnkpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwi6LWE5rqQ5Yqg6L296L+b5bqmXCIsIGZpbmlzaGVkLCB0b3RhbCk7XHJcbn1cclxuXHJcbi8vIOWKoOi9veWujOaIkOS6i+S7tlxyXG52YXIgb25Db21wbGV0ZUNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCLotYTmupDliqDovb3lrozmiJBcIik7XHJcbn1cclxub29wcy5yZXMubG9hZERpcihcImdhbWVcIiwgb25Qcm9ncmVzc0NhbGxiYWNrLCBvbkNvbXBsZXRlQ2FsbGJhY2spO1xyXG4gICAgICovXHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBkaXI6IHN0cmluZywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvblByb2dyZXNzOiBQcm9ncmVzc0NhbGxiYWNrLCBvbkNvbXBsZXRlOiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIGxvYWREaXI8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIGRpcjogc3RyaW5nLCBvblByb2dyZXNzOiBQcm9ncmVzc0NhbGxiYWNrLCBvbkNvbXBsZXRlOiBDb21wbGV0ZUNhbGxiYWNrKTogdm9pZDtcclxuICAgIGxvYWREaXI8VCBleHRlbmRzIEFzc2V0PihidW5kbGVOYW1lOiBzdHJpbmcsIGRpcjogc3RyaW5nLCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlTmFtZTogc3RyaW5nLCBkaXI6IHN0cmluZywgdHlwZTogQXNzZXRUeXBlPFQ+LCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oZGlyOiBzdHJpbmcsIHR5cGU6IEFzc2V0VHlwZTxUPiwgb25Qcm9ncmVzczogUHJvZ3Jlc3NDYWxsYmFjaywgb25Db21wbGV0ZTogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oZGlyOiBzdHJpbmcsIG9uUHJvZ3Jlc3M6IFByb2dyZXNzQ2FsbGJhY2ssIG9uQ29tcGxldGU6IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZERpcjxUIGV4dGVuZHMgQXNzZXQ+KGRpcjogc3RyaW5nLCBvbkNvbXBsZXRlPzogQ29tcGxldGVDYWxsYmFjayk6IHZvaWQ7XHJcbiAgICBsb2FkRGlyPFQgZXh0ZW5kcyBBc3NldD4oZGlyOiBzdHJpbmcsIHR5cGU6IEFzc2V0VHlwZTxUPiwgb25Db21wbGV0ZT86IENvbXBsZXRlQ2FsbGJhY2spOiB2b2lkO1xyXG4gICAgbG9hZERpcjxUIGV4dGVuZHMgQXNzZXQ+KFxyXG4gICAgICAgIGJ1bmRsZU5hbWU6IHN0cmluZyxcclxuICAgICAgICBkaXI/OiBzdHJpbmcgfCBBc3NldFR5cGU8VD4gfCBQcm9ncmVzc0NhbGxiYWNrIHwgQ29tcGxldGVDYWxsYmFjayxcclxuICAgICAgICB0eXBlPzogQXNzZXRUeXBlPFQ+IHwgUHJvZ3Jlc3NDYWxsYmFjayB8IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICAgICAgb25Qcm9ncmVzcz86IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgICAgIG9uQ29tcGxldGU/OiBDb21wbGV0ZUNhbGxiYWNrLFxyXG4gICAgKSB7XHJcbiAgICAgICAgbGV0IGFyZ3M6IElMb2FkUmVzQXJnczxUPiB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGlyID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGFyZ3MgPSB0aGlzLnBhcnNlTG9hZFJlc0FyZ3MoZGlyLCB0eXBlLCBvblByb2dyZXNzLCBvbkNvbXBsZXRlKTtcclxuICAgICAgICAgICAgYXJncy5idW5kbGUgPSBidW5kbGVOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXJncyA9IHRoaXMucGFyc2VMb2FkUmVzQXJncyhidW5kbGVOYW1lLCBkaXIsIHR5cGUsIG9uUHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICBhcmdzLmJ1bmRsZSA9IHRoaXMuZGVmYXVsdEJ1bmRsZU5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFyZ3MuZGlyID0gYXJncy5wYXRocyBhcyBzdHJpbmc7XHJcbiAgICAgICAgdGhpcy5sb2FkQnlBcmdzKGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YCa6L+H6LWE5rqQ55u45a+56Lev5b6E6YeK5pS+6LWE5rqQXHJcbiAgICAgKiBAcGFyYW0gcGF0aCAgICAgICAgICDotYTmupDot6/lvoRcclxuICAgICAqIEBwYXJhbSBidW5kbGVOYW1lICAgIOi/nOeoi+i1hOa6kOWMheWQjVxyXG4gICAgICovXHJcbiAgICByZWxlYXNlKHBhdGg6IHN0cmluZywgYnVuZGxlTmFtZTogc3RyaW5nID0gdGhpcy5kZWZhdWx0QnVuZGxlTmFtZSkge1xyXG4gICAgICAgIGNvbnN0IGJ1bmRsZSA9IGFzc2V0TWFuYWdlci5nZXRCdW5kbGUoYnVuZGxlTmFtZSk7XHJcbiAgICAgICAgaWYgKGJ1bmRsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBhc3NldCA9IGJ1bmRsZS5nZXQocGF0aCk7XHJcbiAgICAgICAgICAgIGlmIChhc3NldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxlYXNlUHJlZmFidERlcHNSZWN1cnNpdmVseShhc3NldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgJrov4fnm7jlr7nmlofku7blpLnot6/lvoTliKDpmaTmiYDmnInmlofku7blpLnkuK3otYTmupBcclxuICAgICAqIEBwYXJhbSBwYXRoICAgICAgICAgIOi1hOa6kOaWh+S7tuWkuei3r+W+hFxyXG4gICAgICogQHBhcmFtIGJ1bmRsZU5hbWUgICAg6L+c56iL6LWE5rqQ5YyF5ZCNXHJcbiAgICAgKi9cclxuICAgIHJlbGVhc2VEaXIocGF0aDogc3RyaW5nLCBidW5kbGVOYW1lOiBzdHJpbmcgPSB0aGlzLmRlZmF1bHRCdW5kbGVOYW1lKSB7XHJcbiAgICAgICAgY29uc3QgYnVuZGxlOiBBc3NldE1hbmFnZXIuQnVuZGxlIHwgbnVsbCA9IGFzc2V0TWFuYWdlci5nZXRCdW5kbGUoYnVuZGxlTmFtZSk7XHJcbiAgICAgICAgaWYgKGJ1bmRsZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5mb3MgPSBidW5kbGUuZ2V0RGlyV2l0aFBhdGgocGF0aCk7XHJcbiAgICAgICAgICAgIGlmIChpbmZvcykge1xyXG4gICAgICAgICAgICAgICAgaW5mb3MubWFwKChpbmZvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxlYXNlUHJlZmFidERlcHNSZWN1cnNpdmVseShpbmZvLnV1aWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwYXRoID09IFwiXCIgJiYgYnVuZGxlTmFtZSAhPSBcInJlc291cmNlc1wiKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NldE1hbmFnZXIucmVtb3ZlQnVuZGxlKGJ1bmRsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOmHiuaUvumihOWItuS+nei1lui1hOa6kCAqL1xyXG4gICAgcHJpdmF0ZSByZWxlYXNlUHJlZmFidERlcHNSZWN1cnNpdmVseSh1dWlkOiBzdHJpbmcgfCBBc3NldCkge1xyXG4gICAgICAgIGlmICh1dWlkIGluc3RhbmNlb2YgQXNzZXQpIHtcclxuICAgICAgICAgICAgdXVpZC5kZWNSZWYoKTtcclxuICAgICAgICAgICAgLy8gYXNzZXRNYW5hZ2VyLnJlbGVhc2VBc3NldCh1dWlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFzc2V0ID0gYXNzZXRNYW5hZ2VyLmFzc2V0cy5nZXQodXVpZCk7XHJcbiAgICAgICAgICAgIGlmIChhc3NldCkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXQuZGVjUmVmKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBhc3NldE1hbmFnZXIucmVsZWFzZUFzc2V0KGFzc2V0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPlui1hOa6kFxyXG4gICAgICogQHBhcmFtIHBhdGggICAgICAgICAg6LWE5rqQ6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0gdHlwZSAgICAgICAgICDotYTmupDnsbvlnotcclxuICAgICAqIEBwYXJhbSBidW5kbGVOYW1lICAgIOi/nOeoi+i1hOa6kOWMheWQjVxyXG4gICAgICovXHJcbiAgICBnZXQ8VCBleHRlbmRzIEFzc2V0PihwYXRoOiBzdHJpbmcsIHR5cGU/OiBBc3NldFR5cGU8VD4sIGJ1bmRsZU5hbWU6IHN0cmluZyA9IHRoaXMuZGVmYXVsdEJ1bmRsZU5hbWUpOiBUIHwgbnVsbCB7XHJcbiAgICAgICAgdmFyIGJ1bmRsZTogQXNzZXRNYW5hZ2VyLkJ1bmRsZSA9IGFzc2V0TWFuYWdlci5nZXRCdW5kbGUoYnVuZGxlTmFtZSkhO1xyXG4gICAgICAgIHJldHVybiBidW5kbGUuZ2V0KHBhdGgsIHR5cGUpO1xyXG4gICAgfVxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgcHJpdmF0ZSBwYXJzZUxvYWRSZXNBcmdzPFQgZXh0ZW5kcyBBc3NldD4oXHJcbiAgICAgICAgcGF0aHM6IFBhdGhzLFxyXG4gICAgICAgIHR5cGU/OiBBc3NldFR5cGU8VD4gfCBQcm9ncmVzc0NhbGxiYWNrIHwgQ29tcGxldGVDYWxsYmFjayxcclxuICAgICAgICBvblByb2dyZXNzPzogQXNzZXRUeXBlPFQ+IHwgUHJvZ3Jlc3NDYWxsYmFjayB8IENvbXBsZXRlQ2FsbGJhY2ssXHJcbiAgICAgICAgb25Db21wbGV0ZT86IFByb2dyZXNzQ2FsbGJhY2sgfCBDb21wbGV0ZUNhbGxiYWNrXHJcbiAgICApIHtcclxuICAgICAgICBsZXQgcGF0aHNPdXQ6IGFueSA9IHBhdGhzO1xyXG4gICAgICAgIGxldCB0eXBlT3V0OiBhbnkgPSB0eXBlO1xyXG4gICAgICAgIGxldCBvblByb2dyZXNzT3V0OiBhbnkgPSBvblByb2dyZXNzO1xyXG4gICAgICAgIGxldCBvbkNvbXBsZXRlT3V0OiBhbnkgPSBvbkNvbXBsZXRlO1xyXG4gICAgICAgIGlmIChvbkNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgaXNWYWxpZFR5cGUgPSBqcy5pc0NoaWxkQ2xhc3NPZih0eXBlIGFzIEFzc2V0VHlwZSwgQXNzZXQpO1xyXG4gICAgICAgICAgICBpZiAob25Qcm9ncmVzcykge1xyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZU91dCA9IG9uUHJvZ3Jlc3MgYXMgQ29tcGxldGVDYWxsYmFjaztcclxuICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uUHJvZ3Jlc3NPdXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9uUHJvZ3Jlc3MgPT09IHVuZGVmaW5lZCAmJiAhaXNWYWxpZFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGVPdXQgPSB0eXBlIGFzIENvbXBsZXRlQ2FsbGJhY2s7XHJcbiAgICAgICAgICAgICAgICBvblByb2dyZXNzT3V0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHR5cGVPdXQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvblByb2dyZXNzICE9PSB1bmRlZmluZWQgJiYgIWlzVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBvblByb2dyZXNzT3V0ID0gdHlwZSBhcyBQcm9ncmVzc0NhbGxiYWNrO1xyXG4gICAgICAgICAgICAgICAgdHlwZU91dCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgcGF0aHM6IHBhdGhzT3V0LCB0eXBlOiB0eXBlT3V0LCBvblByb2dyZXNzOiBvblByb2dyZXNzT3V0LCBvbkNvbXBsZXRlOiBvbkNvbXBsZXRlT3V0IH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBsb2FkQnlCdW5kbGVBbmRBcmdzPFQgZXh0ZW5kcyBBc3NldD4oYnVuZGxlOiBBc3NldE1hbmFnZXIuQnVuZGxlLCBhcmdzOiBJTG9hZFJlc0FyZ3M8VD4pOiB2b2lkIHtcclxuICAgICAgICBpZiAoYXJncy5kaXIpIHtcclxuICAgICAgICAgICAgaWYgKGFyZ3MucHJlbG9hZCkge1xyXG4gICAgICAgICAgICAgICAgYnVuZGxlLnByZWxvYWREaXIoYXJncy5wYXRocyBhcyBzdHJpbmcsIGFyZ3MudHlwZSwgYXJncy5vblByb2dyZXNzLCBhcmdzLm9uQ29tcGxldGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnVuZGxlLmxvYWREaXIoYXJncy5wYXRocyBhcyBzdHJpbmcsIGFyZ3MudHlwZSwgYXJncy5vblByb2dyZXNzLCBhcmdzLm9uQ29tcGxldGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoYXJncy5wcmVsb2FkKSB7XHJcbiAgICAgICAgICAgICAgICBidW5kbGUucHJlbG9hZChhcmdzLnBhdGhzIGFzIGFueSwgYXJncy50eXBlLCBhcmdzLm9uUHJvZ3Jlc3MsIGFyZ3Mub25Db21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidW5kbGUubG9hZChhcmdzLnBhdGhzIGFzIGFueSwgYXJncy50eXBlLCBhcmdzLm9uUHJvZ3Jlc3MsIGFyZ3Mub25Db21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkQnlBcmdzPFQgZXh0ZW5kcyBBc3NldD4oYXJnczogSUxvYWRSZXNBcmdzPFQ+KSB7XHJcbiAgICAgICAgaWYgKGFyZ3MuYnVuZGxlKSB7XHJcbiAgICAgICAgICAgIGxldCBidW5kbGUgPSBhc3NldE1hbmFnZXIuYnVuZGxlcy5nZXQoYXJncy5idW5kbGUpO1xyXG4gICAgICAgICAgICAvLyDojrflj5bnvJPlrZjkuK3nmoTotYTmupDljIVcclxuICAgICAgICAgICAgaWYgKGJ1bmRsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkQnlCdW5kbGVBbmRBcmdzKGJ1bmRsZSwgYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8g6Ieq5Yqo5Yqg6L296LWE5rqQ5YyFXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuY2RuID8gdGhpcy5idW5kbGVzLmdldChhcmdzLmJ1bmRsZSkgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgYnVuZGxlID0gYXdhaXQgdGhpcy5sb2FkQnVuZGxlKGFyZ3MuYnVuZGxlLCB2KTtcclxuICAgICAgICAgICAgICAgIGlmIChidW5kbGUpIHRoaXMubG9hZEJ5QnVuZGxlQW5kQXJncyhidW5kbGUsIGFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOm7mOiupOi1hOa6kOWMhVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRCeUJ1bmRsZUFuZEFyZ3MocmVzb3VyY2VzLCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaJk+WNsOe8k+WtmOS4reaJgOaciei1hOa6kOS/oeaBryAqL1xyXG4gICAgZHVtcCgpIHtcclxuICAgICAgICBhc3NldE1hbmFnZXIuYXNzZXRzLmZvckVhY2goKHZhbHVlOiBBc3NldCwga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYXNzZXRNYW5hZ2VyLmFzc2V0cy5nZXQoa2V5KSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBjb25zb2xlLmxvZyhg5b2T5YmN6LWE5rqQ5oC75pWwOiR7YXNzZXRNYW5hZ2VyLmFzc2V0cy5jb3VudH1gKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHJlc0xvYWRlciA9IG5ldyBSZXNMb2FkZXIoKTsiLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTA3LTAzIDE2OjEzOjE3XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTA4LTI4IDEwOjAyOjU3XHJcbiAqL1xyXG5pbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIGRpcmVjdG9yLCBHYW1lLCBnYW1lLCBKc29uQXNzZXQsIE5vZGUsIHNjcmVlbiwgc3lzIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IEdhbWVDb25maWcgfSBmcm9tIFwiLi4vbW9kdWxlL2NvbmZpZy9HYW1lQ29uZmlnXCI7XHJcbmltcG9ydCB7IEdhbWVRdWVyeUNvbmZpZyB9IGZyb20gXCIuLi9tb2R1bGUvY29uZmlnL0dhbWVRdWVyeUNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBvb3BzLCB2ZXJzaW9uIH0gZnJvbSBcIi4vT29wc1wiO1xyXG5pbXBvcnQgeyBBdWRpb01hbmFnZXIgfSBmcm9tIFwiLi9jb21tb24vYXVkaW8vQXVkaW9NYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEV2ZW50TWVzc2FnZSB9IGZyb20gXCIuL2NvbW1vbi9ldmVudC9FdmVudE1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgbWVzc2FnZSB9IGZyb20gXCIuL2NvbW1vbi9ldmVudC9NZXNzYWdlTWFuYWdlclwiO1xyXG5pbXBvcnQgeyByZXNMb2FkZXIgfSBmcm9tIFwiLi9jb21tb24vbG9hZGVyL1Jlc0xvYWRlclwiO1xyXG5pbXBvcnQgeyBTdG9yYWdlTWFuYWdlciB9IGZyb20gXCIuL2NvbW1vbi9zdG9yYWdlL1N0b3JhZ2VNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFN0b3JhZ2VTZWN1cml0eVNpbXBsZSB9IGZyb20gXCIuL2NvbW1vbi9zdG9yYWdlL1N0b3JhZ2VTZWN1cml0eVNpbXBsZVwiO1xyXG5pbXBvcnQgeyBUaW1lck1hbmFnZXIgfSBmcm9tIFwiLi9jb21tb24vdGltZXIvVGltZXJNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEdhbWVNYW5hZ2VyIH0gZnJvbSBcIi4vZ2FtZS9HYW1lTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBMYXllck1hbmFnZXIgfSBmcm9tIFwiLi9ndWkvbGF5ZXIvTGF5ZXJNYW5hZ2VyXCI7XHJcblxyXG5jb25zdCB7IHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxubGV0IGlzSW5pdGVkID0gZmFsc2U7XHJcblxyXG4vKiog5qGG5p625pi+56S65bGC5qC56IqC54K5ICovXHJcbmV4cG9ydCBjbGFzcyBSb290IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIC8qKiDmuLjmiI/lsYLoioLngrkgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogTm9kZSxcclxuICAgICAgICB0b29sdGlwOiBcIua4uOaIj+WxglwiXHJcbiAgICB9KVxyXG4gICAgZ2FtZTogTm9kZSA9IG51bGwhOyAgICAgICAgICAgIC8vIOWPr+S9v+eUqOWkmuaRhOWDj+acuuiHquWumuS5ieS6jOe7tOaIluS4iee7tOa4uOaIj+WcuuaZr1xyXG5cclxuICAgIC8qKiDnlYzpnaLlsYLoioLngrkgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogTm9kZSxcclxuICAgICAgICB0b29sdGlwOiBcIueVjOmdouWxglwiXHJcbiAgICB9KVxyXG4gICAgZ3VpOiBOb2RlID0gbnVsbCE7XHJcblxyXG4gICAgLyoqIOahhuaetuW4uOmpu+iKgueCuSAqL1xyXG4gICAgcHJpdmF0ZSBwZXJzaXN0OiBOb2RlID0gbnVsbCFcclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgaWYgKCFpc0luaXRlZCkge1xyXG4gICAgICAgICAgICBpc0luaXRlZCA9IHRydWU7ICAgICAgLy8g5rOo77ya6L+Z6YeM5piv6KeE6YG/Y2MzLjjlnKjnvJbovpHlmajmqKHlvI/kuIvov5DooYzml7bvvIzlhbPpl63muLjmiI/kvJrkuKTmrKHliJ3lp4vljJbmiqXplJlcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBPb3BzIEZyYW1ld29yayB2JHt2ZXJzaW9ufWApO1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5pbmlTdGFydCgpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRDb25maWcoKS50aGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgbG9hZENvbmZpZygpIHtcclxuICAgICAgICAvLyDliJvlu7rmjIHkuYXmoLnoioLngrlcclxuICAgICAgICB0aGlzLnBlcnNpc3QgPSBuZXcgTm9kZShcIk9vcHNGcmFtZXdvcmtQZXJzaXN0Tm9kZVwiKTtcclxuICAgICAgICBkaXJlY3Rvci5hZGRQZXJzaXN0Um9vdE5vZGUodGhpcy5wZXJzaXN0KTtcclxuXHJcbiAgICAgICAgLy8g6LWE5rqQ566h55CG5qih5Z2XXHJcbiAgICAgICAgb29wcy5yZXMgPSByZXNMb2FkZXI7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbmZpZ19uYW1lID0gXCJjb25maWdcIjtcclxuICAgICAgICBjb25zdCBjb25maWcgPSBhd2FpdCBvb3BzLnJlcy5sb2FkQXN5bmMoY29uZmlnX25hbWUsIEpzb25Bc3NldCk7XHJcbiAgICAgICAgaWYgKGNvbmZpZykge1xyXG4gICAgICAgICAgICAvLyBvb3BzLmNvbmZpZy5idGMgPSBuZXcgQnVpbGRUaW1lQ29uc3RhbnRzKCk7XHJcbiAgICAgICAgICAgIG9vcHMuY29uZmlnLnF1ZXJ5ID0gbmV3IEdhbWVRdWVyeUNvbmZpZygpO1xyXG4gICAgICAgICAgICBvb3BzLmNvbmZpZy5nYW1lID0gbmV3IEdhbWVDb25maWcoY29uZmlnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOiuvue9rum7mOiupOi1hOa6kOWMhVxyXG4gICAgICAgICAgICBvb3BzLnJlcy5kZWZhdWx0QnVuZGxlTmFtZSA9IG9vcHMuY29uZmlnLmdhbWUuYnVuZGxlRGVmYXVsdDtcclxuICAgICAgICAgICAgb29wcy5yZXMuaW5pdChvb3BzLmNvbmZpZy5nYW1lLmRhdGEuYnVuZGxlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOacrOWcsOWtmOWCqOaooeWdl1xyXG4gICAgICAgICAgICBvb3BzLnN0b3JhZ2UgPSBuZXcgU3RvcmFnZU1hbmFnZXIoKTtcclxuICAgICAgICAgICAgb29wcy5zdG9yYWdlLmluaXQobmV3IFN0b3JhZ2VTZWN1cml0eVNpbXBsZSk7XHJcbiAgICAgICAgICAgIC8vIG9vcHMuc3RvcmFnZS5pbml0KG5ldyBTdG9yYWdlU2VjdXJpdHlDcnlwdG8pO1xyXG5cclxuICAgICAgICAgICAgLy8g5YWo5bGA5raI5oGvXHJcbiAgICAgICAgICAgIG9vcHMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcblxyXG4gICAgICAgICAgICAvLyDliJvlu7rpn7PpopHmqKHlnZdcclxuICAgICAgICAgICAgb29wcy5hdWRpbyA9IHRoaXMucGVyc2lzdC5hZGRDb21wb25lbnQoQXVkaW9NYW5hZ2VyKTtcclxuICAgICAgICAgICAgb29wcy5hdWRpby5sb2FkKCk7XHJcblxyXG4gICAgICAgICAgICAvLyDliJvlu7rml7bpl7TmqKHlnZdcclxuICAgICAgICAgICAgb29wcy50aW1lciA9IHRoaXMucGVyc2lzdC5hZGRDb21wb25lbnQoVGltZXJNYW5hZ2VyKSE7XHJcblxyXG4gICAgICAgICAgICAvLyDmuLjmiI/lnLrmma/nrqHnkIZcclxuICAgICAgICAgICAgb29wcy5nYW1lID0gbmV3IEdhbWVNYW5hZ2VyKHRoaXMuZ2FtZSk7XHJcblxyXG4gICAgICAgICAgICAvLyDmuLjmiI/nlYzpnaLnrqHnkIZcclxuICAgICAgICAgICAgb29wcy5ndWkgPSBuZXcgTGF5ZXJNYW5hZ2VyKCk7XHJcbiAgICAgICAgICAgIG9vcHMuZ3VpLm1vYmlsZVNhZmVBcmVhID0gb29wcy5jb25maWcuZ2FtZS5tb2JpbGVTYWZlQXJlYTtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIG9vcHMuZ3VpLmluaXRMYXllcih0aGlzLmd1aSk7XHJcblxyXG4gICAgICAgICAgICAvLyDnvZHnu5zmqKHlnZdcclxuICAgICAgICAgICAgb29wcy5odHRwLnNlcnZlciA9IG9vcHMuY29uZmlnLmdhbWUuaHR0cFNlcnZlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEh0dHAg5pyN5Yqh5Zmo5Zyw5Z2AXHJcbiAgICAgICAgICAgIG9vcHMuaHR0cC50aW1lb3V0ID0gb29wcy5jb25maWcuZ2FtZS5odHRwVGltZW91dDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIdHRwIOivt+axgui2heaXtuaXtumXtFxyXG5cclxuICAgICAgICAgICAgLy8g5Yid5aeL5YyW5q+P56eS5Lyg6L6T5bin5pWwXHJcbiAgICAgICAgICAgIGdhbWUuZnJhbWVSYXRlID0gb29wcy5jb25maWcuZ2FtZS5mcmFtZVJhdGU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICAgICAgdGhpcy5ydW4oKTtcclxuXHJcbiAgICAgICAgICAgIG9vcHMucmVzLnJlbGVhc2UoY29uZmlnX25hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkQ29uZmlnKCkudGhlbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIG9vcHMuZWNzLmV4ZWN1dGUoZHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliJ3lp4vljJblvIDlp4sgKi9cclxuICAgIHByb3RlY3RlZCBpbmlTdGFydCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWIneWni+WMlua4uOaIj+eVjOmdoiAqL1xyXG4gICAgcHJvdGVjdGVkIGluaXRHdWkoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliJ3lp4vljJbmuLjmiI/kuJrliqHmqKHlnZcgKi9cclxuICAgIHByb3RlY3RlZCBpbml0RWNzU3lzdGVtKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yqg6L295a6M5byV5pOO6YWN572u5paH5Lu25ZCO5omn6KGMICovXHJcbiAgICBwcm90ZWN0ZWQgcnVuKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5pbml0R3VpKCk7XHJcbiAgICAgICAgdGhpcy5pbml0RWNzU3lzdGVtKCk7XHJcbiAgICAgICAgb29wcy5lY3MuaW5pdCgpO1xyXG5cclxuICAgICAgICAvLyDmuLjmiI/mmL7npLrkuovku7ZcclxuICAgICAgICBnYW1lLm9uKEdhbWUuRVZFTlRfU0hPVywgdGhpcy5vblNob3csIHRoaXMpO1xyXG4gICAgICAgIC8vIOa4uOaIj+makOiXj+S6i+S7tlxyXG4gICAgICAgIGdhbWUub24oR2FtZS5FVkVOVF9ISURFLCB0aGlzLm9uSGlkZSwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIOa4uOaIj+WwuuWvuOS/ruaUueS6i+S7tlxyXG4gICAgICAgIGlmICghc3lzLmlzTW9iaWxlKSB7XHJcbiAgICAgICAgICAgIHNjcmVlbi5vbihcIndpbmRvdy1yZXNpemVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgb29wcy5tZXNzYWdlLmRpc3BhdGNoRXZlbnQoRXZlbnRNZXNzYWdlLkdBTUVfUkVTSVpFKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICBzY3JlZW4ub24oXCJmdWxsc2NyZWVuLWNoYW5nZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBvb3BzLm1lc3NhZ2UuZGlzcGF0Y2hFdmVudChFdmVudE1lc3NhZ2UuR0FNRV9GVUxMX1NDUkVFTik7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2NyZWVuLm9uKFwib3JpZW50YXRpb24tY2hhbmdlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgb29wcy5tZXNzYWdlLmRpc3BhdGNoRXZlbnQoRXZlbnRNZXNzYWdlLkdBTUVfT1JJRU5UQVRJT04pO1xyXG4gICAgICAgIH0sIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25TaG93KCkge1xyXG4gICAgICAgIG9vcHMudGltZXIubG9hZCgpOyAgICAgICAgICAgICAgLy8g5aSE55CG5Zue5Yiw5ri45oiP5pe25YeP5Y676YCd5Y675pe26Ze0XHJcbiAgICAgICAgb29wcy5hdWRpby5yZXN1bWVBbGwoKTsgICAgICAgICAvLyDmgaLlpI3miYDmnInmmoLlgZznmoTpn7PkuZDmkq3mlL5cclxuICAgICAgICBkaXJlY3Rvci5yZXN1bWUoKTsgICAgICAgICAgICAgIC8vIOaBouWkjeaaguWBnOWcuuaZr+eahOa4uOaIj+mAu+i+ke+8jOWmguaenOW9k+WJjeWcuuaZr+ayoeacieaaguWBnOWwhuayoeS7u+S9leS6i+aDheWPkeeUn1xyXG4gICAgICAgIGdhbWUucmVzdW1lKCk7ICAgICAgICAgICAgICAgICAgLy8g5oGi5aSN5ri45oiP5Li75b6q546v44CC5YyF5ZCr77ya5ri45oiP6YC76L6R77yM5riy5p+T77yM5LqL5Lu25aSE55CG77yM6IOM5pmv6Z+z5LmQ5ZKM5omA5pyJ6Z+z5pWIXHJcbiAgICAgICAgb29wcy5tZXNzYWdlLmRpc3BhdGNoRXZlbnQoRXZlbnRNZXNzYWdlLkdBTUVfU0hPVyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkhpZGUoKSB7XHJcbiAgICAgICAgb29wcy50aW1lci5zYXZlKCk7ICAgICAgICAgICAgIC8vIOWkhOeQhuWIh+WIsOWQjuWPsOWQjuiusOW9leWIh+WHuuaXtumXtFxyXG4gICAgICAgIG9vcHMuYXVkaW8ucGF1c2VBbGwoKTsgICAgICAgICAvLyDmmoLlgZzmiYDmnInpn7PkuZDmkq3mlL5cclxuICAgICAgICBkaXJlY3Rvci5wYXVzZSgpOyAgICAgICAgICAgICAgLy8g5pqC5YGc5q2j5Zyo6L+Q6KGM55qE5Zy65pmv77yM6K+l5pqC5YGc5Y+q5Lya5YGc5q2i5ri45oiP6YC76L6R5omn6KGM77yM5L2G5piv5LiN5Lya5YGc5q2i5riy5p+T5ZKMIFVJIOWTjeW6lOOAgiDlpoLmnpzmg7PopoHmm7TlvbvlupXlvpfmmoLlgZzmuLjmiI/vvIzljIXlkKvmuLLmn5PvvIzpn7PpopHlkozkuovku7ZcclxuICAgICAgICBnYW1lLnBhdXNlKCk7ICAgICAgICAgICAgICAgICAgLy8g5pqC5YGc5ri45oiP5Li75b6q546v44CC5YyF5ZCr77ya5ri45oiP6YC76L6R44CB5riy5p+T44CB6L6T5YWl5LqL5Lu25rS+5Y+R77yIV2ViIOWSjOWwj+a4uOaIj+W5s+WPsOmZpOWklu+8iVxyXG4gICAgICAgIG9vcHMubWVzc2FnZS5kaXNwYXRjaEV2ZW50KEV2ZW50TWVzc2FnZS5HQU1FX0hJREUpO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wNy0yNiAxNToyOTo1N1xyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wMiAxMjowODoyOFxyXG4gKi9cclxuaW1wb3J0IHsgTm9kZSwgUXVhdCwgdG9SYWRpYW4sIFZlYzMgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgVmVjM1V0aWwgfSBmcm9tIFwiLi9WZWMzVXRpbFwiO1xyXG5cclxuLyoqIOaXi+i9rOW3peWFtyAqL1xyXG5leHBvcnQgY2xhc3MgUm90YXRlVXRpbCB7XHJcbiAgICAvKipcclxuICAgICAqIOiHqueUseaXi+i9rFxyXG4gICAgICogQHBhcmFtIHRhcmdldCAgICAg5peL6L2s55uu5qCHXHJcbiAgICAgKiBAcGFyYW0gYXhpcyAgICAgICDlm7Tnu5Xml4vovaznmoTovbRcclxuICAgICAqIEBwYXJhbSByYWQgICAgICAgIOaXi+i9rOW8p+W6plxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcm90YXRlQXJvdW5kKHRhcmdldDogTm9kZSwgYXhpczogVmVjMywgcmFkOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBxdWF0ID0gbmV3IFF1YXQoKTtcclxuICAgICAgICBRdWF0LnJvdGF0ZUFyb3VuZChxdWF0LCB0YXJnZXQuZ2V0Um90YXRpb24oKSwgYXhpcy5ub3JtYWxpemUoKSwgcmFkKTtcclxuICAgICAgICB0YXJnZXQuc2V0Um90YXRpb24ocXVhdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlj4LogIPnnoTlh4bnm67moIcs5L2/5b2T5YmN54mp5L2T5Zu057uV556E5YeG55uu5qCH5peL6L2sXHJcbiAgICAgKiAx44CB5YWI6YCa6L+H5byn5bqm6K6h566X5peL6L2s5Zub5YWD5pWwXHJcbiAgICAgKiAy44CB6YCa6L+H5peL6L2s5Lit5b+D54K55oiW5b2T5YmN55uu5qCH54K55ZCR6YeP55u45YeP6K6h566X5Ye656e75Yqo5pa55ZCRXHJcbiAgICAgKiAz44CB6K6h566X6LW35aeL5ZCR6YeP5peL6L2s5ZCO55qE5ZCR6YePXHJcbiAgICAgKiA044CB6K6h566X5peL6L2s5ZCO55qE5Z2Q5qCH54K5XHJcbiAgICAgKiBAcGFyYW0gbG9va0F0ICAgICAgICDnnoTlh4bnm67moIdcclxuICAgICAqIEBwYXJhbSB0YXJnZXQgICAgICAgIOaXi+i9rOebruagh1xyXG4gICAgICogQHBhcmFtIGF4aXMgICAgICAgICAg5Zu057uV5peL6L2s55qE6L20KOS+i++8mlZlYzMuVVDkuLpZ6L20KVxyXG4gICAgICogQHBhcmFtIHJhZCAgICAgICAgICAg5peL6L2s5byn5bqmKOS+i++8mmRlbHRhLnggKiAxZS0yKVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcm90YXRlQXJvdW5kVGFyZ2V0KGxvb2tBdDogTm9kZSwgdGFyZ2V0OiBOb2RlLCBheGlzOiBWZWMzLCByYWQ6IG51bWJlcikge1xyXG4gICAgICAgIC8vIOiuoeeul+WdkOagh1xyXG4gICAgICAgIGNvbnN0IHBvaW50X2xvb2tBdCA9IGxvb2tBdC53b3JsZFBvc2l0aW9uOyAgICAgICAgICAgICAgIC8vIOmUmueCueWdkOagh1xyXG4gICAgICAgIGNvbnN0IHBvaW50X3RhcmdldCA9IHRhcmdldC53b3JsZFBvc2l0aW9uOyAgICAgICAgICAgICAgIC8vIOebruagh+WdkOagh1xyXG4gICAgICAgIGNvbnN0IHF1YXQgPSBuZXcgUXVhdCgpO1xyXG4gICAgICAgIGNvbnN0IHZlYzMgPSBuZXcgVmVjMygpO1xyXG5cclxuICAgICAgICAvLyDnrpflh7rlnZDmoIfngrnnmoTml4vovazlm5vlhYPmlbBcclxuICAgICAgICBRdWF0LmZyb21BeGlzQW5nbGUocXVhdCwgYXhpcywgcmFkKTtcclxuICAgICAgICAvLyDorqHnrpfml4vovazngrnlkoznjrDmnInngrnnmoTlkJHph49cclxuICAgICAgICBWZWMzLnN1YnRyYWN0KHZlYzMsIHBvaW50X3RhcmdldCwgcG9pbnRfbG9va0F0KTtcclxuICAgICAgICAvLyDorqHnrpflsIblkJHph4/lgZrml4vovazmk43kvZzlkI7nmoTlkJHph49cclxuICAgICAgICBWZWMzLnRyYW5zZm9ybVF1YXQodmVjMywgdmVjMywgcXVhdCk7XHJcbiAgICAgICAgLy8g6K6h566X55uu5qCH5peL6L2s5ZCO55qE54K5XHJcbiAgICAgICAgVmVjMy5hZGQodmVjMywgcG9pbnRfbG9va0F0LCB2ZWMzKTtcclxuICAgICAgICB0YXJnZXQuc2V0V29ybGRQb3NpdGlvbih2ZWMzKTtcclxuXHJcbiAgICAgICAgLy8g6K6h566X55uu5qCH5pyd5ZCR556E5YeG54K5XHJcbiAgICAgICAgUXVhdC5yb3RhdGVBcm91bmQocXVhdCwgdGFyZ2V0LndvcmxkUm90YXRpb24sIGF4aXMsIHJhZCk7XHJcbiAgICAgICAgUXVhdC5ub3JtYWxpemUocXVhdCwgcXVhdCk7XHJcbiAgICAgICAgdGFyZ2V0LnNldFdvcmxkUm90YXRpb24ocXVhdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5blv4PljYrlvoTovrnkuIrnmoTkvY3nva5cclxuICAgICAqIEBwYXJhbSBjZW50ZXIgICAg5ZyG5b+DXHJcbiAgICAgKiBAcGFyYW0gcmFkaXVzICAgIOWNiuW+hFxyXG4gICAgICogQHBhcmFtIGFuZ2xlICAgICDop5LluqZcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNpcmN1bGFyRWRnZVBvc2l0aW9uKGNlbnRlcjogVmVjMywgcmFkaXVzOiBudW1iZXIsIGFuZ2xlOiBudW1iZXIpOiBWZWMzIHtcclxuICAgICAgICBjb25zdCBlZGdlID0gVmVjM1V0aWwuei5tdWx0aXBseVNjYWxhcihyYWRpdXMpOyAgICAgICAgICAgICAgICAgIC8vIOi3neemu+WchuW/g1rmir3nmoTot53nprtcclxuICAgICAgICBjb25zdCBkaXIgPSBWZWMzVXRpbC5zdWIoZWRnZSwgY2VudGVyKTsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWIneWni+WchuW/g+S4juebruagh+S9jee9rueahOaWueWQkVxyXG4gICAgICAgIGNvbnN0IHZlYzMgPSBuZXcgVmVjMygpO1xyXG4gICAgICAgIGNvbnN0IHF1YXQgPSBuZXcgUXVhdCgpO1xyXG5cclxuICAgICAgICAvLyDnrpflh7rlnZDmoIfngrnnmoTml4vovazlm5vlhYPmlbBcclxuICAgICAgICBRdWF0LmZyb21BeGlzQW5nbGUocXVhdCwgVmVjMy5VUCwgdG9SYWRpYW4oYW5nbGUpKTtcclxuICAgICAgICAvLyDorqHnrpflsIblkJHph4/lgZrml4vovazmk43kvZzlkI7nmoTlkJHph49cclxuICAgICAgICBWZWMzLnRyYW5zZm9ybVF1YXQodmVjMywgZGlyLCBxdWF0KTtcclxuICAgICAgICAvLyDorqHnrpfnm67moIfml4vovazlkI7nmoTngrlcclxuICAgICAgICBWZWMzLmFkZCh2ZWMzLCBjZW50ZXIsIHZlYzMpO1xyXG5cclxuICAgICAgICByZXR1cm4gdmVjMztcclxuICAgIH1cclxufSIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENhbWVyYSwgQ29tcG9uZW50LCBnZngsIE1lc2hSZW5kZXJlciwgUmVuZGVyVGV4dHVyZSwgdmlldyB9IGZyb20gJ2NjJztcclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiDkuInnu7TmkYTlg4/mnLrlhoXlrrnmmL7npLrliLDmqKHlnovkuIogKi9cclxuQGNjY2xhc3MoJ1J0VG9Nb2RlbCcpXHJcbmV4cG9ydCBjbGFzcyBSdFRvTW9kZWwgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KENhbWVyYSlcclxuICAgIGNhbWFyYTogQ2FtZXJhID0gbnVsbCE7XHJcblxyXG4gICAgQHByb3BlcnR5KE1lc2hSZW5kZXJlcilcclxuICAgIG1vZGVsOiBNZXNoUmVuZGVyZXIgPSBudWxsITtcclxuXHJcbiAgICBwcml2YXRlIHJ0OiBSZW5kZXJUZXh0dXJlID0gbmV3IFJlbmRlclRleHR1cmUoKTtcclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICBjb25zdCBzaXplID0gdmlldy5nZXRWaXNpYmxlU2l6ZSgpO1xyXG4gICAgICAgIGNvbnN0IGNvbG9yQXR0YWNobWVudCA9IG5ldyBnZnguQ29sb3JBdHRhY2htZW50KCk7XHJcbiAgICAgICAgY29uc3QgZGVwdGhTdGVuY2lsQXR0YWNobWVudCA9IG5ldyBnZnguRGVwdGhTdGVuY2lsQXR0YWNobWVudCgpO1xyXG4gICAgICAgIGNvbnN0IHBpID0gbmV3IGdmeC5SZW5kZXJQYXNzSW5mbyhbY29sb3JBdHRhY2htZW50XSwgZGVwdGhTdGVuY2lsQXR0YWNobWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMucnQucmVzZXQoe1xyXG4gICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcclxuICAgICAgICAgICAgcGFzc0luZm86IHBpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2FtYXJhLnRhcmdldFRleHR1cmUgPSB0aGlzLnJ0O1xyXG4gICAgICAgIGNvbnN0IG1hdCA9IHRoaXMubW9kZWwubWF0ZXJpYWwhO1xyXG4gICAgICAgIG1hdC5zZXRQcm9wZXJ0eSgnbWFpblRleHR1cmUnLCB0aGlzLnJ0KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5ydC5kZXN0cm95KCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2FtZXJhLCBDb21wb25lbnQsIEV2ZW50VG91Y2gsIE5vZGUsIFJlbmRlclRleHR1cmUsIFNwcml0ZSwgU3ByaXRlRnJhbWUsIFVJVHJhbnNmb3JtLCBWZWMzLCBfZGVjb3JhdG9yLCBnZnggfSBmcm9tICdjYyc7XHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHkgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog5LiJ57u05qih5Z6L5pi+56S65Yiw5LqM57u057K+54G15LiKICovXHJcbkBjY2NsYXNzKCdSdFRvU3ByaXRlJylcclxuZXhwb3J0IGNsYXNzIFJ0VG9TcHJpdGUgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBDYW1lcmEsXHJcbiAgICAgICAgdG9vbHRpcDogXCLmuLLmn5PmqKHlnovnmoTkuInnu7TmkYTlg4/mnLpcIlxyXG4gICAgfSlcclxuICAgIGNhbWVyYTogQ2FtZXJhIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBTcHJpdGUsXHJcbiAgICAgICAgdG9vbHRpcDogXCLmmL7npLrmqKHlnovnmoTkuoznu7Tnsr7ngbXnu4Tku7ZcIlxyXG4gICAgfSlcclxuICAgIHNwcml0ZTogU3ByaXRlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiBcIuaYr+WQpuinpuaRuOaOp+WItuaXi+i9rFwiXHJcbiAgICB9KVxyXG4gICAgcm90YXRpb246IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IE5vZGUsXHJcbiAgICAgICAgdG9vbHRpcDogXCLkuInnu7TmqKHlnotcIixcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yb3RhdGlvbiA9PT0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG4gICAgfSlcclxuICAgIG1vZGVsOiBOb2RlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBydDogUmVuZGVyVGV4dHVyZSA9IG5ldyBSZW5kZXJUZXh0dXJlKCk7XHJcbiAgICBwcml2YXRlIHRvdWNoZWQgPSBmYWxzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOaYr+WQpuinpuaRuOiKgueCuVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGxldCBzaXplID0gdGhpcy5zcHJpdGUhLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkhO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaFJlbmRlclRleHR1cmUoc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5yb3RhdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZSEubm9kZS5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy5vblRvdWNoU3RhcnQsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZSEubm9kZS5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9NT1ZFLCB0aGlzLm9uVG91Y2hNb3ZlLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5zcHJpdGUhLm5vZGUub24oTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLm9uVG91Y2hFbmQsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZSEubm9kZS5vbihOb2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwsIHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvblRvdWNoU3RhcnQoZXZlbnQ6IEV2ZW50VG91Y2gpIHtcclxuICAgICAgICB0aGlzLnRvdWNoZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvblRvdWNoTW92ZShldmVudDogRXZlbnRUb3VjaCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRvdWNoZWQpIHtcclxuICAgICAgICAgICAgbGV0IGV1bGVyQW5nbGVzOiBWZWMzID0gdGhpcy5tb2RlbCEuZXVsZXJBbmdsZXM7XHJcbiAgICAgICAgICAgIGxldCBkZWx0YVggPSBldmVudC50b3VjaCEuZ2V0RGVsdGEoKS54ITtcclxuICAgICAgICAgICAgZXVsZXJBbmdsZXMueSArPSAtZGVsdGFYO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsIS5ldWxlckFuZ2xlcyA9IGV1bGVyQW5nbGVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Ub3VjaEVuZChldmVudDogRXZlbnRUb3VjaCkge1xyXG4gICAgICAgIHRoaXMudG91Y2hlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDliLfmlrDnurnnkIblhoXlrrkgKi9cclxuICAgIHJlZnJlc2hSZW5kZXJUZXh0dXJlKHc6IG51bWJlciwgaDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY29sb3JBdHRhY2htZW50ID0gbmV3IGdmeC5Db2xvckF0dGFjaG1lbnQoKTtcclxuICAgICAgICBjb25zdCBkZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0gbmV3IGdmeC5EZXB0aFN0ZW5jaWxBdHRhY2htZW50KCk7XHJcbiAgICAgICAgY29uc3QgcGkgPSBuZXcgZ2Z4LlJlbmRlclBhc3NJbmZvKFtjb2xvckF0dGFjaG1lbnRdLCBkZXB0aFN0ZW5jaWxBdHRhY2htZW50KTtcclxuXHJcbiAgICAgICAgdGhpcy5ydC5yZXNldCh7XHJcbiAgICAgICAgICAgIHdpZHRoOiB3LFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGgsXHJcbiAgICAgICAgICAgIHBhc3NJbmZvOiBwaVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgc3ByaXRlZnJhbWU6IFNwcml0ZUZyYW1lID0gdGhpcy5zcHJpdGUhLnNwcml0ZUZyYW1lITtcclxuICAgICAgICBsZXQgc3A6IFNwcml0ZUZyYW1lID0gbmV3IFNwcml0ZUZyYW1lKCk7XHJcbiAgICAgICAgc3AucmVzZXQoe1xyXG4gICAgICAgICAgICBvcmlnaW5hbFNpemU6IHNwcml0ZWZyYW1lLm9yaWdpbmFsU2l6ZSxcclxuICAgICAgICAgICAgcmVjdDogc3ByaXRlZnJhbWUucmVjdCxcclxuICAgICAgICAgICAgb2Zmc2V0OiBzcHJpdGVmcmFtZS5vZmZzZXQsXHJcbiAgICAgICAgICAgIGlzUm90YXRlOiBzcHJpdGVmcmFtZS5yb3RhdGVkLFxyXG4gICAgICAgICAgICBib3JkZXJUb3A6IHNwcml0ZWZyYW1lLmluc2V0VG9wLFxyXG4gICAgICAgICAgICBib3JkZXJMZWZ0OiBzcHJpdGVmcmFtZS5pbnNldExlZnQsXHJcbiAgICAgICAgICAgIGJvcmRlckJvdHRvbTogc3ByaXRlZnJhbWUuaW5zZXRCb3R0b20sXHJcbiAgICAgICAgICAgIGJvcmRlclJpZ2h0OiBzcHJpdGVmcmFtZS5pbnNldFJpZ2h0LFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmNhbWVyYSEudGFyZ2V0VGV4dHVyZSA9IHRoaXMucnQ7XHJcbiAgICAgICAgc3AudGV4dHVyZSA9IHRoaXMucnQ7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUhLnNwcml0ZUZyYW1lID0gc3A7XHJcbiAgICB9XHJcblxyXG4gICAgb25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnJvdGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlIS5ub2RlLm9mZihOb2RlLkV2ZW50VHlwZS5UT1VDSF9TVEFSVCwgdGhpcy5vblRvdWNoU3RhcnQsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnNwcml0ZSEubm9kZS5vZmYoTm9kZS5FdmVudFR5cGUuVE9VQ0hfTU9WRSwgdGhpcy5vblRvdWNoTW92ZSwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlIS5ub2RlLm9mZihOb2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsIHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuc3ByaXRlIS5ub2RlLm9mZihOb2RlLkV2ZW50VHlwZS5UT1VDSF9DQU5DRUwsIHRoaXMub25Ub3VjaEVuZCwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucnQuZGVzdHJveSgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFJhbmRvbU1hbmFnZXIgfSBmcm9tIFwiLi9SYW5kb21NYW5hZ2VyXCI7XHJcblxyXG4vKiog5Lyq6ZqP5py6ICovXHJcbmV4cG9ydCBjbGFzcyBTZWVkUmFuZG9tIHtcclxuICAgIHByaXZhdGUgcm06IFJhbmRvbU1hbmFnZXI7XHJcbiAgICBwcml2YXRlIHNyOiBhbnk7XHJcblxyXG4gICAgZ2V0IHJhbmRvbSgpOiBSYW5kb21NYW5hZ2VyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ybTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzZWVkOiBzdHJpbmcpIHtcclxuICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICB0aGlzLnNyID0gbmV3IE1hdGguc2VlZHJhbmRvbShzZWVkKTtcclxuICAgICAgICB0aGlzLnJtID0gbmV3IFJhbmRvbU1hbmFnZXIoKTtcclxuICAgICAgICB0aGlzLnJtLnNldFJhbmRvbSh0aGlzLnNyKTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMucm0gPSBudWxsITtcclxuICAgICAgICB0aGlzLnNyID0gbnVsbCE7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBfZGVjb3JhdG9yLCBDb21wb25lbnQsIE5vZGUgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IG9vcHMgfSBmcm9tICdkYjovL29vcHMtZnJhbWV3b3JrL2NvcmUvT29wcyc7XHJcbmltcG9ydCB7IFJvb3QgfSBmcm9tICdkYjovL29vcHMtZnJhbWV3b3JrL2NvcmUvUm9vdCc7XHJcbmltcG9ydCB7IGVjcyB9IGZyb20gJ2RiOi8vb29wcy1mcmFtZXdvcmsvbGlicy9lY3MvRUNTJztcclxuaW1wb3J0IHsgQ0NDb21wIH0gZnJvbSAnZGI6Ly9vb3BzLWZyYW1ld29yay9tb2R1bGUvY29tbW9uL0NDQ29tcCc7XHJcbmltcG9ydCB7IEdhbWVFdmVudCB9IGZyb20gJy4uL2dhbWUvY29tbW9uL2NvbmZpZy9HYW1lRXZlbnQnO1xyXG5pbXBvcnQgeyBWYWN1dW1DbGVhbmVyQW5pIH0gZnJvbSAnLi9iYXNlL2RhdGFJbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IHNwIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBlcnJvciB9IGZyb20gJ2NvbnNvbGUnO1xyXG5pbXBvcnQgeyBTcHJpdGVGcmFtZSB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnY2MnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ3NlbGVjdEZ1bicpXHJcbkBlY3MucmVnaXN0ZXIoJ3NlbGVjdEZ1blZpZXcnLCBmYWxzZSlcclxuZXhwb3J0IGNsYXNzIHNlbGVjdEZ1biBleHRlbmRzIENDQ29tcCB7XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBuZExlZnQ6Tm9kZSB8IG51bGw9bnVsbDtcclxuXHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIG5kUmlnaHQ6Tm9kZSB8IG51bGw9bnVsbDtcclxuXHJcbiAgICByZXNldCgpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIG9vcHMubWVzc2FnZS5vbihHYW1lRXZlbnQubW9kaWZ5RnVuSW1nLCB0aGlzLnJpZ2h0SW1nU3RhdGUsIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0YnV0dG9uPXRoaXMubmRSaWdodD8uZ2V0Q29tcG9uZW50KEJ1dHRvbilcclxuICAgICAgICBpZihyaWdodGJ1dHRvbilyaWdodGJ1dHRvbi5pbnRlcmFjdGFibGU9ZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICBPbmNsaWNCb3R0b24oZGF0YTphbnkpe1xyXG4gICAgICAgaWYoZGF0YS50YXJnZXQubmFtZT09J2xlZnQnKXtcclxuICAgICAgICAgICAgb29wcy5tZXNzYWdlLmRpc3BhdGNoRXZlbnQoR2FtZUV2ZW50LlZhY3V1bUNsZWFuZXJBbmkse25hbWU6J+eJm+mAvCcsaW1nOifmsqHmnIknfSBhcyBWYWN1dW1DbGVhbmVyQW5pKVxyXG4gICAgICAgICAgICBjb25zdCBzcHJpZT10aGlzLm5kTGVmdD8uZ2V0Q29tcG9uZW50KFNwcml0ZSlcclxuICAgICAgICAgICAgaWYoc3ByaWUgJiYgc3ByaWUuc3ByaXRlRnJhbWUpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkSW1nKHRoaXMubmRMZWZ0IGFzIE5vZGUsYG9uZV9sZWZ0X25vbmVgKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RpZnlCdXR0b25TdGF0ZSgnbGVmdCcpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgIH1cclxuICAgICAgIGlmKGRhdGEudGFyZ2V0Lm5hbWU9PSdyaWdodCcpe1xyXG4gICAgICAgICAgICBvb3BzLm1lc3NhZ2UuZGlzcGF0Y2hFdmVudChHYW1lRXZlbnQuSG0pXHJcbiAgICAgICAgICAgIGNvbnN0IHNwcmllPXRoaXMubmRSaWdodD8uZ2V0Q29tcG9uZW50KFNwcml0ZSlcclxuICAgICAgICAgICAgaWYoc3ByaWUgJiYgc3ByaWUuc3ByaXRlRnJhbWUpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkSW1nKHRoaXMubmRSaWdodCBhcyBOb2RlLGBvbmVfcmlnaHRfbm9uZWApXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGlmeUJ1dHRvblN0YXRlKCdyaWdodCcpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKirkv67mlLnngrnlh7vnirbmgIEgKi9cclxuICAgIG1vZGlmeUJ1dHRvblN0YXRlKG5hbWU6c3RyaW5nKXtcclxuICAgICAgICBsZXQgbmROYW1lPXRoaXMubmRMZWZ0XHJcbiAgICAgICAgaWYobmFtZT09J2xlZnQnKW5kTmFtZT10aGlzLm5kTGVmdFxyXG4gICAgICAgIGlmKG5hbWU9PSdyaWdodCcpbmROYW1lPXRoaXMubmRSaWdodFxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbj1uZE5hbWU/LmdldENvbXBvbmVudChCdXR0b24pXHJcbiAgICAgICAgaWYoYnV0dG9uKWJ1dHRvbi5pbnRlcmFjdGFibGU9ZmFsc2VcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoq5L+u5pS55Y+z5L6n5Zu+54mHICovXHJcbiAgICByaWdodEltZ1N0YXRlKCl7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZEltZyh0aGlzLm5kUmlnaHQgYXMgTm9kZSxgb25lX3JpZ2h0X2FjdGl2ZWApXHJcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0YnV0dG9uPXRoaXMubmRSaWdodD8uZ2V0Q29tcG9uZW50KEJ1dHRvbilcclxuICAgICAgICAgICAgaWYocmlnaHRidXR0b24pcmlnaHRidXR0b24uaW50ZXJhY3RhYmxlPXRydWVcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoq5L+u5pS55Zu+54mHICovXHJcbiAgICBsb2FkSW1nKGltZ05vZGU6Tm9kZSx1cmxOYW1lOnN0cmluZyl7XHJcbiAgICAgICAgb29wcy5yZXMubG9hZCgncmVzb3VyY2VzJyxgaW1nL3NlbGVjdEZ1bi8ke3VybE5hbWV9L3Nwcml0ZUZyYW1lYCxTcHJpdGVGcmFtZSwoZXJyb3I6YW55LGRhdGE6U3ByaXRlRnJhbWUpPT57XHJcbiAgICAgICAgICAgIGlmKGVycm9yKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLliqDovb3lm77niYflpLHotKXvvJpcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVJbmZvPSBpbWdOb2RlLmdldENvbXBvbmVudChTcHJpdGUpXHJcbiAgICAgICAgICAgIGlmKG5vZGVJbmZvKW5vZGVJbmZvLnNwcml0ZUZyYW1lPWRhdGFcclxuICAgICAgICB9KVxyXG5cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lOiBudW1iZXIpIHtcclxuICAgICAgICBcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDYtMjEgMTI6MDU6MTRcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDctMjAgMTQ6MDU6NDBcclxuICovXHJcbmltcG9ydCB7IEJyYW5jaE5vZGUgfSBmcm9tICcuL0JyYW5jaE5vZGUnO1xyXG5cclxuLyoqIFxyXG4gKiDpgLvovpHmiJblhbPns7tcclxuICog5Y+q6KaB5a2Q6IqC54K55pyJ5LiA5Liq6L+U5ZuedHJ1Ze+8jOWImeWBnOatouaJp+ihjOWFtuWug+WtkOiKgueCue+8jOW5tuS4lFNlbGVjdG9y6L+U5ZuedHJ1ZeOAguWmguaenOaJgOacieWtkOiKgueCuemDvei/lOWbnmZhbHNl77yM5YiZU2VsZWN0b3Lov5Tlm55mYWxzZeOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNlbGVjdG9yIGV4dGVuZHMgQnJhbmNoTm9kZSB7XHJcbiAgICBwdWJsaWMgc3VjY2VzcygpIHtcclxuICAgICAgICBzdXBlci5zdWNjZXNzKClcclxuICAgICAgICB0aGlzLl9jb250cm9sLnN1Y2Nlc3MoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmFpbCgpIHtcclxuICAgICAgICBzdXBlci5mYWlsKClcclxuXHJcbiAgICAgICAgdGhpcy5fYWN0dWFsVGFzayArPSAxO1xyXG4gICAgICAgIGlmICh0aGlzLl9hY3R1YWxUYXNrIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5fcnVuKHRoaXMuX2JsYWNrYm9hcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udHJvbC5mYWlsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfcnVuKGJsYWNrYm9hcmQ/OiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5fbm9kZVJ1bm5pbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm9kZVJ1bm5pbmcucnVuKHRoaXMuX2JsYWNrYm9hcmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3VwZXIuX3J1bigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIyLTA2LTIxIDEyOjA1OjE0XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIyLTA3LTIwIDE0OjA1OjIyXHJcbiAqL1xyXG5pbXBvcnQgeyBCcmFuY2hOb2RlIH0gZnJvbSAnLi9CcmFuY2hOb2RlJztcclxuaW1wb3J0IHsgQlRyZWVOb2RlIH0gZnJvbSAnLi9CVHJlZU5vZGUnO1xyXG5cclxuLyoqIFxyXG4gKiDpgLvovpHkuI7lhbPns7tcclxuICog5Y+q6KaB5pyJ5LiA5Liq5a2Q6IqC54K56L+U5ZueZmFsc2XvvIzliJnlgZzmraLmiafooYzlhbblroPlrZDoioLngrnvvIzlubbkuJRTZXF1ZW5jZei/lOWbnmZhbHNl44CC5aaC5p6c5omA5pyJ5a2Q6IqC54K56YO96L+U5ZuedHJ1Ze+8jOWImVNlcXVlbmNl6L+U5ZuedHJ1ZeOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNlcXVlbmNlIGV4dGVuZHMgQnJhbmNoTm9kZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihub2RlczogQXJyYXk8QlRyZWVOb2RlPikge1xyXG4gICAgICAgIHN1cGVyKG5vZGVzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3VjY2VzcygpIHtcclxuICAgICAgICBzdXBlci5zdWNjZXNzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2FjdHVhbFRhc2sgKz0gMTtcclxuICAgICAgICBpZiAodGhpcy5fYWN0dWFsVGFzayA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3J1bih0aGlzLl9ibGFja2JvYXJkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2wuc3VjY2VzcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZmFpbCgpIHtcclxuICAgICAgICBzdXBlci5mYWlsKCk7XHJcbiAgICAgICAgdGhpcy5fY29udHJvbC5mYWlsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9ydW4oYmxhY2tib2FyZD86IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9ub2RlUnVubmluZykge1xyXG4gICAgICAgICAgICB0aGlzLl9ub2RlUnVubmluZy5ydW4odGhpcy5fYmxhY2tib2FyZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdXBlci5fcnVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENvbXBvbmVudCwgTm9kZSB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgb29wcyB9IGZyb20gJ2RiOi8vb29wcy1mcmFtZXdvcmsvY29yZS9Pb3BzJztcclxuaW1wb3J0IHsgUm9vdCB9IGZyb20gJ2RiOi8vb29wcy1mcmFtZXdvcmsvY29yZS9Sb290JztcclxuaW1wb3J0IHsgZWNzIH0gZnJvbSAnZGI6Ly9vb3BzLWZyYW1ld29yay9saWJzL2Vjcy9FQ1MnO1xyXG5pbXBvcnQgeyBDQ0NvbXAgfSBmcm9tICdkYjovL29vcHMtZnJhbWV3b3JrL21vZHVsZS9jb21tb24vQ0NDb21wJztcclxuaW1wb3J0IHsgR2FtZUV2ZW50IH0gZnJvbSAnLi4vZ2FtZS9jb21tb24vY29uZmlnL0dhbWVFdmVudCc7XHJcbmltcG9ydCB7IFZhY3V1bUNsZWFuZXJBbmkgfSBmcm9tICcuL2Jhc2UvZGF0YUludGVyZmFjZSc7XHJcbmltcG9ydCB7IHR3ZWVuIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBTcHJpdGUgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IFNwcml0ZUZyYW1lIH0gZnJvbSAnY2MnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuQGNjY2xhc3MoJ3NoaXBNYWluJylcclxuQGVjcy5yZWdpc3Rlcignc2hpcE1haW5WaWV3JywgZmFsc2UpXHJcbmV4cG9ydCBjbGFzcyBzaGlwTWFpbiBleHRlbmRzIENDQ29tcCB7XHJcblxyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBuZFZhY3V1bUNsZWFuZXI6Tm9kZSB8IG51bGwgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBxaXU6Tm9kZSB8IG51bGwgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICB5YXppOk5vZGUgfCBudWxsID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgbGFqaTpOb2RlIHwgbnVsbCA9IG51bGw7XHJcbiAgICBAcHJvcGVydHkoTm9kZSlcclxuICAgIHljOk5vZGUgfCBudWxsID0gbnVsbDtcclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgaG06Tm9kZSB8IG51bGwgPSBudWxsO1xyXG4gICAgQHByb3BlcnR5KE5vZGUpXHJcbiAgICBwbGF5ZXJFbW86Tm9kZSB8IG51bGwgPSBudWxsO1xyXG5cclxuXHJcbiAgICByZXNldCgpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25Mb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIG9vcHMuYXVkaW8ucGxheU11c2ljTG9vcChcImF1ZGlvL2JnbVwiLCdyZXNvdXJjZXMnKVxyXG4gICAgICAgIG9vcHMuYXVkaW8ucGxheUVmZmVjdChcImF1ZGlvL3doaXN0bGVcIiwncmVzb3VyY2VzJylcclxuICAgICAgICBvb3BzLm1lc3NhZ2Uub24oR2FtZUV2ZW50LlZhY3V1bUNsZWFuZXJBbmksIHRoaXMuUGxheVZhY3V1bUNsZWFuZXIsIHRoaXMpO1xyXG4gICAgICAgIG9vcHMubWVzc2FnZS5vbihHYW1lRXZlbnQuSG0sIHRoaXMuUGxheUhtLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGFydCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoq5aSE55CG5ZC45bCY5Zmo5Yqo55S7ICovXHJcbiAgICBQbGF5VmFjdXVtQ2xlYW5lcihldmVudE5hbWU6c3RyaW5nLGRhdGE6VmFjdXVtQ2xlYW5lckFuaSl7XHJcbiAgICAgICAgaWYodGhpcy5uZFZhY3V1bUNsZWFuZXIpe1xyXG4gICAgICAgICAgICB0aGlzLm5kVmFjdXVtQ2xlYW5lci5hY3RpdmU9dHJ1ZVxyXG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlT25jZSgoKT0+e1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5uZFZhY3V1bUNsZWFuZXIpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcz10aGlzLm5kVmFjdXVtQ2xlYW5lci5wb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RhcmdldFBvcz1uZXcgVmVjMyhwb3MueC0yNjAscG9zLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgdHdlZW4odGhpcy5uZFZhY3V1bUNsZWFuZXIpLlxyXG4gICAgICAgICAgICAgICAgICAgIHRvKDEse3Bvc2l0aW9uOm5ld1RhcmdldFBvc30pLlxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGwoKCk9Pnt0aGlzLnBsYXlBdWRpbygpfSkuXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LDAuMSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoq5aSE55CG5rW357u15Yqo55S7ICovXHJcbiAgICBQbGF5SG0oKXtcclxuICAgICAgICBpZih0aGlzLmhtKXtcclxuICAgICAgICAgICAgdGhpcy5obS5hY3RpdmU9dHJ1ZVxyXG4gICAgICAgICAgICBjb25zdCBuZXdwb3M9dGhpcy5obS5wb3NpdGlvblxyXG4gICAgICAgICAgICBjb25zdCBobUlkPW9vcHMuYXVkaW8ucGxheUVmZmVjdChcImF1ZGlvL2htXCIsJ3Jlc291cmNlcycpXHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpPT57XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLmhtKXR3ZWVuKHRoaXMuaG0pLlxyXG4gICAgICAgICAgICAgICAgdG8oMC41LHtwb3NpdGlvbjpuZXcgVmVjMyhuZXdwb3MueC0yMDAsbmV3cG9zLnktMjApfSkuXHJcbiAgICAgICAgICAgICAgICB0bygwLjUse3Bvc2l0aW9uOm5ldyBWZWMzKG5ld3Bvcy54KzIwMCxuZXdwb3MueS00MCl9KS5cclxuICAgICAgICAgICAgICAgIHRvKDAuNSx7cG9zaXRpb246bmV3IFZlYzMobmV3cG9zLngtMjAwLG5ld3Bvcy55LTYwKX0pLlxyXG4gICAgICAgICAgICAgICAgdG8oMC41LHtwb3NpdGlvbjpuZXcgVmVjMyhuZXdwb3MueCsyMDAsbmV3cG9zLnktODApfSkuXHJcbiAgICAgICAgICAgICAgICB0bygwLjUse3Bvc2l0aW9uOm5ldyBWZWMzKG5ld3Bvcy54LTIwMCxuZXdwb3MueS0xMDApfSkuXHJcbiAgICAgICAgICAgICAgICB0bygwLjUse3Bvc2l0aW9uOm5ldyBWZWMzKG5ld3Bvcy54KzIwMCxuZXdwb3MueS0xMjApfSkuXHJcbiAgICAgICAgICAgICAgICB0bygwLjUse3Bvc2l0aW9uOm5ldyBWZWMzKG5ld3Bvcy54LTIwMCxuZXdwb3MueS0xNDApfSkuXHJcbiAgICAgICAgICAgICAgICB0bygwLjUse3Bvc2l0aW9uOm5ldyBWZWMzKG5ld3Bvcy54KzIwMCxuZXdwb3MueS0xNjApfSkuXHJcbiAgICAgICAgICAgICAgICB0bygwLjUse3Bvc2l0aW9uOm5ldyBWZWMzKG5ld3Bvcy54LTIwMCxuZXdwb3MueS0xODApfSkuXHJcbiAgICAgICAgICAgICAgICB0bygwLjUse3Bvc2l0aW9uOm5ldyBWZWMzKG5ld3Bvcy54KzIwMCxuZXdwb3MueS0yMDApfSkuXHJcbiAgICAgICAgICAgICAgICBjYWxsKGFzeW5jICgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy55Yyl0aGlzLmxvYWRJbWcodGhpcy55YywneWNfYicpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5obSl0aGlzLmhtLmFjdGl2ZT1mYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIG9vcHMuYXVkaW8ucHV0RWZmZWN0KGF3YWl0IGhtSWQsXCJhdWRpby9obVwiLCdyZXNvdXJjZXMnKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHRoaXMucGxheWVyRW1vKXRoaXMucGxheWVyRW1vLmFjdGl2ZT1mYWxzZVxyXG4gICAgICAgICAgICAgICAgfSkuXHJcbiAgICAgICAgICAgICAgICBzdGFydCgpXHJcbiAgICAgICAgICAgIH0sMC4xKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKirmkq3mlL7lkLjlsJjlmajpn7PmlYggKi9cclxuICAgIHBsYXlBdWRpbygpe1xyXG4gICAgICAgIGNvbnN0IHhjcUVmZmVjdD1vb3BzLmF1ZGlvLnBsYXlFZmZlY3QoXCJhdWRpby94Y3FcIiwncmVzb3VyY2VzJyk7XHJcbiAgICAgICAgdGhpcy5zY2hlZHVsZU9uY2UoKCk9PntcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVXYXN0ZSh4Y3FFZmZlY3QpO1xyXG4gICAgICAgIH0sMC4xKVxyXG4gICAgfVxyXG4gICAgLyoq5YWz6Zet5ZC45bCY5Zmo6Z+z5pWIICovXHJcbiAgICBjbG9zZUF1ZGlvKGF1ZGlvSWQ6UHJvbWlzZTxudW1iZXI+KXtcclxuICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShhc3luYyAoKT0+e1xyXG4gICAgICAgICAgICBvb3BzLmF1ZGlvLnB1dEVmZmVjdChhd2FpdCBhdWRpb0lkLFwiYXVkaW8veGNxXCIsJ3Jlc291cmNlcycpXHJcbiAgICAgICAgICAgIGlmKHRoaXMubmRWYWN1dW1DbGVhbmVyKXRoaXMubmRWYWN1dW1DbGVhbmVyLmFjdGl2ZT1mYWxzZVxyXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFNoaXAoKVxyXG4gICAgICAgIH0sMC41KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKuWIh+aNouazs+axoOWbvueJhyAqL1xyXG4gICAgc3dpdGNoU2hpcCgpe1xyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVPbmNlKCgpPT57XHJcbiAgICAgICAgICAgIG9vcHMubWVzc2FnZS5kaXNwYXRjaEV2ZW50KEdhbWVFdmVudC5tb2RpZnlGdW5JbWcpXHJcbiAgICAgICAgICAgIGlmKHRoaXMueWMpdGhpcy5sb2FkSW1nKHRoaXMueWMsJ3ljX2gnKVxyXG4gICAgICAgIH0sMSlcclxuICAgIH1cclxuXHJcbiAgICAvKirkv67mlLnlm77niYcgKi9cclxuICAgIGxvYWRJbWcoaW1nTm9kZTpOb2RlLHVybE5hbWU6c3RyaW5nKXtcclxuICAgICAgICBvb3BzLnJlcy5sb2FkKCdyZXNvdXJjZXMnLGBpbWcveWMvJHt1cmxOYW1lfS9zcHJpdGVGcmFtZWAsU3ByaXRlRnJhbWUsKGVycm9yOmFueSxkYXRhOlNwcml0ZUZyYW1lKT0+e1xyXG4gICAgICAgICAgICBpZihlcnJvcil7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5Yqg6L295Zu+54mH5aSx6LSl77yaXCIsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBub2RlSW5mbz0gaW1nTm9kZS5nZXRDb21wb25lbnQoU3ByaXRlKVxyXG4gICAgICAgICAgICBpZihub2RlSW5mbylub2RlSW5mby5zcHJpdGVGcmFtZT1kYXRhXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoq5aSE55CG5Z6D5Zy+ICovXHJcbiAgICBoYW5kbGVXYXN0ZShhdWRpb0lkOlByb21pc2U8bnVtYmVyPil7XHJcbiAgICAgICAgaWYodGhpcy5xaXUpe1xyXG4gICAgICAgICAgICB0d2Vlbih0aGlzLnFpdSkuXHJcbiAgICAgICAgICAgIHRvKDAuNSx7b3BhY2l0eTowfSkuXHJcbiAgICAgICAgICAgIHN0YXJ0KClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1vZGlmeVBvcz0oTW92ZU5vZGU6Tm9kZSk9PntcclxuICAgICAgICAgICAgY29uc3QgbmV3WXpQb3M9bmV3IFZlYzMoTW92ZU5vZGUueCxNb3ZlTm9kZS55LTEyMClcclxuICAgICAgICAgICAgdHdlZW4oTW92ZU5vZGUpLlxyXG4gICAgICAgICAgICB0bygyLHtwb3NpdGlvbjpuZXdZelBvcyxzY2FsZV94OjAsc2NhbGVfeTowfSkuXHJcbiAgICAgICAgICAgIGNhbGwoKCk9PntcclxuICAgICAgICAgICAgICAgIGlmKE1vdmVOb2RlLm5hbWU9PSdpbWdfdHJhc2gnKXRoaXMuY2xvc2VBdWRpbyhhdWRpb0lkKVxyXG4gICAgICAgICAgICB9KS5cclxuICAgICAgICAgICAgc3RhcnQoKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLnlhemkpe1xyXG4gICAgICAgICAgICBtb2RpZnlQb3ModGhpcy55YXppKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0aGlzLmxhamkpe1xyXG4gICAgICAgICAgICBtb2RpZnlQb3ModGhpcy5sYWppKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjEtMTEtMTggMTQ6MjA6NDZcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDgtMDggMTI6MDQ6MzBcclxuICovXHJcblxyXG5pbXBvcnQgeyBlY3MgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2xpYnMvZWNzL0VDU1wiO1xyXG5pbXBvcnQgeyBBY2NvdW50IH0gZnJvbSBcIi4uL2FjY291bnQvQWNjb3VudFwiO1xyXG5pbXBvcnQgeyBJbml0aWFsaXplIH0gZnJvbSBcIi4uL2luaXRpYWxpemUvSW5pdGlhbGl6ZVwiO1xyXG5cclxuLyoqIOa4uOaIj+WNleS+i+S4muWKoeaooeWdlyAqL1xyXG5AZWNzLnJlZ2lzdGVyKCdTaW5nbGV0b25Nb2R1bGUnKVxyXG5leHBvcnQgY2xhc3MgU2luZ2xldG9uTW9kdWxlQ29tcCBleHRlbmRzIGVjcy5Db21wIHtcclxuICAgIC8qKiDmuLjmiI/liJ3lp4vljJbmqKHlnZcgKi9cclxuICAgIGluaXRpYWxpemU6IEluaXRpYWxpemUgPSBudWxsITtcclxuICAgIC8qKiDmuLjmiI/otKblj7fmqKHlnZcgKi9cclxuICAgIGFjY291bnQ6IEFjY291bnQgPSBudWxsITtcclxuXHJcbiAgICByZXNldCgpIHsgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIHNtYzogU2luZ2xldG9uTW9kdWxlQ29tcCA9IGVjcy5nZXRTaW5nbGV0b24oU2luZ2xldG9uTW9kdWxlQ29tcCk7IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0xMC0xMiAxNDoxMTowNFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wNC0wOCAxNTo0MjoxNlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgc3AsIF9kZWNvcmF0b3IgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IG9vcHMgfSBmcm9tICcuLi8uLi8uLi9jb3JlL09vcHMnO1xyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5IH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIOWKqOeUu+aSreaUvuWujOmakOiXj+eJueaViCAqL1xyXG5AY2NjbGFzcygnU3BpbmVGaW5pc2hlZFJlbGVhc2UnKVxyXG5leHBvcnQgY2xhc3MgU3BpbmVGaW5pc2hlZFJlbGVhc2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgQHByb3BlcnR5XHJcbiAgICBpc0Rlc3Ryb3k6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIHByaXZhdGUgc3BpbmUhOiBzcC5Ta2VsZXRvbjtcclxuICAgIHByaXZhdGUgcmVzUGF0aDogc3RyaW5nID0gbnVsbCE7XHJcblxyXG4gICAgLyoqIOiuvue9rui3r+W+hCAqL1xyXG4gICAgc2V0UmVzUGF0aChwYXRoOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnJlc1BhdGggPSBwYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICB0aGlzLnNwaW5lID0gdGhpcy5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pITtcclxuICAgICAgICB0aGlzLnNwaW5lLnNldENvbXBsZXRlTGlzdGVuZXIodGhpcy5vblNwaW5lQ29tcGxldGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnJlc1BhdGgpIHtcclxuICAgICAgICAgICAgb29wcy5yZXMubG9hZCh0aGlzLnJlc1BhdGgsIHNwLlNrZWxldG9uRGF0YSwgKGVycjogRXJyb3IgfCBudWxsLCBzZDogc3AuU2tlbGV0b25EYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihg5Yqg6L2944CQJHt0aGlzLnJlc1BhdGh944CR55qEIFNQSU5FIOi1hOa6kOS4jeWtmOWcqGApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwaW5lLnNrZWxldG9uRGF0YSA9IHNkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcGluZS5zZXRBbmltYXRpb24oMCwgXCJhbmltYXRpb25cIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3BpbmUuc2V0QW5pbWF0aW9uKDAsIFwiYW5pbWF0aW9uXCIsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvblNwaW5lQ29tcGxldGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZXN0cm95KSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUucmVtb3ZlRnJvbVBhcmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBzeXMgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgUFJFVklFVyB9IGZyb20gXCJjYy9lbnZcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVN0b3JhZ2VTZWN1cml0eSB7XHJcbiAgICBkZWNyeXB0KHN0cjogc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgZW5jcnlwdChzdHI6IHN0cmluZyk6IHN0cmluZztcclxuICAgIGVuY3J5cHRLZXkoc3RyOiBzdHJpbmcpOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKiBcclxuICog5pys5Zyw5a2Y5YKoIFxyXG4gKiBAaGVscCAgICBodHRwczovL2dpdGVlLmNvbS9kZ2ZsYXNoL29vcHMtZnJhbWV3b3JrL3dpa2lzL3BhZ2VzP3NvcnRfaWQ9MTIwMzc5NTcmZG9jX2lkPTI4NzM1NjVcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdG9yYWdlTWFuYWdlciB7XHJcbiAgICBwcml2YXRlIGlkOiBzdHJpbmcgPSBudWxsITtcclxuICAgIHByaXZhdGUgaXNzOiBJU3RvcmFnZVNlY3VyaXR5ID0gbnVsbCE7XHJcblxyXG4gICAgLyoqIOaVsOaNruWKoOWvhuW8gOWFsyAqL1xyXG4gICAgcHJpdmF0ZSBnZXQgZW5jcnlwdGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhUFJFVklFVztcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pys5Zyw5a2Y5YKo5pWw5o2u5Yqg5a+G5pa55byP5Yid5aeL5YyWICovXHJcbiAgICBpbml0KGlpczogSVN0b3JhZ2VTZWN1cml0eSkge1xyXG4gICAgICAgIHRoaXMuaXNzID0gaWlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u55So5oi35ZSv5LiA5qCH6K+GXHJcbiAgICAgKiBAcGFyYW0gaWQgXHJcbiAgICAgKi9cclxuICAgIHNldFVzZXIoaWQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWtmOWCqOacrOWcsOaVsOaNrlxyXG4gICAgICogQHBhcmFtIGtleSDlrZjlgqhrZXlcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDlrZjlgqjlgLxcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBsZXQga2V5d29yZHMgPSB0aGlzLmdldEtleShrZXkpO1xyXG5cclxuICAgICAgICBpZiAobnVsbCA9PSBrZXkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuWtmOWCqOeahGtleeS4jeiDveS4uuepulwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5lbmNyeXB0ZWQpIHtcclxuICAgICAgICAgICAga2V5d29yZHMgPSB0aGlzLmlzcy5lbmNyeXB0S2V5KGtleXdvcmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG51bGwgPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi5a2Y5YKo55qE5YC85Li656m677yM5YiZ55u05o6l56e76Zmk6K+l5a2Y5YKoXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZShrZXkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuWCqOWtmOeahOWAvOS4jeiDveS4uuaWueazlVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOino+aekOWksei0pe+8jHN0ciA9ICR7dmFsdWV9YCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICsgXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZW5jcnlwdGVkKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5pc3MuZW5jcnlwdCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN5cy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXl3b3JkcywgdmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5oyH5a6a5YWz6ZSu5a2X55qE5pWw5o2uXHJcbiAgICAgKiBAcGFyYW0ga2V5ICAgICAgICAgIOiOt+WPlueahOWFs+mUruWtl1xyXG4gICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSDojrflj5bnmoTpu5jorqTlgLxcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBnZXQoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogYW55ID0gXCJcIik6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKG51bGwgPT0ga2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLlrZjlgqjnmoRrZXnkuI3og73kuLrnqbpcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsITtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGtleSA9IHRoaXMuZ2V0S2V5KGtleSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVuY3J5cHRlZCkge1xyXG4gICAgICAgICAgICBrZXkgPSB0aGlzLmlzcy5lbmNyeXB0S2V5KGtleSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3RyOiBzdHJpbmcgfCBudWxsID0gc3lzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICAgICAgaWYgKG51bGwgIT0gc3RyICYmICcnICE9PSBzdHIgJiYgdGhpcy5lbmNyeXB0ZWQpIHtcclxuICAgICAgICAgICAgc3RyID0gdGhpcy5pc3MuZGVjcnlwdChzdHIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG51bGwgPT09IHN0cikge1xyXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5bmjIflrprlhbPplK7lrZfnmoTmlbDlgLwgKi9cclxuICAgIGdldE51bWJlcihrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlOiBudW1iZXIgPSAwKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCByID0gdGhpcy5nZXQoa2V5KTtcclxuICAgICAgICBpZiAociA9PSBcIjBcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gTnVtYmVyKHIpIHx8IGRlZmF1bHRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6I635Y+W5oyH5a6a5YWz6ZSu5a2X55qE5biD5bCU5YC8ICovXHJcbiAgICBnZXRCb29sZWFuKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgciA9IHRoaXMuZ2V0KGtleSk7XHJcbiAgICAgICAgcmV0dXJuIHIudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5bmjIflrprlhbPplK7lrZfnmoRKU09O5a+56LGhICovXHJcbiAgICBnZXRKc29uKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IHIgPSB0aGlzLmdldChrZXkpO1xyXG4gICAgICAgIHJldHVybiAociAmJiBKU09OLnBhcnNlKHIpKSB8fCBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKDpmaTmjIflrprlhbPplK7lrZfnmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSBrZXkg6ZyA6KaB56e76Zmk55qE5YWz6ZSu5a2XXHJcbiAgICAgKiBAcmV0dXJucyBcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlKGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKG51bGwgPT0ga2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLlrZjlgqjnmoRrZXnkuI3og73kuLrnqbpcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBrZXl3b3JkcyA9IHRoaXMuZ2V0S2V5KGtleSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmVuY3J5cHRlZCkge1xyXG4gICAgICAgICAgICBrZXl3b3JkcyA9IHRoaXMuaXNzLmVuY3J5cHRLZXkoa2V5d29yZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzeXMubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5d29yZHMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmuIXnqbrmlbTkuKrmnKzlnLDlrZjlgqggKi9cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHN5cy5sb2NhbFN0b3JhZ2UuY2xlYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6I635Y+W5pWw5o2u5YiG57uE5YWz6ZSu5a2XICovXHJcbiAgICBwcml2YXRlIGdldEtleShrZXk6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuaWQgPT0gbnVsbCB8fCB0aGlzLmlkID09IFwiXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuaWR9XyR7a2V5fWA7XHJcbiAgICB9XHJcbn0iLCIvLyBpbXBvcnQgeyBvb3BzIH0gZnJvbSBcIi4uLy4uL09vcHNcIjtcclxuLy8gaW1wb3J0IHsgRW5jcnlwdFV0aWwgfSBmcm9tIFwiLi4vLi4vdXRpbHMvRW5jcnlwdFV0aWxcIjtcclxuLy8gaW1wb3J0IHsgSVN0b3JhZ2VTZWN1cml0eSB9IGZyb20gXCIuL1N0b3JhZ2VNYW5hZ2VyXCI7XHJcblxyXG4vLyAvKipcclxuLy8gICog5pys5Zyw5a2Y5YKo5Yqg5a+GXHJcbi8vICAqIOS8mOeCue+8mlxyXG4vLyAgKiAx44CB5Yqg5a+G5by65bqm5pu06auYXHJcbi8vICAqXHJcbi8vICAqIOe8uueCue+8mlxyXG4vLyAgKiAx44CB5pW05L2T5Luj56CB5L2T56ev5aKe5Yqg57qmMjAwS0JcclxuLy8gICogMuOAgemcgOimgeS4i+i9vSBDcnlwdG9FUyDliqDlr4blupNcclxuLy8gICovXHJcbi8vIGV4cG9ydCBjbGFzcyBTdG9yYWdlU2VjdXJpdHlDcnlwdG8gaW1wbGVtZW50cyBJU3RvcmFnZVNlY3VyaXR5IHtcclxuLy8gICAgIHByaXZhdGUgX2tleTogc3RyaW5nID0gbnVsbCE7XHJcbi8vICAgICBwcml2YXRlIF9pdjogc3RyaW5nID0gbnVsbCE7XHJcblxyXG4vLyAgICAgY29uc3RydWN0b3IoKSB7XHJcbi8vICAgICAgICAgY29uc3Qga2V5ID0gb29wcy5jb25maWcuZ2FtZS5sb2NhbERhdGFLZXk7XHJcbi8vICAgICAgICAgY29uc3QgaXYgPSBvb3BzLmNvbmZpZy5nYW1lLmxvY2FsRGF0YUl2O1xyXG5cclxuLy8gICAgICAgICBFbmNyeXB0VXRpbC5pbml0Q3J5cHRvKGtleSwgaXYpO1xyXG5cclxuLy8gICAgICAgICB0aGlzLl9rZXkgPSBFbmNyeXB0VXRpbC5tZDUoa2V5KTtcclxuLy8gICAgICAgICB0aGlzLl9pdiA9IEVuY3J5cHRVdGlsLm1kNShpdik7XHJcbi8vICAgICB9XHJcblxyXG4vLyAgICAgZGVjcnlwdChzdHI6IHN0cmluZyk6IHN0cmluZyB7XHJcbi8vICAgICAgICAgcmV0dXJuIEVuY3J5cHRVdGlsLmFlc0RlY3J5cHQoc3RyLCB0aGlzLl9rZXksIHRoaXMuX2l2KTtcclxuLy8gICAgIH1cclxuXHJcbi8vICAgICBlbmNyeXB0KHN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuLy8gICAgICAgICByZXR1cm4gRW5jcnlwdFV0aWwuYWVzRW5jcnlwdChzdHIsIHRoaXMuX2tleSwgdGhpcy5faXYpO1xyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIGVuY3J5cHRLZXkoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4vLyAgICAgICAgIHJldHVybiBFbmNyeXB0VXRpbC5tZDUoc3RyKTtcclxuLy8gICAgIH1cclxuLy8gfSIsImltcG9ydCB7IG9vcHMgfSBmcm9tIFwiLi4vLi4vT29wc1wiO1xyXG5pbXBvcnQgeyBJU3RvcmFnZVNlY3VyaXR5IH0gZnJvbSBcIi4vU3RvcmFnZU1hbmFnZXJcIjtcclxuXHJcbi8qKiBcclxuICog5pys5Zyw5a2Y5YKo5Yqg5a+GXHJcbiAqIOS8mOeCue+8mlxyXG4gKiAx44CB5Luj56CB5L2T56ev5bCPXHJcbiAqIDLjgIHkuI3kvp3otZbnrKzkuInmlrnlupPvvIzkvb/nlKjov5nlpZfmlrnmoYjlj6/liKDpmaQgXHJcbiAqICAgIFN0b3JhZ2VTZWN1cml0eUNyeXB0by50c1xyXG4gKiAgICBFbmNyeXB0VXRpbC50c1xyXG4gKiAgICBwYWNrYWdlLmpzb24g5Lit55qEY3J5cHRv5L6d6LWW5YeP5bCP5YyF5L2TXHJcbiAqIFxyXG4gKiDnvLrngrnvvJpcclxuICogMeOAgeWKoOWvhuW8uuW6puWwj1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VTZWN1cml0eVNpbXBsZSBpbXBsZW1lbnRzIElTdG9yYWdlU2VjdXJpdHkge1xyXG4gICAgcHJpdmF0ZSBzZWNyZXRrZXk6IHN0cmluZyA9IG51bGwhO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IG9vcHMuY29uZmlnLmdhbWUubG9jYWxEYXRhS2V5O1xyXG4gICAgICAgIGNvbnN0IGl2ID0gb29wcy5jb25maWcuZ2FtZS5sb2NhbERhdGFJdjtcclxuICAgICAgICB0aGlzLnNlY3JldGtleSA9IGtleSArIGl2O1xyXG4gICAgfVxyXG5cclxuICAgIGVuY3J5cHQoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBlciA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGVyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoc3RyLmNoYXJDb2RlQXQoaSkgXiB0aGlzLnNlY3JldGtleS5jaGFyQ29kZUF0KGkgJSB0aGlzLnNlY3JldGtleS5sZW5ndGgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVyO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY3J5cHQoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBkciA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoc3RyLmNoYXJDb2RlQXQoaSkgXiB0aGlzLnNlY3JldGtleS5jaGFyQ29kZUF0KGkgJSB0aGlzLnNlY3JldGtleS5sZW5ndGgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRyO1xyXG4gICAgfVxyXG5cclxuICAgIGVuY3J5cHRLZXkoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuY3J5cHQoc3RyKTtcclxuICAgIH1cclxufSIsIi8qKlxyXG4gKiDmlbDlgLzmoLzlvI/ljJblh73mlbAsIOmAmui/h+ivreS5ieino+aekOiHquWKqOiuvue9ruWAvOeahOiMg+WbtFxyXG4gKiAgICAgLy/mlbTmlbBcclxuICogMTpkZWYoMCkvL+aYvuekuuS4gOS4qum7mOiupOWAvFxyXG4gKi9cclxuY2xhc3MgU3RyaW5nRm9ybWF0IHtcclxuICAgIGRlYWwodmFsdWU6IG51bWJlciB8IHN0cmluZywgZm9ybWF0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChmb3JtYXQgPT09ICcnKSByZXR1cm4gdmFsdWUgYXMgc3RyaW5nO1xyXG5cclxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQudG9Mb3dlckNhc2UoKS50cmltKCk7ICAgICAgICAgICAgICAgLy8g5LiN5Yy65YiG5aSn5bCPXHJcbiAgICAgICAgbGV0IG1hdGNoX2Z1bmMgPSBmb3JtYXQubWF0Y2goL15bYS16fEEtWl0rL2dpKTsgICAgIC8vIOWMuemFjeWIsCBmb3JtYXQg5Lit55qEIOWHveaVsOWQjVxyXG4gICAgICAgIGxldCBtYXRjaF9udW0gPSBmb3JtYXQubWF0Y2goL1xcZCskL2dpKTsgICAgICAgICAgICAgLy8g5Yy56YWN5YiwIGZvcm1hdCDkuK3nmoTlj4LmlbBcclxuICAgICAgICBsZXQgZnVuYzogc3RyaW5nID0gJyc7XHJcbiAgICAgICAgbGV0IG51bTogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgcmVzOiBudW1iZXIgfCBzdHJpbmcgPSAnJztcclxuXHJcbiAgICAgICAgaWYgKG1hdGNoX2Z1bmMpIGZ1bmMgPSBtYXRjaF9mdW5jWzBdO1xyXG4gICAgICAgIGlmIChtYXRjaF9udW0pIG51bSA9IHBhcnNlSW50KG1hdGNoX251bVswXSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdpbnQnOiByZXMgPSB0aGlzLmludCh2YWx1ZSk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZml4JzogcmVzID0gdGhpcy5maXgodmFsdWUsIG51bSk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAna21idCc6IHJlcyA9IHRoaXMuS01CVCh2YWx1ZSk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncGVyJzogcmVzID0gdGhpcy5wZXIodmFsdWUsIG51bSk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2VwJzogcmVzID0gdGhpcy5zZXAodmFsdWUpOyBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3dpdGNoIChmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsaW1pdCc6IHJlcyA9IHRoaXMubGltaXQodmFsdWUsIG51bSk7IGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzIGFzIHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICAvLyDlsIbmlbDlrZfmjInliIblj7fmmL7npLpcclxuICAgIHByaXZhdGUgc2VwKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgbnVtID0gTWF0aC5yb3VuZCh2YWx1ZSkudG9TdHJpbmcoKTtcclxuICAgICAgICByZXR1cm4gbnVtLnJlcGxhY2UobmV3IFJlZ0V4cCgnKFxcXFxkKSg/PShcXFxcZHszfSkrJCknLCAnaWcnKSwgXCIkMSxcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5bCG5pWw5a2X5oyJ5YiG5pi+56S6IDAwOjAwIOaYvuekuiDvvIhtc+WItu+8iVxyXG4gICAgcHJpdmF0ZSB0aW1lX20odmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIC8vdG9kb1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWwhuaVsOWtl+aMieenkuaYvuekuiAwMDowMDowMCDmmL7npLog77yIbXPliLbvvIlcclxuICAgIHByaXZhdGUgdGltZV9zKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICAvL3RvZG9cclxuICAgIH1cclxuXHJcbiAgICAvLyDlsIbmlbDlrZfmjIkgMDowMDowMDowMDAg5pi+56S6IO+8iG1z5Yi277yJXHJcbiAgICBwcml2YXRlIHRpbWVfbXModmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIC8vdG9kb1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWwhuaXtumXtOaIs+aYvuekuuS4uuivpue7hueahOWGheWuuVxyXG4gICAgcHJpdmF0ZSB0aW1lU3RhbXAodmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIC8vdG9kb1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSkudG9TdHJpbmcoKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBbdmFsdWU6aW50XSDlsIblj5blgLwwfjEg5Y+Y5oiQIDF+MTAwLOWPr+S7peaMh+WumuS/rumlsOeahOWwj+aVsOS9jeaVsCAqL1xyXG4gICAgcHJpdmF0ZSBwZXIodmFsdWU6IG51bWJlciwgZmQ6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwKS50b0ZpeGVkKGZkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogW3ZhbHVlOmludF0g5bCG5Y+W5YC85Y+Y5oiQ5pW05pWwICovXHJcbiAgICBwcml2YXRlIGludCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBbdmFsdWU6Zml4Ml3mlbDlgLzovazmjaLkuLrlsI/mlbAqL1xyXG4gICAgcHJpdmF0ZSBmaXgodmFsdWU6IG51bWJlciwgZmQ6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS50b0ZpeGVkKGZkKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBbdmFsdWU6bGltaXQzXeWtl+espuS4sumVv+W6pumZkOWItiAqL1xyXG4gICAgcHJpdmF0ZSBsaW1pdCh2YWx1ZTogc3RyaW5nLCBjb3VudDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZygwLCBjb3VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWwhuaVsOWtl+e8qeefreaYvuekuuS4uktNQlTljZXkvY0g5aSn5YaZLOebruWJjeWPquaUr+aMgeiLseaWhyAqL1xyXG4gICAgcHJpdmF0ZSBLTUJUKHZhbHVlOiBudW1iZXIsIGxhbmc6IHN0cmluZyA9ICdlbicpIHtcclxuICAgICAgICAvLzEwXjQ95LiHLCAxMF44PeS6vywxMF4xMj3lhYYsMTBeMTY95Lqs77yMXHJcbiAgICAgICAgbGV0IGNvdW50cyA9IFsxMDAwLCAxMDAwMDAwLCAxMDAwMDAwMDAwLCAxMDAwMDAwMDAwMDAwXTtcclxuICAgICAgICBsZXQgdW5pdHMgPSBbJycsICdLJywgJ00nLCAnQicsICdUJ107XHJcblxyXG4gICAgICAgIHN3aXRjaCAobGFuZykge1xyXG4gICAgICAgICAgICBjYXNlICd6aCc6XHJcbiAgICAgICAgICAgICAgICAvLzEwXjQ95LiHLCAxMF44PeS6vywxMF4xMj3lhYYsMTBeMTY95Lqs77yMXHJcbiAgICAgICAgICAgICAgICBsZXQgY291bnRzID0gWzEwMDAwLCAxMDAwMDAwMDAsIDEwMDAwMDAwMDAwMDAsIDEwMDAwMDAwMDAwMDAwMDAwXTtcclxuICAgICAgICAgICAgICAgIGxldCB1bml0cyA9IFsnJywgJ+S4hycsICfkur8nLCAn5YWGJywgJ+S6rCddO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wcmVzc1VuaXQodmFsdWUsIGNvdW50cywgdW5pdHMsIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8v5Y6L57yp5Lu75oSP5Y2V5L2N55qE5pWw5a2X77yM5ZCO57yA5Yqg5LiK5Y2V5L2N5paH5a2XXHJcbiAgICBwcml2YXRlIGNvbXByZXNzVW5pdCh2YWx1ZTogYW55LCB2YWx1ZUFycjogbnVtYmVyW10sIHVuaXRBcnI6IHN0cmluZ1tdLCBmaXhOdW06IG51bWJlciA9IDIpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBjb3VudHMgPSB2YWx1ZUFycjtcclxuICAgICAgICBsZXQgdW5pdHMgPSB1bml0QXJyO1xyXG4gICAgICAgIGxldCByZXM6IHN0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgbGV0IGluZGV4O1xyXG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvdW50cy5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IGNvdW50c1tpbmRleF07XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSAodmFsdWUgLyBjb3VudHNbaW5kZXggLSAxXSkudG9GaXhlZChmaXhOdW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gdmFsdWUudG9GaXhlZCgwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzICsgdW5pdHNbaW5kZXhdO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKirmoLzlvI/ljJblpITnkIblh73mlbAgKi9cclxuZXhwb3J0IGxldCBTdHJpbmdGb3JtYXRGdW5jdGlvbiA9IG5ldyBTdHJpbmdGb3JtYXQoKTsiLCIvKiog5a2X56ym5Liy5bel5YW3ICovXHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdVdGlsIHtcclxuICAgIC8qKiDojrflj5bkuIDkuKrllK/kuIDmoIfor4bnmoTlrZfnrKbkuLIgKi9cclxuICAgIHN0YXRpYyBndWlkKCkge1xyXG4gICAgICAgIGxldCBndWlkOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDMyOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IG4gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNi4wKS50b1N0cmluZygxNik7XHJcbiAgICAgICAgICAgIGd1aWQgKz0gbjtcclxuICAgICAgICAgICAgaWYgKChpID09IDgpIHx8IChpID09IDEyKSB8fCAoaSA9PSAxNikgfHwgKGkgPT0gMjApKVxyXG4gICAgICAgICAgICAgICAgZ3VpZCArPSBcIi1cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGd1aWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDovaznvo7lvI/orqHmlbDlrZfnrKbkuLJcclxuICAgICAqIEBwYXJhbSB2YWx1ZSDmlbDlrZdcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiAxMjM0NTY3ODkgPSAxMjMsNDU2LDc4OVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbnVtYmVyVG90UGVybWlsKHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZS50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6L2s6Iux5paH5Y2V5L2N6K6h5pWwXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUg5pWw5a2XXHJcbiAgICAgKiBAcGFyYW0gZml4ZWQg5L+d55WZ5bCP5pWw5L2N5pWwXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogMTIzNDUgPSAxMi4zNUtcclxuICAgICAqL1xyXG4gICAgc3RhdGljIG51bWJlclRvVGhvdXNhbmQodmFsdWU6IG51bWJlciwgZml4ZWQ6IG51bWJlciA9IDIpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGsgPSAxMDAwO1xyXG4gICAgICAgIGNvbnN0IHNpemVzID0gWycnLCAnSycsICdNJywgJ0cnXTtcclxuICAgICAgICBpZiAodmFsdWUgPCBrKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5sb2coaykpO1xyXG4gICAgICAgICAgICBjb25zdCByID0gKCh2YWx1ZSAvIE1hdGgucG93KGssIGkpKSk7XHJcbiAgICAgICAgICAgIHJldHVybiByLnRvRml4ZWQoZml4ZWQpICsgc2l6ZXNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6L2s5Lit5paH5Y2V5L2N6K6h5pWwXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUg5pWw5a2XXHJcbiAgICAgKiBAcGFyYW0gZml4ZWQg5L+d55WZ5bCP5pWw5L2N5pWwXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogMTIzNDUgPSAxLjIz5LiHXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBudW1iZXJUb1RlblRob3VzYW5kKHZhbHVlOiBudW1iZXIsIGZpeGVkOiBudW1iZXIgPSAyKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBrID0gMTAwMDA7XHJcbiAgICAgICAgY29uc3Qgc2l6ZXMgPSBbJycsICfkuIcnLCAn5Lq/JywgJ+S4h+S6vyddO1xyXG4gICAgICAgIGlmICh2YWx1ZSA8IGspIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLmxvZyhrKSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoKHZhbHVlIC8gTWF0aC5wb3coaywgaSkpKS50b0ZpeGVkKGZpeGVkKSArIHNpemVzW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFwiLFwiIOWIhuWJsuWtl+espuS4suaIkOaVsOe7hFxyXG4gICAgICogQHBhcmFtIHN0ciDlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHN0cmluZ1RvQXJyYXkxKHN0cjogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHN0ciA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0ci5zcGxpdChcIixcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcInxcIiDliIblibLlrZfnrKbkuLLmiJDmlbDnu4RcclxuICAgICAqIEBwYXJhbSBzdHIg5a2X56ym5LiyXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzdHJpbmdUb0FycmF5MihzdHI6IHN0cmluZykge1xyXG4gICAgICAgIGlmIChzdHIgPT0gXCJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHIuc3BsaXQoXCJ8XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXCI6XCIg5YiG5Ymy5a2X56ym5Liy5oiQ5pWw57uEXHJcbiAgICAgKiBAcGFyYW0gc3RyIOWtl+espuS4slxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc3RyaW5nVG9BcnJheTMoc3RyOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoc3RyID09IFwiXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RyLnNwbGl0KFwiOlwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFwiO1wiIOWIhuWJsuWtl+espuS4suaIkOaVsOe7hFxyXG4gICAgICogQHBhcmFtIHN0ciDlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHN0cmluZ1RvQXJyYXk0KHN0cjogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHN0ciA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0ci5zcGxpdChcIjtcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlrZfnrKbkuLLmiKrlj5ZcclxuICAgICAqIEBwYXJhbSBzdHIgICAgIOWtl+espuS4slxyXG4gICAgICogQHBhcmFtIG4gICAgICAg5oiq5Y+W6ZW/5bqmXHJcbiAgICAgKiBAcGFyYW0gc2hvd2RvdCDmmK/lkKbmiormiKrlj5bnmoTpg6jliIbnlKjnnIHnlaXlj7fku6Pmm79cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHN1YihzdHI6IHN0cmluZywgbjogbnVtYmVyLCBzaG93ZG90OiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCByID0gL1teXFx4MDAtXFx4ZmZdL2c7XHJcbiAgICAgICAgaWYgKHN0ci5yZXBsYWNlKHIsIFwibW1cIikubGVuZ3RoIDw9IG4pIHsgcmV0dXJuIHN0cjsgfVxyXG4gICAgICAgIGNvbnN0IG0gPSBNYXRoLmZsb29yKG4gLyAyKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gbTsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc3RyLnN1YnN0cigwLCBpKS5yZXBsYWNlKHIsIFwibW1cIikubGVuZ3RoID49IG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChzaG93ZG90KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgaSkgKyBcIi4uLlwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuoeeul+Wtl+espuS4sumVv+W6pu+8jOS4reaWh+eul+S4pOS4quWtl+iKglxyXG4gICAgICogQHBhcmFtIHN0ciDlrZfnrKbkuLJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHN0cmluZ0xlbihzdHI6IHN0cmluZykge1xyXG4gICAgICAgIGxldCByZWFsTGVuZ3RoID0gMCwgbGVuID0gc3RyLmxlbmd0aCwgY2hhckNvZGUgPSAtMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgICAgIGlmIChjaGFyQ29kZSA+PSAwICYmIGNoYXJDb2RlIDw9IDEyOClcclxuICAgICAgICAgICAgICAgIHJlYWxMZW5ndGggKz0gMTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmVhbExlbmd0aCArPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVhbExlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaYr+WQpuS4uuepulxyXG4gICAgICogQHBhcmFtIHN0clxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIElzRW1wdHkoc3RyOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gc3RyID09IG51bGwgfHwgc3RyID09IHVuZGVmaW5lZCB8fCBzdHIubGVuZ3RoID09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlj4LmlbDmm7/mjaJcclxuICAgICAqIEBwYXJhbSAgc3RyXHJcbiAgICAgKiBAcGFyYW0gIHJlc3RcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqIHZhciBzdHI6c3RyaW5nID0gXCJoZXJlIGlzIHNvbWUgaW5mbyAnezB9JyBhbmQgezF9XCI7XHJcbiAgICAgKiBTdHJpbmdVdGlsLnN1YnN0aXR1dGUoc3RyLCAxNS40LCB0cnVlKTtcclxuICAgICAqXHJcbiAgICAgKiBcImhlcmUgaXMgc29tZSBpbmZvICcxNS40JyBhbmQgdHJ1ZVwiXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgc3Vic3RpdHV0ZShzdHI6IHN0cmluZywgLi4ucmVzdDogYW55W10pOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChzdHIgPT0gbnVsbCkgcmV0dXJuICcnO1xyXG5cclxuICAgICAgICBsZXQgbGVuOiBudW1iZXIgPSByZXN0Lmxlbmd0aDtcclxuICAgICAgICBsZXQgYXJnczogYW55W107XHJcbiAgICAgICAgaWYgKGxlbiA9PSAxICYmIHJlc3RbMF0gaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICBhcmdzID0gcmVzdFswXTtcclxuICAgICAgICAgICAgbGVuID0gYXJncy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhcmdzID0gcmVzdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXHtcIiArIGkgKyBcIlxcXFx9XCIsIFwiZ1wiKSwgYXJnc1tpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG59XHJcbiIsIlxyXG5pbXBvcnQgeyBKc29uVXRpbCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS91dGlscy9Kc29uVXRpbFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRhYmxlTGFuZ3VhZ2Uge1xyXG4gICAgc3RhdGljIFRhYmxlTmFtZTogc3RyaW5nID0gXCJMYW5ndWFnZVwiO1xyXG5cclxuICAgIHByaXZhdGUgZGF0YTogYW55O1xyXG5cclxuICAgIGluaXQoaWQ6IG51bWJlcikge1xyXG4gICAgICAgIHZhciB0YWJsZSA9IEpzb25VdGlsLmdldChUYWJsZUxhbmd1YWdlLlRhYmxlTmFtZSk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gdGFibGVbaWRdO1xyXG4gICAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog57yW5Y+344CQS0VZ44CRICovXHJcbiAgICBpZDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKiog566A5L2T5Lit5paHICovXHJcbiAgICBnZXQgemgoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnpoO1xyXG4gICAgfVxyXG4gICAgLyoqIOiLseaWhyAqL1xyXG4gICAgZ2V0IGVuKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5lbjtcclxuICAgIH1cclxufVxyXG4gICAgIiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wNi0wMiAwOTozODo0OFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOC0wMiAxNDoyNjozNVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEpzb25VdGlsIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2V4dGVuc2lvbnMvb29wcy1wbHVnaW4tZnJhbWV3b3JrL2Fzc2V0cy9jb3JlL3V0aWxzL0pzb25VdGlsXCI7XHJcblxyXG4vKiog5ryU56S6b29wcy1wbHVnaW4tZXhjZWwtdG8tanNvbuaPkuS7tueUn+aIkOeahOmFjee9ruihqOaVsOaNrue7k+aehO+8iOWPr+WIoOmZpO+8iSAqL1xyXG5leHBvcnQgY2xhc3MgVGFibGVQcm9tcHRXaW5kb3cge1xyXG4gICAgc3RhdGljIFRhYmxlTmFtZTogc3RyaW5nID0gXCJQcm9tcHRXaW5kb3dcIjtcclxuXHJcbiAgICBwcml2YXRlIGRhdGE6IGFueTtcclxuXHJcbiAgICBpbml0KGlkOiBudW1iZXIsIGlkMTogbnVtYmVyLCBpZDI6IG51bWJlcikge1xyXG4gICAgICAgIHZhciB0YWJsZSA9IEpzb25VdGlsLmdldChUYWJsZVByb21wdFdpbmRvdy5UYWJsZU5hbWUpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHRhYmxlW2lkXVtpZDFdW2lkMl07XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuaWQxID0gaWQxO1xyXG4gICAgICAgIHRoaXMuaWQyID0gaWQyO1xyXG4gICAgfVxyXG5cclxuICAgIGlkOiBudW1iZXIgPSAwO1xyXG4gICAgaWQxOiBudW1iZXIgPSAwO1xyXG4gICAgaWQyOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIGdldCB0aXRsZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEudGl0bGU7XHJcbiAgICB9XHJcbiAgICBnZXQgZGVzY3JpYmUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmRlc2NyaWJlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGFycmF5KCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5hcnJheTtcclxuICAgIH1cclxuICAgIGdldCBocCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuaHA7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMi0wNi0yMSAxMjowNToxNFxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wNy0yMCAxMTo0MzoyMFxyXG4gKi9cclxuaW1wb3J0IHsgQlRyZWVOb2RlIH0gZnJvbSAnLi9CVHJlZU5vZGUnO1xyXG5cclxuLyoqIOS7u+WKoeihjOS4uuiKgueCuSAqL1xyXG5leHBvcnQgY2xhc3MgVGFzayBleHRlbmRzIEJUcmVlTm9kZSB7XHJcbiAgICBydW4oYmxhY2tib2FyZD86IGFueSkge1xyXG5cclxuICAgIH1cclxufVxyXG4iLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIzLTAxLTE5IDExOjA5OjM4XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTAxLTE5IDE0OjI4OjA1XHJcbiAqL1xyXG5cclxuLyoqIFxyXG4gKiDlrprml7bop6blj5Hnu4Tku7YgXHJcbiAqIEBoZWxwICAgIGh0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzk2NCZkb2NfaWQ9Mjg3MzU2NVxyXG4gKiBAZXhhbXBsZVxyXG4gICAgZXhwb3J0IGNsYXNzIFRlc3QgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgICAgIC8vIOWIm+W7uuS4gOS4quWumuaXtui3s+WKqOe7hOS7tlxyXG4gICAgICAgIHByaXZhdGUgdGltZXI6IFRpbWVyID0gbmV3IFRpbWVyKDEpO1xyXG5cclxuICAgICAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aW1lci51cGRhdGUodGhpcy5kdCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKOavj+S4gOenkuinpuWPkeS4gOasoSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGltZXIge1xyXG4gICAgY2FsbGJhY2s6IEZ1bmN0aW9uIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBfZWxhcHNlZFRpbWU6IG51bWJlciA9IDA7XHJcblxyXG4gICAgZ2V0IGVsYXBzZWRUaW1lKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsYXBzZWRUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3N0ZXA6IG51bWJlciA9IC0xO1xyXG4gICAgLyoqIOinpuWPkemXtOmalOaXtumXtO+8iOenku+8iSAqL1xyXG4gICAgZ2V0IHN0ZXAoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RlcDtcclxuICAgIH1cclxuICAgIHNldCBzdGVwKHN0ZXA6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3N0ZXAgPSBzdGVwOyAgICAgICAgICAgICAgICAgICAgIC8vIOavj+asoeS/ruaUueaXtumXtFxyXG4gICAgICAgIHRoaXMuX2VsYXBzZWRUaW1lID0gMDsgICAgICAgICAgICAgICAgIC8vIOmAneWOu+aXtumXtFxyXG4gICAgfVxyXG5cclxuICAgIGdldCBwcm9ncmVzcygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbGFwc2VkVGltZSAvIHRoaXMuX3N0ZXA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlrprml7bop6blj5Hnu4Tku7ZcclxuICAgICAqIEBwYXJhbSBzdGVwICDop6blj5Hpl7TpmpTml7bpl7TvvIjnp5LvvIlcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc3RlcDogbnVtYmVyID0gMCkge1xyXG4gICAgICAgIHRoaXMuc3RlcCA9IHN0ZXA7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGVwIDw9IDApIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUgKz0gZHQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9lbGFwc2VkVGltZSA+PSB0aGlzLl9zdGVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsYXBzZWRUaW1lIC09IHRoaXMuX3N0ZXA7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2s/LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgdGhpcy5fZWxhcHNlZFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RlcCA9IC0xO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMy0wMS0xOSAxMDozMzo0OVxyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMy0wMS0xOSAxNDozNzoxOVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBnYW1lIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IFN0cmluZ1V0aWwgfSBmcm9tIFwiLi4vLi4vdXRpbHMvU3RyaW5nVXRpbFwiO1xyXG5pbXBvcnQgeyBUaW1lciB9IGZyb20gXCIuL1RpbWVyXCI7XHJcblxyXG4vKiog5pe26Ze0566h55CGICovXHJcbmV4cG9ydCBjbGFzcyBUaW1lck1hbmFnZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgLyoqIOWAkuiuoeaXtuaVsOaNriAqL1xyXG4gICAgcHJpdmF0ZSB0aW1lczogYW55ID0ge307XHJcbiAgICAvKiog5pyN5Yqh5Zmo5pe26Ze0ICovXHJcbiAgICBwcml2YXRlIGRhdGVfczogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAvKiog5pyN5Yqh5Zmo5Yid5aeL5pe26Ze0ICovXHJcbiAgICBwcml2YXRlIGRhdGVfc19zdGFydDogRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAvKiog5pyN5Yqh5Zmo5pe26Ze05ZCO5L+u5q2j5pe26Ze0ICovXHJcbiAgICBwcml2YXRlIHBvbHltZXJpY19zOiBudW1iZXIgPSAwO1xyXG4gICAgLyoqIOWuouaIt+err+aXtumXtCAqL1xyXG4gICAgcHJpdmF0ZSBkYXRlX2M6IERhdGUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgIC8qKiDlkI7lj7DnrqHnkIblgJLorqHml7blrozmiJDkuovku7YgKi9cclxuICAgIHByb3RlY3RlZCB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnRpbWVzKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0gdGhpcy50aW1lc1trZXldO1xyXG4gICAgICAgICAgICBsZXQgdGltZXIgPSBkYXRhLnRpbWVyIGFzIFRpbWVyO1xyXG4gICAgICAgICAgICBpZiAodGltZXIudXBkYXRlKGR0KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEub2JqZWN0W2RhdGEuZmllbGRdID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEub2JqZWN0W2RhdGEuZmllbGRdLS07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWAkuiuoeaXtue7k+adn+inpuWPkVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm9iamVjdFtkYXRhLmZpZWxkXSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25UaW1lckNvbXBsZXRlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyDop6blj5Hmr4/np5Llm57osIPkuovku7YgIFxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEub25TZWNvbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vblNlY29uZC5jYWxsKGRhdGEub2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOinpuWPkeWAkuiuoeaXtuWujOaIkOS6i+S7tiAqL1xyXG4gICAgcHJpdmF0ZSBvblRpbWVyQ29tcGxldGUoZGF0YTogYW55KSB7XHJcbiAgICAgICAgaWYgKGRhdGEub25Db21wbGV0ZSkgZGF0YS5vbkNvbXBsZXRlLmNhbGwoZGF0YS50YXJnZXQsIGRhdGEub2JqZWN0KTtcclxuICAgICAgICBpZiAoZGF0YS5ldmVudCkgdGhpcy5ub2RlLmRpc3BhdGNoRXZlbnQoZGF0YS5ldmVudCk7XHJcblxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnRpbWVzW2RhdGEuaWRdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Zyo5oyH5a6a5a+56LGh5LiK5rOo5YaM5LiA5Liq5YCS6K6h5pe255qE5Zue6LCD566h55CG5ZmoXHJcbiAgICAgKiBAcGFyYW0gb2JqZWN0ICAgICAgICDms6jlhozlrprml7blmajnmoTlr7nosaFcclxuICAgICAqIEBwYXJhbSBmaWVsZCAgICAgICAgIOaXtumXtOWtl+autVxyXG4gICAgICogQHBhcmFtIHRhcmdldCAgICAgICAg6Kem5Y+R5LqL5Lu255qE5a+56LGhXHJcbiAgICAgKiBAcGFyYW0gb25TZWNvbmQgICAgICDmr4/np5Lkuovku7ZcclxuICAgICAqIEBwYXJhbSBvbkNvbXBsZXRlICAgIOWAkuiuoeaXtuWujOaIkOS6i+S7tlxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgZXhwb3J0IGNsYXNzIFRlc3QgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgICAgIHByaXZhdGUgdGltZUlkITogc3RyaW5nO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN0YXJ0KCkge1xyXG4gICAgICAgICAgICAvLyDlnKjmjIflrprlr7nosaHkuIrms6jlhozkuIDkuKrlgJLorqHml7bnmoTlm57osIPnrqHnkIblmahcclxuICAgICAgICAgICAgdGhpcy50aW1lSWQgPSBvb3BzLnRpbWVyLnJlZ2lzdGVyKHRoaXMsIFwiY291bnREb3duXCIsIHRoaXMub25TZWNvbmQsIHRoaXMub25Db21wbGV0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHByaXZhdGUgb25TZWNvbmQoKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5q+P56eS6Kem5Y+R5LiA5qyhXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBvbkNvbXBsZXRlKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWAkuiuoeaXtuWujOaIkOinpuWPkVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyKG9iamVjdDogYW55LCBmaWVsZDogc3RyaW5nLCB0YXJnZXQ6IG9iamVjdCwgb25TZWNvbmQ6IEZ1bmN0aW9uLCBvbkNvbXBsZXRlOiBGdW5jdGlvbik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgdGltZXIgPSBuZXcgVGltZXIoKTtcclxuICAgICAgICB0aW1lci5zdGVwID0gMTtcclxuXHJcbiAgICAgICAgbGV0IGRhdGE6IGFueSA9IHt9O1xyXG4gICAgICAgIGRhdGEuaWQgPSBTdHJpbmdVdGlsLmd1aWQoKTtcclxuICAgICAgICBkYXRhLnRpbWVyID0gdGltZXI7XHJcbiAgICAgICAgZGF0YS5vYmplY3QgPSBvYmplY3Q7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDnrqHnkIblr7nosaFcclxuICAgICAgICBkYXRhLmZpZWxkID0gZmllbGQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOaXtumXtOWtl+autVxyXG4gICAgICAgIGRhdGEub25TZWNvbmQgPSBvblNlY29uZDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5q+P56eS5LqL5Lu2XHJcbiAgICAgICAgZGF0YS5vbkNvbXBsZXRlID0gb25Db21wbGV0ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDlgJLorqHml7blrozmiJDkuovku7ZcclxuICAgICAgICBkYXRhLnRhcmdldCA9IHRhcmdldFxyXG4gICAgICAgIHRoaXMudGltZXNbZGF0YS5pZF0gPSBkYXRhO1xyXG4gICAgICAgIHJldHVybiBkYXRhLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBcclxuICAgICAqIOWcqOaMh+WumuWvueixoeS4iuazqOmUgOS4gOS4quWAkuiuoeaXtueahOWbnuiwg+euoeeQhuWZqCBcclxuICAgICAqIEBwYXJhbSBpZCAgICAgICAgIOaXtumXtOWvueixoeWUr+S4gOihqOekulxyXG4gICAgICogQGV4YW1wbGVcclxuICAgIGV4cG9ydCBjbGFzcyBUZXN0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgICAgICBwcml2YXRlIHRpbWVJZCE6IHN0cmluZztcclxuXHJcbiAgICAgICAgc3RhcnQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZUlkID0gb29wcy50aW1lci5yZWdpc3Rlcih0aGlzLCBcImNvdW50RG93blwiLCB0aGlzLm9uU2Vjb25kLCB0aGlzLm9uQ29tcGxldGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25EZXN0cm95KCkge1xyXG4gICAgICAgICAgICAvLyDlnKjmjIflrprlr7nosaHkuIrms6jplIDkuIDkuKrlgJLorqHml7bnmoTlm57osIPnrqHnkIblmahcclxuICAgICAgICAgICAgb29wcy50aW1lci51blJlZ2lzdGVyKHRoaXMudGltZUlkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAgKi9cclxuICAgIHVuUmVnaXN0ZXIoaWQ6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWVzW2lkXSkgZGVsZXRlIHRoaXMudGltZXNbaWRdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pyN5Yqh5Zmo5pe26Ze05LiO5pys5Zyw5pe26Ze05ZCM5q2lXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgICDmnI3liqHlmajml7bpl7TliLvluqZcclxuICAgICAqL1xyXG4gICAgc2V0U2VydmVyVGltZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wb2x5bWVyaWNfcyA9IHRoaXMuZ2V0VGltZSgpO1xyXG4gICAgICAgIHRoaXMuZGF0ZV9zX3N0YXJ0LnNldFRpbWUodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5blhpnmnI3liqHlmajlkIzmraXnmoTml7bpl7TliLvluqYgKi9cclxuICAgIGdldFNlcnZlclRpbWUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlX3Nfc3RhcnQuZ2V0VGltZSgpICsgdGhpcy5nZXRUaW1lKCkgLSB0aGlzLnBvbHltZXJpY19zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5bmnI3liqHlmajml7bpl7Tlr7nosaEgKi9cclxuICAgIGdldFNlcnZlckRhdGUoKTogRGF0ZSB7XHJcbiAgICAgICAgdGhpcy5kYXRlX3Muc2V0VGltZSh0aGlzLmdldFNlcnZlclRpbWUoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZV9zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5bmnKzlnLDml7bpl7TliLvluqYgKi9cclxuICAgIGdldENsaWVudFRpbWUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6I635Y+W5pys5Zyw5pe26Ze05a+56LGhICovXHJcbiAgICBnZXRDbGllbnREYXRlKCk6IERhdGUge1xyXG4gICAgICAgIHRoaXMuZGF0ZV9jLnNldFRpbWUodGhpcy5nZXRDbGllbnRUaW1lKCkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGVfYztcclxuICAgIH1cclxuXHJcbiAgICAvKiog6I635Y+W5ri45oiP5byA5aeL5Yiw546w5Zyo6YCd5Y6755qE5pe26Ze0ICovXHJcbiAgICBnZXRUaW1lKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIGdhbWUudG90YWxUaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmuLjmiI/mnIDlsI/ljJbml7borrDlvZXml7bpl7TmlbDmja4gKi9cclxuICAgIHNhdmUoKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudGltZXMpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lc1trZXldLnN0YXJ0VGltZSA9IHRoaXMuZ2V0VGltZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5ri45oiP5pyA5aSn5YyW5pe25Zue5aSN5pe26Ze05pWw5o2uICovXHJcbiAgICBsb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLnRpbWVzKSB7XHJcbiAgICAgICAgICAgIGxldCBpbnRlcnZhbCA9IE1hdGguZmxvb3IoKHRoaXMuZ2V0VGltZSgpIC0gKHRoaXMudGltZXNba2V5XS5zdGFydFRpbWUgfHwgdGhpcy5nZXRUaW1lKCkpKSAvIDEwMDApO1xyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IHRoaXMudGltZXNba2V5XTtcclxuICAgICAgICAgICAgZGF0YS5vYmplY3RbZGF0YS5maWVsZF0gPSBkYXRhLm9iamVjdFtkYXRhLmZpZWxkXSAtIGludGVydmFsO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5vYmplY3RbZGF0YS5maWVsZF0gPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5vYmplY3RbZGF0YS5maWVsZF0gPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblRpbWVyQ29tcGxldGUoZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWVzW2tleV0uc3RhcnRUaW1lID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSAiLCIvKiog5pe26Ze05bel5YW3ICovXHJcbmV4cG9ydCBjbGFzcyBUaW1lVXRpbCB7XHJcbiAgICAvKipcclxuICAgICAqIOmXtOmalOWkqeaVsFxyXG4gICAgICogQHBhcmFtIHRpbWUxIOW8gOWni+aXtumXtFxyXG4gICAgICogQHBhcmFtIHRpbWUyIOe7k+adn+aXtumXtFxyXG4gICAgICogQHJldHVybnMgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZGF5c0JldHdlZW4odGltZTE6IG51bWJlciB8IHN0cmluZyB8IERhdGUsIHRpbWUyOiBudW1iZXIgfCBzdHJpbmcgfCBEYXRlKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGltZTIgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRpbWUyID0gK25ldyBEYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBzdGFydERhdGUgPSBuZXcgRGF0ZSh0aW1lMSkudG9Mb2NhbGVEYXRlU3RyaW5nKClcclxuICAgICAgICBsZXQgZW5kRGF0ZSA9IG5ldyBEYXRlKHRpbWUyKS50b0xvY2FsZURhdGVTdHJpbmcoKVxyXG4gICAgICAgIGxldCBzdGFydFRpbWUgPSBuZXcgRGF0ZShzdGFydERhdGUpLmdldFRpbWUoKTtcclxuICAgICAgICBsZXQgZW5kVGltZSA9IG5ldyBEYXRlKGVuZERhdGUpLmdldFRpbWUoKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoKHN0YXJ0VGltZSAtIGVuZFRpbWUpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6Ze06ZqU56eS5pWw77yM5pe26Ze06aG65bqP5peg6KaB5rGC77yM5pyA5ZCO5Lya6I635Y+W57ud5a+55YC8ICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHNlY3NCZXR3ZWVuKHRpbWUxOiBudW1iZXIsIHRpbWUyOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgZGF0ZXMgPSBNYXRoLmFicygodGltZTIgLSB0aW1lMSkpIC8gKDEwMDApO1xyXG4gICAgICAgIGRhdGVzID0gTWF0aC5mbG9vcihkYXRlcykgKyAxO1xyXG4gICAgICAgIHJldHVybiBkYXRlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS7o+eggeS8keecoOaXtumXtFxyXG4gICAgICogQHBhcmFtIG1zIOavq+enklxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIHNsZWVwKG1zOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0sIG1zKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0wNy0wMyAxNjoxMzoxN1xyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOC0wNSAxMDoxMzo0N1xyXG4gKi9cclxuaW1wb3J0IHsgTm9kZSwgdHdlZW4sIFZlYzMgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgVUlDYWxsYmFja3MgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vZXh0ZW5zaW9ucy9vb3BzLXBsdWdpbi1mcmFtZXdvcmsvYXNzZXRzL2NvcmUvZ3VpL2xheWVyL0RlZmluZXNcIjtcclxuaW1wb3J0IHsgb29wcyB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9leHRlbnNpb25zL29vcHMtcGx1Z2luLWZyYW1ld29yay9hc3NldHMvY29yZS9Pb3BzXCI7XHJcbmltcG9ydCB7IFVJSUQgfSBmcm9tIFwiLi4vY29uZmlnL0dhbWVVSUNvbmZpZ1wiO1xyXG5cclxuLyoqIOaPkOekuueql+WPo+euoeeQhiAqL1xyXG5jbGFzcyBUaXBzTWFuYWdlciB7XHJcbiAgICAvKipcclxuICAgICAqIOaPkOekuuW8ueWHuueql+WPo1xyXG4gICAgICogQHBhcmFtIGNvbnRlbnQgICDmj5DnpLrlhoXlrrnmlofmnKzmiJblpJror63oqIDlhbPplK7lrZdcclxuICAgICAqIEBwYXJhbSBvbk9rICAgICAg56Gu6K6k5Zue6LCDXHJcbiAgICAgKiBAcGFyYW0gdGl0bGUgICAgIOeql+WPo+agh+mimOaWh+acrOaIluWkmuivreiogOWFs+mUruWtl1xyXG4gICAgICogQHBhcmFtIG9rV29yZCAgICDnoa7orqTmjInpkq7mlofmnKzmiJblpJror63oqIDlhbPplK7lrZdcclxuICAgICAqL1xyXG4gICAgYWxlcnQoY29udGVudDogc3RyaW5nLCBvbk9rPzogRnVuY3Rpb24sIHRpdGxlPzogc3RyaW5nLCBva1dvcmQ/OiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgb3BlcmF0ZTogYW55ID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUgPyB0aXRsZSA6ICdjb21tb25fcHJvbXB0X3RpdGxlJyxcclxuICAgICAgICAgICAgY29udGVudDogY29udGVudCxcclxuICAgICAgICAgICAgb2tXb3JkOiBva1dvcmQgPyBva1dvcmQgOiAnY29tbW9uX3Byb21wdF9vaycsXHJcbiAgICAgICAgICAgIG9rRnVuYzogb25PayxcclxuICAgICAgICAgICAgbmVlZENhbmNlbDogZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgICAgIG9vcHMuZ3VpLm9wZW4oVUlJRC5BbGVydCwgb3BlcmF0ZSwgdGlwcy5nZXRQb3BDb21tb25FZmZlY3QoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnoa7orqTlvLnlh7rnqpflj6NcclxuICAgICAqIEBwYXJhbSBjb250ZW50ICAg5o+Q56S65YaF5a655paH5pys5oiW5aSa6K+t6KiA5YWz6ZSu5a2XXHJcbiAgICAgKiBAcGFyYW0gb25PayAgICAgIOehruiupOWbnuiwg1xyXG4gICAgICogQHBhcmFtIG9uQ2FuY2VsICDlj5bmtojlm57osINcclxuICAgICAqIEBwYXJhbSB0aXRsZSAgICAg56qX5Y+j5qCH6aKY5paH5pys5oiW5aSa6K+t6KiA5YWz6ZSu5a2XXHJcbiAgICAgKiBAcGFyYW0gb2tXb3JkICAgIOehruiupOaMiemSruaWh+acrOaIluWkmuivreiogOWFs+mUruWtl1xyXG4gICAgICovXHJcbiAgICBjb25maXJtKGNvbnRlbnQ6IHN0cmluZywgb25Paz86IEZ1bmN0aW9uLCBvbkNhbmNlbD86IEZ1bmN0aW9uLCB0aXRsZT86IHN0cmluZywgb2tXb3JkPzogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IG9wZXJhdGU6IGFueSA9IHtcclxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlID8gdGl0bGUgOiAnY29tbW9uX3Byb21wdF90aXRsZScsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICAgICAgICAgIG9rV29yZDogb2tXb3JkID8gb2tXb3JkIDogJ2NvbW1vbl9wcm9tcHRfb2snLFxyXG4gICAgICAgICAgICBjYW5jZWxXb3JkOiAnY29tbW9uX3Byb21wdF9jYW5jYWwnLFxyXG4gICAgICAgICAgICBva0Z1bmM6IG9uT2ssXHJcbiAgICAgICAgICAgIGNhbmNlbEZ1bmM6IG9uQ2FuY2VsLFxyXG4gICAgICAgICAgICBuZWVkQ2FuY2VsOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBvb3BzLmd1aS5vcGVuKFVJSUQuQ29uZmlybSwgb3BlcmF0ZSwgdGlwcy5nZXRQb3BDb21tb25FZmZlY3QoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOiHquWumuS5ieW8ueeql+WKqOeUuyAqL1xyXG4gICAgcHJpdmF0ZSBnZXRQb3BDb21tb25FZmZlY3QoY2FsbGJhY2tzPzogVUlDYWxsYmFja3MpIHtcclxuICAgICAgICBsZXQgbmV3Q2FsbGJhY2tzOiBVSUNhbGxiYWNrcyA9IHtcclxuICAgICAgICAgICAgLy8g6IqC54K55re75Yqg5Yqo55S7XHJcbiAgICAgICAgICAgIG9uQWRkZWQ6IChub2RlLCBwYXJhbXMpID0+IHtcclxuICAgICAgICAgICAgICAgIG5vZGUuc2V0U2NhbGUoMC4xLCAwLjEsIDAuMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdHdlZW4obm9kZSlcclxuICAgICAgICAgICAgICAgICAgICAudG8oMC4yLCB7IHNjYWxlOiBuZXcgVmVjMygxLCAxLCAxKSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdGFydCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyDoioLngrnliKDpmaTliqjnlLtcclxuICAgICAgICAgICAgb25CZWZvcmVSZW1vdmU6IChub2RlLCBuZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0d2Vlbihub2RlKVxyXG4gICAgICAgICAgICAgICAgICAgIC50bygwLjIsIHsgc2NhbGU6IG5ldyBWZWMzKDAuMSwgMC4xLCAwLjEpIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhbGwobmV4dClcclxuICAgICAgICAgICAgICAgICAgICAuc3RhcnQoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrcyAmJiBjYWxsYmFja3Mub25BZGRlZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG9uQWRkZWQgPSBjYWxsYmFja3Mub25BZGRlZDtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbkFkZGVkID0gKG5vZGU6IE5vZGUsIHBhcmFtczogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25BZGRlZChub2RlLCBwYXJhbXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2FsbGJhY2tzLm9uQWRkZWQobm9kZSwgcGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFja3MgJiYgY2FsbGJhY2tzLm9uQmVmb3JlUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgb25CZWZvcmVSZW1vdmUgPSBjYWxsYmFja3Mub25CZWZvcmVSZW1vdmU7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Mub25CZWZvcmVSZW1vdmUgPSAobm9kZSwgcGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25CZWZvcmVSZW1vdmUobm9kZSwgcGFyYW1zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0NhbGxiYWNrcy5vbkJlZm9yZVJlbW92ZShub2RlLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3Q2FsbGJhY2tzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIHRpcHMgPSBuZXcgVGlwc01hbmFnZXIoKTsiLCJpbXBvcnQgeyBBdWRpb0NsaXAsIEJ1dHRvbiwgRXZlbnRUb3VjaCwgX2RlY29yYXRvciwgZ2FtZSB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyBvb3BzIH0gZnJvbSBcIi4uLy4uLy4uL2NvcmUvT29wc1wiO1xyXG5pbXBvcnQgeyByZXNMb2FkZXIgfSBmcm9tIFwiLi4vLi4vLi4vY29yZS9jb21tb24vbG9hZGVyL1Jlc0xvYWRlclwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgbWVudSB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiBcclxuICog6YCa55So5oyJ6ZKuXHJcbiAqIDHjgIHpmLLov57ngrlcclxuICogMuOAgeaMiemSrueCueWHu+inpuWPkemfs+aViFxyXG4gKi9cclxuQGNjY2xhc3MoXCJVSUJ1dHRvblwiKVxyXG5AbWVudSgnT29wc0ZyYW1ld29yay9CdXR0b24vVUlCdXR0b24g77yI6YCa55So5oyJ6ZKu77yJJylcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVUlCdXR0b24gZXh0ZW5kcyBCdXR0b24ge1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiBcIuavj+asoeinpuWPkemXtOmalFwiXHJcbiAgICB9KVxyXG4gICAgcHJpdmF0ZSBpbnRlcnZhbDogbnVtYmVyID0gNTAwO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLmmK/lkKblj6rop6blj5HkuIDmrKFcIlxyXG4gICAgfSlcclxuICAgIHByaXZhdGUgb25jZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLop6bmkbjpn7PmlYhcIixcclxuICAgICAgICB0eXBlOiBBdWRpb0NsaXBcclxuICAgIH0pXHJcbiAgICBwcml2YXRlIGVmZmVjdDogQXVkaW9DbGlwID0gbnVsbCE7XHJcbiAgICAvLyBwcml2YXRlIGVmZmVjdElkczogbnVtYmVyW10gPSBbXTtcclxuXHJcbiAgICAvKiog6Kem5pG45qyh5pWwICovXHJcbiAgICBwcml2YXRlIF90b3VjaENvdW50ID0gMDtcclxuICAgIC8qKiDop6bmkbjnu5PmnZ/ml7bpl7QgKi9cclxuICAgIHByaXZhdGUgX3RvdWNoRW5kVGltZSA9IDA7XHJcblxyXG4gICAgLyoqIOinpuaRuOe7k+adnyAqL1xyXG4gICAgcHJvdGVjdGVkIF9vblRvdWNoRW5kZWQoZXZlbnQ6IEV2ZW50VG91Y2gpIHtcclxuICAgICAgICAvLyDmmK/lkKblj6rop6blj5HkuIDmrKFcclxuICAgICAgICBpZiAodGhpcy5vbmNlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90b3VjaENvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl90b3VjaENvdW50Kys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDpmLLov57ngrk1MDDmr6vnp5Llh7rlj5HkuIDmrKHkuovku7ZcclxuICAgICAgICBpZiAodGhpcy5fdG91Y2hFbmRUaW1lICYmIGdhbWUudG90YWxUaW1lIC0gdGhpcy5fdG91Y2hFbmRUaW1lIDwgdGhpcy5pbnRlcnZhbCkge1xyXG4gICAgICAgICAgICBldmVudC5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fdG91Y2hFbmRUaW1lID0gZ2FtZS50b3RhbFRpbWU7XHJcbiAgICAgICAgICAgIHN1cGVyLl9vblRvdWNoRW5kZWQoZXZlbnQpO1xyXG5cclxuICAgICAgICAgICAgLy8g55+t5oyJ6Kem5pG46Z+z5pWIXHJcbiAgICAgICAgICAgIHRoaXMucGxheUVmZmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog55+t5oyJ6Kem5pG46Z+z5pWIICovXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgcGxheUVmZmVjdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5lZmZlY3QpIHtcclxuICAgICAgICAgICAgb29wcy5hdWRpby5wbGF5RWZmZWN0KHRoaXMuZWZmZWN0KTtcclxuICAgICAgICAgICAgLy8gY29uc3QgZWZmZWN0SWQgPSBhd2FpdCBvb3BzLmF1ZGlvLnBsYXlFZmZlY3QodGhpcy5lZmZlY3QsIHJlc0xvYWRlci5kZWZhdWx0QnVuZGxlTmFtZSwgKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyAgICAgdGhpcy5lZmZlY3RJZHMucmVtb3ZlKGVmZmVjdElkKTtcclxuICAgICAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgIC8vIGlmIChlZmZlY3RJZCA+IDApIHRoaXMuZWZmZWN0SWRzLnB1c2goZWZmZWN0SWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBvbkRlc3Ryb3koKSB7XHJcbiAgICAvLyAgICAgaWYgKHRoaXMuZWZmZWN0KSB7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuZWZmZWN0SWRzLmZvckVhY2goZWZmZWN0SWQgPT4ge1xyXG4gICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coZWZmZWN0SWQpO1xyXG4gICAgLy8gICAgICAgICAgICAgb29wcy5hdWRpby5wdXRFZmZlY3QoZWZmZWN0SWQsIHRoaXMuZWZmZWN0KTtcclxuICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG59XHJcbiIsImltcG9ydCB7TWF0NCwgVmVjM30gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7TWF0aFV0aWx9IGZyb20gXCIuL01hdGhVdGlsXCI7XHJcblxyXG4vKiog5ZCR6YeP5bel5YW3ICovXHJcbmV4cG9ydCBjbGFzcyBWZWMzVXRpbCB7XHJcbiAgICAvKipcclxuICAgICAqIFjovbRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldCB4KCk6IFJlYWRvbmx5PFZlYzM+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlYzMoMSwgMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBZ6L20XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXQgeSgpOiBSZWFkb25seTxWZWMzPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWMzKDAsIDEsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogWui9tFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0IHooKTogUmVhZG9ubHk8VmVjMz4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjMygwLCAwLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW3puWQkemHj1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0IGxlZnQoKTogUmVhZG9ubHk8VmVjMz4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjMygtMSwgMCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlj7PlkJHph49cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldCByaWdodCgpOiBSZWFkb25seTxWZWMzPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWMzKDEsIDAsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiK5ZCR6YePXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXQgdXAoKTogUmVhZG9ubHk8VmVjMz4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjMygwLCAxLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS4i+WQkemHj1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0IGRvd24oKTogUmVhZG9ubHk8VmVjMz4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjMygwLCAtMSwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliY3lkJHph49cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldCBmb3J3YXJkKCk6IFJlYWRvbmx5PFZlYzM+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlYzMoMCwgMCwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlkI7lkJHph49cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldCBiYWNrKCk6IFJlYWRvbmx5PFZlYzM+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlYzMoMCwgMCwgLTEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogMeWQkemHj1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0IG9uZSgpOiBSZWFkb25seTxWZWMzPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWMzKDEsIDEsIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogMOWQkemHj1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0IHplcm8oKTogUmVhZG9ubHk8VmVjMz4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjMygwLCAwLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmaj+aXtumXtOWPmOWMlui/m+W6puWAvFxyXG4gICAgICogQHBhcmFtIHN0YXJ0ICDotbflp4vkvY3nva5cclxuICAgICAqIEBwYXJhbSBlbmQgICAg57uT5p2f5L2N572uXHJcbiAgICAgKiBAcGFyYW0gdCAgICAgIOi/m+W6plsw77yMMV1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIHByb2dyZXNzKHN0YXJ0OiBWZWMzLCBlbmQ6IFZlYzMsIHQ6IG51bWJlcik6IFZlYzMge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBuZXcgVmVjMygpO1xyXG4gICAgICAgIGN1cnJlbnQueCA9IE1hdGhVdGlsLnByb2dyZXNzKHN0YXJ0LngsIGVuZC54LCB0KTtcclxuICAgICAgICBjdXJyZW50LnkgPSBNYXRoVXRpbC5wcm9ncmVzcyhzdGFydC55LCBlbmQueSwgdCk7XHJcbiAgICAgICAgY3VycmVudC56ID0gTWF0aFV0aWwucHJvZ3Jlc3Moc3RhcnQueiwgZW5kLnosIHQpO1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rGC5Lik5Liq5LiJ57u05ZCR6YeP55qE5ZKMXHJcbiAgICAgKiBAcGFyYW0gcG9zMSAg5ZCR6YePMVxyXG4gICAgICogQHBhcmFtIHBvczIgIOWQkemHjzJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFkZChwb3MxOiBWZWMzLCBwb3MyOiBWZWMzKTogVmVjMyB7XHJcbiAgICAgICAgY29uc3Qgb3V0UG9zOiBWZWMzID0gbmV3IFZlYzMoKTtcclxuICAgICAgICBWZWMzLmFkZChvdXRQb3MsIHBvczEsIHBvczIpO1xyXG4gICAgICAgIHJldHVybiBvdXRQb3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmsYLkuKTkuKrkuInnu7TlkJHph4/nmoTlt65cclxuICAgICAqIEBwYXJhbSBwb3MxICDlkJHph48xXHJcbiAgICAgKiBAcGFyYW0gcG9zMiAg5ZCR6YePMlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc3ViKHBvczE6IFZlYzMsIHBvczI6IFZlYzMpOiBWZWMzIHtcclxuICAgICAgICBjb25zdCBvdXRQb3M6IFZlYzMgPSBuZXcgVmVjMygpO1xyXG4gICAgICAgIFZlYzMuc3VidHJhY3Qob3V0UG9zLCBwb3MxLCBwb3MyKTtcclxuICAgICAgICByZXR1cm4gb3V0UG9zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiJ57u05ZCR6YeP5LmY5Lul5bi46YePXHJcbiAgICAgKiBAcGFyYW0gcG9zICAgICDlkJHph49cclxuICAgICAqIEBwYXJhbSBzY2FsYXIgIOW4uOmHj1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbXVsKHBvczogVmVjMywgc2NhbGFyOiBudW1iZXIpOiBWZWMzIHtcclxuICAgICAgICBjb25zdCBvdXRQb3M6IFZlYzMgPSBuZXcgVmVjMygpO1xyXG4gICAgICAgIFZlYzMubXVsdGlwbHlTY2FsYXIob3V0UG9zLCBwb3MsIHNjYWxhcik7XHJcbiAgICAgICAgcmV0dXJuIG91dFBvcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS4iee7tOWQkemHj+mZpOW4uOmHj1xyXG4gICAgICogQHBhcmFtIHBvcyAgICAg5ZCR6YePXHJcbiAgICAgKiBAcGFyYW0gc2NhbGFyICDluLjph49cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGRpdihwb3M6IFZlYzMsIHNjYWxhcjogbnVtYmVyKTogVmVjMyB7XHJcbiAgICAgICAgY29uc3Qgb3V0UG9zOiBWZWMzID0gbmV3IFZlYzMoKTtcclxuXHJcbiAgICAgICAgb3V0UG9zLnggPSBwb3MueCAvIHNjYWxhcjtcclxuICAgICAgICBvdXRQb3MueSA9IHBvcy55IC8gc2NhbGFyO1xyXG4gICAgICAgIG91dFBvcy56ID0gcG9zLnogLyBzY2FsYXI7XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRQb3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKTmlq3kuKTkuKrkuInnu7TlkJHph4/nmoTlgLzmmK/lkKbnm7jnrYlcclxuICAgICAqIEBwYXJhbSBwb3MxICDlkJHph48xXHJcbiAgICAgKiBAcGFyYW0gcG9zMiAg5ZCR6YePMlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZXF1YWxzKHBvczE6IFZlYzMsIHBvczI6IFZlYzMpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gcG9zMS54ID09IHBvczIueCAmJiBwb3MxLnkgPT0gcG9zMi55ICYmIHBvczEueiA9PSBwb3MyLno7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuInnu7TlkJHph4/nmoTmqKFcclxuICAgICAqIEBwYXJhbSBwb3MgIOWQkemHj1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbWFnbml0dWRlKHBvczogVmVjMyk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHBvcy5sZW5ndGgoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS4iee7tOWQkemHj+W9kuS4gOWMllxyXG4gICAgICogQHBhcmFtIHBvcyAg5ZCR6YePXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBub3JtYWxpemUocG9zOiBWZWMzKTogVmVjMyB7XHJcbiAgICAgICAgY29uc3Qgb3V0UG9zOiBWZWMzID0gbmV3IFZlYzMocG9zLngsIHBvcy55LCBwb3Mueik7XHJcbiAgICAgICAgcmV0dXJuIG91dFBvcy5ub3JtYWxpemUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+W+l+S9jee9rjHvvIzliLDkvY3nva4y55qE5pa55ZCRXHJcbiAgICAgKiBAcGFyYW0gcG9zMSAg5ZCR6YePMVxyXG4gICAgICogQHBhcmFtIHBvczIgIOWQkemHjzJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGRpcmVjdGlvbihwb3MxOiBWZWMzLCBwb3MyOiBWZWMzKTogVmVjMyB7XHJcbiAgICAgICAgY29uc3Qgb3V0UG9zOiBWZWMzID0gbmV3IFZlYzMoKTtcclxuICAgICAgICBWZWMzLnN1YnRyYWN0KG91dFBvcywgcG9zMiwgcG9zMSlcclxuICAgICAgICByZXR1cm4gb3V0UG9zLm5vcm1hbGl6ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635b6X5Lik54K56Ze055qE6Led56a7XHJcbiAgICAgKiBAcGFyYW0gcG9zMSAg5ZCR6YePMVxyXG4gICAgICogQHBhcmFtIHBvczIgIOWQkemHjzJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGRpc3RhbmNlKHBvczE6IFZlYzMsIHBvczI6IFZlYzMpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBWZWMzLmRpc3RhbmNlKHBvczEsIHBvczIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5o+S5YC86L+Q566XXHJcbiAgICAgKiBAcGFyYW0gcG9zU3RhcnQgIOW8gOWni+S/j+atpVxyXG4gICAgICogQHBhcmFtIHBvc0VuZCAgICDnu5PmnZ/kvY3nva5cclxuICAgICAqIEBwYXJhbSB0ICAgICAgICAg5pe26Ze0XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBsZXJwKHBvc1N0YXJ0OiBWZWMzLCBwb3NFbmQ6IFZlYzMsIHQ6IG51bWJlcik6IFZlYzMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJlemllck9uZSh0LCBwb3NTdGFydCwgcG9zRW5kKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOeQg+mdouaPkuWAvFxyXG4gICAgICogQHBhcmFtIGZyb20gIOi1t+eCuVxyXG4gICAgICogQHBhcmFtIHRvICAgIOe7iOeCuVxyXG4gICAgICogQHBhcmFtIHQgICAgIOaXtumXtFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2xlcnAoZnJvbTogVmVjMywgdG86IFZlYzMsIHQ6IG51bWJlcik6IFZlYzMge1xyXG4gICAgICAgIGlmICh0IDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZyb207XHJcbiAgICAgICAgfSBlbHNlIGlmICh0ID49IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGRpcjogVmVjMyA9IHRoaXMucm90YXRlVG8oZnJvbSwgdG8sIChWZWMzLmFuZ2xlKGZyb20sIHRvKSAvIE1hdGguUEkgKiAxODApICogdCk7XHJcbiAgICAgICAgdmFyIGxlbmdodDogbnVtYmVyID0gdG8ubGVuZ3RoKCkgKiB0ICsgZnJvbS5sZW5ndGgoKSAqICgxIC0gdCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoZGlyLm5vcm1hbGl6ZSgpKS5tdWx0aXBseVNjYWxhcihsZW5naHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5ZCR6YeP5peL6L2s5LiA5Liq6KeS5bqmXHJcbiAgICAgKiBAcGFyYW0gZnJvbSAg6LW354K5XHJcbiAgICAgKiBAcGFyYW0gdG8gICAg57uI54K5XHJcbiAgICAgKiBAcGFyYW0gYW5nbGUg6KeS5bm2XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyByb3RhdGVUbyhmcm9tOiBWZWMzLCB0bzogVmVjMywgYW5nbGU6IG51bWJlcik6IFZlYzMge1xyXG4gICAgICAgIC8v5aaC5p6c5Lik5Liq5pa55ZCR6KeS5bqm5Li6MO+8jOWImei/lOWbnuebruagh1xyXG4gICAgICAgIGlmIChWZWMzLmFuZ2xlKGZyb20sIHRvKSA9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0bztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGF4aXM6IFZlYzMgPSBuZXcgVmVjMygpOyAgICAgICAgICAgICAgICAgLy8g6I635b6X5peL6L2s6L20XHJcbiAgICAgICAgVmVjMy5jcm9zcyhheGlzLCBmcm9tLCB0byk7XHJcbiAgICAgICAgYXhpcy5ub3JtYWxpemUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmFkaWFuOiBudW1iZXIgPSBhbmdsZSAqIE1hdGguUEkgLyAxODA7IC8vIOiOt+W+l+W8p+W6plxyXG4gICAgICAgIGNvbnN0IHJvdGF0ZU1hdHJpeDogTWF0NCA9IG5ldyBNYXQ0KCk7XHJcbiAgICAgICAgcm90YXRlTWF0cml4LnJvdGF0ZShyYWRpYW4sIGF4aXMpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFZlYzMoXHJcbiAgICAgICAgICAgIGZyb20ueCAqIHJvdGF0ZU1hdHJpeC5tMDAgKyBmcm9tLnkgKiByb3RhdGVNYXRyaXgubTA0ICsgZnJvbS56ICogcm90YXRlTWF0cml4Lm0wOCxcclxuICAgICAgICAgICAgZnJvbS54ICogcm90YXRlTWF0cml4Lm0wMSArIGZyb20ueSAqIHJvdGF0ZU1hdHJpeC5tMDUgKyBmcm9tLnogKiByb3RhdGVNYXRyaXgubTA5LFxyXG4gICAgICAgICAgICBmcm9tLnggKiByb3RhdGVNYXRyaXgubTAyICsgZnJvbS55ICogcm90YXRlTWF0cml4Lm0wNiArIGZyb20ueiAqIHJvdGF0ZU1hdHJpeC5tMTBcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiA5qyh6LSd5aGe5bCU5Y2z5Li657q/5oCn5o+S5YC85Ye95pWwXHJcbiAgICAgKiBAcGFyYW0gdFxyXG4gICAgICogQHBhcmFtIHBvc1N0YXJ0XHJcbiAgICAgKiBAcGFyYW0gcG9zRW5kXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYmV6aWVyT25lKHQ6IG51bWJlciwgcG9zU3RhcnQ6IFZlYzMsIHBvc0VuZDogVmVjMyk6IFZlYzMge1xyXG4gICAgICAgIGlmICh0ID4gMSkge1xyXG4gICAgICAgICAgICB0ID0gMTtcclxuICAgICAgICB9IGVsc2UgaWYgKHQgPCAwKSB7XHJcbiAgICAgICAgICAgIHQgPSAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcFN0YXJ0OiBWZWMzID0gcG9zU3RhcnQuY2xvbmUoKTtcclxuICAgICAgICB2YXIgcEVuZDogVmVjMyA9IHBvc0VuZC5jbG9uZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gcFN0YXJ0Lm11bHRpcGx5U2NhbGFyKDEgLSB0KS5hZGQocEVuZC5tdWx0aXBseVNjYWxhcih0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuozmrKHotJ3loZ7lsJTmm7Lnur9cclxuICAgICAqIEBwYXJhbSB0XHJcbiAgICAgKiBAcGFyYW0gcG9zU3RhcnRcclxuICAgICAqIEBwYXJhbSBwb3NDb25cclxuICAgICAqIEBwYXJhbSBwb3NFbmRcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBiZXppZXJUd28odDogbnVtYmVyLCBwb3NTdGFydDogVmVjMywgcG9zQ29uOiBWZWMzLCBwb3NFbmQ6IFZlYzMpOiBWZWMzIHtcclxuICAgICAgICBpZiAodCA+IDEpIHtcclxuICAgICAgICAgICAgdCA9IDE7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0IDwgMCkge1xyXG4gICAgICAgICAgICB0ID0gMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbiA9ICgxIC0gdCk7XHJcbiAgICAgICAgY29uc3QgdHQgPSB0ICogdDtcclxuXHJcbiAgICAgICAgY29uc3QgcFN0YXJ0OiBWZWMzID0gcG9zU3RhcnQuY2xvbmUoKTtcclxuICAgICAgICBjb25zdCBwb3MgPSBuZXcgVmVjMygpO1xyXG5cclxuICAgICAgICBjb25zdCBwQ29uOiBWZWMzID0gcG9zQ29uLmNsb25lKCk7XHJcbiAgICAgICAgY29uc3QgcEVuZDogVmVjMyA9IHBvc0VuZC5jbG9uZSgpO1xyXG5cclxuICAgICAgICBwb3MuYWRkKHBTdGFydC5tdWx0aXBseVNjYWxhcihuICogbikpO1xyXG4gICAgICAgIHBvcy5hZGQocENvbi5tdWx0aXBseVNjYWxhcigyICogbiAqIHQpKTtcclxuICAgICAgICBwb3MuYWRkKHBFbmQubXVsdGlwbHlTY2FsYXIodHQpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBvcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS4ieasoei0neWhnuWwlFxyXG4gICAgICogQHBhcmFtIHRcclxuICAgICAqIEBwYXJhbSBwb3NTdGFydFxyXG4gICAgICogQHBhcmFtIHBvc0NvbjFcclxuICAgICAqIEBwYXJhbSBwb3NDb24yXHJcbiAgICAgKiBAcGFyYW0gcG9zRW5kXHJcbiAgICAgKiBAcmV0dXJuc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgYmV6aWVyVGhyZWUodDogbnVtYmVyLCBwb3NTdGFydDogVmVjMywgcG9zQ29uMTogVmVjMywgcG9zQ29uMjogVmVjMywgcG9zRW5kOiBWZWMzKTogVmVjMyB7XHJcbiAgICAgICAgaWYgKHQgPiAxKSB7XHJcbiAgICAgICAgICAgIHQgPSAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodCA8IDApIHtcclxuICAgICAgICAgICAgdCA9IDBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG4gPSAoMSAtIHQpO1xyXG4gICAgICAgIGNvbnN0IG5uID0gbiAqIG47XHJcbiAgICAgICAgY29uc3Qgbm5uID0gbm4gKiBuO1xyXG4gICAgICAgIGNvbnN0IHR0ID0gdCAqIHQ7XHJcbiAgICAgICAgY29uc3QgdHR0ID0gdHQgKiB0O1xyXG5cclxuICAgICAgICBjb25zdCBwU3RhcnQ6IFZlYzMgPSBwb3NTdGFydC5jbG9uZSgpO1xyXG4gICAgICAgIGNvbnN0IHBvcyA9IHBvc1N0YXJ0LmNsb25lKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBDb24xOiBWZWMzID0gcG9zQ29uMS5jbG9uZSgpO1xyXG4gICAgICAgIGNvbnN0IHBDb24yOiBWZWMzID0gcG9zQ29uMi5jbG9uZSgpO1xyXG4gICAgICAgIGNvbnN0IHBFbmQ6IFZlYzMgPSBwb3NFbmQuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgcG9zLmFkZChwU3RhcnQubXVsdGlwbHlTY2FsYXIobm5uKSk7XHJcbiAgICAgICAgcG9zLmFkZChwQ29uMS5tdWx0aXBseVNjYWxhcigzICogbm4gKiB0KSk7XHJcbiAgICAgICAgcG9zLmFkZChwQ29uMi5tdWx0aXBseVNjYWxhcigzICogbiAqIHR0KSk7XHJcbiAgICAgICAgcG9zLmFkZChwRW5kLm11bHRpcGx5U2NhbGFyKHR0dCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gcG9zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog54K55LmYXHJcbiAgICAgKiBAcGFyYW0gZGlyMSDmlrnlkJHph48xXHJcbiAgICAgKiBAcGFyYW0gZGlyMiDmlrnlkJHph48yXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkb3QoZGlyMTogVmVjMywgZGlyMjogVmVjMyk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgdGVtcERpcjE6IFZlYzMgPSBkaXIxO1xyXG4gICAgICAgIGNvbnN0IHRlbXBEaXIyOiBWZWMzID0gZGlyMjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRlbXBEaXIxLnggKiB0ZW1wRGlyMi54ICsgdGVtcERpcjEueSAqIHRlbXBEaXIyLnkgKyB0ZW1wRGlyMS56ICogdGVtcERpcjIuejtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWPieS5mFxyXG4gICAgICogQHBhcmFtIGRpcjEg5pa55ZCR6YePMVxyXG4gICAgICogQHBhcmFtIGRpcjIg5pa55ZCR6YePMlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY3Jvc3MoZGlyMTogVmVjMywgZGlyMjogVmVjMyk6IFZlYzMge1xyXG4gICAgICAgIGNvbnN0IGk6IFZlYzMgPSBuZXcgVmVjMygxLCAwLCAwKTtcclxuICAgICAgICBjb25zdCBqOiBWZWMzID0gbmV3IFZlYzMoMCwgMSwgMCk7XHJcbiAgICAgICAgY29uc3QgazogVmVjMyA9IG5ldyBWZWMzKDAsIDAsIDEpO1xyXG5cclxuICAgICAgICBjb25zdCB0ZW1wRGlyMTogVmVjMyA9IG5ldyBWZWMzKGRpcjEueCwgZGlyMS55LCBkaXIxLnopO1xyXG4gICAgICAgIGNvbnN0IHRlbXBEaXIyOiBWZWMzID0gbmV3IFZlYzMoZGlyMi54LCBkaXIyLnksIGRpcjIueik7XHJcblxyXG4gICAgICAgIGNvbnN0IGl2OiBWZWMzID0gaS5tdWx0aXBseVNjYWxhcih0ZW1wRGlyMS55ICogdGVtcERpcjIueiAtIHRlbXBEaXIyLnkgKiB0ZW1wRGlyMS56KTtcclxuICAgICAgICBjb25zdCBqdjogVmVjMyA9IGoubXVsdGlwbHlTY2FsYXIodGVtcERpcjIueCAqIHRlbXBEaXIxLnogLSB0ZW1wRGlyMS54ICogdGVtcERpcjIueik7XHJcbiAgICAgICAgY29uc3Qga3Y6IFZlYzMgPSBrLm11bHRpcGx5U2NhbGFyKHRlbXBEaXIxLnggKiB0ZW1wRGlyMi55IC0gdGVtcERpcjIueCAqIHRlbXBEaXIxLnkpO1xyXG5cclxuICAgICAgICByZXR1cm4gaXYuYWRkKGp2KS5hZGQoa3YpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635b6X5Lik5Liq5pa55ZCR5ZCR6YeP55qE6KeS5bqmXHJcbiAgICAgKiBAcGFyYW0gZGlyMSDmlrnlkJHph48xXHJcbiAgICAgKiBAcGFyYW0gZGlyMiDmlrnlkJHph48yXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhbmdsZShkaXIxOiBWZWMzLCBkaXIyOiBWZWMzKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBkb3RWYWx1ZSA9IHRoaXMuZG90KGRpcjEuY2xvbmUoKS5ub3JtYWxpemUoKSwgZGlyMi5jbG9uZSgpLm5vcm1hbGl6ZSgpKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5hY29zKGRvdFZhbHVlKSAvIE1hdGguUEkgKiAxODAgKiBNYXRoLnNpZ24oZG90VmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635b6X5pa55ZCRYeWIsOaWueWQkWLnmoTop5LluqbvvIjluKbmnInmlrnlkJHnmoTop5LluqbvvIlcclxuICAgICAqIEBwYXJhbSBhIOinkuW6pmFcclxuICAgICAqIEBwYXJhbSBiIOinkuW6pmJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGRpckFuZ2xlKGE6IFZlYzMsIGI6IFZlYzMpOiBudW1iZXIge1xyXG4gICAgICAgIGNvbnN0IGM6IFZlYzMgPSBWZWMzVXRpbC5jcm9zcyhhLCBiKTtcclxuICAgICAgICBjb25zdCBhbmdsZTogbnVtYmVyID0gVmVjM1V0aWwuYW5nbGUoYSwgYik7XHJcbiAgICAgICAgLy8gYSDliLAgYiDnmoTlpLnop5JcclxuICAgICAgICBjb25zdCBzaWduID0gTWF0aC5zaWduKFZlYzNVdGlsLmRvdChjLm5vcm1hbGl6ZSgpLCBWZWMzVXRpbC5jcm9zcyhiLm5vcm1hbGl6ZSgpLCBhLm5vcm1hbGl6ZSgpKSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gYW5nbGUgKiBzaWduO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgZGlyZWN0b3IsIGxvZyB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgSnNvbk9iIH0gZnJvbSAnLi9Kc29uT2InO1xyXG5cclxuY29uc3QgVk1fRU1JVF9IRUFEID0gJ1ZDOic7XHJcbmNvbnN0IERFQlVHX1NIT1dfUEFUSCA9IGZhbHNlO1xyXG5cclxuLyoqIOmAmui/hyAuICDot6/lvoTorr7nva7lgLwgKi9cclxuZnVuY3Rpb24gc2V0VmFsdWVGcm9tUGF0aChvYmo6IGFueSwgcGF0aDogc3RyaW5nLCB2YWx1ZTogYW55LCB0YWc6IHN0cmluZyB8IG51bGwgPSAnJykge1xyXG4gICAgbGV0IHByb3BzID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHByb3BOYW1lID0gcHJvcHNbaV07XHJcbiAgICAgICAgaWYgKHByb3BOYW1lIGluIG9iaiA9PT0gZmFsc2UpIHsgY29uc29sZS5lcnJvcignWycgKyBwcm9wTmFtZSArICddIG5vdCBmaW5kIGluICcgKyB0YWcgKyAnLicgKyBwYXRoKTsgYnJlYWs7IH1cclxuICAgICAgICBpZiAoaSA9PSBwcm9wcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIG9ialtwcm9wTmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9iaiA9IG9ialtwcm9wTmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiog6YCa6L+HIC4g6Lev5b6EIOiOt+WPluWAvCAqL1xyXG5mdW5jdGlvbiBnZXRWYWx1ZUZyb21QYXRoKG9iajogYW55LCBwYXRoOiBzdHJpbmcsIGRlZj86IGFueSwgdGFnOiBzdHJpbmcgfCBudWxsID0gJycpOiBhbnkge1xyXG4gICAgbGV0IHByb3BzID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHByb3BOYW1lID0gcHJvcHNbaV07XHJcbiAgICAgICAgaWYgKChwcm9wTmFtZSBpbiBvYmogPT09IGZhbHNlKSkgeyBjb25zb2xlLmVycm9yKCdbJyArIHByb3BOYW1lICsgJ10gbm90IGZpbmQgaW4gJyArIHRhZyArICcuJyArIHBhdGgpOyByZXR1cm4gZGVmOyB9XHJcbiAgICAgICAgb2JqID0gb2JqW3Byb3BOYW1lXTtcclxuICAgIH1cclxuICAgIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIikgb2JqID0gZGVmOy8v5aaC5p6cZyA9PSBudWxsIOWImei/lOWbnuS4gOS4qum7mOiupOWAvFxyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1vZGVsVmlld2VyIOexu1xyXG4gKi9cclxuY2xhc3MgVmlld01vZGVsPFQ+e1xyXG4gICAgY29uc3RydWN0b3IoZGF0YTogVCwgdGFnOiBzdHJpbmcpIHtcclxuICAgICAgICBuZXcgSnNvbk9iKGRhdGEsIHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuJGRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuX3RhZyA9IHRhZztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgJGRhdGE6IFQ7XHJcblxyXG4gICAgLy8g57Si5byV5YC855So55qE5qCH562+XHJcbiAgICBwcml2YXRlIF90YWc6IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIC8qKiDmv4DmtLvnirbmgIEsIOWwhuS8mumAmui/hyBkaXJlY3Rvci5lbWl0IOWPkemAgeWAvOWPmOWKqOeahOS/oeWPtywg6YCC5ZCI6ZyA6KaB5bGP6JS955qE5oOF5Ya1ICovXHJcbiAgICBwdWJsaWMgYWN0aXZlOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICAvKiog5piv5ZCm5r+A5rS75qC56Lev5b6E5Zue6LCD6YCa55+lLCDkuI3mv4DmtLvnmoTmg4XlhrXkuIsg5Y+q6IO955uR5ZCs5pyr56uv6Lev5b6E5YC85p2l5Yik5pat5piv5ZCm5Y+Y5YyWICovXHJcbiAgICBwdWJsaWMgZW1pdFRvUm9vdFBhdGg6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvLyDlm57osIPlh73mlbAg6K+35rOo5oSPIOWbnuiwg+eahCBwYXRoIOaVsOe7hOaYryDlvJXnlKjnsbvlnovvvIznpoHmraLkv67mlLlcclxuICAgIHByaXZhdGUgX2NhbGxiYWNrKG46IGFueSwgbzogYW55LCBwYXRoOiBzdHJpbmdbXSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGxldCBuYW1lID0gVk1fRU1JVF9IRUFEICsgdGhpcy5fdGFnICsgJy4nICsgcGF0aC5qb2luKCcuJylcclxuICAgICAgICAgICAgaWYgKERFQlVHX1NIT1dfUEFUSCkgbG9nKCc+PicsIG4sIG8sIHBhdGgpO1xyXG4gICAgICAgICAgICBkaXJlY3Rvci5lbWl0KG5hbWUsIG4sIG8sIFt0aGlzLl90YWddLmNvbmNhdChwYXRoKSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOmAmuefpeacq+err+i3r+W+hFxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZW1pdFRvUm9vdFBhdGgpIGRpcmVjdG9yLmVtaXQoVk1fRU1JVF9IRUFEICsgdGhpcy5fdGFnLCBuLCBvLCBwYXRoKTsgICAvLyDpgJrnn6XkuLvot6/lvoRcclxuXHJcbiAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHBhdGhbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb2coJ+S4reerr+i3r+W+hCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOmAmui/h+i3r+W+hOiuvue9ruaVsOaNrueahOaWueazlVxyXG4gICAgcHVibGljIHNldFZhbHVlKHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG4gICAgICAgIHNldFZhbHVlRnJvbVBhdGgodGhpcy4kZGF0YSwgcGF0aCwgdmFsdWUsIHRoaXMuX3RhZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6I635Y+W6Lev5b6E55qE5YC8XHJcbiAgICBwdWJsaWMgZ2V0VmFsdWUocGF0aDogc3RyaW5nLCBkZWY/OiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiBnZXRWYWx1ZUZyb21QYXRoKHRoaXMuJGRhdGEsIHBhdGgsIGRlZiwgdGhpcy5fdGFnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFZNIOWvueixoeeuoeeQhuWZqCjlt6XljoIpXHJcbiAqL1xyXG5jbGFzcyBWTU1hbmFnZXIge1xyXG4gICAgcHJpdmF0ZSBfbXZzOiBNYXA8c3RyaW5nLCBWaWV3TW9kZWw8YW55Pj4gPSBuZXcgTWFwPHN0cmluZywgVmlld01vZGVsPGFueT4+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnu5HlrprkuIDkuKrmlbDmja7vvIzlubbkuJTlj6/ku6XnlLFWTeaJgOeuoeeQhu+8iOe7keWumueahOaVsOaNruWPquiDveaYr+WAvOexu+Wei++8iVxyXG4gICAgICogQHBhcmFtIGRhdGEg6ZyA6KaB57uR5a6a55qE5pWw5o2uXHJcbiAgICAgKiBAcGFyYW0gdGFnIOWvueW6lOivpeaVsOaNrueahOagh+etvijnlKjkuo7or4bliKvkuLrlk6rkuKpWTe+8jOS4jeWFgeiuuOmHjeWkjSlcclxuICAgICAqIEBwYXJhbSBhY3RpdmVSb290T2JqZWN0IOa/gOa0u+S4u+i3r+W+hOmAmuefpe+8jOWPr+iDveS8muacieaAp+iDveW9seWTje+8jOS4gOiIrOS4jeS9v+eUqFxyXG4gICAgICovXHJcbiAgICBhZGQ8VD4oZGF0YTogVCwgdGFnOiBzdHJpbmcgPSAnZ2xvYmFsJywgYWN0aXZlUm9vdE9iamVjdDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IHZtID0gbmV3IFZpZXdNb2RlbDxUPihkYXRhLCB0YWcpO1xyXG4gICAgICAgIGxldCBoYXMgPSB0aGlzLl9tdnMuZ2V0KHRhZyk7XHJcbiAgICAgICAgaWYgKHRhZy5pbmNsdWRlcygnLicpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NhbnQgd3JpdGUgLiBpbiB0YWc6JywgdGFnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaGFzKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2FscmVhZHkgc2V0IFZNIHRhZzonICsgdGFnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdm0uZW1pdFRvUm9vdFBhdGggPSBhY3RpdmVSb290T2JqZWN0O1xyXG5cclxuICAgICAgICB0aGlzLl9tdnMuc2V0KHRhZywgdm0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog56e76Zmk5bm25LiU6ZSA5q+BIFZNIOWvueixoVxyXG4gICAgICogQHBhcmFtIHRhZyBcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlKHRhZzogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fbXZzLmRlbGV0ZSh0YWcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W57uR5a6a55qE5pWw5o2uXHJcbiAgICAgKiBAcGFyYW0gdGFnIOaVsOaNrnRhZ1xyXG4gICAgICovXHJcbiAgICBnZXQ8VD4odGFnOiBzdHJpbmcpOiBWaWV3TW9kZWw8VD4gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGxldCByZXMgPSB0aGlzLl9tdnMuZ2V0KHRhZyk7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmAmui/h+WFqOWxgOi3r+W+hCzogIzkuI3mmK8gVk0g5a+56LGh5p2lIOiuvue9ruWAvFxyXG4gICAgICogQHBhcmFtIHBhdGggLSDlhajlsYDlj5blgLzot6/lvoRcclxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIOmcgOimgeWinuWKoOeahOWAvFxyXG4gICAgICovXHJcbiAgICBhZGRWYWx1ZShwYXRoOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBwYXRoID0gcGF0aC50cmltKCk7Ly/pmLLmraLnqbrmoLws6Ieq5Yqo5YmU6ZmkXHJcbiAgICAgICAgbGV0IHJzID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGlmIChycy5sZW5ndGggPCAyKSB7IGNvbnNvbGUuZXJyb3IoJ0NhbnQgZmluZCBwYXRoOicgKyBwYXRoKSB9O1xyXG4gICAgICAgIGxldCB2bSA9IHRoaXMuZ2V0KHJzWzBdKTtcclxuICAgICAgICBpZiAoIXZtKSB7IGNvbnNvbGUuZXJyb3IoJ0NhbnQgU2V0IFZNOicgKyByc1swXSk7IHJldHVybjsgfTtcclxuICAgICAgICBsZXQgcmVzUGF0aCA9IHJzLnNsaWNlKDEpLmpvaW4oJy4nKTtcclxuICAgICAgICB2bS5zZXRWYWx1ZShyZXNQYXRoLCB2bS5nZXRWYWx1ZShyZXNQYXRoKSArIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmAmui/h+WFqOWxgOi3r+W+hCzogIzkuI3mmK8gVk0g5a+56LGh5p2lIOiOt+WPluWAvFxyXG4gICAgICogQHBhcmFtIHBhdGggLSDlhajlsYDlj5blgLzot6/lvoRcclxuICAgICAqIEBwYXJhbSBkZWYgLSDlpoLmnpzlj5bkuI3liLDlgLznmoTov5Tlm57nmoTpu5jorqTlgLxcclxuICAgICAqL1xyXG4gICAgZ2V0VmFsdWUocGF0aDogc3RyaW5nLCBkZWY/OiBhbnkpOiBhbnkge1xyXG4gICAgICAgIHBhdGggPSBwYXRoLnRyaW0oKTsgICAgICAgICAgICAgICAgIC8vIOmYsuatouepuuagvCzoh6rliqjliZTpmaRcclxuICAgICAgICBsZXQgcnMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgaWYgKHJzLmxlbmd0aCA8IDIpIHsgY29uc29sZS5lcnJvcignR2V0IFZhbHVlIENhbnQgZmluZCBwYXRoOicgKyBwYXRoKTsgcmV0dXJuOyB9O1xyXG4gICAgICAgIGxldCB2bSA9IHRoaXMuZ2V0KHJzWzBdKTtcclxuICAgICAgICBpZiAoIXZtKSB7IGNvbnNvbGUuZXJyb3IoJ0NhbnQgR2V0IFZNOicgKyByc1swXSk7IHJldHVybjsgfTtcclxuICAgICAgICByZXR1cm4gdm0uZ2V0VmFsdWUocnMuc2xpY2UoMSkuam9pbignLicpLCBkZWYpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YCa6L+H5YWo5bGA6Lev5b6ELOiAjOS4jeaYryBWTSDlr7nosaHmnaUg6K6+572u5YC8XHJcbiAgICAgKiBAcGFyYW0gcGF0aCAtIOWFqOWxgOWPluWAvOi3r+W+hFxyXG4gICAgICogQHBhcmFtIHZhbHVlIC0g6ZyA6KaB6K6+572u55qE5YC8XHJcbiAgICAgKi9cclxuICAgIHNldFZhbHVlKHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG4gICAgICAgIHBhdGggPSBwYXRoLnRyaW0oKTsgICAgICAgICAgICAgICAgIC8vIOmYsuatouepuuagvCzoh6rliqjliZTpmaRcclxuICAgICAgICBsZXQgcnMgPSBwYXRoLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgaWYgKHJzLmxlbmd0aCA8IDIpIHsgY29uc29sZS5lcnJvcignU2V0IFZhbHVlIENhbnQgZmluZCBwYXRoOicgKyBwYXRoKTsgcmV0dXJuOyB9O1xyXG4gICAgICAgIGxldCB2bSA9IHRoaXMuZ2V0KHJzWzBdKTtcclxuICAgICAgICBpZiAoIXZtKSB7IGNvbnNvbGUuZXJyb3IoJ0NhbnQgU2V0IFZNOicgKyByc1swXSk7IHJldHVybjsgfTtcclxuICAgICAgICB2bS5zZXRWYWx1ZShycy5zbGljZSgxKS5qb2luKCcuJyksIHZhbHVlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc2V0T2JqVmFsdWUgPSBzZXRWYWx1ZUZyb21QYXRoO1xyXG4gICAgZ2V0T2JqVmFsdWUgPSBnZXRWYWx1ZUZyb21QYXRoO1xyXG5cclxuICAgIC8qKiDnrYnlkIzkuo4gZGlyZWN0b3Iub24gKi9cclxuICAgIGJpbmRQYXRoKHBhdGg6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uLCB0YXJnZXQ/OiBhbnksIHVzZUNhcHR1cmU/OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgcGF0aCA9IHBhdGgudHJpbSgpOyAgICAgICAgICAgICAgICAgLy8g6Ziy5q2i56m65qC8LOiHquWKqOWJlOmZpFxyXG4gICAgICAgIGlmIChwYXRoID09ICcnKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IodGFyZ2V0Lm5vZGUubmFtZSwgJ+iKgueCuee7keWumueahOi3r+W+hOS4uuepuicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXRoLnNwbGl0KCcuJylbMF0gPT09ICcqJykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHBhdGgsICfot6/lvoTkuI3lkIjms5Us5Y+v6IO96ZSZ6K+v6KaG55uW5LqGIFZNUGFyZW50IOeahG9uTG9hZCDmlrnms5UsIOaIluiAheeItuiKgueCueW5tuacquaMgui9vSBWTVBhcmVudCDnm7jlhbPnmoTnu4Tku7bohJrmnKwnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgZGlyZWN0b3Iub24oVk1fRU1JVF9IRUFEICsgcGF0aCwgY2FsbGJhY2ssIHRhcmdldCwgdXNlQ2FwdHVyZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOetieWQjOS6jiBkaXJlY3Rvci5vZmYgKi9cclxuICAgIHVuYmluZFBhdGgocGF0aDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24sIHRhcmdldD86IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHBhdGggPSBwYXRoLnRyaW0oKTsvL+mYsuatouepuuagvCzoh6rliqjliZTpmaRcclxuICAgICAgICBpZiAocGF0aC5zcGxpdCgnLicpWzBdID09PSAnKicpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihwYXRoLCAn6Lev5b6E5LiN5ZCI5rOVLOWPr+iDvemUmeivr+imhuebluS6hiBWTVBhcmVudCDnmoRvbkxvYWQg5pa55rOVLCDmiJbogIXniLboioLngrnlubbmnKrmjILovb0gVk1QYXJlbnQg55u45YWz55qE57uE5Lu26ISa5pysJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGRpcmVjdG9yLm9mZihWTV9FTUlUX0hFQUQgKyBwYXRoLCBjYWxsYmFjaywgdGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Ya757uT5omA5pyJ5qCH562+55qEIFZN77yM6KeG5Zu+5bCG5LiN5Lya5Y+X5Yiw5Lu75L2V5L+h5oGvICovXHJcbiAgICBpbmFjdGl2ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9tdnMuZm9yRWFjaChtdiA9PiB7XHJcbiAgICAgICAgICAgIG12LmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOa/gOa0u+aJgOacieagh+etvueahCBWTSovXHJcbiAgICBhY3RpdmUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbXZzLmZvckVhY2gobXYgPT4ge1xyXG4gICAgICAgICAgICBtdi5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyAgIOaVtOaVsOOAgeWwj+aVsOOAgeaXtumXtOOAgee8qeWGmVxyXG5cclxuLyoqXHJcbiAqICBWTeeuoeeQhuWvueixoSzkvb/nlKjmlofmoaM6IFxyXG4gKiAgaHR0cHM6Ly9naXRodWIuY29tL3dzc3NoZWVwL2NvY29zX2NyZWF0b3JfbXZ2bV90b29scy9ibG9iL21hc3Rlci9kb2NzL1ZpZXdNb2RlbFNjcmlwdC5tZFxyXG4gKi9cclxuZXhwb3J0IGxldCBWTSA9IG5ldyBWTU1hbmFnZXIoKTsiLCIvKlxyXG4gKiBAQXV0aG9yOiBkZ2ZsYXNoXHJcbiAqIEBEYXRlOiAyMDIxLTA4LTE2IDA5OjM0OjU2XHJcbiAqIEBMYXN0RWRpdG9yczogZGdmbGFzaFxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIzLTAxLTE5IDE0OjUyOjEyXHJcbiAqL1xyXG5pbXBvcnQgeyBBbmltYXRpb24sIEFuaW1hdGlvbkNsaXAsIEV2ZW50VG91Y2gsIGluc3RhbnRpYXRlLCBOb2RlLCBQcmVmYWIsIFNpemUsIFVJVHJhbnNmb3JtLCB2MywgVmVjMyB9IGZyb20gXCJjY1wiO1xyXG5pbXBvcnQgeyByZXNMb2FkZXIgfSBmcm9tIFwiLi4vY29tbW9uL2xvYWRlci9SZXNMb2FkZXJcIjtcclxuXHJcbi8qKiDmmL7npLrlr7nosaHlt6XlhbcgKi9cclxuZXhwb3J0IGNsYXNzIFZpZXdVdGlsIHtcclxuICAgIC8qKlxyXG4gICAgICog5oqKTm9kZeW9k+WJjeeahOiKgueCueagkee7k+aehOagueaNrk5vZGXlkb3lkI3ovazmiJDkuIDkuKpqc+WvueixoSzph43lkI3nmoTnu4Tku7bkvJropobnm5bvvIxcclxuICAgICAqIE5vZGXnmoRuYW1l5LiN5bqU6K+l5YyF5ZCr56m65qC86ZSu77yM5ZCm5YiZ5bCG6Lez6L+HXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50IOiiq+mBjeWOhueahE5vZGXnu4Tku7ZcclxuICAgICAqIEBwYXJhbSBvYmogICAg57uR5a6a55qEanPlr7nosaEgKOWPr+mAiSlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIG5vZGVUcmVlSW5mb0xpdGUocGFyZW50OiBOb2RlLCBvYmo/OiBNYXA8c3RyaW5nLCBOb2RlPik6IE1hcDxzdHJpbmcsIE5vZGU+IHwgbnVsbCB7XHJcbiAgICAgICAgbGV0IG1hcDogTWFwPHN0cmluZywgTm9kZT4gPSBvYmogfHwgbmV3IE1hcCgpO1xyXG4gICAgICAgIGxldCBpdGVtcyA9IHBhcmVudC5jaGlsZHJlbjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBfbm9kZSA9IGl0ZW1zW2ldO1xyXG4gICAgICAgICAgICBpZiAoX25vZGUubmFtZS5pbmRleE9mKFwiIFwiKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIG1hcC5zZXQoX25vZGUubmFtZSwgX25vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFZpZXdVdGlsLm5vZGVUcmVlSW5mb0xpdGUoX25vZGUsIG1hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmraPliJnmkJzntKLoioLngrnlkI3lrZcs56ym5ZCI5p2h5Lu255qE6IqC54K55bCG5Lya6L+U5ZueXHJcbiAgICAgKiBAcGFyYW0gcmVnICAgICDmraPliJnooajovr7lvI9cclxuICAgICAqIEBwYXJhbSBwYXJlbnQgIOimgeaQnOe0oueahOeItuiKgueCuVxyXG4gICAgICogQHBhcmFtIG5vZGVzICAg6L+U5Zue55qE5pWw57uE77yI5Y+v6YCJ77yJXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmaW5kTm9kZXMocmVnOiBSZWdFeHAsIHBhcmVudDogTm9kZSwgbm9kZXM/OiBBcnJheTxOb2RlPik6IEFycmF5PE5vZGU+IHtcclxuICAgICAgICBsZXQgbnM6IEFycmF5PE5vZGU+ID0gbm9kZXMgfHwgW107XHJcbiAgICAgICAgbGV0IGl0ZW1zID0gcGFyZW50LmNoaWxkcmVuO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IF9uYW1lOiBzdHJpbmcgPSBpdGVtc1tpXS5uYW1lO1xyXG4gICAgICAgICAgICBpZiAocmVnLnRlc3QoX25hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBucy5wdXNoKGl0ZW1zW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBWaWV3VXRpbC5maW5kTm9kZXMocmVnLCBpdGVtc1tpXSwgbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6IqC54K55LmL6Ze05Z2Q5qCH5LqS6L2sXHJcbiAgICAgKiBAcGFyYW0gYSAgICAgICAgIEHoioLngrlcclxuICAgICAqIEBwYXJhbSBiICAgICAgICAgQuiKgueCuVxyXG4gICAgICogQHBhcmFtIGFQb3MgICAgICBB6IqC54K556m66Ze05Lit55qE55u45a+55L2N572uXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjYWxjdWxhdGVBU3BhY2VUb0JTcGFjZVBvcyhhOiBOb2RlLCBiOiBOb2RlLCBhUG9zOiBWZWMzKTogVmVjMyB7XHJcbiAgICAgICAgY29uc3Qgd29ybGQ6IFZlYzMgPSBhLmdldENvbXBvbmVudChVSVRyYW5zZm9ybSkhLmNvbnZlcnRUb1dvcmxkU3BhY2VBUihhUG9zKTtcclxuICAgICAgICByZXR1cm4gYi5nZXRDb21wb25lbnQoVUlUcmFuc2Zvcm0pIS5jb252ZXJ0VG9Ob2RlU3BhY2VBUih3b3JsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlsY/luZXovaznqbrpl7TlnZDmoIdcclxuICAgICAqIEBwYXJhbSBldmVudCDop6bmkbjkuovku7ZcclxuICAgICAqIEBwYXJhbSBzcGFjZSDovazliLDmraToioLngrnnmoTlnZDmoIfnqbrpl7RcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNhbGN1bGF0ZVNjcmVlblBvc1RvU3BhY2VQb3MoZXZlbnQ6IEV2ZW50VG91Y2gsIHNwYWNlOiBOb2RlKTogVmVjMyB7XHJcbiAgICAgICAgY29uc3QgdWlsID0gZXZlbnQuZ2V0VUlMb2NhdGlvbigpO1xyXG4gICAgICAgIGNvbnN0IHdvcmxkUG9zOiBWZWMzID0gdjModWlsLngsIHVpbC55KTtcclxuICAgICAgICByZXR1cm4gc3BhY2UuZ2V0Q29tcG9uZW50KFVJVHJhbnNmb3JtKSEuY29udmVydFRvTm9kZVNwYWNlQVIod29ybGRQb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pi+56S65a+56LGh562J5q+U57yp5pS+XHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0V2lkdGggICAgICAg55uu5qCH5a69XHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0SGVpZ2h0ICAgICAg55uu5qCH6auYXHJcbiAgICAgKiBAcGFyYW0gZGVmYXVsdFdpZHRoICAgICAg6buY6K6k5a69XHJcbiAgICAgKiBAcGFyYW0gZGVmYXVsdEhlaWdodCAgICAg6buY6K6k6auYXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyB1bmlmb3JtU2NhbGUodGFyZ2V0V2lkdGg6IG51bWJlciwgdGFyZ2V0SGVpZ2h0OiBudW1iZXIsIGRlZmF1bHRXaWR0aDogbnVtYmVyLCBkZWZhdWx0SGVpZ2h0OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCB3aWR0aFJhdGlvID0gZGVmYXVsdFdpZHRoIC8gdGFyZ2V0V2lkdGg7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0UmF0aW8gPSBkZWZhdWx0SGVpZ2h0IC8gdGFyZ2V0SGVpZ2h0O1xyXG4gICAgICAgIGxldCByYXRpbztcclxuICAgICAgICB3aWR0aFJhdGlvIDwgaGVpZ2h0UmF0aW8gPyByYXRpbyA9IHdpZHRoUmF0aW8gOiByYXRpbyA9IGhlaWdodFJhdGlvO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2l6ZShNYXRoLmZsb29yKHRhcmdldFdpZHRoICogcmF0aW8pLCBNYXRoLmZsb29yKHRhcmdldEhlaWdodCAqIHJhdGlvKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDku47otYTmupDnvJPlrZjkuK3mib7liLDpooTliLbotYTmupDlkI3lubbliJvlu7rkuIDkuKrmmL7npLrlr7nosaHvvIjlu7rorq7kvb/nlKhHYW1lQ29tcG9uZW506YeM55qE5ZCM5ZCN5pa55rOV77yM6IO96Ieq5Yqo566h55CG5YaF5a2Y5pa95pS+77yJXHJcbiAgICAgKiBAcGFyYW0gcGF0aCAgICAgICAg6LWE5rqQ6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0gYnVuZGxlTmFtZSAg6LWE5rqQ5YyF5ZCNXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGVQcmVmYWJOb2RlKHBhdGg6IHN0cmluZywgYnVuZGxlTmFtZTogc3RyaW5nID0gcmVzTG9hZGVyLmRlZmF1bHRCdW5kbGVOYW1lKTogTm9kZSB7XHJcbiAgICAgICAgY29uc3QgcCA9IHJlc0xvYWRlci5nZXQocGF0aCwgUHJlZmFiLCBidW5kbGVOYW1lKTtcclxuICAgICAgICBpZiAocCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5zdGFudGlhdGUocCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsITtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWKoOi9vemihOWItuW5tuWIm+W7uumihOWItuiKgueCue+8iOW7uuiuruS9v+eUqEdhbWVDb21wb25lbnTph4znmoTlkIzlkI3mlrnms5XvvIzog73oh6rliqjnrqHnkIblhoXlrZjmlr3mlL7vvIlcclxuICAgICAqIEBwYXJhbSBwYXRoICAgICAgICDotYTmupDot6/lvoRcclxuICAgICAqIEBwYXJhbSBidW5kbGVOYW1lICDotYTmupDljIXlkI1cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNyZWF0ZVByZWZhYk5vZGVBc3luYyhwYXRoOiBzdHJpbmcsIGJ1bmRsZU5hbWU6IHN0cmluZyA9IHJlc0xvYWRlci5kZWZhdWx0QnVuZGxlTmFtZSk6IFByb21pc2U8Tm9kZT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSBhd2FpdCByZXNMb2FkZXIubG9hZEFzeW5jKGJ1bmRsZU5hbWUsIHBhdGgsIFByZWZhYik7XHJcbiAgICAgICAgICAgIGlmIChwKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGluc3RhbnRpYXRlKHApKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOWQjeS4uuOAkCR7cGF0aH3jgJHnmoTotYTmupDliqDovb3lpLHotKVgKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmt7vliqDoioLngrnliqjnlLtcclxuICAgICAqIEBwYXJhbSBwYXRoICAgICAgICAgICAgICDotYTmupDot6/lvoRcclxuICAgICAqIEBwYXJhbSBub2RlICAgICAgICAgICAgICDnm67moIfoioLngrlcclxuICAgICAqIEBwYXJhbSBvbmx5T25lICAgICAgICAgICDmmK/lkKbllK/kuIBcclxuICAgICAqIEBwYXJhbSBpc0RlZmF1bHRDbGlwICAgICDmmK/lkKbmkq3mlL7pu5jorqTliqjnlLvliarovpFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFkZE5vZGVBbmltYXRpb24ocGF0aDogc3RyaW5nLCBub2RlOiBOb2RlLCBvbmx5T25lOiBib29sZWFuID0gdHJ1ZSwgaXNEZWZhdWx0Q2xpcDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKCFub2RlIHx8ICFub2RlLmlzVmFsaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGFuaW0gPSBub2RlLmdldENvbXBvbmVudChBbmltYXRpb24pO1xyXG4gICAgICAgIGlmIChhbmltID09IG51bGwpIHtcclxuICAgICAgICAgICAgYW5pbSA9IG5vZGUuYWRkQ29tcG9uZW50KEFuaW1hdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjbGlwID0gcmVzTG9hZGVyLmdldChwYXRoLCBBbmltYXRpb25DbGlwKSBhcyBBbmltYXRpb25DbGlwO1xyXG4gICAgICAgIGlmICghY2xpcCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob25seU9uZSAmJiBhbmltLmdldFN0YXRlKGNsaXAubmFtZSkgJiYgYW5pbS5nZXRTdGF0ZShjbGlwLm5hbWUpLmlzUGxheWluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNEZWZhdWx0Q2xpcCkge1xyXG4gICAgICAgICAgICBhbmltLmRlZmF1bHRDbGlwID0gY2xpcDtcclxuICAgICAgICAgICAgYW5pbS5wbGF5KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOaSreaUvuWujOaIkOWQjuaBouWkjeaSreaUvum7mOiupOWKqOeUu1xyXG4gICAgICAgIGFuaW0ub25jZShBbmltYXRpb24uRXZlbnRUeXBlLkZJTklTSEVELCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhbmltIS5kZWZhdWx0Q2xpcCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbSEucGxheSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgIGlmIChhbmltLmdldFN0YXRlKGNsaXAubmFtZSkpIHtcclxuICAgICAgICAgICAgYW5pbS5wbGF5KGNsaXAubmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICBhbmltLmNyZWF0ZVN0YXRlKGNsaXAsIGNsaXAhLm5hbWUpO1xyXG4gICAgICAgIGFuaW0ucGxheShjbGlwIS5uYW1lKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IENvbXBvbmVudCwgbG9nLCBfZGVjb3JhdG9yIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBERUJVRyB9IGZyb20gJ2NjL2Vudic7XHJcbmltcG9ydCB7IFZNIH0gZnJvbSAnLi9WaWV3TW9kZWwnO1xyXG5pbXBvcnQgeyBWTUVudiB9IGZyb20gJy4vVk1FbnYnO1xyXG5cclxuLy8g55So5p2l5aSE55CG6YCa55+l5pWw5o2u55qE5bGC57qnXHJcbi8vIOaOp+WItuaXl+S4i+WtkOiKgueCueeahOaVsOaNrlxyXG4vLyDnm67liY3lj6rmmK/otbfliLDkuIDkuKror4bliKvnu4Tku7bnmoTkvZznlKjvvIzkuYvlkI7kvJrmir3osaHlvojlpJrlip/og73lnKjov5nph4zpnaJcclxuLy8gcGxheWVyLmVxdWlwcy4qIOWPr+S7peiHquWKqOagueaNruaJgOWcqOeItuWvueixoeeahOS9jee9ruiuvue9rumhuuW6j1xyXG5cclxuY29uc3QgREVCVUdfV0FUQ0hfUEFUSDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBoZWxwIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqXHJcbiAqIHdhdGNoUGF0aCDnmoTln7rnoYDvvIzlj6rmj5Dkvpvnu5Hlrprlip/og70g5ZKMIOWvueW6lOeahOaVsOaNruabtOaWsOWHveaVsFxyXG4gKi9cclxuQGNjY2xhc3NcclxuQGhlbHAoJ2h0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzYzMSZkb2NfaWQ9Mjg3MzU2NScpXHJcbmV4cG9ydCBjbGFzcyBWTUJhc2UgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gICAgLyoqVk3nrqHnkIYgKi9cclxuICAgIFZNID0gVk07XHJcblxyXG4gICAgLyoqIHdhdGNoIOWNlei3r+W+hCAgKi9cclxuICAgIHdhdGNoUGF0aDogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgLyoqIOaYr+WQpuWQr+eUqOaooeadv+Wkmui3r+W+hOaooeW8jyAqL1xyXG4gICAgdGVtcGxhdGVNb2RlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIHdhdGNoIOWkmui3r+W+hCAqL1xyXG4gICAgcHJvdGVjdGVkIHdhdGNoUGF0aEFycjogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAvKiog5YKo5a2Y5qih5p2/5aSa6Lev5b6E55qE5YC8ICovXHJcbiAgICBwcm90ZWN0ZWQgdGVtcGxhdGVWYWx1ZUFycjogYW55W10gPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOWmguaenOmcgOimgemHjeWGmW9uTG9hZCDmlrnms5XvvIzor7fmoLnmja7pobrluo/osIPnlKggc3VwZXIub25Mb2FkKCnvvIzmiafooYzpu5jorqTmlrnms5VcclxuICAgICAqL1xyXG4gICAgb25Mb2FkKCkge1xyXG4gICAgICAgIGlmIChWTUVudi5lZGl0b3IpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8g5o+Q5YmN5ouG5YiG44CB5bm25LiU6Kej5p6Q6Lev5b6EXHJcbiAgICAgICAgbGV0IHBhdGhzID0gdGhpcy53YXRjaFBhdGguc3BsaXQoJy4nKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSBwYXRoc1tpXTtcclxuICAgICAgICAgICAgLy8g5aaC5p6c5Y+R546w5LqG6Lev5b6E5L2/55So5LqGICog77yM5YiZ6Ieq5Yqo5Y676Ieq5bex55qE54i26IqC54K55p+l5om+6Ieq5bex5omA5ZyoIGluZGV4IOWAvFxyXG4gICAgICAgICAgICBpZiAocCA9PSAnKicpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IHRoaXMubm9kZS5wYXJlbnQhLmNoaWxkcmVuLmZpbmRJbmRleChuID0+IG4gPT09IHRoaXMubm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPD0gMCkgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgcGF0aHNbaV0gPSBpbmRleC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOabv+aNouaOieWOn+i3r+W+hFxyXG4gICAgICAgIHRoaXMud2F0Y2hQYXRoID0gcGF0aHMuam9pbignLicpO1xyXG5cclxuICAgICAgICAvLyDmj5DliY3ov5vooYzot6/lvoTmlbDnu4Qg55qEIOino+aekFxyXG4gICAgICAgIGxldCBwYXRoQXJyID0gdGhpcy53YXRjaFBhdGhBcnI7XHJcbiAgICAgICAgaWYgKHBhdGhBcnIubGVuZ3RoID49IDEpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gcGF0aEFycltpXTtcclxuICAgICAgICAgICAgICAgIGxldCBwYXRocyA9IHBhdGguc3BsaXQoJy4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IHBhdGhzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwID09ICcqJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLm5vZGUucGFyZW50IS5jaGlsZHJlbi5maW5kSW5kZXgobiA9PiBuID09PSB0aGlzLm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPD0gMCkgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoc1tpXSA9IGluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy53YXRjaFBhdGhBcnJbaV0gPSBwYXRocy5qb2luKCcuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOaJk+WNsOWHuuaJgOaciee7keWumueahOi3r+W+hO+8jOaWueS+v+iwg+ivleS/oeaBr1xyXG4gICAgICAgIGlmIChERUJVR19XQVRDSF9QQVRIICYmIERFQlVHKSB7XHJcbiAgICAgICAgICAgIGxvZygn5omA5pyJ6Lev5b6EJywgdGhpcy53YXRjaFBhdGggPyBbdGhpcy53YXRjaFBhdGhdIDogdGhpcy53YXRjaFBhdGhBcnIsICc8PCcsIHRoaXMubm9kZS5wYXJlbnQhLm5hbWUgKyAnLicgKyB0aGlzLm5vZGUubmFtZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLndhdGNoUGF0aCA9PSAnJyAmJiB0aGlzLndhdGNoUGF0aEFyci5qb2luKCcnKSA9PSAnJykge1xyXG4gICAgICAgICAgICBsb2coJ+WPr+iDveacquiuvue9rui3r+W+hOeahOiKgueCuTonLCB0aGlzLm5vZGUucGFyZW50IS5uYW1lICsgJy4nICsgdGhpcy5ub2RlLm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkVuYWJsZSgpIHtcclxuICAgICAgICBpZiAoVk1FbnYuZWRpdG9yKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRlbXBsYXRlTW9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE11bHRQYXRoRXZlbnQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMud2F0Y2hQYXRoICE9ICcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuVk0uYmluZFBhdGgodGhpcy53YXRjaFBhdGgsIHRoaXMub25WYWx1ZUNoYW5nZWQsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vblZhbHVlSW5pdCgpOyAgICAgICAgICAgICAgICAgICAgIC8vIOa/gOa0u+aXtizosIPnlKjlgLzliJ3lp4vljJZcclxuICAgIH1cclxuXHJcbiAgICBvbkRpc2FibGUoKSB7XHJcbiAgICAgICAgaWYgKFZNRW52LmVkaXRvcikgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50ZW1wbGF0ZU1vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRNdWx0UGF0aEV2ZW50KGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy53YXRjaFBhdGggIT0gJycpIHtcclxuICAgICAgICAgICAgdGhpcy5WTS51bmJpbmRQYXRoKHRoaXMud2F0Y2hQYXRoLCB0aGlzLm9uVmFsdWVDaGFuZ2VkLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5aSa6Lev5b6E55uR5ZCs5pa55byPXHJcbiAgICBwcml2YXRlIHNldE11bHRQYXRoRXZlbnQoZW5hYmxlZDogYm9vbGVhbiA9IHRydWUpIHtcclxuICAgICAgICBpZiAoVk1FbnYuZWRpdG9yKSByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBhcnIgPSB0aGlzLndhdGNoUGF0aEFycjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRoID0gYXJyW2ldO1xyXG4gICAgICAgICAgICBpZiAoZW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5WTS5iaW5kUGF0aChwYXRoLCB0aGlzLm9uVmFsdWVDaGFuZ2VkLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuVk0udW5iaW5kUGF0aChwYXRoLCB0aGlzLm9uVmFsdWVDaGFuZ2VkLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25WYWx1ZUluaXQoKSB7XHJcbiAgICAgICAgLy8g6Jma5pa55rOVXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlgLzlj5jljJbkuovku7ZcclxuICAgICAqIEBwYXJhbSBuICAgICAgIOaWsOWAvFxyXG4gICAgICogQHBhcmFtIG8gICAgICAg5pen5YC8XHJcbiAgICAgKiBAcGFyYW0gcGF0aEFyciDlr7nosaHot6/lvoTmlbDnu4RcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIG9uVmFsdWVDaGFuZ2VkKG46IGFueSwgbzogYW55LCBwYXRoQXJyOiBzdHJpbmdbXSkge1xyXG5cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDQ1N0cmluZywgQ29tcG9uZW50LCBFbnVtLCBsb2csIE5vZGUsIF9kZWNvcmF0b3IgfSBmcm9tIFwiY2NcIjtcclxuaW1wb3J0IHsgVk1FbnYgfSBmcm9tIFwiLi9WTUVudlwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgZXhlY3V0ZUluRWRpdE1vZGUsIG1lbnUsIGhlbHAgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5lbnVtIEFDVElPTl9NT0RFIHtcclxuICAgIFNFQVJDSF9DT01QT05FTlQsXHJcbiAgICBFTkFCTEVfQ09NUE9ORU5ULFxyXG4gICAgUkVQTEFDRV9XQVRDSF9QQVRILFxyXG4gICAgREVMRVRFX0NPTVBPTkVOVFxyXG59XHJcblxyXG4vKipcclxuICog55So5LqO5pCc57Si55qETVYg57uE5Lu25YiX6KGo77yM5oyC6L295Zyo54i26IqC54K55ZCO77yMXHJcbiAqIOS8mumBjeWOhuaQnOe0ouS4i+mdoueahOaJgOaciU1W57uE5Lu2LCDlubbkuJTmmL7npLrlhbbop4Llr5/lgLznmoTot6/lvoRcclxuICovXHJcbkBjY2NsYXNzXHJcbkBleGVjdXRlSW5FZGl0TW9kZVxyXG5AbWVudSgnT29wc0ZyYW1ld29yay9NdnZtL0VkaXQtQ29tcHMg77yI5b+r6YCf57uE5Lu25pON5L2c77yJJylcclxuQGhlbHAoJ2h0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzYzMiZkb2NfaWQ9Mjg3MzU2NScpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1WQ29tcHNFZGl0IGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogW0NDU3RyaW5nXVxyXG4gICAgfSlcclxuICAgIGZpbmRMaXN0OiBzdHJpbmdbXSA9IFtcIlZNQmFzZVwiLCBcIlZNUGFyZW50XCJdO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogRW51bShBQ1RJT05fTU9ERSlcclxuICAgIH0pXHJcbiAgICBhY3Rpb25UeXBlOiBBQ1RJT05fTU9ERSA9IEFDVElPTl9NT0RFLlNFQVJDSF9DT01QT05FTlQ7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAn5Yu+6YCJ5ZCOLOS8muiHquWKqOafpeaJviBmaW5kIGxpc3Qg5Lit5aGr5YaZ55qE57uE5Lu2JyxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uVHlwZSA9PT0gQUNUSU9OX01PREUuU0VBUkNIX0NPTVBPTkVOVDtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGdldCBmaW5kVHJpZ2dlcigpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IGZpbmRUcmlnZ2VyKHY6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLnNldENvbXBvbmVudHMoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAn5Yu+6YCJ5ZCOLOS8muaJuemHj+a/gOa0uyBmaW5kIGxpc3Qg5Lit5aGr5YaZ55qE57uE5Lu2JyxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uVHlwZSA9PT0gQUNUSU9OX01PREUuRU5BQkxFX0NPTVBPTkVOVDtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGdldCBlbmFibGVUcmlnZ2VyKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgZW5hYmxlVHJpZ2dlcih2OiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5zZXRDb21wb25lbnRzKDEpO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+WLvumAieWQjizkvJrmibnph4/lhbPpl60gZmluZCBsaXN0IOS4reWhq+WGmeeahOe7hOS7ticsXHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGlvblR5cGUgPT09IEFDVElPTl9NT0RFLkVOQUJMRV9DT01QT05FTlQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBnZXQgZGlzYWJsZVRyaWdnZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCBkaXNhYmxlVHJpZ2dlcih2OiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5zZXRDb21wb25lbnRzKDIpO1xyXG4gICAgfVxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+WFgeiuuOWIoOmZpOiKgueCueeahOe7hOS7tiznoa7lrprpnIDopoHnp7vpmaTor7fli77pgIks6Ziy5q2i6K+v5pON5L2cJyxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uVHlwZSA9PT0gQUNUSU9OX01PREUuREVMRVRFX0NPTVBPTkVOVDtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgYWxsb3dEZWxldGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6ICfli77pgInlkI4s5Lya5om56YeP5Yig6ZmkIGZpbmQgbGlzdCDkuK3loavlhpnnmoTnu4Tku7YnLFxyXG4gICAgICAgIGRpc3BsYXlOYW1lOiAnWyBYIERFTEVURSBYIF0nLFxyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxvd0RlbGV0ZSAmJiB0aGlzLmFjdGlvblR5cGUgPT09IEFDVElPTl9NT0RFLkRFTEVURV9DT01QT05FTlQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBnZXQgZGVsZXRlVHJpZ2dlcigpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc2V0IGRlbGV0ZVRyaWdnZXIodjogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuc2V0Q29tcG9uZW50cygzKTtcclxuICAgIH1cclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6ICfli77pgInlkI4s5Lya5om56YeP5pu/5o2i5o6J5oyH5a6a55qE6Lev5b6EJyxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aW9uVHlwZSA9PT0gQUNUSU9OX01PREUuUkVQTEFDRV9XQVRDSF9QQVRIO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwdWJsaWMgZ2V0IHJlcGxhY2VUcmlnZ2VyKCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgcmVwbGFjZVRyaWdnZXIodjogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuc2V0Q29tcG9uZW50cyg0KTtcclxuICAgIH1cclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6ICfljLnphY3nmoTot6/lvoQs5Yy56YWN6KeE5YiZOiDmkJzntKLlvIDlpLTkuLogZ2FtZeeahOi3r+W+hCcsXHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGlvblR5cGUgPT09IEFDVElPTl9NT0RFLlJFUExBQ0VfV0FUQ0hfUEFUSDtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgdGFyZ2V0UGF0aDogc3RyaW5nID0gJ2dhbWUnO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+abv+aNoueahOi3r+W+hCzlsIbljLnphY3liLDnmoTot6/lvoTmm7/mjaInLFxyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb25UeXBlID09PSBBQ1RJT05fTU9ERS5SRVBMQUNFX1dBVENIX1BBVEg7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJlcGxhY2VQYXRoOiBzdHJpbmcgPSAnKic7XHJcblxyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+aYr+WQpuaQnOmbhue7keWumlZN57uE5Lu255qE6IqC54K5PycsXHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGlvblR5cGUgPT09IEFDVElPTl9NT0RFLlNFQVJDSF9DT01QT05FTlQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIGNhbkNvbGxlY3ROb2RlczogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogW05vZGVdLFxyXG4gICAgICAgIHJlYWRvbmx5OiB0cnVlLFxyXG4gICAgICAgIHRvb2x0aXA6ICfmlLbpm4bliLDnu5HlrprkuoZWTee7hOS7tuebuOWFs+eahOiKgueCue+8jOWPr+S7peiHquW3sei3s+i9rOi/h+WOuycsXHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbkNvbGxlY3ROb2RlcyAmJiB0aGlzLmFjdGlvblR5cGUgPT09IEFDVElPTl9NT0RFLlNFQVJDSF9DT01QT05FTlRcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgY29sbGVjdE5vZGVzOiBOb2RlW10gPSBbXTtcclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgaWYgKFZNRW52LmVkaXRvcikgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgcGF0aCA9IHRoaXMuZ2V0Tm9kZVBhdGgodGhpcy5ub2RlKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCd5b3UgZm9yZ2V0IGRlbGV0ZSBNVkVkaXRGaW5kZXIsW3BhdGhdJywgcGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29tcG9uZW50cyhzdGF0ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGFycmF5ID0gdGhpcy5maW5kTGlzdDtcclxuICAgICAgICBsZXQgdGl0bGUgPSAn5pCc57Si5Yiw5b2T5YmN6IqC54K55LiL6Z2i55qE57uE5Lu2JztcclxuICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDogdGl0bGUgPSAn5pCc57Si5Yiw5b2T5YmN6IqC54K55LiL6Z2i55qE57uE5Lu2JzsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMTogdGl0bGUgPSAn5r+A5rS75Lul5LiL6IqC54K555qE57uE5Lu2JzsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMjogdGl0bGUgPSAn5YWz6Zet5Lul5LiL6IqC54K555qE57uE5Lu2JzsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMzogdGl0bGUgPSAn5Yig6Zmk5Lul5LiL6IqC54K555qE57uE5Lu2JzsgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgNDogdGl0bGUgPSAn5pu/5o2i5Lul5LiL6IqC54K555qE6Lev5b6EJzsgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvZyh0aXRsZSlcclxuICAgICAgICBsb2coJ19fX19fX19fX19fX19fX19fX19fX18nKVxyXG5cclxuICAgICAgICBhcnJheS5mb3JFYWNoKG5hbWUgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaENvbXBvbmVudChuYW1lLCBzdGF0ZSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBsb2coJ19fX19fX19fX19fX19fX19fX19fX18nKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gY2xhc3NOYW1lIFxyXG4gICAgICogQHBhcmFtIHN0YXRlIDAt5p+l5om+6IqC54K557uE5Lu2IDEt5r+A5rS76IqC54K557uE5Lu2IDIt5YWz6Zet6IqC54K557uE5Lu2IDMt56e76Zmk6IqC54K557uE5Lu2XHJcbiAgICAgKi9cclxuICAgIHNlYXJjaENvbXBvbmVudChjbGFzc05hbWU6IHN0cmluZywgc3RhdGU6IG51bWJlciA9IDApIHtcclxuICAgICAgICAvKirmlLbpm4boioLngrnmuIXnqbogKi9cclxuICAgICAgICB0aGlzLmNvbGxlY3ROb2RlcyA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgY29tcHMgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oY2xhc3NOYW1lKTtcclxuICAgICAgICBpZiAoY29tcHMgPT0gbnVsbCB8fCBjb21wcy5sZW5ndGggPCAxKSByZXR1cm47XHJcbiAgICAgICAgbG9nKCdbJyArIGNsYXNzTmFtZSArICddOicpO1xyXG4gICAgICAgIGNvbXBzLmZvckVhY2goKHY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZXh0ID0gJyc7XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhdGUgPD0gMykge1xyXG4gICAgICAgICAgICAgICAgLy/ljLrliIbmqKHmnb/mqKHlvI/ot6/lvoRcclxuICAgICAgICAgICAgICAgIGlmICh2LnRlbXBsYXRlTW9kZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dCA9IHYud2F0Y2hQYXRoQXJyID8gJzpbUGF0aDonICsgdi53YXRjaFBhdGhBcnIuam9pbignfCcpICsgJ10nIDogJydcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dCA9IHYud2F0Y2hQYXRoID8gJzpbUGF0aDonICsgdi53YXRjaFBhdGggKyAnXScgOiAnJ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsb2codGhpcy5nZXROb2RlUGF0aCh2Lm5vZGUpICsgZXh0KTtcclxuICAgICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOi8v5a+75om+57uE5Lu2XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FuQ29sbGVjdE5vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbGxlY3ROb2Rlcy5pbmRleE9mKHYubm9kZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxlY3ROb2Rlcy5wdXNoKHYubm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6ICAgICAgICAgLy8g5r+A5rS757uE5Lu2XHJcbiAgICAgICAgICAgICAgICAgICAgdi5lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjogICAgICAgICAvLyDlhbPpl63nu4Tku7ZcclxuICAgICAgICAgICAgICAgICAgICB2LmVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMzogICAgICAgICAvLyDliKDpmaTnu4Tku7ZcclxuICAgICAgICAgICAgICAgICAgICB2Lm5vZGUucmVtb3ZlQ29tcG9uZW50KHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiAgICAgICAgIC8vIOabv+aNouaMh+Wumui3r+W+hFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXRQYXRoID0gdGhpcy50YXJnZXRQYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXBsYWNlUGF0aCA9IHRoaXMucmVwbGFjZVBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYudGVtcGxhdGVNb2RlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdi53YXRjaFBhdGhBcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSB2LndhdGNoUGF0aEFycltpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYud2F0Y2hQYXRoQXJyW2ldID0gdGhpcy5yZXBsYWNlTm9kZVBhdGgocGF0aCwgdGFyZ2V0UGF0aCwgcmVwbGFjZVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2LndhdGNoUGF0aCA9IHRoaXMucmVwbGFjZU5vZGVQYXRoKHYud2F0Y2hQYXRoLCB0YXJnZXRQYXRoLCByZXBsYWNlUGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVwbGFjZU5vZGVQYXRoKHBhdGg6IHN0cmluZywgc2VhcmNoOiBzdHJpbmcsIHJlcGxhY2U6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBwYXRoQXJyID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGxldCBzZWFyY2hBcnIgPSBzZWFyY2guc3BsaXQoJy4nKTtcclxuICAgICAgICBsZXQgcmVwbGFjZUFyciA9IHJlcGxhY2Uuc3BsaXQoJy4nKVxyXG5cclxuICAgICAgICBsZXQgbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VhcmNoQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIC8v5pyq5Yy56YWN5LiKXHJcbiAgICAgICAgICAgIGlmIChwYXRoQXJyW2ldICE9PSBzZWFyY2hBcnJbaV0pIHtcclxuICAgICAgICAgICAgICAgIG1hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5Yy56YWN5oiQ5Yqf5YeG5aSH5pu/5o2i6Lev5b6EXHJcbiAgICAgICAgaWYgKG1hdGNoID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVwbGFjZUFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcGF0aEFycltpXSA9IHJlcGxhY2VBcnJbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbG9nKCcg6Lev5b6E5pu05pawOicsIHBhdGgsICc+Pj4nLCBwYXRoQXJyLmpvaW4oJy4nKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwYXRoQXJyLmpvaW4oJy4nKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXROb2RlUGF0aChub2RlOiBOb2RlKSB7XHJcbiAgICAgICAgbGV0IHBhcmVudCA9IG5vZGU7XHJcbiAgICAgICAgbGV0IGFycmF5ID0gW107XHJcbiAgICAgICAgd2hpbGUgKHBhcmVudCkge1xyXG4gICAgICAgICAgICBsZXQgcCA9IHBhcmVudC5nZXRQYXJlbnQoKTtcclxuICAgICAgICAgICAgaWYgKHApIHtcclxuICAgICAgICAgICAgICAgIGFycmF5LnB1c2gocGFyZW50Lm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnJheS5yZXZlcnNlKCkuam9pbignLycpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFRvZ2dsZSwgX2RlY29yYXRvciB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgVk1CYXNlIH0gZnJvbSAnLi9WTUJhc2UnO1xyXG5pbXBvcnQgeyBWTUVudiB9IGZyb20gJy4vVk1FbnYnO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgZXhlY3V0ZUluRWRpdE1vZGUsIG1lbnUsIGhlbHAgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG4vKiog6Ieq5Yqo5qOA5p+l6K+G5Yir55qE5pWw57uELOS9oOWPr+S7peWHhuWkh+iHquW3seeahOe7hOS7tuaUvuS4iuWOu+iHquWKqOivhuWIqyAqL1xyXG5jb25zdCBDT01QX0FSUkFZX0NIRUNLID0gW1xyXG4gICAgWydCaHZGcmFtZUluZGV4JywgJ2luZGV4JywgZmFsc2VdLFxyXG4gICAgWydCaHZHcm91cFRvZ2dsZScsICdpbmRleCcsIGZhbHNlXSxcclxuICAgIFsnQmh2Um9sbE51bWJlcicsICd0YXJnZXRWYWx1ZScsIGZhbHNlXSxcclxuICAgIC8vIOe7hOS7tuWQjeOAgem7mOiupOWxnuaAp+OAgWNvbnRyb2xsZXLlgLxcclxuICAgIFsnY2MuTGFiZWwnLCAnc3RyaW5nJywgZmFsc2VdLFxyXG4gICAgWydjYy5SaWNoVGV4dCcsICdzdHJpbmcnLCBmYWxzZV0sXHJcbiAgICBbJ2NjLkVkaXRCb3gnLCAnc3RyaW5nJywgdHJ1ZV0sXHJcbiAgICBbJ2NjLlNsaWRlcicsICdwcm9ncmVzcycsIHRydWVdLFxyXG4gICAgWydjYy5Qcm9ncmVzc0JhcicsICdwcm9ncmVzcycsIGZhbHNlXSxcclxuICAgIFsnY2MuVG9nZ2xlJywgJ2lzQ2hlY2tlZCcsIHRydWVdXHJcbl07XHJcblxyXG5cclxuLyoqXHJcbiAqIFtWTS1DdXN0b21dXHJcbiAqIOiHquWumuS5ieaVsOWAvOebkeWQrCwg5Y+v5Lul5b+r6YCf5a+56K+l6IqC54K55LiK5Lu75oSP5LiA5Liq57uE5Lu25LiK55qE5bGe5oCn6L+b6KGM5Y+M5ZCR57uR5a6aXHJcbiAqL1xyXG5AY2NjbGFzc1xyXG5AZXhlY3V0ZUluRWRpdE1vZGVcclxuQG1lbnUoJ09vcHNGcmFtZXdvcmsvTXZ2bS9WTS1DdXN0b20g77yI6Ieq5a6a5LmJ77yJJylcclxuQGhlbHAoJ2h0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzYzNCZkb2NfaWQ9Mjg3MzU2NScpXHJcbmV4cG9ydCBjbGFzcyBWTUN1c3RvbSBleHRlbmRzIFZNQmFzZSB7XHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6ICfmv4DmtLtjb250cm9sbGVyLOS7peW8gOWQr+WPjOWQkee7keWumu+8jOWQpuWImeWPquiDveaOpeaUtua2iOaBrycsXHJcbiAgICB9KVxyXG4gICAgY29udHJvbGxlcjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLnm5Hop4blr7nosaHot6/lvoRcIlxyXG4gICAgfSlcclxuICAgIHdhdGNoUGF0aDogc3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6ICfnu5Hlrprnu4Tku7bnmoTlkI3lrZcnXHJcbiAgICB9KVxyXG4gICAgY29tcG9uZW50TmFtZTogc3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHRvb2x0aXA6ICfnu4Tku7bkuIrpnIDopoHnm5HlkKznmoTlsZ7mgKcnXHJcbiAgICB9KVxyXG4gICAgY29tcG9uZW50UHJvcGVydHk6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAn5Yi35paw6Ze06ZqU6aKR546HKOWPquW9seWTjeiEj+ajgOafpeeahOmikeeOhyknLFxyXG4gICAgICAgIHN0ZXA6IDAuMDEsXHJcbiAgICAgICAgcmFuZ2U6IFswLCAxXSxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbGxlciA9PT0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcmVmcmVzaFJhdGU6IG51bWJlciA9IDAuMTtcclxuXHJcbiAgICAvKiog6K6h5pe25ZmoICovXHJcbiAgICBwcml2YXRlIF90aW1lciA9IDA7XHJcblxyXG4gICAgLyoqIOebkeWQrOeahOe7hOS7tuWvueixoSAqL1xyXG4gICAgcHJpdmF0ZSBfd2F0Y2hDb21wb25lbnQ6IGFueSA9IG51bGw7XHJcblxyXG4gICAgLyoqIOaYr+WQpuiDveebkeWQrOe7hOS7tueahOaVsOaNriAqL1xyXG4gICAgcHJpdmF0ZSBfY2FuV2F0Y2hDb21wb25lbnQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKiog5qOA5p+l55qE5YC8ICovXHJcbiAgICBwcml2YXRlIF9vbGRWYWx1ZTogYW55ID0gbnVsbDtcclxuXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgc3VwZXIub25Mb2FkKCk7XHJcblxyXG4gICAgICAgIC8vIOWPquWcqOi/kOihjOaXtuajgOafpee7hOS7tuaYr+WQpue8uuWkseWPr+eUqFxyXG4gICAgICAgIHRoaXMuY2hlY2tFZGl0b3JDb21wb25lbnQoKTsvL+e8lui+keWZqOajgOafpVxyXG5cclxuICAgICAgICBpZiAoVk1FbnYuZWRpdG9yKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuX3dhdGNoQ29tcG9uZW50ID0gdGhpcy5ub2RlLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudE5hbWUpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tDb21wb25lbnRTdGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUmVzdG9yZSgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRWRpdG9yQ29tcG9uZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgLy/ku44gd2F0Y2gg55qE6Lev5b6E5Lit6I635Y+W5LiA5Liq5Yid5aeL5YC8XHJcbiAgICAgICAgdGhpcy5vblZhbHVlSW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOaMguWcqOWvueW6lOiKgueCueWQju+8jOiHquWKqOiOt+WPlue7hOS7tuWxnuaAp+WSjOWQjeWtl1xyXG4gICAgY2hlY2tFZGl0b3JDb21wb25lbnQoKSB7XHJcbiAgICAgICAgaWYgKFZNRW52LmVkaXRvcikgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgY2hlY2tBcnJheSA9IENPTVBfQVJSQVlfQ0hFQ0s7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGVja0FycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGNoZWNrQXJyYXlbaV07XHJcbiAgICAgICAgICAgIGxldCBjb21wID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChwYXJhbXNbMF0gYXMgc3RyaW5nKTtcclxuICAgICAgICAgICAgaWYgKGNvbXApIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudE5hbWUgPT0gJycpIHRoaXMuY29tcG9uZW50TmFtZSA9IHBhcmFtc1swXSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb21wb25lbnRQcm9wZXJ0eSA9PSAnJykgdGhpcy5jb21wb25lbnRQcm9wZXJ0eSA9IHBhcmFtc1sxXSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zWzJdICE9PSBudWxsKSB0aGlzLmNvbnRyb2xsZXIgPSBwYXJhbXNbMl0gYXMgYm9vbGVhbjtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja0NvbXBvbmVudFN0YXRlKCkge1xyXG4gICAgICAgIHRoaXMuX2NhbldhdGNoQ29tcG9uZW50ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93YXRjaENvbXBvbmVudCkgeyBjb25zb2xlLmVycm9yKCfmnKrorr7nva7pnIDopoHnm5HlkKznmoTnu4Tku7YnKTsgcmV0dXJuOyB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbXBvbmVudFByb3BlcnR5KSB7IGNvbnNvbGUuZXJyb3IoJ+acquiuvue9rumcgOimgeebkeWQrOeahOe7hOS7tiDnmoTlsZ7mgKcnKTsgcmV0dXJuOyB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50UHJvcGVydHkgaW4gdGhpcy5fd2F0Y2hDb21wb25lbnQgPT09IGZhbHNlKSB7IGNvbnNvbGUuZXJyb3IoJ+mcgOimgeebkeWQrOeahOe7hOS7tueahOWxnuaAp+S4jeWtmOWcqCcpOyByZXR1cm47IH1cclxuICAgICAgICB0aGlzLl9jYW5XYXRjaENvbXBvbmVudCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29tcG9uZW50VmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dhdGNoQ29tcG9uZW50W3RoaXMuY29tcG9uZW50UHJvcGVydHldO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbXBvbmVudFZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICAvLyDlpoLmnpzpgYfliLAgVG9nZ2xlIOe7hOS7tuWwseiwg+eUqOS4iumdoueahOaWueazleino+WGs1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudE5hbWUgPT0gXCJjYy5Ub2dnbGVcIikge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KFRvZ2dsZSkhLmlzQ2hlY2tlZCA9IHZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl93YXRjaENvbXBvbmVudFt0aGlzLmNvbXBvbmVudFByb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yid5aeL5YyW6I635Y+W5pWw5o2uICovXHJcbiAgICBvblZhbHVlSW5pdCgpIHtcclxuICAgICAgICBpZiAoVk1FbnYuZWRpdG9yKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8v5pu05paw5L+h5oGvXHJcbiAgICAgICAgdGhpcy5zZXRDb21wb25lbnRWYWx1ZSh0aGlzLlZNLmdldFZhbHVlKHRoaXMud2F0Y2hQYXRoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFvlj6/ph43lhpld57uE5Lu255qE5YC85Y+R55Sf5Y+Y5YyW5ZCO77yM6Kem5Y+R5pu05paw5q2k5YC8ICovXHJcbiAgICBvblZhbHVlQ29udHJvbGxlcihuZXdWYWx1ZTogYW55LCBvbGRWYWx1ZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5WTS5zZXRWYWx1ZSh0aGlzLndhdGNoUGF0aCwgbmV3VmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBb5Y+v6YeN5YaZXeWIneWni+WMluaUueWPmOaVsOaNriAqL1xyXG4gICAgb25WYWx1ZUNoYW5nZWQobjogYW55LCBvOiBhbnksIHBhdGhBcnI6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgdGhpcy5zZXRDb21wb25lbnRWYWx1ZShuKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgICAgIC8vIOiEj+ajgOafpe+8iOe7hOS7tuaYr+WQpuWtmOWcqO+8jOaYr+WQpuiiq+a/gOa0u++8iVxyXG4gICAgICAgIGlmIChWTUVudi5lZGl0b3IpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy9pZiAodGhpcy50ZW1wbGF0ZU1vZGUgPT0gdHJ1ZSkgcmV0dXJuOyAvL3RvZG8g5qih5p2/5qih5byP5LiL5LiN6IO96K6h566XICBcclxuICAgICAgICBpZiAoIXRoaXMuY29udHJvbGxlcikgcmV0dXJuO1xyXG4gICAgICAgIGlmICghdGhpcy5fY2FuV2F0Y2hDb21wb25lbnQgfHwgdGhpcy5fd2F0Y2hDb21wb25lbnRbJ2VuYWJsZWQnXSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy/liLfmlrDpopHnjofmo4Dmn6VcclxuICAgICAgICB0aGlzLl90aW1lciArPSBkdDtcclxuICAgICAgICBpZiAodGhpcy5fdGltZXIgPCB0aGlzLnJlZnJlc2hSYXRlKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fdGltZXIgPSAwO1xyXG5cclxuICAgICAgICBsZXQgb2xkVmFsdWUgPSB0aGlzLl9vbGRWYWx1ZTtcclxuICAgICAgICBsZXQgbmV3VmFsdWUgPSB0aGlzLmdldENvbXBvbmVudFZhbHVlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9vbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHJldHVybjtcclxuICAgICAgICB0aGlzLl9vbGRWYWx1ZSA9IHRoaXMuZ2V0Q29tcG9uZW50VmFsdWUoKTtcclxuICAgICAgICB0aGlzLm9uVmFsdWVDb250cm9sbGVyKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRURJVE9SIH0gZnJvbSBcImNjL2VudlwiO1xyXG5cclxuLyoqIFZN57uE5Lu2546v5aKD6aqM6K+BICovXHJcbmV4cG9ydCBjbGFzcyBWTUVudiB7XHJcbiAgICAvKiog57yW6L6R54q25oCBICovXHJcbiAgICBzdGF0aWMgZ2V0IGVkaXRvcigpIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmV0dXJuIEVESVRPUiAmJiAhY2MuR0FNRV9WSUVXO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQ0NTdHJpbmcsIEVudW0sIEV2ZW50SGFuZGxlciwgX2RlY29yYXRvciB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgVk1CYXNlIH0gZnJvbSAnLi9WTUJhc2UnO1xyXG5cclxuLy8gK+aZrumAmiBsYWJlbCDmm7TmlrDmlbDmja7nmoTmg4XlhrUsbGFiZWwuc3RyaW5nID0geHh4O1xyXG4vLyArZnJhbWVJbmRleCDmj5Lku7bvvIzpgJrov4dudW1iZXIg5pWw5YC86K6+572uIEJodkZyYW1lSW5kZXgg5p2l5YiH5o2i5b2T5YmN6LS05Zu+XHJcbi8vICtzcHJpdGVGcmFtZSDnm7TmjqXmm7/mjaLotLTlm77nmoTmg4XlhrUgLCBcclxuLy8gIOivu+WPluacrOWcsOi3r+W+hCBkYXRhLnNwcml0ZUZyYW1lID0gJHJlczovcGljL2NvbTFcclxuLy8gIOivu+WPlue9kemhtei3r+W+hCBkYXRhLnNwcml0ZUZyYW1lID0gJHVybDpodHRwOnh4eHh4eHh4eHgucG5nXHJcbi8vICvnibnmrormnaHku7bmjqfliLYgXHJcblxyXG4vLyDmr5TovoPmnaHku7Y6LOWmguaenOS8oOWFpeWAvCA+IC88IC8+PSAvPD0gLz09IOafkOWAvOaXtu+8jOaJp+ihjOeahGFjdGlvbuexu+Wei1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgZXhlY3V0ZUluRWRpdE1vZGUsIG1lbnUsIGhlbHAgfSA9IF9kZWNvcmF0b3I7XHJcblxyXG5lbnVtIEZJTFRFUl9NT0RFIHtcclxuICAgIFwibm9uZVwiLFxyXG4gICAgXCI9PVwiLCAvLyDmraPluLjorqHnrpfvvIzmr5TovoMg562J5LqOXHJcbiAgICBcIiE9XCIsIC8vIOato+W4uOiuoeeul++8jOavlOi+gyDkuI3nrYnkuo5cclxuICAgIFwiPlwiLCAgLy8g5q2j5bi46K6h566X77yM5q+U6L6DPlxyXG4gICAgXCI+PVwiLCAvLyDmraPluLjorqHnrpfvvIzmr5TovoM+PVxyXG4gICAgXCI8XCIsICAvLyDmraPluLjorqHnrpfvvIzmr5TovoM8XHJcbiAgICBcIjw9XCIsIC8vIOato+W4uOiuoeeul++8jOavlOi+gz49XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAgW1ZNLUV2ZW50XVxyXG4gKiDmj5DkvpsgIFZpZXdNb2RlbCDnmoTnm7jlhbPln7rnoYDlip/og70sXHJcbiAqIOWmguaenOWAvOWPkeeUn+WPmOWMluWwhuS8muiwg+eUqOWvueW6lOeahOWHveaVsOaWueazlVxyXG4gKi9cclxuQGNjY2xhc3NcclxuQGV4ZWN1dGVJbkVkaXRNb2RlXHJcbkBtZW51KCdPb3BzRnJhbWV3b3JrL012dm0vVk0tRXZlbnRDYWxsIO+8iOiwg+eUqOWHveaVsO+8iScpXHJcbkBoZWxwKCdodHRwczovL2dpdGVlLmNvbS9kZ2ZsYXNoL29vcHMtZnJhbWV3b3JrL3dpa2lzL3BhZ2VzP3NvcnRfaWQ9MTIwMzc2NDAmZG9jX2lkPTI4NzM1NjUnKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWTUV2ZW50IGV4dGVuZHMgVk1CYXNlIHtcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+S9v+eUqOaooeadv+aooeW8j++8jOWPr+S7peS9v+eUqOWkmui3r+W+hOebkeWQrCdcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgdGVtcGxhdGVNb2RlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAn55uR5ZCs6I635Y+W5YC855qE6Lev5b6EJyxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVNb2RlID09PSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgd2F0Y2hQYXRoOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+inpuWPkeS4gOasoeWQjuS8muiHquWKqOWFs+mXreivpeS6i+S7tidcclxuICAgIH0pXHJcbiAgICB0cmlnZ2VyT25jZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+ebkeWQrOiOt+WPluWAvOeahOWkmuadoei3r+W+hCzov5nkupvlgLznmoTmlLnlj5jpg73kvJrpgJrov4fov5nkuKrlh73mlbDlm57osIMs6K+35L2/55SoIHBhdGhBcnIg5Yy65YiG6I635Y+W55qE5YC8ICcsXHJcbiAgICAgICAgdHlwZTogW0NDU3RyaW5nXSxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVNb2RlID09PSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICBwcm90ZWN0ZWQgd2F0Y2hQYXRoQXJyOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+i/h+a7pOaooeW8j++8jOS8muagueaNruadoeS7tui/h+a7pOaOieaXtumXtOeahOinpuWPkScsXHJcbiAgICAgICAgdHlwZTogRW51bShGSUxURVJfTU9ERSlcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgZmlsdGVyTW9kZTogRklMVEVSX01PREUgPSBGSUxURVJfTU9ERS5ub25lO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlck1vZGUgIT09IEZJTFRFUl9NT0RFLm5vbmVcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgcHVibGljIGNvbXBhcmVWYWx1ZTogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgQHByb3BlcnR5KFtFdmVudEhhbmRsZXJdKVxyXG4gICAgY2hhbmdlRXZlbnRzOiBFdmVudEhhbmRsZXJbXSA9IFtdO1xyXG5cclxuICAgIG9uVmFsdWVJbml0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvblZhbHVlQ2hhbmdlZChuZXdWYXI6IGFueSwgb2xkVmFyOiBhbnksIHBhdGhBcnI6IGFueVtdKSB7XHJcbiAgICAgICAgbGV0IHJlcyA9IHRoaXMuY29uZGl0aW9uQ2hlY2sobmV3VmFyLCB0aGlzLmNvbXBhcmVWYWx1ZSk7XHJcbiAgICAgICAgaWYgKCFyZXMpIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5jaGFuZ2VFdmVudHMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlRXZlbnRzLmZvckVhY2godiA9PiB7XHJcbiAgICAgICAgICAgICAgICB2LmVtaXQoW25ld1Zhciwgb2xkVmFyLCBwYXRoQXJyXSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmv4DmtLvkuIDmrKHlkI7vvIzoh6rliqjlhbPpl63nu4Tku7ZcclxuICAgICAgICBpZiAodGhpcy50cmlnZ2VyT25jZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOadoeS7tuajgOafpSAqL1xyXG4gICAgcHJpdmF0ZSBjb25kaXRpb25DaGVjayhhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBjb2QgPSBGSUxURVJfTU9ERTtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmZpbHRlck1vZGUpIHtcclxuICAgICAgICAgICAgY2FzZSBjb2Qubm9uZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBjYXNlIGNvZFtcIj09XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKGEgPT0gYikgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjb2RbXCIhPVwiXTpcclxuICAgICAgICAgICAgICAgIGlmIChhICE9IGIpIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgY29kW1wiPFwiXTpcclxuICAgICAgICAgICAgICAgIGlmIChhIDwgYikgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjb2RbXCI+XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKGEgPiBiKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNvZFtcIj49XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKGEgPj0gYikgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjb2RbXCI8XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKGEgPCBiKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNvZFtcIjw9XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKGEgPD0gYikgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IF9kZWNvcmF0b3IsIENDU3RyaW5nLCBlcnJvciB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgU3RyaW5nRm9ybWF0RnVuY3Rpb24gfSBmcm9tICcuL1N0cmluZ0Zvcm1hdCc7XHJcbmltcG9ydCB7IFZNQmFzZSB9IGZyb20gJy4vVk1CYXNlJztcclxuaW1wb3J0IHsgVk1FbnYgfSBmcm9tICcuL1ZNRW52JztcclxuXHJcbmNvbnN0IHsgY2NjbGFzcywgcHJvcGVydHksIG1lbnUsIGV4ZWN1dGVJbkVkaXRNb2RlLCBoZWxwIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuY29uc3QgTEFCRUxfVFlQRSA9IHtcclxuICAgIENDX0xBQkVMOiAnY2MuTGFiZWwnLFxyXG4gICAgQ0NfUklDSF9URVhUOiAnY2MuUmljaFRleHQnLFxyXG4gICAgQ0NfRURJVF9CT1g6ICdjYy5FZGl0Qm94J1xyXG59XHJcblxyXG4vKipcclxuICogIFtWTS1MYWJlbF1cclxuICogIOS4k+mXqOWkhOeQhiBMYWJlbCDnm7jlhbMg55qE57uE5Lu277yM5aaCIGNjTGFiZWwsY2NSaWNoVGV4dCxjY0VkaXRCb3hcclxuICogIOWPr+S7peS9v+eUqOaooeadv+WMlueahOaWueW8j+WwhuaVsOaNruWGmeWFpSzlj6/ku6XlpITnkIblrZfnrKbkuLLmoLzlvI/nrYlcclxuICogIHRvZG8g5Yqg5YWlc3RyaW5nRm9ybWF0IOWPr+S7peino+aekOi9rOaNouW4uOingeeahOWtl+espuS4suagvOW8j1xyXG4gKi9cclxuQGNjY2xhc3NcclxuQGV4ZWN1dGVJbkVkaXRNb2RlXHJcbkBtZW51KCdPb3BzRnJhbWV3b3JrL012dm0vVk0tTGFiZWwg77yI5qCH562+77yJJylcclxuQGhlbHAoJ2h0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzY0MSZkb2NfaWQ9Mjg3MzU2NScpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZNTGFiZWwgZXh0ZW5kcyBWTUJhc2Uge1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiAn5piv5ZCm5ZCv55So5qih5p2/5Luj56CBLOWPquiDveWcqOi/kOihjOaXtuS5i+WJjeiuvue9rixcXG7lsIbkvJrliqjmgIHop6PmnpDmqKHmnb/or63ms5Uge3swfX0s5bm25LiU6Ieq5Yqo6K6+572u55uR5ZCs55qE6Lev5b6EJ1xyXG4gICAgfSlcclxuICAgIHRlbXBsYXRlTW9kZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZSgpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZU1vZGUgPT09IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICB3YXRjaFBhdGg6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgcmVhZG9ubHk6IHRydWVcclxuICAgIH0pXHJcbiAgICBwcm90ZWN0ZWQgbGFiZWxUeXBlOiBzdHJpbmcgPSBMQUJFTF9UWVBFLkNDX0xBQkVMO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogW0NDU3RyaW5nXSxcclxuICAgICAgICB2aXNpYmxlKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlTW9kZSA9PT0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgLyoqIOaMieeFp+WMuemFjeWPguaVsOmhuuW6j+S/neWtmOeahCBwYXRoIOaVsOe7hCDvvIjlm7rlrprvvIkgKi9cclxuICAgIHByb3RlY3RlZCB3YXRjaFBhdGhBcnI6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgLyoqIOaMieeFp+i3r+W+hOWPguaVsOmhuuW6j+S/neWtmOeahCDlgLznmoTmlbDnu4TvvIjlm7rlrprvvIkqL1xyXG4gICAgcHJvdGVjdGVkIHRlbXBsYXRlVmFsdWVBcnI6IGFueVtdID0gW107XHJcblxyXG4gICAgLyoqIOS/neWtmOedgOWtl+espuaooeadv+agvOW8j+eahOaVsOe7hCAo5Y+q5Lya5b2x5ZON5pi+56S65Y+C5pWwKSAqL1xyXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZUZvcm1hdEFycjogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAvKiog5rqQ5a2X56ym5LiyICovXHJcbiAgICBwcm90ZWN0ZWQgb3JpZ2luVGV4dDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgb25SZXN0b3JlKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tMYWJlbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBzdXBlci5vbkxvYWQoKTtcclxuICAgICAgICB0aGlzLmNoZWNrTGFiZWwoKTtcclxuXHJcbiAgICAgICAgaWYgKFZNRW52LmVkaXRvcikgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50ZW1wbGF0ZU1vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5vcmlnaW5UZXh0ID0gdGhpcy5nZXRMYWJlbFZhbHVlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGFyc2VUZW1wbGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGFydCgpIHtcclxuICAgICAgICBpZiAoVk1FbnYuZWRpdG9yKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMub25WYWx1ZUluaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6Kej5p6Q5qih5p2/IOiOt+WPluWIneWni+agvOW8j+WMluWtl+espuS4suagvOW8j+eahOS/oeaBryAqL1xyXG4gICAgcGFyc2VUZW1wbGF0ZSgpIHtcclxuICAgICAgICBsZXQgcmVnZXhBbGwgPSAvXFx7XFx7KC4rPylcXH1cXH0vZzsgICAgICAgICAgICAgICAgLy8g5Yy56YWN77yaIOaJgOacieeahHt7dmFsdWV9fVxyXG4gICAgICAgIGxldCByZWdleCA9IC9cXHtcXHsoLis/KVxcfVxcfS87ICAgICAgICAgICAgICAgICAgICAvLyDljLnphY3vvJoge3t2YWx1ZX19IOS4reeahCB2YWx1ZVxyXG4gICAgICAgIGxldCByZXMgPSB0aGlzLm9yaWdpblRleHQhLm1hdGNoKHJlZ2V4QWxsKTsgICAgIC8vIOWMuemFjee7k+aenOaVsOe7hFxyXG4gICAgICAgIGlmIChyZXMgPT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSByZXNbaV07XHJcbiAgICAgICAgICAgIGxldCBhcnIgPSBlLm1hdGNoKHJlZ2V4KTtcclxuICAgICAgICAgICAgbGV0IG1hdGNoTmFtZSA9IGFyciFbMV07XHJcbiAgICAgICAgICAgIC8vIGxldCBwYXJhbUluZGV4ID0gcGFyc2VJbnQobWF0Y2hOYW1lKSB8fCAwO1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2hJbmZvID0gbWF0Y2hOYW1lLnNwbGl0KCc6JylbMV0gfHwgJyc7XHJcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVGb3JtYXRBcnJbaV0gPSBtYXRjaEluZm87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5bop6PmnpDlrZfnrKbkuLLmqKHmnb/lkI7lvpfliLDnmoTlgLwgKi9cclxuICAgIGdldFJlcGxhY2VUZXh0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcmlnaW5UZXh0KSByZXR1cm4gXCJcIjtcclxuICAgICAgICBsZXQgcmVnZXhBbGwgPSAvXFx7XFx7KC4rPylcXH1cXH0vZzsgICAgICAgICAgICAgICAgICAgIC8vIOWMuemFje+8miDmiYDmnInnmoR7e3ZhbHVlfX1cclxuICAgICAgICBsZXQgcmVnZXggPSAvXFx7XFx7KC4rPylcXH1cXH0vOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWMuemFje+8miB7e3ZhbHVlfX0g5Lit55qEIHZhbHVlXHJcbiAgICAgICAgbGV0IHJlcyA9IHRoaXMub3JpZ2luVGV4dC5tYXRjaChyZWdleEFsbCk7ICAgICAgICAgIC8vIOWMuemFjee7k+aenOaVsOe7hCBbe3t2YWx1ZX1977yMe3t2YWx1ZX1977yMe3t2YWx1ZX19XVxyXG4gICAgICAgIGlmIChyZXMgPT0gbnVsbCkgcmV0dXJuICcnOyAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmnKrljLnphY3liLDmlofmnKxcclxuICAgICAgICBsZXQgc3RyID0gdGhpcy5vcmlnaW5UZXh0OyAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Y6f5aeL5a2X56ym5Liy5qih5p2/IFwibmFtZTp7ezB9fSDmiJYgbmFtZTp7ezA6Zml4Mn19XCJcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHJlc1tpXTtcclxuICAgICAgICAgICAgbGV0IGdldFZhbHVlO1xyXG4gICAgICAgICAgICBsZXQgYXJyID0gZS5tYXRjaChyZWdleCk7ICAgICAgICAgICAgICAgICAgICAgICAvLyDljLnphY3liLDnmoTmlbDnu4QgW3t7dmFsdWV9fSwgdmFsdWVdXHJcbiAgICAgICAgICAgIGxldCBpbmRleE51bSA9IHBhcnNlSW50KGFyciFbMV0gfHwgJzAnKSB8fCAwOyAgIC8vIOWPluWHuuaVsOe7hOeahCB2YWx1ZSDlhYPntKAg6L2s5o2i5oiQ5pW05pWwXHJcbiAgICAgICAgICAgIGxldCBmb3JtYXQgPSB0aGlzLnRlbXBsYXRlRm9ybWF0QXJyW2ldOyAgICAgICAgIC8vIOagvOW8j+WMluWtl+espiDnmoQg6YWN572u5Y+C5pWwXHJcbiAgICAgICAgICAgIGdldFZhbHVlID0gdGhpcy50ZW1wbGF0ZVZhbHVlQXJyW2luZGV4TnVtXTtcclxuICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoZSwgdGhpcy5nZXRWYWx1ZUZyb21Gb3JtYXQoZ2V0VmFsdWUsIGZvcm1hdCkpOy8v5LuO6Lev5b6E57yT5a2Y5YC86I635Y+W5pWw5o2uXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOagvOW8j+WMluWtl+espuS4siAqL1xyXG4gICAgZ2V0VmFsdWVGcm9tRm9ybWF0KHZhbHVlOiBudW1iZXIgfCBzdHJpbmcsIGZvcm1hdDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5nRm9ybWF0RnVuY3Rpb24uZGVhbCh2YWx1ZSwgZm9ybWF0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yid5aeL5YyW6I635Y+W5pWw5o2uICovXHJcbiAgICBvblZhbHVlSW5pdCgpIHtcclxuICAgICAgICAvL+abtOaWsOS/oeaBr1xyXG4gICAgICAgIGlmICh0aGlzLnRlbXBsYXRlTW9kZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRMYWJlbFZhbHVlKHRoaXMuVk0uZ2V0VmFsdWUodGhpcy53YXRjaFBhdGgpKTsgLy9cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBtYXggPSB0aGlzLndhdGNoUGF0aEFyci5sZW5ndGg7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVWYWx1ZUFycltpXSA9IHRoaXMuVk0uZ2V0VmFsdWUodGhpcy53YXRjaFBhdGhBcnJbaV0sICc/Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXRMYWJlbFZhbHVlKHRoaXMuZ2V0UmVwbGFjZVRleHQoKSk7IC8vIOmHjeaWsOino+aekFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog55uR5ZCs5pWw5o2u5Y+R55Sf5LqG5Y+Y5Yqo55qE5oOF5Ya1ICovXHJcbiAgICBvblZhbHVlQ2hhbmdlZChuOiBhbnksIG86IGFueSwgcGF0aEFycjogc3RyaW5nW10pIHtcclxuICAgICAgICBpZiAodGhpcy50ZW1wbGF0ZU1vZGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TGFiZWxWYWx1ZShuKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBwYXRoID0gcGF0aEFyci5qb2luKCcuJyk7XHJcbiAgICAgICAgICAgIC8vIOWvu+aJvue8k+WtmOS9jee9rlxyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSB0aGlzLndhdGNoUGF0aEFyci5maW5kSW5kZXgodiA9PiB2ID09PSBwYXRoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvL+WmguaenOaYr+aJgOWxnueahOi3r+W+hO+8jOWwseWPr+S7peabv+aNouaWh+acrOS6hlxyXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVZhbHVlQXJyW2luZGV4XSA9IG47ICAgICAgICAgIC8vIOe8k+WtmOWAvFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRMYWJlbFZhbHVlKHRoaXMuZ2V0UmVwbGFjZVRleHQoKSk7IC8vIOmHjeaWsOino+aekOaWh+acrFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldExhYmVsVmFsdWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHZhciBjb21wb25lbnQ6IGFueSA9IHRoaXMuZ2V0Q29tcG9uZW50KHRoaXMubGFiZWxUeXBlKTtcclxuICAgICAgICBjb21wb25lbnQuc3RyaW5nID0gdmFsdWUgKyAnJztcclxuICAgIH1cclxuXHJcbiAgICBnZXRMYWJlbFZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgdmFyIGNvbXBvbmVudDogYW55ID0gdGhpcy5nZXRDb21wb25lbnQodGhpcy5sYWJlbFR5cGUpO1xyXG4gICAgICAgIHJldHVybiBjb21wb25lbnQuc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tMYWJlbCgpIHtcclxuICAgICAgICBsZXQgY2hlY2tBcnJheSA9IFtcclxuICAgICAgICAgICAgJ2NjLkxhYmVsJyxcclxuICAgICAgICAgICAgJ2NjLlJpY2hUZXh0JyxcclxuICAgICAgICAgICAgJ2NjLkVkaXRCb3gnLFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hlY2tBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gY2hlY2tBcnJheVtpXTtcclxuICAgICAgICAgICAgbGV0IGNvbXAgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGUpO1xyXG4gICAgICAgICAgICBpZiAoY29tcCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbFR5cGUgPSBlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVycm9yKCfmsqHmnInmjILovb3ku7vkvZVsYWJlbOe7hOS7ticpO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRW51bSwgX2RlY29yYXRvciB9IGZyb20gJ2NjJztcclxuaW1wb3J0IHsgVk1CYXNlIH0gZnJvbSAnLi9WTUJhc2UnO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgbWVudSwgaGVscCB9ID0gX2RlY29yYXRvcjtcclxuXHJcbi8qKiDpmZDliLblgLzovrnnlYzojIPlm7TnmoTmqKHlvI8gKi9cclxuZW51bSBDTEFNUF9NT0RFIHtcclxuICAgIE1JTixcclxuICAgIE1BWCxcclxuICAgIE1JTl9NQVgsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBbVk0tTW9kaWZ5XVxyXG4gKiDliqjmgIHlv6vpgJ/nmoTkv67mlLnmqKHlnovnmoTmlbDlgLws5L2/55So5oyJ6ZKuIOe7keWumuivpee7hOS7tuS4iueahOWHveaVsO+8jOWNs+WPr+WKqOaAgeiwg+eUqFxyXG4gKiDkv67mlLkgTW9kZWwg55qE5YC8XHJcbiAqL1xyXG5AY2NjbGFzc1xyXG5AbWVudSgnT29wc0ZyYW1ld29yay9NdnZtL1ZNLU1vZGlmeSDvvIjkv67mlLnmlbDmja7vvIknKVxyXG5AaGVscCgnaHR0cHM6Ly9naXRlZS5jb20vZGdmbGFzaC9vb3BzLWZyYW1ld29yay93aWtpcy9wYWdlcz9zb3J0X2lkPTEyMDM3NjQyJmRvY19pZD0yODczNTY1JylcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVk1Nb2RpZnkgZXh0ZW5kcyBWTUJhc2Uge1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0b29sdGlwOiBcIuebkeinhuWvueixoei3r+W+hFwiXHJcbiAgICB9KVxyXG4gICAgd2F0Y2hQYXRoOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogXCLmmK/kuI3lkK/nlKjlj5blgLzojIPlm7TpmZDliLZcIlxyXG4gICAgfSlcclxuICAgIHZhbHVlQ2xhbXA6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEVudW0oQ0xBTVBfTU9ERSksXHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlQ2xhbXAgPT09IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHZhbHVlQ2xhbXBNb2RlOiBDTEFNUF9NT0RFID0gQ0xBTVBfTU9ERS5NSU5fTUFYO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlQ2xhbXAgPT09IHRydWUgJiYgdGhpcy52YWx1ZUNsYW1wTW9kZSAhPT0gQ0xBTVBfTU9ERS5NQVg7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHZhbHVlTWluOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlQ2xhbXAgPT09IHRydWUgJiYgdGhpcy52YWx1ZUNsYW1wTW9kZSAhPT0gQ0xBTVBfTU9ERS5NSU47XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHZhbHVlTWF4OiBudW1iZXIgPSAxO1xyXG5cclxuICAgIC8vIOmZkOWItuacgOe7iOe7k+aenOeahOWPluWAvOiMg+WbtFxyXG4gICAgcHJpdmF0ZSBjbGFtcFZhbHVlKHJlczogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgbWluID0gdGhpcy52YWx1ZU1pbjtcclxuICAgICAgICBsZXQgbWF4ID0gdGhpcy52YWx1ZU1heDtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZUNsYW1wID09IGZhbHNlKSByZXR1cm4gcmVzO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy52YWx1ZUNsYW1wTW9kZSkge1xyXG4gICAgICAgICAgICBjYXNlIENMQU1QX01PREUuTUlOX01BWDpcclxuICAgICAgICAgICAgICAgIGlmIChyZXMgPiBtYXgpIHJlcyA9IG1heDtcclxuICAgICAgICAgICAgICAgIGlmIChyZXMgPCBtaW4pIHJlcyA9IG1pbjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENMQU1QX01PREUuTUlOOlxyXG4gICAgICAgICAgICAgICAgaWYgKHJlcyA8IG1pbikgcmVzID0gbWluO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ0xBTVBfTU9ERS5NQVg6XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzID4gbWF4KSByZXMgPSBtYXg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yqg5pW05pWwICovXHJcbiAgICB2QWRkSW50KGU6IEV2ZW50LCBkYXRhOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnZBZGQoZSwgZGF0YSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWHj+aVtOaVsCAqL1xyXG4gICAgdlN1YkludChlOiBFdmVudCwgZGF0YTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy52U3ViKGUsIGRhdGEsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDkuZjmlbTmlbAgKi9cclxuICAgIHZNdWxJbnQoZTogRXZlbnQsIGRhdGE6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMudk11bChlLCBkYXRhLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog6Zmk5pW05pWwICovXHJcbiAgICB2RGl2SW50KGU6IEV2ZW50LCBkYXRhOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnZEaXYoZSwgZGF0YSwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWKoCAqL1xyXG4gICAgdkFkZChlOiBFdmVudCwgZGF0YTogc3RyaW5nLCBpbnQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGxldCBhID0gcGFyc2VGbG9hdChkYXRhKTtcclxuICAgICAgICBsZXQgcmVzID0gdGhpcy5WTS5nZXRWYWx1ZSh0aGlzLndhdGNoUGF0aCwgMCkgKyBhO1xyXG4gICAgICAgIGlmIChpbnQpIHsgcmVzID0gTWF0aC5yb3VuZChyZXMpIH1cclxuICAgICAgICB0aGlzLlZNLnNldFZhbHVlKHRoaXMud2F0Y2hQYXRoLCB0aGlzLmNsYW1wVmFsdWUocmVzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWHjyAqL1xyXG4gICAgdlN1YihlOiBFdmVudCwgZGF0YTogc3RyaW5nLCBpbnQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGxldCBhID0gcGFyc2VGbG9hdChkYXRhKTtcclxuICAgICAgICBsZXQgcmVzID0gdGhpcy5WTS5nZXRWYWx1ZSh0aGlzLndhdGNoUGF0aCwgMCkgLSBhO1xyXG4gICAgICAgIGlmIChpbnQpIHsgcmVzID0gTWF0aC5yb3VuZChyZXMpIH1cclxuICAgICAgICB0aGlzLlZNLnNldFZhbHVlKHRoaXMud2F0Y2hQYXRoLCB0aGlzLmNsYW1wVmFsdWUocmVzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOS5mCAqL1xyXG4gICAgdk11bChlOiBFdmVudCwgZGF0YTogc3RyaW5nLCBpbnQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGxldCBhID0gcGFyc2VGbG9hdChkYXRhKTtcclxuICAgICAgICBsZXQgcmVzID0gdGhpcy5WTS5nZXRWYWx1ZSh0aGlzLndhdGNoUGF0aCwgMCkgKiBhO1xyXG4gICAgICAgIGlmIChpbnQpIHsgcmVzID0gTWF0aC5yb3VuZChyZXMpIH1cclxuICAgICAgICB0aGlzLlZNLnNldFZhbHVlKHRoaXMud2F0Y2hQYXRoLCB0aGlzLmNsYW1wVmFsdWUocmVzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOmZpCAqL1xyXG4gICAgdkRpdihlOiBFdmVudCwgZGF0YTogc3RyaW5nLCBpbnQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGxldCBhID0gcGFyc2VGbG9hdChkYXRhKTtcclxuICAgICAgICBsZXQgcmVzID0gdGhpcy5WTS5nZXRWYWx1ZSh0aGlzLndhdGNoUGF0aCwgMCkgLyBhO1xyXG4gICAgICAgIGlmIChpbnQpIHsgcmVzID0gTWF0aC5yb3VuZChyZXMpIH1cclxuICAgICAgICB0aGlzLlZNLnNldFZhbHVlKHRoaXMud2F0Y2hQYXRoLCB0aGlzLmNsYW1wVmFsdWUocmVzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWtl+espuS4sui1i+WAvCAqL1xyXG4gICAgdlN0cmluZyhlOiBFdmVudCwgZGF0YTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuVk0uc2V0VmFsdWUodGhpcy53YXRjaFBhdGgsIGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmlbTmlbDotYvlgLwgKi9cclxuICAgIHZOdW1iZXJJbnQoZTogRXZlbnQsIGRhdGE6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMudk51bWJlcihlLCBkYXRhLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pWw5a2X6LWL5YC8ICovXHJcbiAgICB2TnVtYmVyKGU6IEV2ZW50LCBkYXRhOiBzdHJpbmcsIGludDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgbGV0IGEgPSBwYXJzZUZsb2F0KGRhdGEpO1xyXG4gICAgICAgIGlmIChpbnQpIHsgYSA9IE1hdGgucm91bmQoYSkgfVxyXG4gICAgICAgIHRoaXMuVk0uc2V0VmFsdWUodGhpcy53YXRjaFBhdGgsIHRoaXMuY2xhbXBWYWx1ZShhKSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBfZGVjb3JhdG9yIH0gZnJvbSAnY2MnO1xyXG5pbXBvcnQgeyBHYW1lQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbW9kdWxlL2NvbW1vbi9HYW1lQ29tcG9uZW50JztcclxuaW1wb3J0IHsgVk0gfSBmcm9tICcuL1ZpZXdNb2RlbCc7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIGhlbHAsIGV4ZWN1dGlvbk9yZGVyIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqXHJcbiAqIOaPkOS+m1ZN546v5aKD77yM5o6n5Yi25peX5LiL5omA5pyJVk3oioLngrlcclxuICog5LiA6Iis55So5LqOIOmdnuWFqOWxgOeahCBWTee7keWumixWTSDnjq/looPkuI4g57uE5Lu257Sn5a+G55u46L+eXHJcbiAqIO+8iFByZWZhYiDmqKHlvI/nu5HlrprvvIlcclxuICogVk1QYXJlbnQg5b+F6aG75b+F5YW25LuW57uE5Lu25LyY5YWI5omn6KGMXHJcbiAqIHYwLjEg5L+u5aSNYnVnIO+8jOeOsOWcqOWPr+S7peaUr+aMgSBQYXJlbnQg5bWM5aWXIO+8iOS9huaYr+azqOaEj+aAp+iDvemXrumimO+8jOS4jeimgemikee5geW1jOWll++8iVxyXG4gKi9cclxuQGNjY2xhc3NcclxuQGV4ZWN1dGlvbk9yZGVyKC0xKVxyXG5AaGVscCgnaHR0cHM6Ly9naXRlZS5jb20vZGdmbGFzaC9vb3BzLWZyYW1ld29yay93aWtpcy9wYWdlcz9zb3J0X2lkPTEyMDM3NzI5JmRvY19pZD0yODczNTY1JylcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVk1QYXJlbnQgZXh0ZW5kcyBHYW1lQ29tcG9uZW50IHtcclxuICAgIC8qKiDnu5HlrprnmoTmoIfnrb7vvIzlj6/ku6XpgJrov4fov5nkuKp0YWcg6I635Y+WIOW9k+WJjeeahCB2bSDlrp7kvosgKi9cclxuICAgIHByb3RlY3RlZCB0YWc6IHN0cmluZyA9ICdfdGVtcCc7XHJcblxyXG4gICAgLyoqIOmcgOimgee7keWumueahOengeacieaVsOaNriAqL1xyXG4gICAgcHJvdGVjdGVkIGRhdGE6IGFueSA9IHt9O1xyXG5cclxuICAgIC8qKlZNIOeuoeeQhiAqL1xyXG4gICAgcHVibGljIFZNID0gVk07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBb5rOo5oSPXeS4jeiDveebtOaOpeimhuebluatpOaWueazle+8jOWmguaenOmcgOimgeimhuebluOAglxyXG4gICAgICog5Y+q6IO95Zyo6K+l5pa55rOV5YaF6YOo6LCD55So54i257G755qE5a6e546wIFxyXG4gICAgICogICBgYGB0c1xyXG4gICAgICogICAgICAgb25Mb2FkKCl7XHJcbiAgICAgKiAgICAgICAgICAgc3VwZXIub25Mb2FkKCk7XHJcbiAgICAgKiAgICAgICB9XHJcbiAgICAgKiAgIGBgYCBcclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBvbkxvYWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YSA9PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy50YWcgPSAnX3RlbXAnICsgJzwnICsgdGhpcy5ub2RlLnV1aWQucmVwbGFjZSgnLicsICcnKSArICc+JztcclxuICAgICAgICBWTS5hZGQodGhpcy5kYXRhLCB0aGlzLnRhZyk7XHJcbiAgICAgICAgLy8gbG9nKFZNWydfbXZzJ10sdGhpcy50YWcpXHJcbiAgICAgICAgLy/mkJzlr7vmiYDmnInoioLngrnvvJrmib7liLAgd2F0Y2ggcGF0aFxyXG4gICAgICAgIGxldCBjb21wcyA9IHRoaXMuZ2V0Vk1Db21wb25lbnRzKCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5ncm91cCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY29tcCA9IGNvbXBzW2ldO1xyXG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VWTVBhdGgoY29tcCwgdGhpcy50YWcpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNvbnNvbGUuZ3JvdXBFbmQoKVxyXG5cclxuICAgICAgICB0aGlzLm9uQmluZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKuWcqCBvbkxvYWQg5a6M5oiQIOWSjCBzdGFydCgpIOS5i+WJjeiwg+eUqO+8jOS9oOWPr+S7peWcqOi/memHjOi/m+ihjOWIneWni+WMluaVsOaNruetieaTjeS9nCAqL1xyXG4gICAgcHJvdGVjdGVkIG9uQmluZCgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoq5ZyoIG9uRGVzdHJveSgpIOWQjuiwg+eUqCzmraTml7bku43nhLblj6/ku6Xojrflj5bnu5HlrprnmoQgZGF0YSDmlbDmja4qL1xyXG4gICAgcHJvdGVjdGVkIG9uVW5CaW5kKCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlcGxhY2VWTVBhdGgoY29tcDogQ29tcG9uZW50LCB0YWc6IHN0cmluZykge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBsZXQgcGF0aDogc3RyaW5nID0gY29tcFsnd2F0Y2hQYXRoJ107XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChjb21wWyd0ZW1wbGF0ZU1vZGUnXSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgbGV0IHBhdGhBcnI6IHN0cmluZ1tdID0gY29tcFsnd2F0Y2hQYXRoQXJyJ107XHJcbiAgICAgICAgICAgIGlmIChwYXRoQXJyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGhBcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gcGF0aEFycltpXTtcclxuICAgICAgICAgICAgICAgICAgICBwYXRoQXJyW2ldID0gcGF0aC5yZXBsYWNlKCcqJywgdGFnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFZNTGFiZWxcclxuICAgICAgICAgICAgLy8g6YGH5Yiw54m55q6KIHBhdGgg5bCx5LyY5YWI5pu/5o2i6Lev5b6EXHJcbiAgICAgICAgICAgIGlmIChwYXRoLnNwbGl0KCcuJylbMF0gPT09ICcqJykge1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgY29tcFsnd2F0Y2hQYXRoJ10gPSBwYXRoLnJlcGxhY2UoJyonLCB0YWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmnKrkvJjljJbnmoTpgY3ljoboioLngrnvvIzojrflj5ZWTSDnu4Tku7YgKi9cclxuICAgIHByaXZhdGUgZ2V0Vk1Db21wb25lbnRzKCkge1xyXG4gICAgICAgIGxldCBjb21wcyA9IHRoaXMubm9kZS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbignVk1CYXNlJyk7XHJcbiAgICAgICAgbGV0IHBhcmVudHMgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oJ1ZNUGFyZW50JykuZmlsdGVyKHYgPT4gdi51dWlkICE9PSB0aGlzLnV1aWQpOyAgLy8g6L+H5ruk5o6J6Ieq5bexXHJcblxyXG4gICAgICAgIC8v6L+H5ruk5o6J5LiN6IO96LWL5YC855qEcGFyZW50XHJcbiAgICAgICAgbGV0IGZpbHRlcnM6IGFueVtdID0gW107XHJcbiAgICAgICAgcGFyZW50cy5mb3JFYWNoKChub2RlOiBDb21wb25lbnQpID0+IHtcclxuICAgICAgICAgICAgZmlsdGVycyA9IGZpbHRlcnMuY29uY2F0KG5vZGUuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oJ1ZNQmFzZScpKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBjb21wcyA9IGNvbXBzLmZpbHRlcigodikgPT4gZmlsdGVycy5pbmRleE9mKHYpIDwgMCk7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogW+azqOaEj13kuI3og73opobnm5bmraTmlrnms5XvvIzlpoLmnpzpnIDopoHopobnm5bjgIJcclxuICAgICAqIOmcgOimgeWcqOivpeaWueazleWGhemDqOiwg+eUqOeItuexu+eahOWunueOsO+8jOWGjeWumuS5ieiHquW3seeahOaWueazlVxyXG4gICAgICogYGBgdHNcclxuICAgICAqICAgb25EZXN0cm95KCl7XHJcbiAgICAgKiAgICAgICBzdXBlci5vbkRlc3Ryb3koKTtcclxuICAgICAqICAgfVxyXG4gICAgICogYGBgXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBvbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5vblVuQmluZCgpO1xyXG5cclxuICAgICAgICAvLyDop6PpmaTlhajpg6jlvJXnlKhcclxuICAgICAgICBWTS5yZW1vdmUodGhpcy50YWcpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IG51bGw7XHJcblxyXG4gICAgICAgIHN1cGVyLm9uRGVzdHJveSgpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIEBBdXRob3I6IGRnZmxhc2hcclxuICogQERhdGU6IDIwMjItMDgtMTEgMTQ6NDU6NDRcclxuICogQExhc3RFZGl0b3JzOiBkZ2ZsYXNoXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjItMDgtMTEgMTU6NDM6MzRcclxuICovXHJcbmltcG9ydCB7IENDU3RyaW5nLCBfZGVjb3JhdG9yIH0gZnJvbSBcImNjXCI7XHJcbmltcG9ydCB7IFN0cmluZ0Zvcm1hdEZ1bmN0aW9uIH0gZnJvbSBcIi4vU3RyaW5nRm9ybWF0XCI7XHJcbmltcG9ydCB7IFZNQ3VzdG9tIH0gZnJvbSBcIi4vVk1DdXN0b21cIjtcclxuaW1wb3J0IHsgVk1FbnYgfSBmcm9tIFwiLi9WTUVudlwiO1xyXG5cclxuY29uc3QgeyBjY2NsYXNzLCBwcm9wZXJ0eSwgbWVudSwgaGVscCB9ID0gX2RlY29yYXRvcjtcclxuXHJcbkBjY2NsYXNzXHJcbkBtZW51KCdPb3BzRnJhbWV3b3JrL012dm0vVk0tUHJvZ3Jlc3Mg77yI6L+b5bqm5p2h77yJJylcclxuQGhlbHAoJ2h0dHBzOi8vZ2l0ZWUuY29tL2RnZmxhc2gvb29wcy1mcmFtZXdvcmsvd2lraXMvcGFnZXM/c29ydF9pZD0xMjAzNzg0MyZkb2NfaWQ9Mjg3MzU2NScpXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZNUHJvZ3Jlc3MgZXh0ZW5kcyBWTUN1c3RvbSB7XHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgIG92ZXJyaWRlOiB0cnVlXHJcbiAgICB9KVxyXG4gICAgd2F0Y2hQYXRoOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IFtDQ1N0cmluZ10sXHJcbiAgICAgICAgdG9vbHRpcDogJ+esrOS4gOS4quWAvOaYr21pbiDlgLzvvIznrKzkuozkuKrlgLwg5pivIG1heCDlgLzvvIzkvJrorqHnrpflh7rkuKTogIXnmoTmr5TkvosnXHJcbiAgICB9KVxyXG4gICAgcHJvdGVjdGVkIHdhdGNoUGF0aEFycjogc3RyaW5nW10gPSBbJ1ttaW5dJywgJ1ttYXhdJ107XHJcblxyXG4gICAgcHVibGljIHRlbXBsYXRlTW9kZTogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50UHJvcGVydHkgPT09ICdzdHJpbmcnO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9vbHRpcDogJ+Wtl+espuS4suagvOW8j+WMlu+8jOWSjCBWTUxhYmVsIOeahOWtl+auteS4gOagt++8jOmcgOimgeWhq+WFpeWvueW6lOeahOagvOW8j+WMluWtl+espuS4sidcclxuICAgIH0pXHJcbiAgICBzdHJpbmdGb3JtYXQ6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBpZiAodGhpcy53YXRjaFBhdGhBcnIubGVuZ3RoIDwgMiB8fCB0aGlzLndhdGNoUGF0aEFyclswXSA9PSAnW21pbl0nIHx8IHRoaXMud2F0Y2hQYXRoQXJyWzFdID09ICdbbWF4XScpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVk1Qcm9ncmVzcyBtdXN0IGhhdmUgdHdvIHZhbHVlcyEnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIub25Mb2FkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgaWYgKFZNRW52LmVkaXRvcikgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLm9uVmFsdWVJbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25WYWx1ZUluaXQoKSB7XHJcbiAgICAgICAgbGV0IG1heCA9IHRoaXMud2F0Y2hQYXRoQXJyLmxlbmd0aDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1heDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVWYWx1ZUFycltpXSA9IHRoaXMuVk0uZ2V0VmFsdWUodGhpcy53YXRjaFBhdGhBcnJbaV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy50ZW1wbGF0ZVZhbHVlQXJyWzBdIC8gdGhpcy50ZW1wbGF0ZVZhbHVlQXJyWzFdO1xyXG4gICAgICAgIHRoaXMuc2V0Q29tcG9uZW50VmFsdWUodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbXBvbmVudFZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5zdHJpbmdGb3JtYXQgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIGxldCByZXMgPSBTdHJpbmdGb3JtYXRGdW5jdGlvbi5kZWFsKHZhbHVlLCB0aGlzLnN0cmluZ0Zvcm1hdCk7XHJcbiAgICAgICAgICAgIHN1cGVyLnNldENvbXBvbmVudFZhbHVlKHJlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdXBlci5zZXRDb21wb25lbnRWYWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVmFsdWVDb250cm9sbGVyKG46IGFueSwgbzogYW55KSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gTWF0aC5yb3VuZChuICogdGhpcy50ZW1wbGF0ZVZhbHVlQXJyWzFdKTtcclxuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSkgdmFsdWUgPSAwO1xyXG4gICAgICAgIHRoaXMuVk0uc2V0VmFsdWUodGhpcy53YXRjaFBhdGhBcnJbMF0sIHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5Yid5aeL5YyW5pS55Y+Y5pWw5o2uICovXHJcbiAgICBvblZhbHVlQ2hhbmdlZChuOiBhbnksIG86IGFueSwgcGF0aEFycjogc3RyaW5nW10pIHtcclxuICAgICAgICBpZiAodGhpcy50ZW1wbGF0ZU1vZGUgPT09IGZhbHNlKSByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCBwYXRoID0gcGF0aEFyci5qb2luKCcuJyk7XHJcbiAgICAgICAgLy8g5a+75om+57yT5a2Y5L2N572uXHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy53YXRjaFBhdGhBcnIuZmluZEluZGV4KHYgPT4gdiA9PT0gcGF0aCk7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgLy8g5aaC5p6c5piv5omA5bGe55qE6Lev5b6E77yM5bCx5Y+v5Lul5pu/5o2i5paH5pys5LqGXHJcbiAgICAgICAgICAgIHRoaXMudGVtcGxhdGVWYWx1ZUFycltpbmRleF0gPSBuOyAvL+e8k+WtmOWAvFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy50ZW1wbGF0ZVZhbHVlQXJyWzBdIC8gdGhpcy50ZW1wbGF0ZVZhbHVlQXJyWzFdO1xyXG4gICAgICAgIGlmICh2YWx1ZSA+IDEpIHZhbHVlID0gMTtcclxuICAgICAgICBpZiAodmFsdWUgPCAwIHx8IE51bWJlci5pc05hTih2YWx1ZSkpIHZhbHVlID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRDb21wb25lbnRWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQnV0dG9uLCBDQ0ludGVnZXIsIENvbG9yLCBFbnVtLCBOb2RlLCBTcHJpdGUsIFVJT3BhY2l0eSwgVUlSZW5kZXJlciwgX2RlY29yYXRvciwgY29sb3IgfSBmcm9tICdjYyc7XHJcbmltcG9ydCB7IFZNQmFzZSB9IGZyb20gJy4vVk1CYXNlJztcclxuaW1wb3J0IHsgVk0gfSBmcm9tICcuL1ZpZXdNb2RlbCc7XHJcblxyXG5jb25zdCB7IGNjY2xhc3MsIHByb3BlcnR5LCBtZW51LCBoZWxwIH0gPSBfZGVjb3JhdG9yO1xyXG5cclxuLyoqIOavlOi+g+adoeS7tiAqL1xyXG5lbnVtIENPTkRJVElPTiB7XHJcbiAgICBcIj09XCIsICAgICAgICAvLyDmraPluLjorqHnrpfvvIzmr5TovoMg562J5LqOXHJcbiAgICBcIiE9XCIsICAgICAgICAvLyDmraPluLjorqHnrpfvvIzmr5TovoMg5LiN562J5LqOXHJcbiAgICBcIj5cIiwgICAgICAgICAvLyDmraPluLjorqHnrpfvvIzmr5TovoM+XHJcbiAgICBcIj49XCIsICAgICAgICAvLyDmraPluLjorqHnrpfvvIzmr5TovoM+PVxyXG4gICAgXCI8XCIsICAgICAgICAgLy8g5q2j5bi46K6h566X77yM5q+U6L6DPFxyXG4gICAgXCI8PVwiLCAgICAgICAgLy8g5q2j5bi46K6h566X77yM5q+U6L6DPj1cclxuICAgIFwicmFuZ2VcIiAgICAgIC8vIOiuoeeul+WcqOiMg+WbtOWGhVxyXG59XHJcblxyXG5lbnVtIEFDVElPTiB7XHJcbiAgICBOT0RFX0FDVElWRSwgICAgICAgICAgICAvLyDmu6HotrPmnaHku7bnmoToioLngrnmv4DmtLvvvIzkuI3mu6HotrPnmoTkuI3mv4DmtLvvvIjlj6rlr7nlrZDoioLngrnnmoTmv4DmtLvmnInmlYjmnpzvvIzlvZPliY3oioLngrlhY3RpdmUgPSBmYWxzZeaXtu+8jOe7hOS7tuWwseWkseWOu+aViOaenOS6hu+8jOWmguaenOiuvue9ruW9k+WJjeiKgueCueWPr+eUqE5PREVfVklTSUJMReS7o+abv++8iVxyXG4gICAgTk9ERV9WSVNJQkxFLCAgICAgICAgICAgLy8g5ruh6Laz5p2h5Lu255qE6IqC54K55pi+56S677yM5LiN5ruh6Laz55qE5LiN5pi+56S6XHJcbiAgICBOT0RFX09QQUNJVFksICAgICAgICAgICAvLyDmu6HotrPmnaHku7bnmoToioLngrnmlLnlj5jkuI3pgI/mmI7luqbvvIzkuI3mu6HotrPnmoTov5jljp8yNTVcclxuICAgIE5PREVfQ09MT1IsICAgICAgICAgICAgIC8vIOa7oei2s+adoeS7tueahOiKgueCueaUueWPmOminOiJsu+8jOS4jea7oei2s+eahOaBouWkjeeZveiJslxyXG4gICAgQ09NUE9ORU5UX0NVU1RPTSwgICAgICAgLy8g6Ieq5a6a5LmJ5o6n5Yi257uE5Lu25qih5byPXHJcbiAgICBTUFJJVEVfR1JBWVNDQUxFLCAgICAgICAvLyDmu6HotrPmnaHku7bnmoToioLngrljYy5TcHJpdGXnu4Tku7bvvIznurnnkIblj5jpu5Hnmb1cclxuICAgIEJVVFRPTl9JTlRFUkFDVEFCTEUsICAgIC8vIOa7oei2s+adoeS7tueahOiKgueCuWNjLkJVVFRPTue7hOS7tixcclxufVxyXG5cclxuZW51bSBDSElMRF9NT0RFX1RZUEUge1xyXG4gICAgTk9ERV9JTkRFWCxcclxuICAgIE5PREVfTkFNRVxyXG59XHJcblxyXG4vKipcclxuICogW1ZNLVN0YXRlXVxyXG4gKiDnm5HlkKzmlbDlgLznirbmgIEs5qC55o2u5pWw5YC85p2h5Lu26K6+572u6IqC54K55piv5ZCm5r+A5rS7XHJcbiAqL1xyXG5AY2NjbGFzc1xyXG5AbWVudSgnT29wc0ZyYW1ld29yay9NdnZtL1ZNLVN0YXRlIO+8iOeKtuaAgeaOp+WItu+8iScpXHJcbkBoZWxwKCdodHRwczovL2dpdGVlLmNvbS9kZ2ZsYXNoL29vcHMtZnJhbWV3b3JrL3dpa2lzL3BhZ2VzP3NvcnRfaWQ9MTIwMzc4NDYmZG9jX2lkPTI4NzM1NjUnKVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWTVN0YXRlIGV4dGVuZHMgVk1CYXNlIHtcclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgd2F0Y2hQYXRoOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdG9vbHRpcDogJ+mBjeWOhuWtkOiKgueCuSzmoLnmja7lrZDoioLngrnnmoTlkI3lrZfmiJblkI3lrZfovazmjaLkuLrlgLzvvIzliKTmlq3lgLzmu6HotrPmnaHku7Yg5p2l5r+A5rS7J1xyXG4gICAgfSlcclxuICAgIGZvcmVhY2hDaGlsZE1vZGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEVudW0oQ09ORElUSU9OKSxcclxuICAgIH0pXHJcbiAgICBjb25kaXRpb246IENPTkRJVElPTiA9IENPTkRJVElPTltcIj09XCJdO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogRW51bShDSElMRF9NT0RFX1RZUEUpLFxyXG4gICAgICAgIHRvb2x0aXA6ICfpgY3ljoblrZDoioLngrks5qC55o2u5a2Q6IqC54K555qE5ZCN5a2X6L2s5o2i5Li65YC877yM5Yik5pat5YC85ruh6Laz5p2h5Lu2IOadpea/gOa0uycsXHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcmVhY2hDaGlsZE1vZGUgPT09IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIGZvcmVhY2hDaGlsZFR5cGU6IENISUxEX01PREVfVFlQRSA9IENISUxEX01PREVfVFlQRS5OT0RFX0lOREVYO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZGlzcGxheU5hbWU6ICdWYWx1ZTogYScsXHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcmVhY2hDaGlsZE1vZGUgPT09IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0pXHJcbiAgICB2YWx1ZUE6IG51bWJlciA9IDA7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICBkaXNwbGF5TmFtZTogJ1ZhbHVlOiBiJyxcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9yZWFjaENoaWxkTW9kZSA9PT0gZmFsc2UgJiYgdGhpcy5jb25kaXRpb24gPT09IENPTkRJVElPTi5yYW5nZTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgdmFsdWVCOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogRW51bShBQ1RJT04pLFxyXG4gICAgICAgIHRvb2x0aXA6ICfkuIDml6bmu6HotrPmnaHku7blsLHlr7noioLngrnmiafooYzmk43kvZwnXHJcbiAgICB9KVxyXG4gICAgdmFsdWVBY3Rpb246IEFDVElPTiA9IEFDVElPTi5OT0RFX0FDVElWRTtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUFjdGlvbiA9PT0gQUNUSU9OLk5PREVfT1BBQ0lUWTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJhbmdlOiBbMCwgMjU1XSxcclxuICAgICAgICB0eXBlOiBDQ0ludGVnZXIsXHJcbiAgICAgICAgZGlzcGxheU5hbWU6ICdBY3Rpb24gT3BhY2l0eSdcclxuICAgIH0pXHJcbiAgICB2YWx1ZUFjdGlvbk9wYWNpdHk6IG51bWJlciA9IDA7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVBY3Rpb24gPT09IEFDVElPTi5OT0RFX0NPTE9SXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNwbGF5TmFtZTogJ0FjdGlvbiBDb2xvcidcclxuICAgIH0pXHJcbiAgICB2YWx1ZUFjdGlvbkNvbG9yOiBDb2xvciA9IGNvbG9yKDE1NSwgMTU1LCAxNTUpO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlQWN0aW9uID09PSBBQ1RJT04uQ09NUE9ORU5UX0NVU1RPTVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlzcGxheU5hbWU6ICdDb21wb25lbnQgTmFtZSdcclxuICAgIH0pXHJcbiAgICB2YWx1ZUNvbXBvbmVudE5hbWU6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlQWN0aW9uID09PSBBQ1RJT04uQ09NUE9ORU5UX0NVU1RPTVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlzcGxheU5hbWU6ICdDb21wb25lbnQgUHJvcGVydHknXHJcbiAgICB9KVxyXG4gICAgdmFsdWVDb21wb25lbnRQcm9wZXJ0eTogc3RyaW5nID0gJyc7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB2aXNpYmxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVBY3Rpb24gPT09IEFDVElPTi5DT01QT05FTlRfQ1VTVE9NXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNwbGF5TmFtZTogJ0RlZmF1bHQgVmFsdWUnXHJcbiAgICB9KVxyXG4gICAgdmFsdWVDb21wb25lbnREZWZhdWx0VmFsdWU6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlQWN0aW9uID09PSBBQ1RJT04uQ09NUE9ORU5UX0NVU1RPTTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRpc3BsYXlOYW1lOiAnQWN0aW9uIFZhbHVlJ1xyXG4gICAgfSlcclxuICAgIHZhbHVlQ29tcG9uZW50QWN0aW9uVmFsdWU6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogW05vZGVdLFxyXG4gICAgICAgIHRvb2x0aXA6ICfpnIDopoHmiafooYzmnaHku7bnmoToioLngrnvvIzlpoLmnpzkuI3loavlhpnliJnpu5jorqTkvJrmiafooYzmnKzoioLngrnku6Xlj4rmnKzoioLngrnnmoTmiYDmnInlrZDoioLngrkg55qE54q25oCBJ1xyXG4gICAgfSlcclxuICAgIHdhdGNoTm9kZXM6IE5vZGVbXSA9IFtdO1xyXG5cclxuICAgIG9uTG9hZCgpIHtcclxuICAgICAgICBzdXBlci5vbkxvYWQoKTtcclxuICAgICAgICAvLyDlpoLmnpzmlbDnu4Tph4zmsqHmnInnm5HlkKzlgLzvvIzpgqPkuYjpu5jorqTmiormiYDmnInlrZDoioLngrnnu5nnm5HlkKzkuoZcclxuICAgICAgICBpZiAodGhpcy53YXRjaE5vZGVzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlQWN0aW9uICE9PSBBQ1RJT04uTk9ERV9BQ1RJVkUgJiYgdGhpcy5mb3JlYWNoQ2hpbGRNb2RlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53YXRjaE5vZGVzLnB1c2godGhpcy5ub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLndhdGNoTm9kZXMgPSB0aGlzLndhdGNoTm9kZXMuY29uY2F0KHRoaXMubm9kZS5jaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vblZhbHVlSW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDlvZPlgLzliJ3lp4vljJbml7ZcclxuICAgIHByb3RlY3RlZCBvblZhbHVlSW5pdCgpIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSBWTS5nZXRWYWx1ZSh0aGlzLndhdGNoUGF0aCk7XHJcbiAgICAgICAgdGhpcy5jaGVja05vZGVGcm9tVmFsdWUodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOW9k+WAvOiiq+aUueWPmOaXtlxyXG4gICAgcHJvdGVjdGVkIG9uVmFsdWVDaGFuZ2VkKG5ld1ZhcjogYW55LCBvbGRWYXI6IGFueSwgcGF0aEFycjogYW55W10pIHtcclxuICAgICAgICB0aGlzLmNoZWNrTm9kZUZyb21WYWx1ZShuZXdWYXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOajgOafpeiKgueCueWAvOabtOaWsFxyXG4gICAgcHJpdmF0ZSBjaGVja05vZGVGcm9tVmFsdWUodmFsdWU6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLmZvcmVhY2hDaGlsZE1vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy53YXRjaE5vZGVzLmZvckVhY2goKG5vZGUsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdiA9ICh0aGlzLmZvcmVhY2hDaGlsZFR5cGUgPT09IENISUxEX01PREVfVFlQRS5OT0RFX0lOREVYKSA/IGluZGV4IDogbm9kZS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrID0gdGhpcy5jb25kaXRpb25DaGVjayh2YWx1ZSwgdik7XHJcbiAgICAgICAgICAgICAgICAvLyBsb2coJ+mBjeWOhuaooeW8jycsIHZhbHVlLCBub2RlLm5hbWUsIGNoZWNrKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Tm9kZVN0YXRlKG5vZGUsIGNoZWNrKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBjaGVjayA9IHRoaXMuY29uZGl0aW9uQ2hlY2sodmFsdWUsIHRoaXMudmFsdWVBLCB0aGlzLnZhbHVlQik7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Tm9kZXNTdGF0ZXMoY2hlY2spO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDmm7TmlrAg5aSa5Liq6IqC54K5IOeahCDnirbmgIFcclxuICAgIHByaXZhdGUgc2V0Tm9kZXNTdGF0ZXMoY2hlY2tTdGF0ZT86IGJvb2xlYW4pIHtcclxuICAgICAgICBsZXQgbm9kZXMgPSB0aGlzLndhdGNoTm9kZXM7XHJcbiAgICAgICAgbGV0IGNoZWNrID0gY2hlY2tTdGF0ZTtcclxuICAgICAgICBub2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Tm9kZVN0YXRlKG5vZGUsIGNoZWNrKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmm7TmlrDljZXkuKroioLngrnnmoTnirbmgIEgKi9cclxuICAgIHByaXZhdGUgc2V0Tm9kZVN0YXRlKG5vZGU6IE5vZGUsIGNoZWNrU3RhdGU/OiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IG4gPSB0aGlzLnZhbHVlQWN0aW9uO1xyXG4gICAgICAgIGxldCBjaGVjayA9IGNoZWNrU3RhdGU7XHJcbiAgICAgICAgc3dpdGNoIChuKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQUNUSU9OLk5PREVfQUNUSVZFOlxyXG4gICAgICAgICAgICAgICAgbm9kZS5hY3RpdmUgPSBjaGVjayA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEFDVElPTi5OT0RFX1ZJU0lCTEU6IHtcclxuICAgICAgICAgICAgICAgIGxldCBvcGFjaXR5ID0gbm9kZS5nZXRDb21wb25lbnQoVUlPcGFjaXR5KTtcclxuICAgICAgICAgICAgICAgIGlmIChvcGFjaXR5ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eSA9IG5vZGUuYWRkQ29tcG9uZW50KFVJT3BhY2l0eSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wYWNpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5Lm9wYWNpdHkgPSBjaGVjayA/IDI1NSA6IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIEFDVElPTi5OT0RFX09QQUNJVFk6IHtcclxuICAgICAgICAgICAgICAgIGxldCBvcGFjaXR5ID0gbm9kZS5nZXRDb21wb25lbnQoVUlPcGFjaXR5KTtcclxuICAgICAgICAgICAgICAgIGlmIChvcGFjaXR5ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eSA9IG5vZGUuYWRkQ29tcG9uZW50KFVJT3BhY2l0eSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG9wYWNpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5Lm9wYWNpdHkgPSBjaGVjayA/IHRoaXMudmFsdWVBY3Rpb25PcGFjaXR5IDogMjU1O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBBQ1RJT04uTk9ERV9DT0xPUjoge1xyXG4gICAgICAgICAgICAgICAgbGV0IHVpciA9IG5vZGUuZ2V0Q29tcG9uZW50KFVJUmVuZGVyZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVpcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHVpci5jb2xvciA9IGNoZWNrID8gdGhpcy52YWx1ZUFjdGlvbkNvbG9yIDogY29sb3IoMjU1LCAyNTUsIDI1NSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIEFDVElPTi5DT01QT05FTlRfQ1VTVE9NOlxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbXA6IGFueSA9IG5vZGUuZ2V0Q29tcG9uZW50KHRoaXMudmFsdWVDb21wb25lbnROYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb21wID09IG51bGwpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlQ29tcG9uZW50UHJvcGVydHkgaW4gY29tcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBbdGhpcy52YWx1ZUNvbXBvbmVudFByb3BlcnR5XSA9IGNoZWNrID8gdGhpcy52YWx1ZUNvbXBvbmVudEFjdGlvblZhbHVlIDogdGhpcy52YWx1ZUNvbXBvbmVudERlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEFDVElPTi5TUFJJVEVfR1JBWVNDQUxFOiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3ByaXRlID0gbm9kZS5nZXRDb21wb25lbnQoU3ByaXRlKTtcclxuICAgICAgICAgICAgICAgIGlmIChzcHJpdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzcHJpdGUuZ3JheXNjYWxlID0gY2hlY2shO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBBQ1RJT04uQlVUVE9OX0lOVEVSQUNUQUJMRToge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNwcml0ZSA9IG5vZGUuZ2V0Q29tcG9uZW50KEJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3ByaXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlLmludGVyYWN0YWJsZSA9IGNoZWNrITtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOadoeS7tuajgOafpSAqL1xyXG4gICAgcHJpdmF0ZSBjb25kaXRpb25DaGVjayh2OiBhbnksIGE6IGFueSwgYj86IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBjb2QgPSBDT05ESVRJT047XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIGNvZFtcIj09XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKHYgPT0gYSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjb2RbXCIhPVwiXTpcclxuICAgICAgICAgICAgICAgIGlmICh2ICE9IGEpIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgY29kW1wiPFwiXTpcclxuICAgICAgICAgICAgICAgIGlmICh2IDwgYSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjb2RbXCI+XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKHYgPiBhKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNvZFtcIj49XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKHYgPj0gYSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjb2RbXCI8XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKHYgPCBhKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGNvZFtcIjw9XCJdOlxyXG4gICAgICAgICAgICAgICAgaWYgKHYgPD0gYSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBjb2RbXCJyYW5nZVwiXTpcclxuICAgICAgICAgICAgICAgIGlmICh2ID49IGEgJiYgdiA8PSBiKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLypcclxuICogQEF1dGhvcjogZGdmbGFzaFxyXG4gKiBARGF0ZTogMjAyMS0wNy0wMyAxNjoxMzoxN1xyXG4gKiBATGFzdEVkaXRvcnM6IGRnZmxhc2hcclxuICogQExhc3RFZGl0VGltZTogMjAyMi0wOS0wOSAxNzo0MjoxOVxyXG4gKi9cclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uLy4uL2NvcmUvY29tbW9uL2xvZy9Mb2dnZXJcIjtcclxuaW1wb3J0IHsgSVNvY2tldCwgTWVzc2FnZUZ1bmMsIE5ldERhdGEgfSBmcm9tIFwiLi9OZXRJbnRlcmZhY2VcIjtcclxuXHJcbnR5cGUgQ29ubmVjdGVkID0gKGV2ZW50OiBhbnkpID0+IHZvaWQ7XHJcblxyXG4vKipcclxuICogV2ViU29ja2V0IOWwgeijhVxyXG4gKiAxLiDov57mjqUv5pat5byA55u45YWz5o6l5Y+jXHJcbiAqIDIuIOe9kee7nOW8guW4uOWbnuiwg1xyXG4gKiAzLiDmlbDmja7lj5HpgIHkuI7mjqXmlLZcclxuICovXHJcbmV4cG9ydCBjbGFzcyBXZWJTb2NrIGltcGxlbWVudHMgSVNvY2tldCB7XHJcbiAgICBwcml2YXRlIF93czogV2ViU29ja2V0IHwgbnVsbCA9IG51bGw7ICAgICAgICAgICAgICAvLyB3ZWJzb2NrZXTlr7nosaFcclxuXHJcbiAgICAvKiog572R57uc6L+e5o6l5oiQ5Yqf5LqL5Lu2ICovXHJcbiAgICBvbkNvbm5lY3RlZDogKCh0aGlzOiBXZWJTb2NrZXQsIGV2OiBFdmVudCkgPT4gYW55KSB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIOaOpeWPl+WIsOe9kee7nOaVsOaNruS6i+S7tiAqL1xyXG4gICAgb25NZXNzYWdlOiBNZXNzYWdlRnVuYyB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIOe9kee7nOmUmeivr+S6i+S7tiAqL1xyXG4gICAgb25FcnJvcjogKCh0aGlzOiBXZWJTb2NrZXQsIGV2OiBFdmVudCkgPT4gYW55KSB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIOe9kee7nOaWreW8gOS6i+S7tiAqL1xyXG4gICAgb25DbG9zZWQ6ICgodGhpczogV2ViU29ja2V0LCBldjogQ2xvc2VFdmVudCkgPT4gYW55KSB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIC8qKiDor7fmsYLov57mjqUgKi9cclxuICAgIGNvbm5lY3Qob3B0aW9uczogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3dzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl93cy5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuQ09OTkVDVElORykge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLmxvZ05ldChcIndlYnNvY2tldCBjb25uZWN0aW5nLCB3YWl0IGZvciBhIG1vbWVudC4uLlwiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdXJsID0gbnVsbDtcclxuICAgICAgICBpZiAob3B0aW9ucy51cmwpIHtcclxuICAgICAgICAgICAgdXJsID0gb3B0aW9ucy51cmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgaXAgPSBvcHRpb25zLmlwO1xyXG4gICAgICAgICAgICBsZXQgcG9ydCA9IG9wdGlvbnMucG9ydDtcclxuICAgICAgICAgICAgbGV0IHByb3RvY29sID0gb3B0aW9ucy5wcm90b2NvbDtcclxuICAgICAgICAgICAgdXJsID0gYCR7cHJvdG9jb2x9Oi8vJHtpcH06JHtwb3J0fWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl93cyA9IG5ldyBXZWJTb2NrZXQodXJsKTtcclxuICAgICAgICB0aGlzLl93cy5iaW5hcnlUeXBlID0gb3B0aW9ucy5iaW5hcnlUeXBlID8gb3B0aW9ucy5iaW5hcnlUeXBlIDogXCJhcnJheWJ1ZmZlclwiO1xyXG4gICAgICAgIHRoaXMuX3dzLm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgb25NZXNzYWdlOiBNZXNzYWdlRnVuYyA9IHRoaXMub25NZXNzYWdlITtcclxuICAgICAgICAgICAgb25NZXNzYWdlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5fd3Mub25vcGVuID0gdGhpcy5vbkNvbm5lY3RlZDtcclxuICAgICAgICB0aGlzLl93cy5vbmVycm9yID0gdGhpcy5vbkVycm9yO1xyXG4gICAgICAgIHRoaXMuX3dzLm9uY2xvc2UgPSB0aGlzLm9uQ2xvc2VkO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+R6YCB5pWw5o2uIFxyXG4gICAgICogQHBhcmFtIGJ1ZmZlciDnvZHnu5zmlbDmja5cclxuICAgICAqL1xyXG4gICAgc2VuZChidWZmZXI6IE5ldERhdGEpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh0aGlzLl93cyAmJiB0aGlzLl93cy5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5PUEVOKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dzLnNlbmQoYnVmZmVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe9kee7nOaWreW8gFxyXG4gICAgICogQHBhcmFtIGNvZGUgICAgICDlhbPpl63noIFcclxuICAgICAqIEBwYXJhbSByZWFzb24gICAg5YWz6Zet5Y6f5ZugXHJcbiAgICAgKi9cclxuICAgIGNsb3NlKGNvZGU/OiBudW1iZXIsIHJlYXNvbj86IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0aGlzLl93cykge1xyXG4gICAgICAgICAgICB0aGlzLl93cy5jbG9zZShjb2RlLCByZWFzb24pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==